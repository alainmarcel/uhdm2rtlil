/*
 Do not modify, auto-generated by script

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   VpiListener.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */
#include <uhdm/VpiListener.h>
#include <uhdm/uhdm.h>

namespace UHDM {
void VpiListener::listenAttribute_(vpiHandle handle) {
}

void VpiListener::listenVirtual_interface_var_(vpiHandle handle) {
}

void VpiListener::listenLet_decl_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiSeqFormalDecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenConcurrent_assertions_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiClockingEvent, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiProperty, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenProcess_stmt_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenAlways_(vpiHandle handle) {
  listenProcess_stmt_(handle);
}

void VpiListener::listenFinal_stmt_(vpiHandle handle) {
  listenProcess_stmt_(handle);
}

void VpiListener::listenInitial_(vpiHandle handle) {
  listenProcess_stmt_(handle);
}

void VpiListener::listenAtomic_stmt_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenDelay_control_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiDelay, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDelay_term_(vpiHandle handle) {
}

void VpiListener::listenEvent_control_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenRepeat_control_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
}

void VpiListener::listenScope_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiPropertyDecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiSequenceDecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConcurrentAssertions, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiNamedEvent, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiNamedEventArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiVariables, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiVirtualInterfaceVar, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiReg, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRegArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiMemory, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiParameter, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiParamAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInternalScope, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiTypedef, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiImportTypespec, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiLetDecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenBegin_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_iterate(vpiStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenNamed_begin_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_iterate(vpiStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenNamed_fork_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_iterate(vpiStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenFork_stmt_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_iterate(vpiStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenFor_stmt_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_iterate(vpiForInitStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiForIncStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiForInitStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiForIncStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenIf_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenEvent_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiNamedEvent, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenThread_obj_(vpiHandle handle) {
}

void VpiListener::listenForever_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenWaits_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenWait_stmt_(vpiHandle handle) {
  listenWaits_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenWait_fork_(vpiHandle handle) {
  listenWaits_(handle);
}

void VpiListener::listenOrdered_wait_(vpiHandle handle) {
  listenWaits_(handle);
  if (vpiHandle itr = vpi_iterate(vpiCondition, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElseStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDisables_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
}

void VpiListener::listenDisable_(vpiHandle handle) {
  listenDisables_(handle);
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDisable_fork_(vpiHandle handle) {
  listenDisables_(handle);
}

void VpiListener::listenContinue_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
}

void VpiListener::listenBreak_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
}

void VpiListener::listenReturn_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenWhile_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenRepeat_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDo_while_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenIf_else_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElseStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenCase_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiCaseItem, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenForce_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiRhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenAssign_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiRhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDeassign_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenRelease_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenNull_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
}

void VpiListener::listenExpect_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElseStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPropertySpec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenForeach_stmt_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_handle(vpiVariables, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiLoopVars, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_scope_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiNet, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiArrayNet, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiProcess, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiContAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiModule, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiModuleArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPrimitive, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPrimitiveArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiDefParam, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiGenScopeArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiProgram, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiProgramArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAssertion, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInterface, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInterfaceArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAliasStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiClockingBlock, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiTaskFunc, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiSysTaskCall, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_var_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiGenScopeArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_scope_array_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiGenVar, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiGenScope, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenAssert_stmt_(vpiHandle handle) {
  listenConcurrent_assertions_(handle);
  if (vpiHandle itr = vpi_handle(vpiElseStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenCover_(vpiHandle handle) {
  listenConcurrent_assertions_(handle);
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenAssume_(vpiHandle handle) {
  listenConcurrent_assertions_(handle);
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenRestrict_(vpiHandle handle) {
  listenConcurrent_assertions_(handle);
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenImmediate_assert_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElseStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenImmediate_assume_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElseStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenImmediate_cover_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenExpr_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenCase_item_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenAssignment_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiRhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiDelayControl, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiEventControl, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRepeatControl, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenAny_pattern_(vpiHandle handle) {
}

void VpiListener::listenTagged_pattern_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiPattern, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenStruct_pattern_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiPattern, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenUnsupported_expr_(vpiHandle handle) {
  listenExpr_(handle);
}

void VpiListener::listenUnsupported_stmt_(vpiHandle handle) {
  listenAtomic_stmt_(handle);
}

void VpiListener::listenInclude_file_info_(vpiHandle handle) {
}

void VpiListener::listenSequence_inst_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiSequenceDecl, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiArgument, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenSeq_formal_decl_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenSequence_decl_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiVariables, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiSeqFormalDecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenProp_formal_decl_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenProperty_inst_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiDisableCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiArgument, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPropertyDecl, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiClockingBlock, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenProperty_spec_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiDisableCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiClockingEvent, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPropertyExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenProperty_decl_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPropFormalDecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiVariables, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPropertySpec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenClocked_property_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiClockingEvent, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPropertyExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenCase_property_item_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPropertyExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenCase_property_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiCasePropertyItem, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenMulticlock_sequence_expr_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiClockedSeq, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenClocked_seq_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiClockingEvent, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiSequenceExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenSimple_expr_(vpiHandle handle) {
  listenExpr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiUse, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenConstant_(vpiHandle handle) {
  listenExpr_(handle);
}

void VpiListener::listenLet_expr_(vpiHandle handle) {
  listenExpr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiArgument, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLetDecl, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenOperation_(vpiHandle handle) {
  listenExpr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiOperand, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenRef_obj_(vpiHandle handle) {
  listenSimple_expr_(handle);
  if (vpiHandle itr = vpi_handle(vpiActual, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenRef_module_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiActual, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPort, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenRef_typespec_(vpiHandle handle) {
  listenSimple_expr_(handle);
  if (vpiHandle itr = vpi_handle(vpiActual, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenPart_select_(vpiHandle handle) {
  listenRef_obj_(handle);
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenIndexed_part_select_(vpiHandle handle) {
  listenRef_obj_(handle);
  if (vpiHandle itr = vpi_handle(vpiBaseExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiWidthExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenVar_select_(vpiHandle handle) {
  listenRef_obj_(handle);
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiIndex, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenBit_select_(vpiHandle handle) {
  listenRef_obj_(handle);
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenVariables_(vpiHandle handle) {
  listenSimple_expr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiPortInst, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiDriver, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiLoad, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPrimTerm, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiContAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPathTerm, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTchkTerm, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiScope, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiIndex, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenHier_path_(vpiHandle handle) {
  listenSimple_expr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiActual, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenRef_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_handle(vpiActual, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTaskFunc, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenShort_real_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenReal_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenByte_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenShort_int_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenInt_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenLong_int_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenInteger_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenTime_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenArray_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_iterate(vpiVarSelect, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiReg, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenArray_expr_(vpiHandle handle) {
  listenExpr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenReg_array_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiMemoryWord, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenReg_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenPacked_array_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiBit, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiElement, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenBit_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiBit, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenLogic_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiBit, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenStruct_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_iterate(vpiBit, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiMember, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenUnion_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_iterate(vpiBit, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiMember, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenEnum_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenString_var_(vpiHandle handle) {
  listenVariables_(handle);
}

void VpiListener::listenChandle_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_handle(vpiActual, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenVar_bit_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiIndex, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenTask_func_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiReturn, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiIODecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenTask_(vpiHandle handle) {
  listenTask_func_(handle);
}

void VpiListener::listenFunction_(vpiHandle handle) {
  listenTask_func_(handle);
}

void VpiListener::listenModport_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiIODecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenInterface_tf_decl_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiTask, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiFunction, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenCont_assign_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiDelay, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiBit, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenCont_assign_bit_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiDelay, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenPorts_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiHighConn, handle)) {
    ignoreLastInstance(true);
    listenAny(itr);
    ignoreLastInstance(false);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLowConn, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTypedef, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenPort_(vpiHandle handle) {
  listenPorts_(handle);
  if (vpiHandle itr = vpi_iterate(vpiBit, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenPort_bit_(vpiHandle handle) {
  listenPorts_(handle);
}

void VpiListener::listenChecker_port_(vpiHandle handle) {
  listenPorts_(handle);
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPropertyDecl, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiSequenceDecl, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenChecker_inst_port_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiPropertyInst, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiSequenceInst, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenPrimitive_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiDelay, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndex, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPrimTerm, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenGate_(vpiHandle handle) {
  listenPrimitive_(handle);
}

void VpiListener::listenSwitch_tran_(vpiHandle handle) {
  listenPrimitive_(handle);
}

void VpiListener::listenUdp_(vpiHandle handle) {
  listenPrimitive_(handle);
  if (vpiHandle itr = vpi_handle(vpiUdpDefn, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenMod_path_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenTchk_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiDelay, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTchkRefTerm, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTchkDataTerm, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTchkNotifier, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenRange_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenUdp_defn_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiIODecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiTableEntry, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiInitial, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenTable_entry_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenIo_decl_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTypedef, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenAlias_stmt_(vpiHandle handle) {
}

void VpiListener::listenClocking_block_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_handle(vpiInputSkew, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiOutputSkew, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiClockingEvent, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiClockingIODecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiPrefix, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiActual, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenClocking_io_decl_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiInputSkew, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiOutputSkew, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenParam_assign_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiRhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenInstance_array_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInstance, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiModule, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElemTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPort, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenInterface_array_(vpiHandle handle) {
  listenInstance_array_(handle);
  if (vpiHandle itr = vpi_iterate(vpiParamAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenProgram_array_(vpiHandle handle) {
  listenInstance_array_(handle);
}

void VpiListener::listenModule_array_(vpiHandle handle) {
  listenInstance_array_(handle);
  if (vpiHandle itr = vpi_iterate(vpiParamAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenPrimitive_array_(vpiHandle handle) {
  listenInstance_array_(handle);
  if (vpiHandle itr = vpi_handle(vpiDelay, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPrimitive, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenGate_array_(vpiHandle handle) {
  listenPrimitive_array_(handle);
}

void VpiListener::listenSwitch_array_(vpiHandle handle) {
  listenPrimitive_array_(handle);
}

void VpiListener::listenUdp_array_(vpiHandle handle) {
  listenPrimitive_array_(handle);
}

void VpiListener::listenTypespec_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiTypedefAlias, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenPrim_term_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenPath_term_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenTchk_term_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenNets_(vpiHandle handle) {
  listenSimple_expr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiPortInst, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiDriver, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiLoad, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiLocalDriver, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiLocalLoad, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPrimTerm, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiContAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPathTerm, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiTchkTerm, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiSimNet, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenNet_bit_(vpiHandle handle) {
  listenNets_(handle);
  if (vpiHandle itr = vpi_iterate(vpiIndex, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenNet_(vpiHandle handle) {
  listenNets_(handle);
  if (vpiHandle itr = vpi_iterate(vpiBit, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiIndex, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenStruct_net_(vpiHandle handle) {
  listenNet_(handle);
  if (vpiHandle itr = vpi_iterate(vpiMember, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenEnum_net_(vpiHandle handle) {
  listenNet_(handle);
}

void VpiListener::listenInteger_net_(vpiHandle handle) {
  listenNet_(handle);
}

void VpiListener::listenTime_net_(vpiHandle handle) {
  listenNet_(handle);
}

void VpiListener::listenLogic_net_(vpiHandle handle) {
  listenNet_(handle);
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenArray_net_(vpiHandle handle) {
  listenNets_(handle);
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiNet, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenPacked_array_net_(vpiHandle handle) {
  listenNet_(handle);
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiElement, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenEvent_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenNamed_event_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiWaitingProcesses, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenNamed_event_array_(vpiHandle handle) {
}

void VpiListener::listenParameter_(vpiHandle handle) {
  listenSimple_expr_(handle);
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDef_param_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiRhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLhs, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenSpec_param_(vpiHandle handle) {
  listenSimple_expr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenClass_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiExtends, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiVariables, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiMethod, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConstraint, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiParameter, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiParamAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiVirtualInterfaceVar, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiNamedEvent, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiNamedEventArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInternalScope, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenExtends_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiClassTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiArgument, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenClass_defn_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_handle(vpiExtends, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiMethod, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConstraint, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiDerivedClasses, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiClassTypespec, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenClass_obj_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_handle(vpiClassTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiWaitingProcesses, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiMessages, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiTaskFunc, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConstraint, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenClass_var_(vpiHandle handle) {
  listenVariables_(handle);
  if (vpiHandle itr = vpi_handle(vpiClassObj, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenInstance_(vpiHandle handle) {
  listenScope_(handle);
  if (vpiHandle itr = vpi_iterate(vpiProgram, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiProgramArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiClassDefn, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiTaskFunc, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiNet, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiArrayNet, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiSpecParam, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAssertion, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenInterface_inst_(vpiHandle handle) {
  listenInstance_(handle);
  if (vpiHandle itr = vpi_iterate(vpiInterfaceTfDecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiModport, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiGlobalClocking, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiDefaultClocking, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiDefaultDisableIff, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiInstanceArray, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiModPath, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiContAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiClockingBlock, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInterface, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInterfaceArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiProcess, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPort, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiGenScopeArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiSysTaskCall, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiGenStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenProgram_(vpiHandle handle) {
  listenInstance_(handle);
  if (vpiHandle itr = vpi_handle(vpiDefaultClocking, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiInstanceArray, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInterface, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiDefaultDisableIff, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInterfaceArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiProcess, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiContAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiClockingBlock, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPort, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiGenScopeArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenPackage_(vpiHandle handle) {
  listenInstance_(handle);
}

void VpiListener::listenModule_inst_(vpiHandle handle) {
  listenInstance_(handle);
  if (vpiHandle itr = vpi_handle(vpiGlobalClocking, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiDefaultClocking, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiDefaultDisableIff, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiModuleArray, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiInstanceArray, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPort, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInterface, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiInterfaceArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiProcess, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiModule, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiModuleArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiGenScopeArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiContAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPrimitive, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPrimitiveArray, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiModPath, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiTchk, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiDefParam, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiIODecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiAliasStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiClockingBlock, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiSysTaskCall, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRefModule, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiGenStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenChecker_decl_(vpiHandle handle) {
  listenInstance_(handle);
  if (vpiHandle itr = vpi_handle(vpiDefaultClocking, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiProcess, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiContAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiPort, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenChecker_inst_(vpiHandle handle) {
  listenInstance_(handle);
  if (vpiHandle itr = vpi_iterate(vpiPort, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenShort_real_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiFunction, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenReal_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiFunction, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenByte_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenShort_int_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenInt_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenLong_int_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenInteger_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenTime_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenEnum_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiBaseTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiEnumConst, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenString_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenChandle_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenModule_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenStruct_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_iterate(vpiTypespecMember, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiFunction, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenUnion_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_iterate(vpiTypespecMember, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenLogic_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiElemTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndexTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiFunction, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenPacked_array_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElemTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndexTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiFunction, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenArray_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndexTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElemTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiFunction, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenVoid_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenUnsupported_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenSequence_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenProperty_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
}

void VpiListener::listenInterface_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_iterate(vpiParamAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenType_parameter_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenTypespec_member_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenEnum_const_(vpiHandle handle) {
}

void VpiListener::listenBit_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiElemTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiRange, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiLeftRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiRightRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiIndexTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiFunction, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenTf_call_(vpiHandle handle) {
  listenExpr_(handle);
  if (vpiHandle itr = vpi_handle(vpiScope, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiArgument, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenUser_systf_(vpiHandle handle) {
}

void VpiListener::listenSys_func_call_(vpiHandle handle) {
  listenTf_call_(handle);
  if (vpiHandle itr = vpi_handle(vpiUserSystf, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenSys_task_call_(vpiHandle handle) {
  listenTf_call_(handle);
  if (vpiHandle itr = vpi_handle(vpiUserSystf, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenMethod_func_call_(vpiHandle handle) {
  listenTf_call_(handle);
  if (vpiHandle itr = vpi_handle(vpiPrefix, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiWith, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenMethod_task_call_(vpiHandle handle) {
  listenTf_call_(handle);
  if (vpiHandle itr = vpi_handle(vpiPrefix, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiWith, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenFunc_call_(vpiHandle handle) {
  listenTf_call_(handle);
}

void VpiListener::listenTask_call_(vpiHandle handle) {
  listenTf_call_(handle);
}

void VpiListener::listenConstraint_expr_(vpiHandle handle) {
}

void VpiListener::listenConstraint_ordering_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiSolveBefore, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiSolveAfter, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenConstraint_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConstraintItem, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenImport_typespec_(vpiHandle handle) {
  listenTypespec_(handle);
  if (vpiHandle itr = vpi_handle(vpiImportTypespec, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDist_item_(vpiHandle handle) {
  if (vpiHandle itr = vpi_handle(vpiValueRange, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiWeight, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDistribution_(vpiHandle handle) {
  listenConstraint_expr_(handle);
  if (vpiHandle itr = vpi_iterate(vpiDistItem, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenImplication_(vpiHandle handle) {
  listenConstraint_expr_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConstraintExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenConstr_if_(vpiHandle handle) {
  listenConstraint_expr_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConstraintExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenConstr_if_else_(vpiHandle handle) {
  listenConstraint_expr_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConstraintExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiElseConst, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenConstr_foreach_(vpiHandle handle) {
  listenConstraint_expr_(handle);
  if (vpiHandle itr = vpi_handle(vpiVariables, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiLoopVars, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiConstraintExpr, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenSoft_disable_(vpiHandle handle) {
  listenConstraint_expr_(handle);
  if (vpiHandle itr = vpi_handle(vpiExpr, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_stmt_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiAttribute, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_if_(vpiHandle handle) {
  listenGen_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_if_else_(vpiHandle handle) {
  listenGen_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiElseStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_for_(vpiHandle handle) {
  listenGen_stmt_(handle);
  if (vpiHandle itr = vpi_iterate(vpiForInitStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiForIncStmt, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiForInitStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiForIncStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_case_(vpiHandle handle) {
  listenGen_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiCondition, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiCaseItem, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenGen_region_(vpiHandle handle) {
  listenGen_stmt_(handle);
  if (vpiHandle itr = vpi_handle(vpiStmt, handle)) {
    listenAny(itr);
    vpi_free_object(itr);
  }
}

void VpiListener::listenDesign_(vpiHandle handle) {
  if (vpiHandle itr = vpi_iterate(vpiIncludeFileInfo, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  uhdmAllIterator = true;
  if (vpiHandle itr = vpi_iterate(uhdmallPackages, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  uhdmAllIterator = false;
  visited.clear();
  visited.emplace((const any*)((const uhdm_handle*)handle)->object);
  if (vpiHandle itr = vpi_iterate(uhdmtopPackages, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  uhdmAllIterator = true;
  if (vpiHandle itr = vpi_iterate(uhdmallClasses, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  uhdmAllIterator = false;
  visited.clear();
  visited.emplace((const any*)((const uhdm_handle*)handle)->object);
  uhdmAllIterator = true;
  if (vpiHandle itr = vpi_iterate(uhdmallInterfaces, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  uhdmAllIterator = false;
  visited.clear();
  visited.emplace((const any*)((const uhdm_handle*)handle)->object);
  uhdmAllIterator = true;
  if (vpiHandle itr = vpi_iterate(uhdmallUdps, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  uhdmAllIterator = false;
  visited.clear();
  visited.emplace((const any*)((const uhdm_handle*)handle)->object);
  uhdmAllIterator = true;
  if (vpiHandle itr = vpi_iterate(uhdmallPrograms, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  uhdmAllIterator = false;
  visited.clear();
  visited.emplace((const any*)((const uhdm_handle*)handle)->object);
  uhdmAllIterator = true;
  if (vpiHandle itr = vpi_iterate(uhdmallModules, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  uhdmAllIterator = false;
  visited.clear();
  visited.emplace((const any*)((const uhdm_handle*)handle)->object);
  if (vpiHandle itr = vpi_iterate(vpiTypedef, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiLetDecl, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiTaskFunc, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiParameter, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(vpiParamAssign, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
  if (vpiHandle itr = vpi_iterate(uhdmtopModules, handle)) {
    while (vpiHandle obj = vpi_scan(itr)) {
      listenAny(obj);
      vpi_free_object(obj);
    }
    vpi_free_object(itr);
  }
}

void VpiListener::listenAttribute(vpiHandle handle) {
  const attribute* object = (const attribute*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterAttribute(object, handle);
  if (visited.insert(object).second) {
    listenAttribute_(handle);
  }
  leaveAttribute(object, handle);
  callstack.pop_back();
}

void VpiListener::listenVirtual_interface_var(vpiHandle handle) {
  const virtual_interface_var* object = (const virtual_interface_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterVirtual_interface_var(object, handle);
  if (visited.insert(object).second) {
    listenVirtual_interface_var_(handle);
  }
  leaveVirtual_interface_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenLet_decl(vpiHandle handle) {
  const let_decl* object = (const let_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterLet_decl(object, handle);
  if (visited.insert(object).second) {
    listenLet_decl_(handle);
  }
  leaveLet_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenAlways(vpiHandle handle) {
  const always* object = (const always*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterAlways(object, handle);
  if (visited.insert(object).second) {
    listenAlways_(handle);
  }
  leaveAlways(object, handle);
  callstack.pop_back();
}

void VpiListener::listenFinal_stmt(vpiHandle handle) {
  const final_stmt* object = (const final_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterFinal_stmt(object, handle);
  if (visited.insert(object).second) {
    listenFinal_stmt_(handle);
  }
  leaveFinal_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInitial(vpiHandle handle) {
  const initial* object = (const initial*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInitial(object, handle);
  if (visited.insert(object).second) {
    listenInitial_(handle);
  }
  leaveInitial(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDelay_control(vpiHandle handle) {
  const delay_control* object = (const delay_control*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDelay_control(object, handle);
  if (visited.insert(object).second) {
    listenDelay_control_(handle);
  }
  leaveDelay_control(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDelay_term(vpiHandle handle) {
  const delay_term* object = (const delay_term*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDelay_term(object, handle);
  if (visited.insert(object).second) {
    listenDelay_term_(handle);
  }
  leaveDelay_term(object, handle);
  callstack.pop_back();
}

void VpiListener::listenEvent_control(vpiHandle handle) {
  const event_control* object = (const event_control*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterEvent_control(object, handle);
  if (visited.insert(object).second) {
    listenEvent_control_(handle);
  }
  leaveEvent_control(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRepeat_control(vpiHandle handle) {
  const repeat_control* object = (const repeat_control*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRepeat_control(object, handle);
  if (visited.insert(object).second) {
    listenRepeat_control_(handle);
  }
  leaveRepeat_control(object, handle);
  callstack.pop_back();
}

void VpiListener::listenBegin(vpiHandle handle) {
  const begin* object = (const begin*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterBegin(object, handle);
  if (visited.insert(object).second) {
    listenBegin_(handle);
  }
  leaveBegin(object, handle);
  callstack.pop_back();
}

void VpiListener::listenNamed_begin(vpiHandle handle) {
  const named_begin* object = (const named_begin*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterNamed_begin(object, handle);
  if (visited.insert(object).second) {
    listenNamed_begin_(handle);
  }
  leaveNamed_begin(object, handle);
  callstack.pop_back();
}

void VpiListener::listenNamed_fork(vpiHandle handle) {
  const named_fork* object = (const named_fork*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterNamed_fork(object, handle);
  if (visited.insert(object).second) {
    listenNamed_fork_(handle);
  }
  leaveNamed_fork(object, handle);
  callstack.pop_back();
}

void VpiListener::listenFork_stmt(vpiHandle handle) {
  const fork_stmt* object = (const fork_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterFork_stmt(object, handle);
  if (visited.insert(object).second) {
    listenFork_stmt_(handle);
  }
  leaveFork_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenFor_stmt(vpiHandle handle) {
  const for_stmt* object = (const for_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterFor_stmt(object, handle);
  if (visited.insert(object).second) {
    listenFor_stmt_(handle);
  }
  leaveFor_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenIf_stmt(vpiHandle handle) {
  const if_stmt* object = (const if_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterIf_stmt(object, handle);
  if (visited.insert(object).second) {
    listenIf_stmt_(handle);
  }
  leaveIf_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenEvent_stmt(vpiHandle handle) {
  const event_stmt* object = (const event_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterEvent_stmt(object, handle);
  if (visited.insert(object).second) {
    listenEvent_stmt_(handle);
  }
  leaveEvent_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenThread_obj(vpiHandle handle) {
  const thread_obj* object = (const thread_obj*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterThread_obj(object, handle);
  if (visited.insert(object).second) {
    listenThread_obj_(handle);
  }
  leaveThread_obj(object, handle);
  callstack.pop_back();
}

void VpiListener::listenForever_stmt(vpiHandle handle) {
  const forever_stmt* object = (const forever_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterForever_stmt(object, handle);
  if (visited.insert(object).second) {
    listenForever_stmt_(handle);
  }
  leaveForever_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenWait_stmt(vpiHandle handle) {
  const wait_stmt* object = (const wait_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterWait_stmt(object, handle);
  if (visited.insert(object).second) {
    listenWait_stmt_(handle);
  }
  leaveWait_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenWait_fork(vpiHandle handle) {
  const wait_fork* object = (const wait_fork*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterWait_fork(object, handle);
  if (visited.insert(object).second) {
    listenWait_fork_(handle);
  }
  leaveWait_fork(object, handle);
  callstack.pop_back();
}

void VpiListener::listenOrdered_wait(vpiHandle handle) {
  const ordered_wait* object = (const ordered_wait*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterOrdered_wait(object, handle);
  if (visited.insert(object).second) {
    listenOrdered_wait_(handle);
  }
  leaveOrdered_wait(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDisable(vpiHandle handle) {
  const disable* object = (const disable*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDisable(object, handle);
  if (visited.insert(object).second) {
    listenDisable_(handle);
  }
  leaveDisable(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDisable_fork(vpiHandle handle) {
  const disable_fork* object = (const disable_fork*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDisable_fork(object, handle);
  if (visited.insert(object).second) {
    listenDisable_fork_(handle);
  }
  leaveDisable_fork(object, handle);
  callstack.pop_back();
}

void VpiListener::listenContinue_stmt(vpiHandle handle) {
  const continue_stmt* object = (const continue_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterContinue_stmt(object, handle);
  if (visited.insert(object).second) {
    listenContinue_stmt_(handle);
  }
  leaveContinue_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenBreak_stmt(vpiHandle handle) {
  const break_stmt* object = (const break_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterBreak_stmt(object, handle);
  if (visited.insert(object).second) {
    listenBreak_stmt_(handle);
  }
  leaveBreak_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenReturn_stmt(vpiHandle handle) {
  const return_stmt* object = (const return_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterReturn_stmt(object, handle);
  if (visited.insert(object).second) {
    listenReturn_stmt_(handle);
  }
  leaveReturn_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenWhile_stmt(vpiHandle handle) {
  const while_stmt* object = (const while_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterWhile_stmt(object, handle);
  if (visited.insert(object).second) {
    listenWhile_stmt_(handle);
  }
  leaveWhile_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRepeat(vpiHandle handle) {
  const repeat* object = (const repeat*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRepeat(object, handle);
  if (visited.insert(object).second) {
    listenRepeat_(handle);
  }
  leaveRepeat(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDo_while(vpiHandle handle) {
  const do_while* object = (const do_while*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDo_while(object, handle);
  if (visited.insert(object).second) {
    listenDo_while_(handle);
  }
  leaveDo_while(object, handle);
  callstack.pop_back();
}

void VpiListener::listenIf_else(vpiHandle handle) {
  const if_else* object = (const if_else*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterIf_else(object, handle);
  if (visited.insert(object).second) {
    listenIf_else_(handle);
  }
  leaveIf_else(object, handle);
  callstack.pop_back();
}

void VpiListener::listenCase_stmt(vpiHandle handle) {
  const case_stmt* object = (const case_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterCase_stmt(object, handle);
  if (visited.insert(object).second) {
    listenCase_stmt_(handle);
  }
  leaveCase_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenForce(vpiHandle handle) {
  const force* object = (const force*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterForce(object, handle);
  if (visited.insert(object).second) {
    listenForce_(handle);
  }
  leaveForce(object, handle);
  callstack.pop_back();
}

void VpiListener::listenAssign_stmt(vpiHandle handle) {
  const assign_stmt* object = (const assign_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterAssign_stmt(object, handle);
  if (visited.insert(object).second) {
    listenAssign_stmt_(handle);
  }
  leaveAssign_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDeassign(vpiHandle handle) {
  const deassign* object = (const deassign*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDeassign(object, handle);
  if (visited.insert(object).second) {
    listenDeassign_(handle);
  }
  leaveDeassign(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRelease(vpiHandle handle) {
  const release* object = (const release*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRelease(object, handle);
  if (visited.insert(object).second) {
    listenRelease_(handle);
  }
  leaveRelease(object, handle);
  callstack.pop_back();
}

void VpiListener::listenNull_stmt(vpiHandle handle) {
  const null_stmt* object = (const null_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterNull_stmt(object, handle);
  if (visited.insert(object).second) {
    listenNull_stmt_(handle);
  }
  leaveNull_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenExpect_stmt(vpiHandle handle) {
  const expect_stmt* object = (const expect_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterExpect_stmt(object, handle);
  if (visited.insert(object).second) {
    listenExpect_stmt_(handle);
  }
  leaveExpect_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenForeach_stmt(vpiHandle handle) {
  const foreach_stmt* object = (const foreach_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterForeach_stmt(object, handle);
  if (visited.insert(object).second) {
    listenForeach_stmt_(handle);
  }
  leaveForeach_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGen_scope(vpiHandle handle) {
  const gen_scope* object = (const gen_scope*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGen_scope(object, handle);
  if (visited.insert(object).second) {
    listenGen_scope_(handle);
  }
  leaveGen_scope(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGen_var(vpiHandle handle) {
  const gen_var* object = (const gen_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGen_var(object, handle);
  if (visited.insert(object).second) {
    listenGen_var_(handle);
  }
  leaveGen_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGen_scope_array(vpiHandle handle) {
  const gen_scope_array* object = (const gen_scope_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGen_scope_array(object, handle);
  if (visited.insert(object).second) {
    listenGen_scope_array_(handle);
  }
  leaveGen_scope_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenAssert_stmt(vpiHandle handle) {
  const assert_stmt* object = (const assert_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterAssert_stmt(object, handle);
  if (visited.insert(object).second) {
    listenAssert_stmt_(handle);
  }
  leaveAssert_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenCover(vpiHandle handle) {
  const cover* object = (const cover*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterCover(object, handle);
  if (visited.insert(object).second) {
    listenCover_(handle);
  }
  leaveCover(object, handle);
  callstack.pop_back();
}

void VpiListener::listenAssume(vpiHandle handle) {
  const assume* object = (const assume*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterAssume(object, handle);
  if (visited.insert(object).second) {
    listenAssume_(handle);
  }
  leaveAssume(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRestrict(vpiHandle handle) {
  const restrict* object = (const restrict*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRestrict(object, handle);
  if (visited.insert(object).second) {
    listenRestrict_(handle);
  }
  leaveRestrict(object, handle);
  callstack.pop_back();
}

void VpiListener::listenImmediate_assert(vpiHandle handle) {
  const immediate_assert* object = (const immediate_assert*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterImmediate_assert(object, handle);
  if (visited.insert(object).second) {
    listenImmediate_assert_(handle);
  }
  leaveImmediate_assert(object, handle);
  callstack.pop_back();
}

void VpiListener::listenImmediate_assume(vpiHandle handle) {
  const immediate_assume* object = (const immediate_assume*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterImmediate_assume(object, handle);
  if (visited.insert(object).second) {
    listenImmediate_assume_(handle);
  }
  leaveImmediate_assume(object, handle);
  callstack.pop_back();
}

void VpiListener::listenImmediate_cover(vpiHandle handle) {
  const immediate_cover* object = (const immediate_cover*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterImmediate_cover(object, handle);
  if (visited.insert(object).second) {
    listenImmediate_cover_(handle);
  }
  leaveImmediate_cover(object, handle);
  callstack.pop_back();
}

void VpiListener::listenCase_item(vpiHandle handle) {
  const case_item* object = (const case_item*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterCase_item(object, handle);
  if (visited.insert(object).second) {
    listenCase_item_(handle);
  }
  leaveCase_item(object, handle);
  callstack.pop_back();
}

void VpiListener::listenAssignment(vpiHandle handle) {
  const assignment* object = (const assignment*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterAssignment(object, handle);
  if (visited.insert(object).second) {
    listenAssignment_(handle);
  }
  leaveAssignment(object, handle);
  callstack.pop_back();
}

void VpiListener::listenAny_pattern(vpiHandle handle) {
  const any_pattern* object = (const any_pattern*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterAny_pattern(object, handle);
  if (visited.insert(object).second) {
    listenAny_pattern_(handle);
  }
  leaveAny_pattern(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTagged_pattern(vpiHandle handle) {
  const tagged_pattern* object = (const tagged_pattern*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTagged_pattern(object, handle);
  if (visited.insert(object).second) {
    listenTagged_pattern_(handle);
  }
  leaveTagged_pattern(object, handle);
  callstack.pop_back();
}

void VpiListener::listenStruct_pattern(vpiHandle handle) {
  const struct_pattern* object = (const struct_pattern*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterStruct_pattern(object, handle);
  if (visited.insert(object).second) {
    listenStruct_pattern_(handle);
  }
  leaveStruct_pattern(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUnsupported_expr(vpiHandle handle) {
  const unsupported_expr* object = (const unsupported_expr*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUnsupported_expr(object, handle);
  if (visited.insert(object).second) {
    listenUnsupported_expr_(handle);
  }
  leaveUnsupported_expr(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUnsupported_stmt(vpiHandle handle) {
  const unsupported_stmt* object = (const unsupported_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUnsupported_stmt(object, handle);
  if (visited.insert(object).second) {
    listenUnsupported_stmt_(handle);
  }
  leaveUnsupported_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInclude_file_info(vpiHandle handle) {
  const include_file_info* object = (const include_file_info*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInclude_file_info(object, handle);
  if (visited.insert(object).second) {
    listenInclude_file_info_(handle);
  }
  leaveInclude_file_info(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSequence_inst(vpiHandle handle) {
  const sequence_inst* object = (const sequence_inst*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSequence_inst(object, handle);
  if (visited.insert(object).second) {
    listenSequence_inst_(handle);
  }
  leaveSequence_inst(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSeq_formal_decl(vpiHandle handle) {
  const seq_formal_decl* object = (const seq_formal_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSeq_formal_decl(object, handle);
  if (visited.insert(object).second) {
    listenSeq_formal_decl_(handle);
  }
  leaveSeq_formal_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSequence_decl(vpiHandle handle) {
  const sequence_decl* object = (const sequence_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSequence_decl(object, handle);
  if (visited.insert(object).second) {
    listenSequence_decl_(handle);
  }
  leaveSequence_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenProp_formal_decl(vpiHandle handle) {
  const prop_formal_decl* object = (const prop_formal_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterProp_formal_decl(object, handle);
  if (visited.insert(object).second) {
    listenProp_formal_decl_(handle);
  }
  leaveProp_formal_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenProperty_inst(vpiHandle handle) {
  const property_inst* object = (const property_inst*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterProperty_inst(object, handle);
  if (visited.insert(object).second) {
    listenProperty_inst_(handle);
  }
  leaveProperty_inst(object, handle);
  callstack.pop_back();
}

void VpiListener::listenProperty_spec(vpiHandle handle) {
  const property_spec* object = (const property_spec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterProperty_spec(object, handle);
  if (visited.insert(object).second) {
    listenProperty_spec_(handle);
  }
  leaveProperty_spec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenProperty_decl(vpiHandle handle) {
  const property_decl* object = (const property_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterProperty_decl(object, handle);
  if (visited.insert(object).second) {
    listenProperty_decl_(handle);
  }
  leaveProperty_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenClocked_property(vpiHandle handle) {
  const clocked_property* object = (const clocked_property*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterClocked_property(object, handle);
  if (visited.insert(object).second) {
    listenClocked_property_(handle);
  }
  leaveClocked_property(object, handle);
  callstack.pop_back();
}

void VpiListener::listenCase_property_item(vpiHandle handle) {
  const case_property_item* object = (const case_property_item*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterCase_property_item(object, handle);
  if (visited.insert(object).second) {
    listenCase_property_item_(handle);
  }
  leaveCase_property_item(object, handle);
  callstack.pop_back();
}

void VpiListener::listenCase_property(vpiHandle handle) {
  const case_property* object = (const case_property*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterCase_property(object, handle);
  if (visited.insert(object).second) {
    listenCase_property_(handle);
  }
  leaveCase_property(object, handle);
  callstack.pop_back();
}

void VpiListener::listenMulticlock_sequence_expr(vpiHandle handle) {
  const multiclock_sequence_expr* object = (const multiclock_sequence_expr*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterMulticlock_sequence_expr(object, handle);
  if (visited.insert(object).second) {
    listenMulticlock_sequence_expr_(handle);
  }
  leaveMulticlock_sequence_expr(object, handle);
  callstack.pop_back();
}

void VpiListener::listenClocked_seq(vpiHandle handle) {
  const clocked_seq* object = (const clocked_seq*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterClocked_seq(object, handle);
  if (visited.insert(object).second) {
    listenClocked_seq_(handle);
  }
  leaveClocked_seq(object, handle);
  callstack.pop_back();
}

void VpiListener::listenConstant(vpiHandle handle) {
  const constant* object = (const constant*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterConstant(object, handle);
  if (visited.insert(object).second) {
    listenConstant_(handle);
  }
  leaveConstant(object, handle);
  callstack.pop_back();
}

void VpiListener::listenLet_expr(vpiHandle handle) {
  const let_expr* object = (const let_expr*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterLet_expr(object, handle);
  if (visited.insert(object).second) {
    listenLet_expr_(handle);
  }
  leaveLet_expr(object, handle);
  callstack.pop_back();
}

void VpiListener::listenOperation(vpiHandle handle) {
  const operation* object = (const operation*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterOperation(object, handle);
  if (visited.insert(object).second) {
    listenOperation_(handle);
  }
  leaveOperation(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRef_obj(vpiHandle handle) {
  const ref_obj* object = (const ref_obj*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRef_obj(object, handle);
  if (visited.insert(object).second) {
    listenRef_obj_(handle);
  }
  leaveRef_obj(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRef_module(vpiHandle handle) {
  const ref_module* object = (const ref_module*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRef_module(object, handle);
  if (visited.insert(object).second) {
    listenRef_module_(handle);
  }
  leaveRef_module(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRef_typespec(vpiHandle handle) {
  const ref_typespec* object = (const ref_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRef_typespec(object, handle);
  if (visited.insert(object).second) {
    listenRef_typespec_(handle);
  }
  leaveRef_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPart_select(vpiHandle handle) {
  const part_select* object = (const part_select*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPart_select(object, handle);
  if (visited.insert(object).second) {
    listenPart_select_(handle);
  }
  leavePart_select(object, handle);
  callstack.pop_back();
}

void VpiListener::listenIndexed_part_select(vpiHandle handle) {
  const indexed_part_select* object = (const indexed_part_select*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterIndexed_part_select(object, handle);
  if (visited.insert(object).second) {
    listenIndexed_part_select_(handle);
  }
  leaveIndexed_part_select(object, handle);
  callstack.pop_back();
}

void VpiListener::listenVar_select(vpiHandle handle) {
  const var_select* object = (const var_select*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterVar_select(object, handle);
  if (visited.insert(object).second) {
    listenVar_select_(handle);
  }
  leaveVar_select(object, handle);
  callstack.pop_back();
}

void VpiListener::listenBit_select(vpiHandle handle) {
  const bit_select* object = (const bit_select*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterBit_select(object, handle);
  if (visited.insert(object).second) {
    listenBit_select_(handle);
  }
  leaveBit_select(object, handle);
  callstack.pop_back();
}

void VpiListener::listenHier_path(vpiHandle handle) {
  const hier_path* object = (const hier_path*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterHier_path(object, handle);
  if (visited.insert(object).second) {
    listenHier_path_(handle);
  }
  leaveHier_path(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRef_var(vpiHandle handle) {
  const ref_var* object = (const ref_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRef_var(object, handle);
  if (visited.insert(object).second) {
    listenRef_var_(handle);
  }
  leaveRef_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenShort_real_var(vpiHandle handle) {
  const short_real_var* object = (const short_real_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterShort_real_var(object, handle);
  if (visited.insert(object).second) {
    listenShort_real_var_(handle);
  }
  leaveShort_real_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenReal_var(vpiHandle handle) {
  const real_var* object = (const real_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterReal_var(object, handle);
  if (visited.insert(object).second) {
    listenReal_var_(handle);
  }
  leaveReal_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenByte_var(vpiHandle handle) {
  const byte_var* object = (const byte_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterByte_var(object, handle);
  if (visited.insert(object).second) {
    listenByte_var_(handle);
  }
  leaveByte_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenShort_int_var(vpiHandle handle) {
  const short_int_var* object = (const short_int_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterShort_int_var(object, handle);
  if (visited.insert(object).second) {
    listenShort_int_var_(handle);
  }
  leaveShort_int_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInt_var(vpiHandle handle) {
  const int_var* object = (const int_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInt_var(object, handle);
  if (visited.insert(object).second) {
    listenInt_var_(handle);
  }
  leaveInt_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenLong_int_var(vpiHandle handle) {
  const long_int_var* object = (const long_int_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterLong_int_var(object, handle);
  if (visited.insert(object).second) {
    listenLong_int_var_(handle);
  }
  leaveLong_int_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInteger_var(vpiHandle handle) {
  const integer_var* object = (const integer_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInteger_var(object, handle);
  if (visited.insert(object).second) {
    listenInteger_var_(handle);
  }
  leaveInteger_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTime_var(vpiHandle handle) {
  const time_var* object = (const time_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTime_var(object, handle);
  if (visited.insert(object).second) {
    listenTime_var_(handle);
  }
  leaveTime_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenArray_var(vpiHandle handle) {
  const array_var* object = (const array_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterArray_var(object, handle);
  if (visited.insert(object).second) {
    listenArray_var_(handle);
  }
  leaveArray_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenArray_expr(vpiHandle handle) {
  const array_expr* object = (const array_expr*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterArray_expr(object, handle);
  if (visited.insert(object).second) {
    listenArray_expr_(handle);
  }
  leaveArray_expr(object, handle);
  callstack.pop_back();
}

void VpiListener::listenReg_array(vpiHandle handle) {
  const reg_array* object = (const reg_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterReg_array(object, handle);
  if (visited.insert(object).second) {
    listenReg_array_(handle);
  }
  leaveReg_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenReg(vpiHandle handle) {
  const reg* object = (const reg*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterReg(object, handle);
  if (visited.insert(object).second) {
    listenReg_(handle);
  }
  leaveReg(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPacked_array_var(vpiHandle handle) {
  const packed_array_var* object = (const packed_array_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPacked_array_var(object, handle);
  if (visited.insert(object).second) {
    listenPacked_array_var_(handle);
  }
  leavePacked_array_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenBit_var(vpiHandle handle) {
  const bit_var* object = (const bit_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterBit_var(object, handle);
  if (visited.insert(object).second) {
    listenBit_var_(handle);
  }
  leaveBit_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenLogic_var(vpiHandle handle) {
  const logic_var* object = (const logic_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterLogic_var(object, handle);
  if (visited.insert(object).second) {
    listenLogic_var_(handle);
  }
  leaveLogic_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenStruct_var(vpiHandle handle) {
  const struct_var* object = (const struct_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterStruct_var(object, handle);
  if (visited.insert(object).second) {
    listenStruct_var_(handle);
  }
  leaveStruct_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUnion_var(vpiHandle handle) {
  const union_var* object = (const union_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUnion_var(object, handle);
  if (visited.insert(object).second) {
    listenUnion_var_(handle);
  }
  leaveUnion_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenEnum_var(vpiHandle handle) {
  const enum_var* object = (const enum_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterEnum_var(object, handle);
  if (visited.insert(object).second) {
    listenEnum_var_(handle);
  }
  leaveEnum_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenString_var(vpiHandle handle) {
  const string_var* object = (const string_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterString_var(object, handle);
  if (visited.insert(object).second) {
    listenString_var_(handle);
  }
  leaveString_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenChandle_var(vpiHandle handle) {
  const chandle_var* object = (const chandle_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterChandle_var(object, handle);
  if (visited.insert(object).second) {
    listenChandle_var_(handle);
  }
  leaveChandle_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenVar_bit(vpiHandle handle) {
  const var_bit* object = (const var_bit*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterVar_bit(object, handle);
  if (visited.insert(object).second) {
    listenVar_bit_(handle);
  }
  leaveVar_bit(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTask(vpiHandle handle) {
  const task* object = (const task*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTask(object, handle);
  if (visited.insert(object).second) {
    listenTask_(handle);
  }
  leaveTask(object, handle);
  callstack.pop_back();
}

void VpiListener::listenFunction(vpiHandle handle) {
  const function* object = (const function*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterFunction(object, handle);
  if (visited.insert(object).second) {
    listenFunction_(handle);
  }
  leaveFunction(object, handle);
  callstack.pop_back();
}

void VpiListener::listenModport(vpiHandle handle) {
  const modport* object = (const modport*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterModport(object, handle);
  if (visited.insert(object).second) {
    listenModport_(handle);
  }
  leaveModport(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInterface_tf_decl(vpiHandle handle) {
  const interface_tf_decl* object = (const interface_tf_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInterface_tf_decl(object, handle);
  if (visited.insert(object).second) {
    listenInterface_tf_decl_(handle);
  }
  leaveInterface_tf_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenCont_assign(vpiHandle handle) {
  const cont_assign* object = (const cont_assign*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterCont_assign(object, handle);
  if (visited.insert(object).second) {
    listenCont_assign_(handle);
  }
  leaveCont_assign(object, handle);
  callstack.pop_back();
}

void VpiListener::listenCont_assign_bit(vpiHandle handle) {
  const cont_assign_bit* object = (const cont_assign_bit*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterCont_assign_bit(object, handle);
  if (visited.insert(object).second) {
    listenCont_assign_bit_(handle);
  }
  leaveCont_assign_bit(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPort(vpiHandle handle) {
  const port* object = (const port*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPort(object, handle);
  if (visited.insert(object).second) {
    listenPort_(handle);
  }
  leavePort(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPort_bit(vpiHandle handle) {
  const port_bit* object = (const port_bit*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPort_bit(object, handle);
  if (visited.insert(object).second) {
    listenPort_bit_(handle);
  }
  leavePort_bit(object, handle);
  callstack.pop_back();
}

void VpiListener::listenChecker_port(vpiHandle handle) {
  const checker_port* object = (const checker_port*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterChecker_port(object, handle);
  if (visited.insert(object).second) {
    listenChecker_port_(handle);
  }
  leaveChecker_port(object, handle);
  callstack.pop_back();
}

void VpiListener::listenChecker_inst_port(vpiHandle handle) {
  const checker_inst_port* object = (const checker_inst_port*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterChecker_inst_port(object, handle);
  if (visited.insert(object).second) {
    listenChecker_inst_port_(handle);
  }
  leaveChecker_inst_port(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGate(vpiHandle handle) {
  const gate* object = (const gate*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGate(object, handle);
  if (visited.insert(object).second) {
    listenGate_(handle);
  }
  leaveGate(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSwitch_tran(vpiHandle handle) {
  const switch_tran* object = (const switch_tran*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSwitch_tran(object, handle);
  if (visited.insert(object).second) {
    listenSwitch_tran_(handle);
  }
  leaveSwitch_tran(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUdp(vpiHandle handle) {
  const udp* object = (const udp*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUdp(object, handle);
  if (visited.insert(object).second) {
    listenUdp_(handle);
  }
  leaveUdp(object, handle);
  callstack.pop_back();
}

void VpiListener::listenMod_path(vpiHandle handle) {
  const mod_path* object = (const mod_path*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterMod_path(object, handle);
  if (visited.insert(object).second) {
    listenMod_path_(handle);
  }
  leaveMod_path(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTchk(vpiHandle handle) {
  const tchk* object = (const tchk*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTchk(object, handle);
  if (visited.insert(object).second) {
    listenTchk_(handle);
  }
  leaveTchk(object, handle);
  callstack.pop_back();
}

void VpiListener::listenRange(vpiHandle handle) {
  const range* object = (const range*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterRange(object, handle);
  if (visited.insert(object).second) {
    listenRange_(handle);
  }
  leaveRange(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUdp_defn(vpiHandle handle) {
  const udp_defn* object = (const udp_defn*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUdp_defn(object, handle);
  if (visited.insert(object).second) {
    listenUdp_defn_(handle);
  }
  leaveUdp_defn(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTable_entry(vpiHandle handle) {
  const table_entry* object = (const table_entry*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTable_entry(object, handle);
  if (visited.insert(object).second) {
    listenTable_entry_(handle);
  }
  leaveTable_entry(object, handle);
  callstack.pop_back();
}

void VpiListener::listenIo_decl(vpiHandle handle) {
  const io_decl* object = (const io_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterIo_decl(object, handle);
  if (visited.insert(object).second) {
    listenIo_decl_(handle);
  }
  leaveIo_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenAlias_stmt(vpiHandle handle) {
  const alias_stmt* object = (const alias_stmt*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterAlias_stmt(object, handle);
  if (visited.insert(object).second) {
    listenAlias_stmt_(handle);
  }
  leaveAlias_stmt(object, handle);
  callstack.pop_back();
}

void VpiListener::listenClocking_block(vpiHandle handle) {
  const clocking_block* object = (const clocking_block*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterClocking_block(object, handle);
  if (visited.insert(object).second) {
    listenClocking_block_(handle);
  }
  leaveClocking_block(object, handle);
  callstack.pop_back();
}

void VpiListener::listenClocking_io_decl(vpiHandle handle) {
  const clocking_io_decl* object = (const clocking_io_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterClocking_io_decl(object, handle);
  if (visited.insert(object).second) {
    listenClocking_io_decl_(handle);
  }
  leaveClocking_io_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenParam_assign(vpiHandle handle) {
  const param_assign* object = (const param_assign*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterParam_assign(object, handle);
  if (visited.insert(object).second) {
    listenParam_assign_(handle);
  }
  leaveParam_assign(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInterface_array(vpiHandle handle) {
  const interface_array* object = (const interface_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInterface_array(object, handle);
  if (visited.insert(object).second) {
    listenInterface_array_(handle);
  }
  leaveInterface_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenProgram_array(vpiHandle handle) {
  const program_array* object = (const program_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterProgram_array(object, handle);
  if (visited.insert(object).second) {
    listenProgram_array_(handle);
  }
  leaveProgram_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenModule_array(vpiHandle handle) {
  const module_array* object = (const module_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterModule_array(object, handle);
  if (visited.insert(object).second) {
    listenModule_array_(handle);
  }
  leaveModule_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGate_array(vpiHandle handle) {
  const gate_array* object = (const gate_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGate_array(object, handle);
  if (visited.insert(object).second) {
    listenGate_array_(handle);
  }
  leaveGate_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSwitch_array(vpiHandle handle) {
  const switch_array* object = (const switch_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSwitch_array(object, handle);
  if (visited.insert(object).second) {
    listenSwitch_array_(handle);
  }
  leaveSwitch_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUdp_array(vpiHandle handle) {
  const udp_array* object = (const udp_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUdp_array(object, handle);
  if (visited.insert(object).second) {
    listenUdp_array_(handle);
  }
  leaveUdp_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPrim_term(vpiHandle handle) {
  const prim_term* object = (const prim_term*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPrim_term(object, handle);
  if (visited.insert(object).second) {
    listenPrim_term_(handle);
  }
  leavePrim_term(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPath_term(vpiHandle handle) {
  const path_term* object = (const path_term*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPath_term(object, handle);
  if (visited.insert(object).second) {
    listenPath_term_(handle);
  }
  leavePath_term(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTchk_term(vpiHandle handle) {
  const tchk_term* object = (const tchk_term*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTchk_term(object, handle);
  if (visited.insert(object).second) {
    listenTchk_term_(handle);
  }
  leaveTchk_term(object, handle);
  callstack.pop_back();
}

void VpiListener::listenNet_bit(vpiHandle handle) {
  const net_bit* object = (const net_bit*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterNet_bit(object, handle);
  if (visited.insert(object).second) {
    listenNet_bit_(handle);
  }
  leaveNet_bit(object, handle);
  callstack.pop_back();
}

void VpiListener::listenStruct_net(vpiHandle handle) {
  const struct_net* object = (const struct_net*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterStruct_net(object, handle);
  if (visited.insert(object).second) {
    listenStruct_net_(handle);
  }
  leaveStruct_net(object, handle);
  callstack.pop_back();
}

void VpiListener::listenEnum_net(vpiHandle handle) {
  const enum_net* object = (const enum_net*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterEnum_net(object, handle);
  if (visited.insert(object).second) {
    listenEnum_net_(handle);
  }
  leaveEnum_net(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInteger_net(vpiHandle handle) {
  const integer_net* object = (const integer_net*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInteger_net(object, handle);
  if (visited.insert(object).second) {
    listenInteger_net_(handle);
  }
  leaveInteger_net(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTime_net(vpiHandle handle) {
  const time_net* object = (const time_net*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTime_net(object, handle);
  if (visited.insert(object).second) {
    listenTime_net_(handle);
  }
  leaveTime_net(object, handle);
  callstack.pop_back();
}

void VpiListener::listenLogic_net(vpiHandle handle) {
  const logic_net* object = (const logic_net*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterLogic_net(object, handle);
  if (visited.insert(object).second) {
    listenLogic_net_(handle);
  }
  leaveLogic_net(object, handle);
  callstack.pop_back();
}

void VpiListener::listenArray_net(vpiHandle handle) {
  const array_net* object = (const array_net*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterArray_net(object, handle);
  if (visited.insert(object).second) {
    listenArray_net_(handle);
  }
  leaveArray_net(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPacked_array_net(vpiHandle handle) {
  const packed_array_net* object = (const packed_array_net*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPacked_array_net(object, handle);
  if (visited.insert(object).second) {
    listenPacked_array_net_(handle);
  }
  leavePacked_array_net(object, handle);
  callstack.pop_back();
}

void VpiListener::listenEvent_typespec(vpiHandle handle) {
  const event_typespec* object = (const event_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterEvent_typespec(object, handle);
  if (visited.insert(object).second) {
    listenEvent_typespec_(handle);
  }
  leaveEvent_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenNamed_event(vpiHandle handle) {
  const named_event* object = (const named_event*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterNamed_event(object, handle);
  if (visited.insert(object).second) {
    listenNamed_event_(handle);
  }
  leaveNamed_event(object, handle);
  callstack.pop_back();
}

void VpiListener::listenNamed_event_array(vpiHandle handle) {
  const named_event_array* object = (const named_event_array*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterNamed_event_array(object, handle);
  if (visited.insert(object).second) {
    listenNamed_event_array_(handle);
  }
  leaveNamed_event_array(object, handle);
  callstack.pop_back();
}

void VpiListener::listenParameter(vpiHandle handle) {
  const parameter* object = (const parameter*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterParameter(object, handle);
  if (visited.insert(object).second) {
    listenParameter_(handle);
  }
  leaveParameter(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDef_param(vpiHandle handle) {
  const def_param* object = (const def_param*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDef_param(object, handle);
  if (visited.insert(object).second) {
    listenDef_param_(handle);
  }
  leaveDef_param(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSpec_param(vpiHandle handle) {
  const spec_param* object = (const spec_param*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSpec_param(object, handle);
  if (visited.insert(object).second) {
    listenSpec_param_(handle);
  }
  leaveSpec_param(object, handle);
  callstack.pop_back();
}

void VpiListener::listenClass_typespec(vpiHandle handle) {
  const class_typespec* object = (const class_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterClass_typespec(object, handle);
  if (visited.insert(object).second) {
    listenClass_typespec_(handle);
  }
  leaveClass_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenExtends(vpiHandle handle) {
  const extends* object = (const extends*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterExtends(object, handle);
  if (visited.insert(object).second) {
    listenExtends_(handle);
  }
  leaveExtends(object, handle);
  callstack.pop_back();
}

void VpiListener::listenClass_defn(vpiHandle handle) {
  const class_defn* object = (const class_defn*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterClass_defn(object, handle);
  if (visited.insert(object).second) {
    listenClass_defn_(handle);
  }
  leaveClass_defn(object, handle);
  callstack.pop_back();
}

void VpiListener::listenClass_obj(vpiHandle handle) {
  const class_obj* object = (const class_obj*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterClass_obj(object, handle);
  if (visited.insert(object).second) {
    listenClass_obj_(handle);
  }
  leaveClass_obj(object, handle);
  callstack.pop_back();
}

void VpiListener::listenClass_var(vpiHandle handle) {
  const class_var* object = (const class_var*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterClass_var(object, handle);
  if (visited.insert(object).second) {
    listenClass_var_(handle);
  }
  leaveClass_var(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInterface_inst(vpiHandle handle) {
  const interface_inst* object = (const interface_inst*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInterface_inst(object, handle);
  if (visited.insert(object).second) {
    listenInterface_inst_(handle);
  }
  leaveInterface_inst(object, handle);
  callstack.pop_back();
}

void VpiListener::listenProgram(vpiHandle handle) {
  const program* object = (const program*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterProgram(object, handle);
  if (visited.insert(object).second) {
    listenProgram_(handle);
  }
  leaveProgram(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPackage(vpiHandle handle) {
  const package* object = (const package*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPackage(object, handle);
  if (visited.insert(object).second) {
    listenPackage_(handle);
  }
  leavePackage(object, handle);
  callstack.pop_back();
}

void VpiListener::listenModule_inst(vpiHandle handle) {
  const module_inst* object = (const module_inst*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterModule_inst(object, handle);
  if (visited.insert(object).second) {
    listenModule_inst_(handle);
  }
  leaveModule_inst(object, handle);
  callstack.pop_back();
}

void VpiListener::listenChecker_decl(vpiHandle handle) {
  const checker_decl* object = (const checker_decl*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterChecker_decl(object, handle);
  if (visited.insert(object).second) {
    listenChecker_decl_(handle);
  }
  leaveChecker_decl(object, handle);
  callstack.pop_back();
}

void VpiListener::listenChecker_inst(vpiHandle handle) {
  const checker_inst* object = (const checker_inst*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterChecker_inst(object, handle);
  if (visited.insert(object).second) {
    listenChecker_inst_(handle);
  }
  leaveChecker_inst(object, handle);
  callstack.pop_back();
}

void VpiListener::listenShort_real_typespec(vpiHandle handle) {
  const short_real_typespec* object = (const short_real_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterShort_real_typespec(object, handle);
  if (visited.insert(object).second) {
    listenShort_real_typespec_(handle);
  }
  leaveShort_real_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenReal_typespec(vpiHandle handle) {
  const real_typespec* object = (const real_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterReal_typespec(object, handle);
  if (visited.insert(object).second) {
    listenReal_typespec_(handle);
  }
  leaveReal_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenByte_typespec(vpiHandle handle) {
  const byte_typespec* object = (const byte_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterByte_typespec(object, handle);
  if (visited.insert(object).second) {
    listenByte_typespec_(handle);
  }
  leaveByte_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenShort_int_typespec(vpiHandle handle) {
  const short_int_typespec* object = (const short_int_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterShort_int_typespec(object, handle);
  if (visited.insert(object).second) {
    listenShort_int_typespec_(handle);
  }
  leaveShort_int_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInt_typespec(vpiHandle handle) {
  const int_typespec* object = (const int_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInt_typespec(object, handle);
  if (visited.insert(object).second) {
    listenInt_typespec_(handle);
  }
  leaveInt_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenLong_int_typespec(vpiHandle handle) {
  const long_int_typespec* object = (const long_int_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterLong_int_typespec(object, handle);
  if (visited.insert(object).second) {
    listenLong_int_typespec_(handle);
  }
  leaveLong_int_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInteger_typespec(vpiHandle handle) {
  const integer_typespec* object = (const integer_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInteger_typespec(object, handle);
  if (visited.insert(object).second) {
    listenInteger_typespec_(handle);
  }
  leaveInteger_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTime_typespec(vpiHandle handle) {
  const time_typespec* object = (const time_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTime_typespec(object, handle);
  if (visited.insert(object).second) {
    listenTime_typespec_(handle);
  }
  leaveTime_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenEnum_typespec(vpiHandle handle) {
  const enum_typespec* object = (const enum_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterEnum_typespec(object, handle);
  if (visited.insert(object).second) {
    listenEnum_typespec_(handle);
  }
  leaveEnum_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenString_typespec(vpiHandle handle) {
  const string_typespec* object = (const string_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterString_typespec(object, handle);
  if (visited.insert(object).second) {
    listenString_typespec_(handle);
  }
  leaveString_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenChandle_typespec(vpiHandle handle) {
  const chandle_typespec* object = (const chandle_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterChandle_typespec(object, handle);
  if (visited.insert(object).second) {
    listenChandle_typespec_(handle);
  }
  leaveChandle_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenModule_typespec(vpiHandle handle) {
  const module_typespec* object = (const module_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterModule_typespec(object, handle);
  if (visited.insert(object).second) {
    listenModule_typespec_(handle);
  }
  leaveModule_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenStruct_typespec(vpiHandle handle) {
  const struct_typespec* object = (const struct_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterStruct_typespec(object, handle);
  if (visited.insert(object).second) {
    listenStruct_typespec_(handle);
  }
  leaveStruct_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUnion_typespec(vpiHandle handle) {
  const union_typespec* object = (const union_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUnion_typespec(object, handle);
  if (visited.insert(object).second) {
    listenUnion_typespec_(handle);
  }
  leaveUnion_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenLogic_typespec(vpiHandle handle) {
  const logic_typespec* object = (const logic_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterLogic_typespec(object, handle);
  if (visited.insert(object).second) {
    listenLogic_typespec_(handle);
  }
  leaveLogic_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenPacked_array_typespec(vpiHandle handle) {
  const packed_array_typespec* object = (const packed_array_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterPacked_array_typespec(object, handle);
  if (visited.insert(object).second) {
    listenPacked_array_typespec_(handle);
  }
  leavePacked_array_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenArray_typespec(vpiHandle handle) {
  const array_typespec* object = (const array_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterArray_typespec(object, handle);
  if (visited.insert(object).second) {
    listenArray_typespec_(handle);
  }
  leaveArray_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenVoid_typespec(vpiHandle handle) {
  const void_typespec* object = (const void_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterVoid_typespec(object, handle);
  if (visited.insert(object).second) {
    listenVoid_typespec_(handle);
  }
  leaveVoid_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUnsupported_typespec(vpiHandle handle) {
  const unsupported_typespec* object = (const unsupported_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUnsupported_typespec(object, handle);
  if (visited.insert(object).second) {
    listenUnsupported_typespec_(handle);
  }
  leaveUnsupported_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSequence_typespec(vpiHandle handle) {
  const sequence_typespec* object = (const sequence_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSequence_typespec(object, handle);
  if (visited.insert(object).second) {
    listenSequence_typespec_(handle);
  }
  leaveSequence_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenProperty_typespec(vpiHandle handle) {
  const property_typespec* object = (const property_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterProperty_typespec(object, handle);
  if (visited.insert(object).second) {
    listenProperty_typespec_(handle);
  }
  leaveProperty_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenInterface_typespec(vpiHandle handle) {
  const interface_typespec* object = (const interface_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterInterface_typespec(object, handle);
  if (visited.insert(object).second) {
    listenInterface_typespec_(handle);
  }
  leaveInterface_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenType_parameter(vpiHandle handle) {
  const type_parameter* object = (const type_parameter*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterType_parameter(object, handle);
  if (visited.insert(object).second) {
    listenType_parameter_(handle);
  }
  leaveType_parameter(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTypespec_member(vpiHandle handle) {
  const typespec_member* object = (const typespec_member*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTypespec_member(object, handle);
  if (visited.insert(object).second) {
    listenTypespec_member_(handle);
  }
  leaveTypespec_member(object, handle);
  callstack.pop_back();
}

void VpiListener::listenEnum_const(vpiHandle handle) {
  const enum_const* object = (const enum_const*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterEnum_const(object, handle);
  if (visited.insert(object).second) {
    listenEnum_const_(handle);
  }
  leaveEnum_const(object, handle);
  callstack.pop_back();
}

void VpiListener::listenBit_typespec(vpiHandle handle) {
  const bit_typespec* object = (const bit_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterBit_typespec(object, handle);
  if (visited.insert(object).second) {
    listenBit_typespec_(handle);
  }
  leaveBit_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenUser_systf(vpiHandle handle) {
  const user_systf* object = (const user_systf*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterUser_systf(object, handle);
  if (visited.insert(object).second) {
    listenUser_systf_(handle);
  }
  leaveUser_systf(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSys_func_call(vpiHandle handle) {
  const sys_func_call* object = (const sys_func_call*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSys_func_call(object, handle);
  if (visited.insert(object).second) {
    listenSys_func_call_(handle);
  }
  leaveSys_func_call(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSys_task_call(vpiHandle handle) {
  const sys_task_call* object = (const sys_task_call*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSys_task_call(object, handle);
  if (visited.insert(object).second) {
    listenSys_task_call_(handle);
  }
  leaveSys_task_call(object, handle);
  callstack.pop_back();
}

void VpiListener::listenMethod_func_call(vpiHandle handle) {
  const method_func_call* object = (const method_func_call*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterMethod_func_call(object, handle);
  if (visited.insert(object).second) {
    listenMethod_func_call_(handle);
  }
  leaveMethod_func_call(object, handle);
  callstack.pop_back();
}

void VpiListener::listenMethod_task_call(vpiHandle handle) {
  const method_task_call* object = (const method_task_call*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterMethod_task_call(object, handle);
  if (visited.insert(object).second) {
    listenMethod_task_call_(handle);
  }
  leaveMethod_task_call(object, handle);
  callstack.pop_back();
}

void VpiListener::listenFunc_call(vpiHandle handle) {
  const func_call* object = (const func_call*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterFunc_call(object, handle);
  if (visited.insert(object).second) {
    listenFunc_call_(handle);
  }
  leaveFunc_call(object, handle);
  callstack.pop_back();
}

void VpiListener::listenTask_call(vpiHandle handle) {
  const task_call* object = (const task_call*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterTask_call(object, handle);
  if (visited.insert(object).second) {
    listenTask_call_(handle);
  }
  leaveTask_call(object, handle);
  callstack.pop_back();
}

void VpiListener::listenConstraint_ordering(vpiHandle handle) {
  const constraint_ordering* object = (const constraint_ordering*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterConstraint_ordering(object, handle);
  if (visited.insert(object).second) {
    listenConstraint_ordering_(handle);
  }
  leaveConstraint_ordering(object, handle);
  callstack.pop_back();
}

void VpiListener::listenConstraint(vpiHandle handle) {
  const constraint* object = (const constraint*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterConstraint(object, handle);
  if (visited.insert(object).second) {
    listenConstraint_(handle);
  }
  leaveConstraint(object, handle);
  callstack.pop_back();
}

void VpiListener::listenImport_typespec(vpiHandle handle) {
  const import_typespec* object = (const import_typespec*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterImport_typespec(object, handle);
  if (visited.insert(object).second) {
    listenImport_typespec_(handle);
  }
  leaveImport_typespec(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDist_item(vpiHandle handle) {
  const dist_item* object = (const dist_item*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDist_item(object, handle);
  if (visited.insert(object).second) {
    listenDist_item_(handle);
  }
  leaveDist_item(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDistribution(vpiHandle handle) {
  const distribution* object = (const distribution*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDistribution(object, handle);
  if (visited.insert(object).second) {
    listenDistribution_(handle);
  }
  leaveDistribution(object, handle);
  callstack.pop_back();
}

void VpiListener::listenImplication(vpiHandle handle) {
  const implication* object = (const implication*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterImplication(object, handle);
  if (visited.insert(object).second) {
    listenImplication_(handle);
  }
  leaveImplication(object, handle);
  callstack.pop_back();
}

void VpiListener::listenConstr_if(vpiHandle handle) {
  const constr_if* object = (const constr_if*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterConstr_if(object, handle);
  if (visited.insert(object).second) {
    listenConstr_if_(handle);
  }
  leaveConstr_if(object, handle);
  callstack.pop_back();
}

void VpiListener::listenConstr_if_else(vpiHandle handle) {
  const constr_if_else* object = (const constr_if_else*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterConstr_if_else(object, handle);
  if (visited.insert(object).second) {
    listenConstr_if_else_(handle);
  }
  leaveConstr_if_else(object, handle);
  callstack.pop_back();
}

void VpiListener::listenConstr_foreach(vpiHandle handle) {
  const constr_foreach* object = (const constr_foreach*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterConstr_foreach(object, handle);
  if (visited.insert(object).second) {
    listenConstr_foreach_(handle);
  }
  leaveConstr_foreach(object, handle);
  callstack.pop_back();
}

void VpiListener::listenSoft_disable(vpiHandle handle) {
  const soft_disable* object = (const soft_disable*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterSoft_disable(object, handle);
  if (visited.insert(object).second) {
    listenSoft_disable_(handle);
  }
  leaveSoft_disable(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGen_if(vpiHandle handle) {
  const gen_if* object = (const gen_if*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGen_if(object, handle);
  if (visited.insert(object).second) {
    listenGen_if_(handle);
  }
  leaveGen_if(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGen_if_else(vpiHandle handle) {
  const gen_if_else* object = (const gen_if_else*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGen_if_else(object, handle);
  if (visited.insert(object).second) {
    listenGen_if_else_(handle);
  }
  leaveGen_if_else(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGen_for(vpiHandle handle) {
  const gen_for* object = (const gen_for*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGen_for(object, handle);
  if (visited.insert(object).second) {
    listenGen_for_(handle);
  }
  leaveGen_for(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGen_case(vpiHandle handle) {
  const gen_case* object = (const gen_case*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGen_case(object, handle);
  if (visited.insert(object).second) {
    listenGen_case_(handle);
  }
  leaveGen_case(object, handle);
  callstack.pop_back();
}

void VpiListener::listenGen_region(vpiHandle handle) {
  const gen_region* object = (const gen_region*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterGen_region(object, handle);
  if (visited.insert(object).second) {
    listenGen_region_(handle);
  }
  leaveGen_region(object, handle);
  callstack.pop_back();
}

void VpiListener::listenDesign(vpiHandle handle) {
  const design* object = (const design*) ((const uhdm_handle*)handle)->object;
  callstack.push_back(object);
  enterDesign(object, handle);
  if (visited.insert(object).second) {
    listenDesign_(handle);
  }
  leaveDesign(object, handle);
  callstack.pop_back();
}


bool VpiListener::inCallstackOfType(UHDM_OBJECT_TYPE type) {
  for (any_stack_t::reverse_iterator itr = callstack.rbegin(); itr != callstack.rend(); ++itr) {
    if ((*itr)->UhdmType() == type) {
      return true;
    }
  }
  return false;
}

void VpiListener::listenAny(vpiHandle handle) {
  const any* object = (const any*)((const uhdm_handle*)handle)->object;
  const bool revisiting = visited.find(object) != visited.end();
  if (!revisiting) enterAny(object, handle);

  UHDM_OBJECT_TYPE type = ((const uhdm_handle*)handle)->type;
  switch (type) {
    case UHDM_OBJECT_TYPE::uhdmalias_stmt: listenAlias_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmalways: listenAlways(handle); break;
    case UHDM_OBJECT_TYPE::uhdmany_pattern: listenAny_pattern(handle); break;
    case UHDM_OBJECT_TYPE::uhdmarray_expr: listenArray_expr(handle); break;
    case UHDM_OBJECT_TYPE::uhdmarray_net: listenArray_net(handle); break;
    case UHDM_OBJECT_TYPE::uhdmarray_typespec: listenArray_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmarray_var: listenArray_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmassert_stmt: listenAssert_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmassign_stmt: listenAssign_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmassignment: listenAssignment(handle); break;
    case UHDM_OBJECT_TYPE::uhdmassume: listenAssume(handle); break;
    case UHDM_OBJECT_TYPE::uhdmattribute: listenAttribute(handle); break;
    case UHDM_OBJECT_TYPE::uhdmbegin: listenBegin(handle); break;
    case UHDM_OBJECT_TYPE::uhdmbit_select: listenBit_select(handle); break;
    case UHDM_OBJECT_TYPE::uhdmbit_typespec: listenBit_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmbit_var: listenBit_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmbreak_stmt: listenBreak_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmbyte_typespec: listenByte_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmbyte_var: listenByte_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmcase_item: listenCase_item(handle); break;
    case UHDM_OBJECT_TYPE::uhdmcase_property: listenCase_property(handle); break;
    case UHDM_OBJECT_TYPE::uhdmcase_property_item: listenCase_property_item(handle); break;
    case UHDM_OBJECT_TYPE::uhdmcase_stmt: listenCase_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmchandle_typespec: listenChandle_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmchandle_var: listenChandle_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmchecker_decl: listenChecker_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdmchecker_inst: listenChecker_inst(handle); break;
    case UHDM_OBJECT_TYPE::uhdmchecker_inst_port: listenChecker_inst_port(handle); break;
    case UHDM_OBJECT_TYPE::uhdmchecker_port: listenChecker_port(handle); break;
    case UHDM_OBJECT_TYPE::uhdmclass_defn: listenClass_defn(handle); break;
    case UHDM_OBJECT_TYPE::uhdmclass_obj: listenClass_obj(handle); break;
    case UHDM_OBJECT_TYPE::uhdmclass_typespec: listenClass_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmclass_var: listenClass_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmclocked_property: listenClocked_property(handle); break;
    case UHDM_OBJECT_TYPE::uhdmclocked_seq: listenClocked_seq(handle); break;
    case UHDM_OBJECT_TYPE::uhdmclocking_block: listenClocking_block(handle); break;
    case UHDM_OBJECT_TYPE::uhdmclocking_io_decl: listenClocking_io_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdmconstant: listenConstant(handle); break;
    case UHDM_OBJECT_TYPE::uhdmconstr_foreach: listenConstr_foreach(handle); break;
    case UHDM_OBJECT_TYPE::uhdmconstr_if: listenConstr_if(handle); break;
    case UHDM_OBJECT_TYPE::uhdmconstr_if_else: listenConstr_if_else(handle); break;
    case UHDM_OBJECT_TYPE::uhdmconstraint: listenConstraint(handle); break;
    case UHDM_OBJECT_TYPE::uhdmconstraint_ordering: listenConstraint_ordering(handle); break;
    case UHDM_OBJECT_TYPE::uhdmcont_assign: listenCont_assign(handle); break;
    case UHDM_OBJECT_TYPE::uhdmcont_assign_bit: listenCont_assign_bit(handle); break;
    case UHDM_OBJECT_TYPE::uhdmcontinue_stmt: listenContinue_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmcover: listenCover(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdeassign: listenDeassign(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdef_param: listenDef_param(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdelay_control: listenDelay_control(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdelay_term: listenDelay_term(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdesign: listenDesign(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdisable: listenDisable(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdisable_fork: listenDisable_fork(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdist_item: listenDist_item(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdistribution: listenDistribution(handle); break;
    case UHDM_OBJECT_TYPE::uhdmdo_while: listenDo_while(handle); break;
    case UHDM_OBJECT_TYPE::uhdmenum_const: listenEnum_const(handle); break;
    case UHDM_OBJECT_TYPE::uhdmenum_net: listenEnum_net(handle); break;
    case UHDM_OBJECT_TYPE::uhdmenum_typespec: listenEnum_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmenum_var: listenEnum_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmevent_control: listenEvent_control(handle); break;
    case UHDM_OBJECT_TYPE::uhdmevent_stmt: listenEvent_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmevent_typespec: listenEvent_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmexpect_stmt: listenExpect_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmextends: listenExtends(handle); break;
    case UHDM_OBJECT_TYPE::uhdmfinal_stmt: listenFinal_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmfor_stmt: listenFor_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmforce: listenForce(handle); break;
    case UHDM_OBJECT_TYPE::uhdmforeach_stmt: listenForeach_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmforever_stmt: listenForever_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmfork_stmt: listenFork_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmfunc_call: listenFunc_call(handle); break;
    case UHDM_OBJECT_TYPE::uhdmfunction: listenFunction(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgate: listenGate(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgate_array: listenGate_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgen_case: listenGen_case(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgen_for: listenGen_for(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgen_if: listenGen_if(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgen_if_else: listenGen_if_else(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgen_region: listenGen_region(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgen_scope: listenGen_scope(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgen_scope_array: listenGen_scope_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdmgen_var: listenGen_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmhier_path: listenHier_path(handle); break;
    case UHDM_OBJECT_TYPE::uhdmif_else: listenIf_else(handle); break;
    case UHDM_OBJECT_TYPE::uhdmif_stmt: listenIf_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmimmediate_assert: listenImmediate_assert(handle); break;
    case UHDM_OBJECT_TYPE::uhdmimmediate_assume: listenImmediate_assume(handle); break;
    case UHDM_OBJECT_TYPE::uhdmimmediate_cover: listenImmediate_cover(handle); break;
    case UHDM_OBJECT_TYPE::uhdmimplication: listenImplication(handle); break;
    case UHDM_OBJECT_TYPE::uhdmimport_typespec: listenImport_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdminclude_file_info: listenInclude_file_info(handle); break;
    case UHDM_OBJECT_TYPE::uhdmindexed_part_select: listenIndexed_part_select(handle); break;
    case UHDM_OBJECT_TYPE::uhdminitial: listenInitial(handle); break;
    case UHDM_OBJECT_TYPE::uhdmint_typespec: listenInt_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmint_var: listenInt_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdminteger_net: listenInteger_net(handle); break;
    case UHDM_OBJECT_TYPE::uhdminteger_typespec: listenInteger_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdminteger_var: listenInteger_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdminterface_array: listenInterface_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdminterface_inst: listenInterface_inst(handle); break;
    case UHDM_OBJECT_TYPE::uhdminterface_tf_decl: listenInterface_tf_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdminterface_typespec: listenInterface_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmio_decl: listenIo_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdmlet_decl: listenLet_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdmlet_expr: listenLet_expr(handle); break;
    case UHDM_OBJECT_TYPE::uhdmlogic_net: listenLogic_net(handle); break;
    case UHDM_OBJECT_TYPE::uhdmlogic_typespec: listenLogic_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmlogic_var: listenLogic_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmlong_int_typespec: listenLong_int_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmlong_int_var: listenLong_int_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmmethod_func_call: listenMethod_func_call(handle); break;
    case UHDM_OBJECT_TYPE::uhdmmethod_task_call: listenMethod_task_call(handle); break;
    case UHDM_OBJECT_TYPE::uhdmmod_path: listenMod_path(handle); break;
    case UHDM_OBJECT_TYPE::uhdmmodport: listenModport(handle); break;
    case UHDM_OBJECT_TYPE::uhdmmodule_array: listenModule_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdmmodule_inst: listenModule_inst(handle); break;
    case UHDM_OBJECT_TYPE::uhdmmodule_typespec: listenModule_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmmulticlock_sequence_expr: listenMulticlock_sequence_expr(handle); break;
    case UHDM_OBJECT_TYPE::uhdmnamed_begin: listenNamed_begin(handle); break;
    case UHDM_OBJECT_TYPE::uhdmnamed_event: listenNamed_event(handle); break;
    case UHDM_OBJECT_TYPE::uhdmnamed_event_array: listenNamed_event_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdmnamed_fork: listenNamed_fork(handle); break;
    case UHDM_OBJECT_TYPE::uhdmnet_bit: listenNet_bit(handle); break;
    case UHDM_OBJECT_TYPE::uhdmnull_stmt: listenNull_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmoperation: listenOperation(handle); break;
    case UHDM_OBJECT_TYPE::uhdmordered_wait: listenOrdered_wait(handle); break;
    case UHDM_OBJECT_TYPE::uhdmpackage: listenPackage(handle); break;
    case UHDM_OBJECT_TYPE::uhdmpacked_array_net: listenPacked_array_net(handle); break;
    case UHDM_OBJECT_TYPE::uhdmpacked_array_typespec: listenPacked_array_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmpacked_array_var: listenPacked_array_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmparam_assign: listenParam_assign(handle); break;
    case UHDM_OBJECT_TYPE::uhdmparameter: listenParameter(handle); break;
    case UHDM_OBJECT_TYPE::uhdmpart_select: listenPart_select(handle); break;
    case UHDM_OBJECT_TYPE::uhdmpath_term: listenPath_term(handle); break;
    case UHDM_OBJECT_TYPE::uhdmport: listenPort(handle); break;
    case UHDM_OBJECT_TYPE::uhdmport_bit: listenPort_bit(handle); break;
    case UHDM_OBJECT_TYPE::uhdmprim_term: listenPrim_term(handle); break;
    case UHDM_OBJECT_TYPE::uhdmprogram: listenProgram(handle); break;
    case UHDM_OBJECT_TYPE::uhdmprogram_array: listenProgram_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdmprop_formal_decl: listenProp_formal_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdmproperty_decl: listenProperty_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdmproperty_inst: listenProperty_inst(handle); break;
    case UHDM_OBJECT_TYPE::uhdmproperty_spec: listenProperty_spec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmproperty_typespec: listenProperty_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmrange: listenRange(handle); break;
    case UHDM_OBJECT_TYPE::uhdmreal_typespec: listenReal_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmreal_var: listenReal_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmref_module: listenRef_module(handle); break;
    case UHDM_OBJECT_TYPE::uhdmref_obj: listenRef_obj(handle); break;
    case UHDM_OBJECT_TYPE::uhdmref_typespec: listenRef_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmref_var: listenRef_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmreg: listenReg(handle); break;
    case UHDM_OBJECT_TYPE::uhdmreg_array: listenReg_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdmrelease: listenRelease(handle); break;
    case UHDM_OBJECT_TYPE::uhdmrepeat: listenRepeat(handle); break;
    case UHDM_OBJECT_TYPE::uhdmrepeat_control: listenRepeat_control(handle); break;
    case UHDM_OBJECT_TYPE::uhdmrestrict: listenRestrict(handle); break;
    case UHDM_OBJECT_TYPE::uhdmreturn_stmt: listenReturn_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmseq_formal_decl: listenSeq_formal_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdmsequence_decl: listenSequence_decl(handle); break;
    case UHDM_OBJECT_TYPE::uhdmsequence_inst: listenSequence_inst(handle); break;
    case UHDM_OBJECT_TYPE::uhdmsequence_typespec: listenSequence_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmshort_int_typespec: listenShort_int_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmshort_int_var: listenShort_int_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmshort_real_typespec: listenShort_real_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmshort_real_var: listenShort_real_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmsoft_disable: listenSoft_disable(handle); break;
    case UHDM_OBJECT_TYPE::uhdmspec_param: listenSpec_param(handle); break;
    case UHDM_OBJECT_TYPE::uhdmstring_typespec: listenString_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmstring_var: listenString_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmstruct_net: listenStruct_net(handle); break;
    case UHDM_OBJECT_TYPE::uhdmstruct_pattern: listenStruct_pattern(handle); break;
    case UHDM_OBJECT_TYPE::uhdmstruct_typespec: listenStruct_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmstruct_var: listenStruct_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmswitch_array: listenSwitch_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdmswitch_tran: listenSwitch_tran(handle); break;
    case UHDM_OBJECT_TYPE::uhdmsys_func_call: listenSys_func_call(handle); break;
    case UHDM_OBJECT_TYPE::uhdmsys_task_call: listenSys_task_call(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtable_entry: listenTable_entry(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtagged_pattern: listenTagged_pattern(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtask: listenTask(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtask_call: listenTask_call(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtchk: listenTchk(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtchk_term: listenTchk_term(handle); break;
    case UHDM_OBJECT_TYPE::uhdmthread_obj: listenThread_obj(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtime_net: listenTime_net(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtime_typespec: listenTime_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtime_var: listenTime_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtype_parameter: listenType_parameter(handle); break;
    case UHDM_OBJECT_TYPE::uhdmtypespec_member: listenTypespec_member(handle); break;
    case UHDM_OBJECT_TYPE::uhdmudp: listenUdp(handle); break;
    case UHDM_OBJECT_TYPE::uhdmudp_array: listenUdp_array(handle); break;
    case UHDM_OBJECT_TYPE::uhdmudp_defn: listenUdp_defn(handle); break;
    case UHDM_OBJECT_TYPE::uhdmunion_typespec: listenUnion_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmunion_var: listenUnion_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmunsupported_expr: listenUnsupported_expr(handle); break;
    case UHDM_OBJECT_TYPE::uhdmunsupported_stmt: listenUnsupported_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmunsupported_typespec: listenUnsupported_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmuser_systf: listenUser_systf(handle); break;
    case UHDM_OBJECT_TYPE::uhdmvar_bit: listenVar_bit(handle); break;
    case UHDM_OBJECT_TYPE::uhdmvar_select: listenVar_select(handle); break;
    case UHDM_OBJECT_TYPE::uhdmvirtual_interface_var: listenVirtual_interface_var(handle); break;
    case UHDM_OBJECT_TYPE::uhdmvoid_typespec: listenVoid_typespec(handle); break;
    case UHDM_OBJECT_TYPE::uhdmwait_fork: listenWait_fork(handle); break;
    case UHDM_OBJECT_TYPE::uhdmwait_stmt: listenWait_stmt(handle); break;
    case UHDM_OBJECT_TYPE::uhdmwhile_stmt: listenWhile_stmt(handle); break;
    default : break;
  }

  if (!revisiting) leaveAny(object, handle);
}

void VpiListener::listenDesigns(const std::vector<vpiHandle>& designs) {
  for (auto design_h : designs) {
    currentDesign_ = (design*) ((const uhdm_handle*)design_h)->object;
    listenAny(design_h);
  }
}
}  // namespace UHDM
