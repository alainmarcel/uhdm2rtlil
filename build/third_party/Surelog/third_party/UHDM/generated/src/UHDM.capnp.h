// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: UHDM.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1001000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b66216fa2045535b);
CAPNP_DECLARE_SCHEMA(b2bce98887da19bc);
CAPNP_DECLARE_SCHEMA(affcd1e205b3f7ae);
CAPNP_DECLARE_SCHEMA(f9dc2ad742910c71);
CAPNP_DECLARE_SCHEMA(f57d5f50009467b5);
CAPNP_DECLARE_SCHEMA(ab5b03f8c71793f1);
CAPNP_DECLARE_SCHEMA(d3dbef0e8fd1d99b);
CAPNP_DECLARE_SCHEMA(ad61efdc9e74b134);
CAPNP_DECLARE_SCHEMA(b319fe1259f029dc);
CAPNP_DECLARE_SCHEMA(b48109897fcb5cc9);
CAPNP_DECLARE_SCHEMA(f57aff14202bfde9);
CAPNP_DECLARE_SCHEMA(8fc348aa9d9585c3);
CAPNP_DECLARE_SCHEMA(d485855f0f73c00e);
CAPNP_DECLARE_SCHEMA(8046dc0d95360b00);
CAPNP_DECLARE_SCHEMA(89313804b333a0fa);
CAPNP_DECLARE_SCHEMA(805dbe17d617544b);
CAPNP_DECLARE_SCHEMA(809d8aea310cd2d3);
CAPNP_DECLARE_SCHEMA(e4d908a186cb8c2b);
CAPNP_DECLARE_SCHEMA(b61d98ea52110eb2);
CAPNP_DECLARE_SCHEMA(ad9368ac08dc00e8);
CAPNP_DECLARE_SCHEMA(f701a1c7bc57f1d0);
CAPNP_DECLARE_SCHEMA(de0b57cfcd659c53);
CAPNP_DECLARE_SCHEMA(aef08295e1fbc059);
CAPNP_DECLARE_SCHEMA(ac4be3d33973bf92);
CAPNP_DECLARE_SCHEMA(99c12b9fd642cf97);
CAPNP_DECLARE_SCHEMA(af111d280b3539f4);
CAPNP_DECLARE_SCHEMA(b5b3bc20f7592148);
CAPNP_DECLARE_SCHEMA(db7d67202806d785);
CAPNP_DECLARE_SCHEMA(c24f7eee2a475fd8);
CAPNP_DECLARE_SCHEMA(c8aa2d9009a6d45a);
CAPNP_DECLARE_SCHEMA(852d10a522d7a30e);
CAPNP_DECLARE_SCHEMA(8b29073a358bccb9);
CAPNP_DECLARE_SCHEMA(8a1bf7c54e355066);
CAPNP_DECLARE_SCHEMA(b74eb954f5e1731c);
CAPNP_DECLARE_SCHEMA(eae9ea75ae92bfeb);
CAPNP_DECLARE_SCHEMA(822788108a7ec670);
CAPNP_DECLARE_SCHEMA(eee0236cbbc75bb9);
CAPNP_DECLARE_SCHEMA(eafef2a592139d69);
CAPNP_DECLARE_SCHEMA(b42af90a8c899e68);
CAPNP_DECLARE_SCHEMA(c2b68ed402c9d631);
CAPNP_DECLARE_SCHEMA(ede2ad1cfb1b1a41);
CAPNP_DECLARE_SCHEMA(827f6fc02f56ece7);
CAPNP_DECLARE_SCHEMA(f73a2cf5f310a385);
CAPNP_DECLARE_SCHEMA(ad53bbe33dc6b3a9);
CAPNP_DECLARE_SCHEMA(bb12e2d5193456f5);
CAPNP_DECLARE_SCHEMA(b338c58dbab2268d);
CAPNP_DECLARE_SCHEMA(f3de053be7078813);
CAPNP_DECLARE_SCHEMA(fa8dc6cb525b350d);
CAPNP_DECLARE_SCHEMA(8bbb58bf58277e5f);
CAPNP_DECLARE_SCHEMA(d0eb9da13490ee38);
CAPNP_DECLARE_SCHEMA(c3b79303fb11be15);
CAPNP_DECLARE_SCHEMA(84e9565b0488374a);
CAPNP_DECLARE_SCHEMA(e6127561d1faa336);
CAPNP_DECLARE_SCHEMA(d5653095fbe268af);
CAPNP_DECLARE_SCHEMA(925018d8e829df52);
CAPNP_DECLARE_SCHEMA(8a3df10bd99cfd21);
CAPNP_DECLARE_SCHEMA(c819c6977f2d6bc3);
CAPNP_DECLARE_SCHEMA(e56cd4e37901ac2e);
CAPNP_DECLARE_SCHEMA(f2d0481ad9ac65b1);
CAPNP_DECLARE_SCHEMA(ba32635521b52917);
CAPNP_DECLARE_SCHEMA(8c30fdfc1daf7089);
CAPNP_DECLARE_SCHEMA(fa09444f1461256c);
CAPNP_DECLARE_SCHEMA(9018c0c2bb1610f6);
CAPNP_DECLARE_SCHEMA(cb2ecc4e6f8f1692);
CAPNP_DECLARE_SCHEMA(c955b0de03eee29d);
CAPNP_DECLARE_SCHEMA(8ab3772fb6847003);
CAPNP_DECLARE_SCHEMA(ec158bd3ad24a2b4);
CAPNP_DECLARE_SCHEMA(acaf7603dc655372);
CAPNP_DECLARE_SCHEMA(af381adee02bc0fe);
CAPNP_DECLARE_SCHEMA(a4c84ac8ec368d0d);
CAPNP_DECLARE_SCHEMA(a791032ce00203ca);
CAPNP_DECLARE_SCHEMA(e7c15b813d9d8e36);
CAPNP_DECLARE_SCHEMA(bf3625854bb9fcd5);
CAPNP_DECLARE_SCHEMA(a96500bf50de815c);
CAPNP_DECLARE_SCHEMA(d5e4bb93a5e025ec);
CAPNP_DECLARE_SCHEMA(a2dbba0dab1f6d66);
CAPNP_DECLARE_SCHEMA(91821aa3a1d4f53b);
CAPNP_DECLARE_SCHEMA(89c39d3b1f99843f);
CAPNP_DECLARE_SCHEMA(9ffe71ce5021d16e);
CAPNP_DECLARE_SCHEMA(dd0cf12704cf4ddb);
CAPNP_DECLARE_SCHEMA(f3a76dcc8708b0d6);
CAPNP_DECLARE_SCHEMA(c3b3a12907f01698);
CAPNP_DECLARE_SCHEMA(b8f78b9bbf575136);
CAPNP_DECLARE_SCHEMA(9a56f7b93f159d0f);
CAPNP_DECLARE_SCHEMA(db6f2ebada6abdd3);
CAPNP_DECLARE_SCHEMA(a843a8c532c859d3);
CAPNP_DECLARE_SCHEMA(98c57e00750476bc);
CAPNP_DECLARE_SCHEMA(fd0cc911bfaa1297);
CAPNP_DECLARE_SCHEMA(88e90ea0d244024c);
CAPNP_DECLARE_SCHEMA(f370b19886ac58f7);
CAPNP_DECLARE_SCHEMA(80c87b0db4214095);
CAPNP_DECLARE_SCHEMA(bd24af87aea8d6e2);
CAPNP_DECLARE_SCHEMA(bae41d7a97173b9d);
CAPNP_DECLARE_SCHEMA(9b8d55ddb3b5c214);
CAPNP_DECLARE_SCHEMA(f62f0e3c174a4e2d);
CAPNP_DECLARE_SCHEMA(fef49a928fa851ae);
CAPNP_DECLARE_SCHEMA(e1515ab6840a5ff9);
CAPNP_DECLARE_SCHEMA(8feaedaa957bb024);
CAPNP_DECLARE_SCHEMA(e1aa8c31614c905d);
CAPNP_DECLARE_SCHEMA(b90b3571647c7208);
CAPNP_DECLARE_SCHEMA(898f42e70d8b6003);
CAPNP_DECLARE_SCHEMA(bff7f934572426f6);
CAPNP_DECLARE_SCHEMA(963329980f0871d9);
CAPNP_DECLARE_SCHEMA(ad39ba88be676cb1);
CAPNP_DECLARE_SCHEMA(ddc8d02247e9b119);
CAPNP_DECLARE_SCHEMA(d6e2f6656a44b1c6);
CAPNP_DECLARE_SCHEMA(c4b3054c3aebb532);
CAPNP_DECLARE_SCHEMA(cbf93d1c1593b642);
CAPNP_DECLARE_SCHEMA(a52a1bfd03b57463);
CAPNP_DECLARE_SCHEMA(fe66ff5c2b1c4ded);
CAPNP_DECLARE_SCHEMA(d066ccd0e762bb93);
CAPNP_DECLARE_SCHEMA(b93be17ea929890d);
CAPNP_DECLARE_SCHEMA(cd00a616888dace8);
CAPNP_DECLARE_SCHEMA(c0dbf31c4fe84a9f);
CAPNP_DECLARE_SCHEMA(9c3705d8b6261fcf);
CAPNP_DECLARE_SCHEMA(9f591135f29e5892);
CAPNP_DECLARE_SCHEMA(d0a8f41c104ebf1c);
CAPNP_DECLARE_SCHEMA(b4eea6df5a3cb40c);
CAPNP_DECLARE_SCHEMA(a1c6ed39e4545f74);
CAPNP_DECLARE_SCHEMA(9227d3f15c9cc33f);
CAPNP_DECLARE_SCHEMA(e0fa450bdf81e42a);
CAPNP_DECLARE_SCHEMA(8e82690a2faeaca8);
CAPNP_DECLARE_SCHEMA(f71f31bc84a287dc);
CAPNP_DECLARE_SCHEMA(b7ecef5e3bbfcb63);
CAPNP_DECLARE_SCHEMA(a854dd754d5983a0);
CAPNP_DECLARE_SCHEMA(9f77ad6f8093ff17);
CAPNP_DECLARE_SCHEMA(ca2c53a62aa79635);
CAPNP_DECLARE_SCHEMA(97c95f48cd97103f);
CAPNP_DECLARE_SCHEMA(90b8f386c51d1924);
CAPNP_DECLARE_SCHEMA(e9e9d55a2a76eb67);
CAPNP_DECLARE_SCHEMA(b0574b7e87c89580);
CAPNP_DECLARE_SCHEMA(f4c7c9090f7f65ff);
CAPNP_DECLARE_SCHEMA(dec7ca006033920c);
CAPNP_DECLARE_SCHEMA(d006bdb99f22bf6a);
CAPNP_DECLARE_SCHEMA(a6790c55e23dacd1);
CAPNP_DECLARE_SCHEMA(838f7452c487badf);
CAPNP_DECLARE_SCHEMA(f171f28f75e452e6);
CAPNP_DECLARE_SCHEMA(cfa270b7ddc80a04);
CAPNP_DECLARE_SCHEMA(e18d8bad5872faab);
CAPNP_DECLARE_SCHEMA(ba539a52fdf9f899);
CAPNP_DECLARE_SCHEMA(b56a367f43dc01de);
CAPNP_DECLARE_SCHEMA(a0c61698af16b048);
CAPNP_DECLARE_SCHEMA(86cab2b3c72285d7);
CAPNP_DECLARE_SCHEMA(e5223805a4f89b66);
CAPNP_DECLARE_SCHEMA(e63ecf2ed249ea72);
CAPNP_DECLARE_SCHEMA(b0c8c9d578e9c276);
CAPNP_DECLARE_SCHEMA(ef2cfce5497fccde);
CAPNP_DECLARE_SCHEMA(9aa2ba2db6cf5907);
CAPNP_DECLARE_SCHEMA(a8ff00bbdfb9e5a8);
CAPNP_DECLARE_SCHEMA(ed57ece50fb80495);
CAPNP_DECLARE_SCHEMA(d96f92de79833b02);
CAPNP_DECLARE_SCHEMA(ec0e30176f5c8354);
CAPNP_DECLARE_SCHEMA(d599315921611cd1);
CAPNP_DECLARE_SCHEMA(ce960fe951191a58);
CAPNP_DECLARE_SCHEMA(82df2d256a273878);
CAPNP_DECLARE_SCHEMA(9ec6980efda11513);
CAPNP_DECLARE_SCHEMA(a8be5007c486107a);
CAPNP_DECLARE_SCHEMA(9ad82b4dfaa96b95);
CAPNP_DECLARE_SCHEMA(eafba402a7fa6ef8);
CAPNP_DECLARE_SCHEMA(9bb658d5d80e9b6a);
CAPNP_DECLARE_SCHEMA(8ba4951f126c7680);
CAPNP_DECLARE_SCHEMA(aa15b00d449af215);
CAPNP_DECLARE_SCHEMA(a991beecec5a8d2a);
CAPNP_DECLARE_SCHEMA(bc1f7cc00d53f7ff);
CAPNP_DECLARE_SCHEMA(94af193d0406ad73);
CAPNP_DECLARE_SCHEMA(91c045e5ff30dd47);
CAPNP_DECLARE_SCHEMA(8f1c0a47c6ecb7dd);
CAPNP_DECLARE_SCHEMA(8a6adc7cd95a0dfb);
CAPNP_DECLARE_SCHEMA(fadf6fefcc8670a1);
CAPNP_DECLARE_SCHEMA(9f755d38de26a019);
CAPNP_DECLARE_SCHEMA(bb8c12feb2e2fb5b);
CAPNP_DECLARE_SCHEMA(d4015f181fc75347);
CAPNP_DECLARE_SCHEMA(ba336cb57cb68222);
CAPNP_DECLARE_SCHEMA(c12feda1e7935b61);
CAPNP_DECLARE_SCHEMA(c88a3249d02bb59c);
CAPNP_DECLARE_SCHEMA(ee74831a4343c087);
CAPNP_DECLARE_SCHEMA(fc56f9c47732b0c4);
CAPNP_DECLARE_SCHEMA(b8a08b2787e1997f);
CAPNP_DECLARE_SCHEMA(dfd588e26996d1a6);
CAPNP_DECLARE_SCHEMA(aa551ae1b1deb507);
CAPNP_DECLARE_SCHEMA(db4b2784eea7b39d);
CAPNP_DECLARE_SCHEMA(b1fc7f306a4df900);
CAPNP_DECLARE_SCHEMA(97ac3ca10011ee2a);
CAPNP_DECLARE_SCHEMA(ad1d4984c4c6e1ed);
CAPNP_DECLARE_SCHEMA(c9bbb73f28b7b1b9);
CAPNP_DECLARE_SCHEMA(ad8acc11c586386c);
CAPNP_DECLARE_SCHEMA(bb50cff86bece78a);
CAPNP_DECLARE_SCHEMA(d274bd5c179c9a6d);
CAPNP_DECLARE_SCHEMA(98e5c246ffe536a2);
CAPNP_DECLARE_SCHEMA(f48cebeb52ceb845);
CAPNP_DECLARE_SCHEMA(ceb02c06bf6bc0dc);
CAPNP_DECLARE_SCHEMA(a39383bb0ea01a85);
CAPNP_DECLARE_SCHEMA(93615dd8e59081be);
CAPNP_DECLARE_SCHEMA(eb95592c1ebce197);
CAPNP_DECLARE_SCHEMA(d527794204a0bfac);
CAPNP_DECLARE_SCHEMA(d3cf99bc6bc3e88e);
CAPNP_DECLARE_SCHEMA(e3ed1db0d929154e);
CAPNP_DECLARE_SCHEMA(ef33093b20c9310f);
CAPNP_DECLARE_SCHEMA(9f5bd4d1e5717146);
CAPNP_DECLARE_SCHEMA(ddfdaaf13eef7867);
CAPNP_DECLARE_SCHEMA(a09e390420575438);
CAPNP_DECLARE_SCHEMA(de50d1a719209988);
CAPNP_DECLARE_SCHEMA(ea5fbf83d6d8ec8a);
CAPNP_DECLARE_SCHEMA(926c541142caadae);
CAPNP_DECLARE_SCHEMA(801b873b35e25229);
CAPNP_DECLARE_SCHEMA(f15c4fe4296c1aae);
CAPNP_DECLARE_SCHEMA(e009406661437826);
CAPNP_DECLARE_SCHEMA(bdbdc981e9848a7a);
CAPNP_DECLARE_SCHEMA(b7e653069c496409);
CAPNP_DECLARE_SCHEMA(d4c0e1975a5f2ce9);
CAPNP_DECLARE_SCHEMA(ac31527d873cec03);
CAPNP_DECLARE_SCHEMA(95a2feee4a26d988);
CAPNP_DECLARE_SCHEMA(8ca5d26a3439ff7f);
CAPNP_DECLARE_SCHEMA(e5aa47de06eb5c85);
CAPNP_DECLARE_SCHEMA(df0fb2d8f0d01723);
CAPNP_DECLARE_SCHEMA(a9e6a238cd57bb69);
CAPNP_DECLARE_SCHEMA(8bf95179db24f149);
CAPNP_DECLARE_SCHEMA(ab4825e85bee96bf);
CAPNP_DECLARE_SCHEMA(b5c25e1286667e56);
CAPNP_DECLARE_SCHEMA(db802a95c8323dc7);
CAPNP_DECLARE_SCHEMA(9fc25eab47114414);
CAPNP_DECLARE_SCHEMA(86086f8cd3c871da);
CAPNP_DECLARE_SCHEMA(ffbd40be505d83a5);
CAPNP_DECLARE_SCHEMA(8b11d2286d741045);
CAPNP_DECLARE_SCHEMA(8e8d00827061a102);
CAPNP_DECLARE_SCHEMA(f3f1a55b539b9822);
CAPNP_DECLARE_SCHEMA(efd743602e543307);
CAPNP_DECLARE_SCHEMA(bc007888bd4d4f17);
CAPNP_DECLARE_SCHEMA(a61f8a5e21839e9c);
CAPNP_DECLARE_SCHEMA(a0c3e5e3d89cfe48);
CAPNP_DECLARE_SCHEMA(e25ade3f91af4944);
CAPNP_DECLARE_SCHEMA(ab977deed7384725);
CAPNP_DECLARE_SCHEMA(a2e4ec591fe8145f);
CAPNP_DECLARE_SCHEMA(bcba8efb52090304);

}  // namespace schemas
}  // namespace capnp


struct ObjIndexType {
  ObjIndexType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b66216fa2045535b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UhdmRoot {
  UhdmRoot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2bce98887da19bc, 1, 210)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Any {
  Any() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(affcd1e205b3f7ae, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Attribute {
  Attribute() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f9dc2ad742910c71, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Virtualinterfacevar {
  Virtualinterfacevar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f57d5f50009467b5, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Letdecl {
  Letdecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab5b03f8c71793f1, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Concurrentassertions {
  Concurrentassertions() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3dbef0e8fd1d99b, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Processstmt {
  Processstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad61efdc9e74b134, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Always {
  Always() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b319fe1259f029dc, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Finalstmt {
  Finalstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b48109897fcb5cc9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Initial {
  Initial() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f57aff14202bfde9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Atomicstmt {
  Atomicstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8fc348aa9d9585c3, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Delaycontrol {
  Delaycontrol() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d485855f0f73c00e, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Delayterm {
  Delayterm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8046dc0d95360b00, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Eventcontrol {
  Eventcontrol() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89313804b333a0fa, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Repeatcontrol {
  Repeatcontrol() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(805dbe17d617544b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Scope {
  Scope() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(809d8aea310cd2d3, 2, 18)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Begin {
  Begin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4d908a186cb8c2b, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Namedbegin {
  Namedbegin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b61d98ea52110eb2, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Namedfork {
  Namedfork() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad9368ac08dc00e8, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Forkstmt {
  Forkstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f701a1c7bc57f1d0, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Forstmt {
  Forstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de0b57cfcd659c53, 1, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Ifstmt {
  Ifstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aef08295e1fbc059, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Eventstmt {
  Eventstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac4be3d33973bf92, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Threadobj {
  Threadobj() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(99c12b9fd642cf97, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Foreverstmt {
  Foreverstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af111d280b3539f4, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Waits {
  Waits() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5b3bc20f7592148, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Waitstmt {
  Waitstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db7d67202806d785, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Waitfork {
  Waitfork() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c24f7eee2a475fd8, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Orderedwait {
  Orderedwait() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8aa2d9009a6d45a, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Disables {
  Disables() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(852d10a522d7a30e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Disable {
  Disable() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b29073a358bccb9, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Disablefork {
  Disablefork() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a1bf7c54e355066, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Continuestmt {
  Continuestmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b74eb954f5e1731c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Breakstmt {
  Breakstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eae9ea75ae92bfeb, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Returnstmt {
  Returnstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(822788108a7ec670, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Whilestmt {
  Whilestmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eee0236cbbc75bb9, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Repeat {
  Repeat() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eafef2a592139d69, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Dowhile {
  Dowhile() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b42af90a8c899e68, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Ifelse {
  Ifelse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2b68ed402c9d631, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Casestmt {
  Casestmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ede2ad1cfb1b1a41, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Force {
  Force() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(827f6fc02f56ece7, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Assignstmt {
  Assignstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f73a2cf5f310a385, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Deassign {
  Deassign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad53bbe33dc6b3a9, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Release {
  Release() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb12e2d5193456f5, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Nullstmt {
  Nullstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b338c58dbab2268d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Expectstmt {
  Expectstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3de053be7078813, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Foreachstmt {
  Foreachstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa8dc6cb525b350d, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genscope {
  Genscope() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8bbb58bf58277e5f, 1, 21)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genvar {
  Genvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0eb9da13490ee38, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genscopearray {
  Genscopearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3b79303fb11be15, 4, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Assertstmt {
  Assertstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84e9565b0488374a, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Cover {
  Cover() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e6127561d1faa336, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Assume {
  Assume() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5653095fbe268af, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Restrict {
  Restrict() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(925018d8e829df52, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Immediateassert {
  Immediateassert() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a3df10bd99cfd21, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Immediateassume {
  Immediateassume() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c819c6977f2d6bc3, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Immediatecover {
  Immediatecover() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e56cd4e37901ac2e, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Expr {
  Expr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2d0481ad9ac65b1, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Caseitem {
  Caseitem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba32635521b52917, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Assignment {
  Assignment() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c30fdfc1daf7089, 5, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Anypattern {
  Anypattern() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa09444f1461256c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Taggedpattern {
  Taggedpattern() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9018c0c2bb1610f6, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Structpattern {
  Structpattern() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb2ecc4e6f8f1692, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Unsupportedexpr {
  Unsupportedexpr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c955b0de03eee29d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Unsupportedstmt {
  Unsupportedstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ab3772fb6847003, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Includefileinfo {
  Includefileinfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec158bd3ad24a2b4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Sequenceinst {
  Sequenceinst() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(acaf7603dc655372, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Seqformaldecl {
  Seqformaldecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af381adee02bc0fe, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Sequencedecl {
  Sequencedecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4c84ac8ec368d0d, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Propformaldecl {
  Propformaldecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a791032ce00203ca, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Propertyinst {
  Propertyinst() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7c15b813d9d8e36, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Propertyspec {
  Propertyspec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf3625854bb9fcd5, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Propertydecl {
  Propertydecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a96500bf50de815c, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Clockedproperty {
  Clockedproperty() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5e4bb93a5e025ec, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Casepropertyitem {
  Casepropertyitem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2dbba0dab1f6d66, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Caseproperty {
  Caseproperty() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91821aa3a1d4f53b, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Multiclocksequenceexpr {
  Multiclocksequenceexpr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89c39d3b1f99843f, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Clockedseq {
  Clockedseq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ffe71ce5021d16e, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Simpleexpr {
  Simpleexpr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dd0cf12704cf4ddb, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Constant {
  Constant() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3a76dcc8708b0d6, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Letexpr {
  Letexpr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3b3a12907f01698, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Operation {
  Operation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8f78b9bbf575136, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Refobj {
  Refobj() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a56f7b93f159d0f, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Refmodule {
  Refmodule() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db6f2ebada6abdd3, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Reftypespec {
  Reftypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a843a8c532c859d3, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Partselect {
  Partselect() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98c57e00750476bc, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Indexedpartselect {
  Indexedpartselect() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd0cc911bfaa1297, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Varselect {
  Varselect() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88e90ea0d244024c, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bitselect {
  Bitselect() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f370b19886ac58f7, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Variables {
  Variables() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80c87b0db4214095, 9, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Hierpath {
  Hierpath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd24af87aea8d6e2, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Refvar {
  Refvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bae41d7a97173b9d, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Shortrealvar {
  Shortrealvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b8d55ddb3b5c214, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Realvar {
  Realvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f62f0e3c174a4e2d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bytevar {
  Bytevar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fef49a928fa851ae, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Shortintvar {
  Shortintvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1515ab6840a5ff9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Intvar {
  Intvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8feaedaa957bb024, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Longintvar {
  Longintvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1aa8c31614c905d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Integervar {
  Integervar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b90b3571647c7208, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Timevar {
  Timevar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(898f42e70d8b6003, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Arrayvar {
  Arrayvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bff7f934572426f6, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Arrayexpr {
  Arrayexpr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(963329980f0871d9, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Regarray {
  Regarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad39ba88be676cb1, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Reg {
  Reg() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ddc8d02247e9b119, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Packedarrayvar {
  Packedarrayvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d6e2f6656a44b1c6, 1, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bitvar {
  Bitvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4b3054c3aebb532, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Logicvar {
  Logicvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbf93d1c1593b642, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Structvar {
  Structvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a52a1bfd03b57463, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Unionvar {
  Unionvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe66ff5c2b1c4ded, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Enumvar {
  Enumvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d066ccd0e762bb93, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Stringvar {
  Stringvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b93be17ea929890d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Chandlevar {
  Chandlevar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd00a616888dace8, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Varbit {
  Varbit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0dbf31c4fe84a9f, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Taskfunc {
  Taskfunc() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c3705d8b6261fcf, 6, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Task {
  Task() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f591135f29e5892, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Function {
  Function() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0a8f41c104ebf1c, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Modport {
  Modport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4eea6df5a3cb40c, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Interfacetfdecl {
  Interfacetfdecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1c6ed39e4545f74, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Contassign {
  Contassign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9227d3f15c9cc33f, 4, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Contassignbit {
  Contassignbit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0fa450bdf81e42a, 5, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Ports {
  Ports() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e82690a2faeaca8, 8, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Port {
  Port() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f71f31bc84a287dc, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Portbit {
  Portbit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b7ecef5e3bbfcb63, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Checkerport {
  Checkerport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a854dd754d5983a0, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Checkerinstport {
  Checkerinstport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f77ad6f8093ff17, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Primitive {
  Primitive() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca2c53a62aa79635, 9, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Gate {
  Gate() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97c95f48cd97103f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Switchtran {
  Switchtran() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90b8f386c51d1924, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Udp {
  Udp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9e9d55a2a76eb67, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Modpath {
  Modpath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0574b7e87c89580, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Tchk {
  Tchk() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4c7c9090f7f65ff, 6, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Range {
  Range() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dec7ca006033920c, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Udpdefn {
  Udpdefn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d006bdb99f22bf6a, 5, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Tableentry {
  Tableentry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a6790c55e23dacd1, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Iodecl {
  Iodecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(838f7452c487badf, 4, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Aliasstmt {
  Aliasstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f171f28f75e452e6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Clockingblock {
  Clockingblock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfa270b7ddc80a04, 7, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Clockingiodecl {
  Clockingiodecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e18d8bad5872faab, 6, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Paramassign {
  Paramassign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba539a52fdf9f899, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Instancearray {
  Instancearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b56a367f43dc01de, 3, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Interfacearray {
  Interfacearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0c61698af16b048, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Programarray {
  Programarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86cab2b3c72285d7, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Modulearray {
  Modulearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5223805a4f89b66, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Primitivearray {
  Primitivearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e63ecf2ed249ea72, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Gatearray {
  Gatearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0c8c9d578e9c276, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Switcharray {
  Switcharray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef2cfce5497fccde, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Udparray {
  Udparray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9aa2ba2db6cf5907, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Typespec {
  Typespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8ff00bbdfb9e5a8, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Netdrivers {
  Netdrivers() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed57ece50fb80495, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Netloads {
  Netloads() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d96f92de79833b02, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Primterm {
  Primterm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec0e30176f5c8354, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Pathterm {
  Pathterm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d599315921611cd1, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Tchkterm {
  Tchkterm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce960fe951191a58, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Nets {
  Nets() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82df2d256a273878, 9, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Netbit {
  Netbit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ec6980efda11513, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Net {
  Net() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8be5007c486107a, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Structnet {
  Structnet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ad82b4dfaa96b95, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Enumnet {
  Enumnet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eafba402a7fa6ef8, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Integernet {
  Integernet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9bb658d5d80e9b6a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Timenet {
  Timenet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ba4951f126c7680, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Logicnet {
  Logicnet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa15b00d449af215, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Arraynet {
  Arraynet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a991beecec5a8d2a, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Packedarraynet {
  Packedarraynet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc1f7cc00d53f7ff, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Eventtypespec {
  Eventtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94af193d0406ad73, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Namedevent {
  Namedevent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91c045e5ff30dd47, 6, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Namedeventarray {
  Namedeventarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f1c0a47c6ecb7dd, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Parameter {
  Parameter() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a6adc7cd95a0dfb, 5, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Defparam {
  Defparam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fadf6fefcc8670a1, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Specparam {
  Specparam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f755d38de26a019, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Classtypespec {
  Classtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb8c12feb2e2fb5b, 4, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Extends {
  Extends() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4015f181fc75347, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Classdefn {
  Classdefn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba336cb57cb68222, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Classobj {
  Classobj() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c12feda1e7935b61, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Classvar {
  Classvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c88a3249d02bb59c, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Instance {
  Instance() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee74831a4343c087, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Interfaceinst {
  Interfaceinst() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc56f9c47732b0c4, 4, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Program {
  Program() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8a08b2787e1997f, 3, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Package {
  Package() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfd588e26996d1a6, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Moduleinst {
  Moduleinst() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa551ae1b1deb507, 7, 22)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Checkerdecl {
  Checkerdecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db4b2784eea7b39d, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Checkerinst {
  Checkerinst() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1fc7f306a4df900, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Shortrealtypespec {
  Shortrealtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97ac3ca10011ee2a, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Realtypespec {
  Realtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad1d4984c4c6e1ed, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bytetypespec {
  Bytetypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c9bbb73f28b7b1b9, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Shortinttypespec {
  Shortinttypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad8acc11c586386c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Inttypespec {
  Inttypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb50cff86bece78a, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Longinttypespec {
  Longinttypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d274bd5c179c9a6d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Integertypespec {
  Integertypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98e5c246ffe536a2, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Timetypespec {
  Timetypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f48cebeb52ceb845, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Enumtypespec {
  Enumtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ceb02c06bf6bc0dc, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Stringtypespec {
  Stringtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a39383bb0ea01a85, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Chandletypespec {
  Chandletypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93615dd8e59081be, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Moduletypespec {
  Moduletypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb95592c1ebce197, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Structtypespec {
  Structtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d527794204a0bfac, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Uniontypespec {
  Uniontypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3cf99bc6bc3e88e, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Logictypespec {
  Logictypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3ed1db0d929154e, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Packedarraytypespec {
  Packedarraytypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef33093b20c9310f, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Arraytypespec {
  Arraytypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f5bd4d1e5717146, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voidtypespec {
  Voidtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ddfdaaf13eef7867, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Unsupportedtypespec {
  Unsupportedtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a09e390420575438, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Sequencetypespec {
  Sequencetypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de50d1a719209988, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Propertytypespec {
  Propertytypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea5fbf83d6d8ec8a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Interfacetypespec {
  Interfacetypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(926c541142caadae, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Typeparameter {
  Typeparameter() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(801b873b35e25229, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Typespecmember {
  Typespecmember() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f15c4fe4296c1aae, 7, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Enumconst {
  Enumconst() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e009406661437826, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bittypespec {
  Bittypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bdbdc981e9848a7a, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Tfcall {
  Tfcall() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b7e653069c496409, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Usersystf {
  Usersystf() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4c0e1975a5f2ce9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Sysfunccall {
  Sysfunccall() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac31527d873cec03, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Systaskcall {
  Systaskcall() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95a2feee4a26d988, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Methodfunccall {
  Methodfunccall() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ca5d26a3439ff7f, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Methodtaskcall {
  Methodtaskcall() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5aa47de06eb5c85, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Funccall {
  Funccall() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(df0fb2d8f0d01723, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Taskcall {
  Taskcall() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9e6a238cd57bb69, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Constraintexpr {
  Constraintexpr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8bf95179db24f149, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Constraintordering {
  Constraintordering() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab4825e85bee96bf, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Constraint {
  Constraint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5c25e1286667e56, 5, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Importtypespec {
  Importtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db802a95c8323dc7, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Distitem {
  Distitem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9fc25eab47114414, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Distribution {
  Distribution() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86086f8cd3c871da, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Implication {
  Implication() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ffbd40be505d83a5, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Constrif {
  Constrif() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b11d2286d741045, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Constrifelse {
  Constrifelse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e8d00827061a102, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Constrforeach {
  Constrforeach() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3f1a55b539b9822, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Softdisable {
  Softdisable() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(efd743602e543307, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genstmt {
  Genstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc007888bd4d4f17, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genif {
  Genif() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a61f8a5e21839e9c, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genifelse {
  Genifelse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0c3e5e3d89cfe48, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genfor {
  Genfor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e25ade3f91af4944, 1, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Gencase {
  Gencase() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab977deed7384725, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genregion {
  Genregion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2e4ec591fe8145f, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Design {
  Design() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcba8efb52090304, 2, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ObjIndexType::Reader {
public:
  typedef ObjIndexType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex() const;

  inline  ::uint32_t getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObjIndexType::Builder {
public:
  typedef ObjIndexType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex();
  inline void setIndex( ::uint64_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObjIndexType::Pipeline {
public:
  typedef ObjIndexType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UhdmRoot::Reader {
public:
  typedef UhdmRoot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVersion() const;

  inline  ::uint32_t getObjectId() const;

  inline bool hasDesigns() const;
  inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Reader getDesigns() const;

  inline bool hasSymbols() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getSymbols() const;

  inline bool hasFactoryAliasstmt() const;
  inline  ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryAliasstmt() const;

  inline bool hasFactoryAlways() const;
  inline  ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>::Reader getFactoryAlways() const;

  inline bool hasFactoryAnypattern() const;
  inline  ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>::Reader getFactoryAnypattern() const;

  inline bool hasFactoryArrayexpr() const;
  inline  ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>::Reader getFactoryArrayexpr() const;

  inline bool hasFactoryArraynet() const;
  inline  ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>::Reader getFactoryArraynet() const;

  inline bool hasFactoryArraytypespec() const;
  inline  ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryArraytypespec() const;

  inline bool hasFactoryArrayvar() const;
  inline  ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>::Reader getFactoryArrayvar() const;

  inline bool hasFactoryAssertstmt() const;
  inline  ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryAssertstmt() const;

  inline bool hasFactoryAssignment() const;
  inline  ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>::Reader getFactoryAssignment() const;

  inline bool hasFactoryAssignstmt() const;
  inline  ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryAssignstmt() const;

  inline bool hasFactoryAssume() const;
  inline  ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>::Reader getFactoryAssume() const;

  inline bool hasFactoryAttribute() const;
  inline  ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>::Reader getFactoryAttribute() const;

  inline bool hasFactoryBegin() const;
  inline  ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>::Reader getFactoryBegin() const;

  inline bool hasFactoryBitselect() const;
  inline  ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>::Reader getFactoryBitselect() const;

  inline bool hasFactoryBittypespec() const;
  inline  ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryBittypespec() const;

  inline bool hasFactoryBitvar() const;
  inline  ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>::Reader getFactoryBitvar() const;

  inline bool hasFactoryBreakstmt() const;
  inline  ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryBreakstmt() const;

  inline bool hasFactoryBytetypespec() const;
  inline  ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryBytetypespec() const;

  inline bool hasFactoryBytevar() const;
  inline  ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>::Reader getFactoryBytevar() const;

  inline bool hasFactoryCaseitem() const;
  inline  ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>::Reader getFactoryCaseitem() const;

  inline bool hasFactoryCaseproperty() const;
  inline  ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>::Reader getFactoryCaseproperty() const;

  inline bool hasFactoryCasepropertyitem() const;
  inline  ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>::Reader getFactoryCasepropertyitem() const;

  inline bool hasFactoryCasestmt() const;
  inline  ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>::Reader getFactoryCasestmt() const;

  inline bool hasFactoryChandletypespec() const;
  inline  ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryChandletypespec() const;

  inline bool hasFactoryChandlevar() const;
  inline  ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>::Reader getFactoryChandlevar() const;

  inline bool hasFactoryCheckerdecl() const;
  inline  ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>::Reader getFactoryCheckerdecl() const;

  inline bool hasFactoryCheckerinst() const;
  inline  ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>::Reader getFactoryCheckerinst() const;

  inline bool hasFactoryCheckerinstport() const;
  inline  ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>::Reader getFactoryCheckerinstport() const;

  inline bool hasFactoryCheckerport() const;
  inline  ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>::Reader getFactoryCheckerport() const;

  inline bool hasFactoryClassdefn() const;
  inline  ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>::Reader getFactoryClassdefn() const;

  inline bool hasFactoryClassobj() const;
  inline  ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>::Reader getFactoryClassobj() const;

  inline bool hasFactoryClasstypespec() const;
  inline  ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryClasstypespec() const;

  inline bool hasFactoryClassvar() const;
  inline  ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>::Reader getFactoryClassvar() const;

  inline bool hasFactoryClockedproperty() const;
  inline  ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>::Reader getFactoryClockedproperty() const;

  inline bool hasFactoryClockedseq() const;
  inline  ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>::Reader getFactoryClockedseq() const;

  inline bool hasFactoryClockingblock() const;
  inline  ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>::Reader getFactoryClockingblock() const;

  inline bool hasFactoryClockingiodecl() const;
  inline  ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>::Reader getFactoryClockingiodecl() const;

  inline bool hasFactoryConstant() const;
  inline  ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>::Reader getFactoryConstant() const;

  inline bool hasFactoryConstraint() const;
  inline  ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>::Reader getFactoryConstraint() const;

  inline bool hasFactoryConstraintordering() const;
  inline  ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>::Reader getFactoryConstraintordering() const;

  inline bool hasFactoryConstrforeach() const;
  inline  ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>::Reader getFactoryConstrforeach() const;

  inline bool hasFactoryConstrif() const;
  inline  ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>::Reader getFactoryConstrif() const;

  inline bool hasFactoryConstrifelse() const;
  inline  ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>::Reader getFactoryConstrifelse() const;

  inline bool hasFactoryContassign() const;
  inline  ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>::Reader getFactoryContassign() const;

  inline bool hasFactoryContassignbit() const;
  inline  ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>::Reader getFactoryContassignbit() const;

  inline bool hasFactoryContinuestmt() const;
  inline  ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>::Reader getFactoryContinuestmt() const;

  inline bool hasFactoryCover() const;
  inline  ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>::Reader getFactoryCover() const;

  inline bool hasFactoryDeassign() const;
  inline  ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>::Reader getFactoryDeassign() const;

  inline bool hasFactoryDefparam() const;
  inline  ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>::Reader getFactoryDefparam() const;

  inline bool hasFactoryDelaycontrol() const;
  inline  ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>::Reader getFactoryDelaycontrol() const;

  inline bool hasFactoryDelayterm() const;
  inline  ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>::Reader getFactoryDelayterm() const;

  inline bool hasFactoryDesign() const;
  inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Reader getFactoryDesign() const;

  inline bool hasFactoryDisable() const;
  inline  ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>::Reader getFactoryDisable() const;

  inline bool hasFactoryDisablefork() const;
  inline  ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>::Reader getFactoryDisablefork() const;

  inline bool hasFactoryDistitem() const;
  inline  ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>::Reader getFactoryDistitem() const;

  inline bool hasFactoryDistribution() const;
  inline  ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>::Reader getFactoryDistribution() const;

  inline bool hasFactoryDowhile() const;
  inline  ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>::Reader getFactoryDowhile() const;

  inline bool hasFactoryEnumconst() const;
  inline  ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>::Reader getFactoryEnumconst() const;

  inline bool hasFactoryEnumnet() const;
  inline  ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>::Reader getFactoryEnumnet() const;

  inline bool hasFactoryEnumtypespec() const;
  inline  ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryEnumtypespec() const;

  inline bool hasFactoryEnumvar() const;
  inline  ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>::Reader getFactoryEnumvar() const;

  inline bool hasFactoryEventcontrol() const;
  inline  ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>::Reader getFactoryEventcontrol() const;

  inline bool hasFactoryEventstmt() const;
  inline  ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryEventstmt() const;

  inline bool hasFactoryEventtypespec() const;
  inline  ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryEventtypespec() const;

  inline bool hasFactoryExpectstmt() const;
  inline  ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryExpectstmt() const;

  inline bool hasFactoryExtends() const;
  inline  ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>::Reader getFactoryExtends() const;

  inline bool hasFactoryFinalstmt() const;
  inline  ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryFinalstmt() const;

  inline bool hasFactoryForce() const;
  inline  ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>::Reader getFactoryForce() const;

  inline bool hasFactoryForeachstmt() const;
  inline  ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryForeachstmt() const;

  inline bool hasFactoryForeverstmt() const;
  inline  ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryForeverstmt() const;

  inline bool hasFactoryForkstmt() const;
  inline  ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryForkstmt() const;

  inline bool hasFactoryForstmt() const;
  inline  ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryForstmt() const;

  inline bool hasFactoryFunccall() const;
  inline  ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>::Reader getFactoryFunccall() const;

  inline bool hasFactoryFunction() const;
  inline  ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>::Reader getFactoryFunction() const;

  inline bool hasFactoryGate() const;
  inline  ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>::Reader getFactoryGate() const;

  inline bool hasFactoryGatearray() const;
  inline  ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>::Reader getFactoryGatearray() const;

  inline bool hasFactoryGencase() const;
  inline  ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>::Reader getFactoryGencase() const;

  inline bool hasFactoryGenfor() const;
  inline  ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>::Reader getFactoryGenfor() const;

  inline bool hasFactoryGenif() const;
  inline  ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>::Reader getFactoryGenif() const;

  inline bool hasFactoryGenifelse() const;
  inline  ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>::Reader getFactoryGenifelse() const;

  inline bool hasFactoryGenregion() const;
  inline  ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>::Reader getFactoryGenregion() const;

  inline bool hasFactoryGenscope() const;
  inline  ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>::Reader getFactoryGenscope() const;

  inline bool hasFactoryGenscopearray() const;
  inline  ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>::Reader getFactoryGenscopearray() const;

  inline bool hasFactoryGenvar() const;
  inline  ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>::Reader getFactoryGenvar() const;

  inline bool hasFactoryHierpath() const;
  inline  ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>::Reader getFactoryHierpath() const;

  inline bool hasFactoryIfelse() const;
  inline  ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>::Reader getFactoryIfelse() const;

  inline bool hasFactoryIfstmt() const;
  inline  ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryIfstmt() const;

  inline bool hasFactoryImmediateassert() const;
  inline  ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>::Reader getFactoryImmediateassert() const;

  inline bool hasFactoryImmediateassume() const;
  inline  ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>::Reader getFactoryImmediateassume() const;

  inline bool hasFactoryImmediatecover() const;
  inline  ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>::Reader getFactoryImmediatecover() const;

  inline bool hasFactoryImplication() const;
  inline  ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>::Reader getFactoryImplication() const;

  inline bool hasFactoryImporttypespec() const;
  inline  ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryImporttypespec() const;

  inline bool hasFactoryIncludefileinfo() const;
  inline  ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>::Reader getFactoryIncludefileinfo() const;

  inline bool hasFactoryIndexedpartselect() const;
  inline  ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>::Reader getFactoryIndexedpartselect() const;

  inline bool hasFactoryInitial() const;
  inline  ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>::Reader getFactoryInitial() const;

  inline bool hasFactoryIntegernet() const;
  inline  ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>::Reader getFactoryIntegernet() const;

  inline bool hasFactoryIntegertypespec() const;
  inline  ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryIntegertypespec() const;

  inline bool hasFactoryIntegervar() const;
  inline  ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>::Reader getFactoryIntegervar() const;

  inline bool hasFactoryInterfacearray() const;
  inline  ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>::Reader getFactoryInterfacearray() const;

  inline bool hasFactoryInterfaceinst() const;
  inline  ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>::Reader getFactoryInterfaceinst() const;

  inline bool hasFactoryInterfacetfdecl() const;
  inline  ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>::Reader getFactoryInterfacetfdecl() const;

  inline bool hasFactoryInterfacetypespec() const;
  inline  ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryInterfacetypespec() const;

  inline bool hasFactoryInttypespec() const;
  inline  ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryInttypespec() const;

  inline bool hasFactoryIntvar() const;
  inline  ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>::Reader getFactoryIntvar() const;

  inline bool hasFactoryIodecl() const;
  inline  ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>::Reader getFactoryIodecl() const;

  inline bool hasFactoryLetdecl() const;
  inline  ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>::Reader getFactoryLetdecl() const;

  inline bool hasFactoryLetexpr() const;
  inline  ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>::Reader getFactoryLetexpr() const;

  inline bool hasFactoryLogicnet() const;
  inline  ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>::Reader getFactoryLogicnet() const;

  inline bool hasFactoryLogictypespec() const;
  inline  ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryLogictypespec() const;

  inline bool hasFactoryLogicvar() const;
  inline  ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>::Reader getFactoryLogicvar() const;

  inline bool hasFactoryLonginttypespec() const;
  inline  ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryLonginttypespec() const;

  inline bool hasFactoryLongintvar() const;
  inline  ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>::Reader getFactoryLongintvar() const;

  inline bool hasFactoryMethodfunccall() const;
  inline  ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>::Reader getFactoryMethodfunccall() const;

  inline bool hasFactoryMethodtaskcall() const;
  inline  ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>::Reader getFactoryMethodtaskcall() const;

  inline bool hasFactoryModpath() const;
  inline  ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>::Reader getFactoryModpath() const;

  inline bool hasFactoryModport() const;
  inline  ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>::Reader getFactoryModport() const;

  inline bool hasFactoryModulearray() const;
  inline  ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>::Reader getFactoryModulearray() const;

  inline bool hasFactoryModuleinst() const;
  inline  ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>::Reader getFactoryModuleinst() const;

  inline bool hasFactoryModuletypespec() const;
  inline  ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryModuletypespec() const;

  inline bool hasFactoryMulticlocksequenceexpr() const;
  inline  ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>::Reader getFactoryMulticlocksequenceexpr() const;

  inline bool hasFactoryNamedbegin() const;
  inline  ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>::Reader getFactoryNamedbegin() const;

  inline bool hasFactoryNamedevent() const;
  inline  ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>::Reader getFactoryNamedevent() const;

  inline bool hasFactoryNamedeventarray() const;
  inline  ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>::Reader getFactoryNamedeventarray() const;

  inline bool hasFactoryNamedfork() const;
  inline  ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>::Reader getFactoryNamedfork() const;

  inline bool hasFactoryNetbit() const;
  inline  ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>::Reader getFactoryNetbit() const;

  inline bool hasFactoryNullstmt() const;
  inline  ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryNullstmt() const;

  inline bool hasFactoryOperation() const;
  inline  ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>::Reader getFactoryOperation() const;

  inline bool hasFactoryOrderedwait() const;
  inline  ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>::Reader getFactoryOrderedwait() const;

  inline bool hasFactoryPackage() const;
  inline  ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>::Reader getFactoryPackage() const;

  inline bool hasFactoryPackedarraynet() const;
  inline  ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>::Reader getFactoryPackedarraynet() const;

  inline bool hasFactoryPackedarraytypespec() const;
  inline  ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryPackedarraytypespec() const;

  inline bool hasFactoryPackedarrayvar() const;
  inline  ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>::Reader getFactoryPackedarrayvar() const;

  inline bool hasFactoryParamassign() const;
  inline  ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>::Reader getFactoryParamassign() const;

  inline bool hasFactoryParameter() const;
  inline  ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>::Reader getFactoryParameter() const;

  inline bool hasFactoryPartselect() const;
  inline  ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>::Reader getFactoryPartselect() const;

  inline bool hasFactoryPathterm() const;
  inline  ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>::Reader getFactoryPathterm() const;

  inline bool hasFactoryPort() const;
  inline  ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>::Reader getFactoryPort() const;

  inline bool hasFactoryPortbit() const;
  inline  ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>::Reader getFactoryPortbit() const;

  inline bool hasFactoryPrimterm() const;
  inline  ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>::Reader getFactoryPrimterm() const;

  inline bool hasFactoryProgram() const;
  inline  ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>::Reader getFactoryProgram() const;

  inline bool hasFactoryProgramarray() const;
  inline  ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>::Reader getFactoryProgramarray() const;

  inline bool hasFactoryPropertydecl() const;
  inline  ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>::Reader getFactoryPropertydecl() const;

  inline bool hasFactoryPropertyinst() const;
  inline  ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>::Reader getFactoryPropertyinst() const;

  inline bool hasFactoryPropertyspec() const;
  inline  ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>::Reader getFactoryPropertyspec() const;

  inline bool hasFactoryPropertytypespec() const;
  inline  ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryPropertytypespec() const;

  inline bool hasFactoryPropformaldecl() const;
  inline  ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>::Reader getFactoryPropformaldecl() const;

  inline bool hasFactoryRange() const;
  inline  ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>::Reader getFactoryRange() const;

  inline bool hasFactoryRealtypespec() const;
  inline  ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryRealtypespec() const;

  inline bool hasFactoryRealvar() const;
  inline  ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>::Reader getFactoryRealvar() const;

  inline bool hasFactoryRefmodule() const;
  inline  ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>::Reader getFactoryRefmodule() const;

  inline bool hasFactoryRefobj() const;
  inline  ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>::Reader getFactoryRefobj() const;

  inline bool hasFactoryReftypespec() const;
  inline  ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryReftypespec() const;

  inline bool hasFactoryRefvar() const;
  inline  ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>::Reader getFactoryRefvar() const;

  inline bool hasFactoryReg() const;
  inline  ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>::Reader getFactoryReg() const;

  inline bool hasFactoryRegarray() const;
  inline  ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>::Reader getFactoryRegarray() const;

  inline bool hasFactoryRelease() const;
  inline  ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>::Reader getFactoryRelease() const;

  inline bool hasFactoryRepeat() const;
  inline  ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>::Reader getFactoryRepeat() const;

  inline bool hasFactoryRepeatcontrol() const;
  inline  ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>::Reader getFactoryRepeatcontrol() const;

  inline bool hasFactoryRestrict() const;
  inline  ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>::Reader getFactoryRestrict() const;

  inline bool hasFactoryReturnstmt() const;
  inline  ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryReturnstmt() const;

  inline bool hasFactorySeqformaldecl() const;
  inline  ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>::Reader getFactorySeqformaldecl() const;

  inline bool hasFactorySequencedecl() const;
  inline  ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>::Reader getFactorySequencedecl() const;

  inline bool hasFactorySequenceinst() const;
  inline  ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>::Reader getFactorySequenceinst() const;

  inline bool hasFactorySequencetypespec() const;
  inline  ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>::Reader getFactorySequencetypespec() const;

  inline bool hasFactoryShortinttypespec() const;
  inline  ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryShortinttypespec() const;

  inline bool hasFactoryShortintvar() const;
  inline  ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>::Reader getFactoryShortintvar() const;

  inline bool hasFactoryShortrealtypespec() const;
  inline  ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryShortrealtypespec() const;

  inline bool hasFactoryShortrealvar() const;
  inline  ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>::Reader getFactoryShortrealvar() const;

  inline bool hasFactorySoftdisable() const;
  inline  ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>::Reader getFactorySoftdisable() const;

  inline bool hasFactorySpecparam() const;
  inline  ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>::Reader getFactorySpecparam() const;

  inline bool hasFactoryStringtypespec() const;
  inline  ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryStringtypespec() const;

  inline bool hasFactoryStringvar() const;
  inline  ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>::Reader getFactoryStringvar() const;

  inline bool hasFactoryStructnet() const;
  inline  ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>::Reader getFactoryStructnet() const;

  inline bool hasFactoryStructpattern() const;
  inline  ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>::Reader getFactoryStructpattern() const;

  inline bool hasFactoryStructtypespec() const;
  inline  ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryStructtypespec() const;

  inline bool hasFactoryStructvar() const;
  inline  ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>::Reader getFactoryStructvar() const;

  inline bool hasFactorySwitcharray() const;
  inline  ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>::Reader getFactorySwitcharray() const;

  inline bool hasFactorySwitchtran() const;
  inline  ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>::Reader getFactorySwitchtran() const;

  inline bool hasFactorySysfunccall() const;
  inline  ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>::Reader getFactorySysfunccall() const;

  inline bool hasFactorySystaskcall() const;
  inline  ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>::Reader getFactorySystaskcall() const;

  inline bool hasFactoryTableentry() const;
  inline  ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>::Reader getFactoryTableentry() const;

  inline bool hasFactoryTaggedpattern() const;
  inline  ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>::Reader getFactoryTaggedpattern() const;

  inline bool hasFactoryTask() const;
  inline  ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>::Reader getFactoryTask() const;

  inline bool hasFactoryTaskcall() const;
  inline  ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>::Reader getFactoryTaskcall() const;

  inline bool hasFactoryTchk() const;
  inline  ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>::Reader getFactoryTchk() const;

  inline bool hasFactoryTchkterm() const;
  inline  ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>::Reader getFactoryTchkterm() const;

  inline bool hasFactoryThreadobj() const;
  inline  ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>::Reader getFactoryThreadobj() const;

  inline bool hasFactoryTimenet() const;
  inline  ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>::Reader getFactoryTimenet() const;

  inline bool hasFactoryTimetypespec() const;
  inline  ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryTimetypespec() const;

  inline bool hasFactoryTimevar() const;
  inline  ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>::Reader getFactoryTimevar() const;

  inline bool hasFactoryTypeparameter() const;
  inline  ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>::Reader getFactoryTypeparameter() const;

  inline bool hasFactoryTypespecmember() const;
  inline  ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>::Reader getFactoryTypespecmember() const;

  inline bool hasFactoryUdp() const;
  inline  ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>::Reader getFactoryUdp() const;

  inline bool hasFactoryUdparray() const;
  inline  ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>::Reader getFactoryUdparray() const;

  inline bool hasFactoryUdpdefn() const;
  inline  ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>::Reader getFactoryUdpdefn() const;

  inline bool hasFactoryUniontypespec() const;
  inline  ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryUniontypespec() const;

  inline bool hasFactoryUnionvar() const;
  inline  ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>::Reader getFactoryUnionvar() const;

  inline bool hasFactoryUnsupportedexpr() const;
  inline  ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>::Reader getFactoryUnsupportedexpr() const;

  inline bool hasFactoryUnsupportedstmt() const;
  inline  ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryUnsupportedstmt() const;

  inline bool hasFactoryUnsupportedtypespec() const;
  inline  ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryUnsupportedtypespec() const;

  inline bool hasFactoryUsersystf() const;
  inline  ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>::Reader getFactoryUsersystf() const;

  inline bool hasFactoryVarbit() const;
  inline  ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>::Reader getFactoryVarbit() const;

  inline bool hasFactoryVarselect() const;
  inline  ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>::Reader getFactoryVarselect() const;

  inline bool hasFactoryVirtualinterfacevar() const;
  inline  ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>::Reader getFactoryVirtualinterfacevar() const;

  inline bool hasFactoryVoidtypespec() const;
  inline  ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>::Reader getFactoryVoidtypespec() const;

  inline bool hasFactoryWaitfork() const;
  inline  ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>::Reader getFactoryWaitfork() const;

  inline bool hasFactoryWaitstmt() const;
  inline  ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>::Reader getFactoryWaitstmt() const;

  inline bool hasFactoryWhilestmt() const;
  inline  ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>::Reader getFactoryWhilestmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UhdmRoot::Builder {
public:
  typedef UhdmRoot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVersion();
  inline void setVersion( ::uint32_t value);

  inline  ::uint32_t getObjectId();
  inline void setObjectId( ::uint32_t value);

  inline bool hasDesigns();
  inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Builder getDesigns();
  inline void setDesigns( ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Builder initDesigns(unsigned int size);
  inline void adoptDesigns(::capnp::Orphan< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>> disownDesigns();

  inline bool hasSymbols();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getSymbols();
  inline void setSymbols( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initSymbols(unsigned int size);
  inline void adoptSymbols(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownSymbols();

  inline bool hasFactoryAliasstmt();
  inline  ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryAliasstmt();
  inline void setFactoryAliasstmt( ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryAliasstmt(unsigned int size);
  inline void adoptFactoryAliasstmt(::capnp::Orphan< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>> disownFactoryAliasstmt();

  inline bool hasFactoryAlways();
  inline  ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>::Builder getFactoryAlways();
  inline void setFactoryAlways( ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>::Builder initFactoryAlways(unsigned int size);
  inline void adoptFactoryAlways(::capnp::Orphan< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>> disownFactoryAlways();

  inline bool hasFactoryAnypattern();
  inline  ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>::Builder getFactoryAnypattern();
  inline void setFactoryAnypattern( ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>::Builder initFactoryAnypattern(unsigned int size);
  inline void adoptFactoryAnypattern(::capnp::Orphan< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>> disownFactoryAnypattern();

  inline bool hasFactoryArrayexpr();
  inline  ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>::Builder getFactoryArrayexpr();
  inline void setFactoryArrayexpr( ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>::Builder initFactoryArrayexpr(unsigned int size);
  inline void adoptFactoryArrayexpr(::capnp::Orphan< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>> disownFactoryArrayexpr();

  inline bool hasFactoryArraynet();
  inline  ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>::Builder getFactoryArraynet();
  inline void setFactoryArraynet( ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>::Builder initFactoryArraynet(unsigned int size);
  inline void adoptFactoryArraynet(::capnp::Orphan< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>> disownFactoryArraynet();

  inline bool hasFactoryArraytypespec();
  inline  ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryArraytypespec();
  inline void setFactoryArraytypespec( ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryArraytypespec(unsigned int size);
  inline void adoptFactoryArraytypespec(::capnp::Orphan< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>> disownFactoryArraytypespec();

  inline bool hasFactoryArrayvar();
  inline  ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>::Builder getFactoryArrayvar();
  inline void setFactoryArrayvar( ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>::Builder initFactoryArrayvar(unsigned int size);
  inline void adoptFactoryArrayvar(::capnp::Orphan< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>> disownFactoryArrayvar();

  inline bool hasFactoryAssertstmt();
  inline  ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryAssertstmt();
  inline void setFactoryAssertstmt( ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryAssertstmt(unsigned int size);
  inline void adoptFactoryAssertstmt(::capnp::Orphan< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>> disownFactoryAssertstmt();

  inline bool hasFactoryAssignment();
  inline  ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>::Builder getFactoryAssignment();
  inline void setFactoryAssignment( ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>::Builder initFactoryAssignment(unsigned int size);
  inline void adoptFactoryAssignment(::capnp::Orphan< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>> disownFactoryAssignment();

  inline bool hasFactoryAssignstmt();
  inline  ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryAssignstmt();
  inline void setFactoryAssignstmt( ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryAssignstmt(unsigned int size);
  inline void adoptFactoryAssignstmt(::capnp::Orphan< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>> disownFactoryAssignstmt();

  inline bool hasFactoryAssume();
  inline  ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>::Builder getFactoryAssume();
  inline void setFactoryAssume( ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>::Builder initFactoryAssume(unsigned int size);
  inline void adoptFactoryAssume(::capnp::Orphan< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>> disownFactoryAssume();

  inline bool hasFactoryAttribute();
  inline  ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>::Builder getFactoryAttribute();
  inline void setFactoryAttribute( ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>::Builder initFactoryAttribute(unsigned int size);
  inline void adoptFactoryAttribute(::capnp::Orphan< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>> disownFactoryAttribute();

  inline bool hasFactoryBegin();
  inline  ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>::Builder getFactoryBegin();
  inline void setFactoryBegin( ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>::Builder initFactoryBegin(unsigned int size);
  inline void adoptFactoryBegin(::capnp::Orphan< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>> disownFactoryBegin();

  inline bool hasFactoryBitselect();
  inline  ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>::Builder getFactoryBitselect();
  inline void setFactoryBitselect( ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>::Builder initFactoryBitselect(unsigned int size);
  inline void adoptFactoryBitselect(::capnp::Orphan< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>> disownFactoryBitselect();

  inline bool hasFactoryBittypespec();
  inline  ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryBittypespec();
  inline void setFactoryBittypespec( ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryBittypespec(unsigned int size);
  inline void adoptFactoryBittypespec(::capnp::Orphan< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>> disownFactoryBittypespec();

  inline bool hasFactoryBitvar();
  inline  ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>::Builder getFactoryBitvar();
  inline void setFactoryBitvar( ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>::Builder initFactoryBitvar(unsigned int size);
  inline void adoptFactoryBitvar(::capnp::Orphan< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>> disownFactoryBitvar();

  inline bool hasFactoryBreakstmt();
  inline  ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryBreakstmt();
  inline void setFactoryBreakstmt( ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryBreakstmt(unsigned int size);
  inline void adoptFactoryBreakstmt(::capnp::Orphan< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>> disownFactoryBreakstmt();

  inline bool hasFactoryBytetypespec();
  inline  ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryBytetypespec();
  inline void setFactoryBytetypespec( ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryBytetypespec(unsigned int size);
  inline void adoptFactoryBytetypespec(::capnp::Orphan< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>> disownFactoryBytetypespec();

  inline bool hasFactoryBytevar();
  inline  ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>::Builder getFactoryBytevar();
  inline void setFactoryBytevar( ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>::Builder initFactoryBytevar(unsigned int size);
  inline void adoptFactoryBytevar(::capnp::Orphan< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>> disownFactoryBytevar();

  inline bool hasFactoryCaseitem();
  inline  ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>::Builder getFactoryCaseitem();
  inline void setFactoryCaseitem( ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>::Builder initFactoryCaseitem(unsigned int size);
  inline void adoptFactoryCaseitem(::capnp::Orphan< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>> disownFactoryCaseitem();

  inline bool hasFactoryCaseproperty();
  inline  ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>::Builder getFactoryCaseproperty();
  inline void setFactoryCaseproperty( ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>::Builder initFactoryCaseproperty(unsigned int size);
  inline void adoptFactoryCaseproperty(::capnp::Orphan< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>> disownFactoryCaseproperty();

  inline bool hasFactoryCasepropertyitem();
  inline  ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>::Builder getFactoryCasepropertyitem();
  inline void setFactoryCasepropertyitem( ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>::Builder initFactoryCasepropertyitem(unsigned int size);
  inline void adoptFactoryCasepropertyitem(::capnp::Orphan< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>> disownFactoryCasepropertyitem();

  inline bool hasFactoryCasestmt();
  inline  ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>::Builder getFactoryCasestmt();
  inline void setFactoryCasestmt( ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>::Builder initFactoryCasestmt(unsigned int size);
  inline void adoptFactoryCasestmt(::capnp::Orphan< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>> disownFactoryCasestmt();

  inline bool hasFactoryChandletypespec();
  inline  ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryChandletypespec();
  inline void setFactoryChandletypespec( ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryChandletypespec(unsigned int size);
  inline void adoptFactoryChandletypespec(::capnp::Orphan< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>> disownFactoryChandletypespec();

  inline bool hasFactoryChandlevar();
  inline  ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>::Builder getFactoryChandlevar();
  inline void setFactoryChandlevar( ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>::Builder initFactoryChandlevar(unsigned int size);
  inline void adoptFactoryChandlevar(::capnp::Orphan< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>> disownFactoryChandlevar();

  inline bool hasFactoryCheckerdecl();
  inline  ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>::Builder getFactoryCheckerdecl();
  inline void setFactoryCheckerdecl( ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>::Builder initFactoryCheckerdecl(unsigned int size);
  inline void adoptFactoryCheckerdecl(::capnp::Orphan< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>> disownFactoryCheckerdecl();

  inline bool hasFactoryCheckerinst();
  inline  ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>::Builder getFactoryCheckerinst();
  inline void setFactoryCheckerinst( ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>::Builder initFactoryCheckerinst(unsigned int size);
  inline void adoptFactoryCheckerinst(::capnp::Orphan< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>> disownFactoryCheckerinst();

  inline bool hasFactoryCheckerinstport();
  inline  ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>::Builder getFactoryCheckerinstport();
  inline void setFactoryCheckerinstport( ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>::Builder initFactoryCheckerinstport(unsigned int size);
  inline void adoptFactoryCheckerinstport(::capnp::Orphan< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>> disownFactoryCheckerinstport();

  inline bool hasFactoryCheckerport();
  inline  ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>::Builder getFactoryCheckerport();
  inline void setFactoryCheckerport( ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>::Builder initFactoryCheckerport(unsigned int size);
  inline void adoptFactoryCheckerport(::capnp::Orphan< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>> disownFactoryCheckerport();

  inline bool hasFactoryClassdefn();
  inline  ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>::Builder getFactoryClassdefn();
  inline void setFactoryClassdefn( ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>::Builder initFactoryClassdefn(unsigned int size);
  inline void adoptFactoryClassdefn(::capnp::Orphan< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>> disownFactoryClassdefn();

  inline bool hasFactoryClassobj();
  inline  ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>::Builder getFactoryClassobj();
  inline void setFactoryClassobj( ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>::Builder initFactoryClassobj(unsigned int size);
  inline void adoptFactoryClassobj(::capnp::Orphan< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>> disownFactoryClassobj();

  inline bool hasFactoryClasstypespec();
  inline  ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryClasstypespec();
  inline void setFactoryClasstypespec( ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryClasstypespec(unsigned int size);
  inline void adoptFactoryClasstypespec(::capnp::Orphan< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>> disownFactoryClasstypespec();

  inline bool hasFactoryClassvar();
  inline  ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>::Builder getFactoryClassvar();
  inline void setFactoryClassvar( ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>::Builder initFactoryClassvar(unsigned int size);
  inline void adoptFactoryClassvar(::capnp::Orphan< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>> disownFactoryClassvar();

  inline bool hasFactoryClockedproperty();
  inline  ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>::Builder getFactoryClockedproperty();
  inline void setFactoryClockedproperty( ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>::Builder initFactoryClockedproperty(unsigned int size);
  inline void adoptFactoryClockedproperty(::capnp::Orphan< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>> disownFactoryClockedproperty();

  inline bool hasFactoryClockedseq();
  inline  ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>::Builder getFactoryClockedseq();
  inline void setFactoryClockedseq( ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>::Builder initFactoryClockedseq(unsigned int size);
  inline void adoptFactoryClockedseq(::capnp::Orphan< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>> disownFactoryClockedseq();

  inline bool hasFactoryClockingblock();
  inline  ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>::Builder getFactoryClockingblock();
  inline void setFactoryClockingblock( ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>::Builder initFactoryClockingblock(unsigned int size);
  inline void adoptFactoryClockingblock(::capnp::Orphan< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>> disownFactoryClockingblock();

  inline bool hasFactoryClockingiodecl();
  inline  ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>::Builder getFactoryClockingiodecl();
  inline void setFactoryClockingiodecl( ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>::Builder initFactoryClockingiodecl(unsigned int size);
  inline void adoptFactoryClockingiodecl(::capnp::Orphan< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>> disownFactoryClockingiodecl();

  inline bool hasFactoryConstant();
  inline  ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>::Builder getFactoryConstant();
  inline void setFactoryConstant( ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>::Builder initFactoryConstant(unsigned int size);
  inline void adoptFactoryConstant(::capnp::Orphan< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>> disownFactoryConstant();

  inline bool hasFactoryConstraint();
  inline  ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>::Builder getFactoryConstraint();
  inline void setFactoryConstraint( ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>::Builder initFactoryConstraint(unsigned int size);
  inline void adoptFactoryConstraint(::capnp::Orphan< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>> disownFactoryConstraint();

  inline bool hasFactoryConstraintordering();
  inline  ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>::Builder getFactoryConstraintordering();
  inline void setFactoryConstraintordering( ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>::Builder initFactoryConstraintordering(unsigned int size);
  inline void adoptFactoryConstraintordering(::capnp::Orphan< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>> disownFactoryConstraintordering();

  inline bool hasFactoryConstrforeach();
  inline  ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>::Builder getFactoryConstrforeach();
  inline void setFactoryConstrforeach( ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>::Builder initFactoryConstrforeach(unsigned int size);
  inline void adoptFactoryConstrforeach(::capnp::Orphan< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>> disownFactoryConstrforeach();

  inline bool hasFactoryConstrif();
  inline  ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>::Builder getFactoryConstrif();
  inline void setFactoryConstrif( ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>::Builder initFactoryConstrif(unsigned int size);
  inline void adoptFactoryConstrif(::capnp::Orphan< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>> disownFactoryConstrif();

  inline bool hasFactoryConstrifelse();
  inline  ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>::Builder getFactoryConstrifelse();
  inline void setFactoryConstrifelse( ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>::Builder initFactoryConstrifelse(unsigned int size);
  inline void adoptFactoryConstrifelse(::capnp::Orphan< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>> disownFactoryConstrifelse();

  inline bool hasFactoryContassign();
  inline  ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>::Builder getFactoryContassign();
  inline void setFactoryContassign( ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>::Builder initFactoryContassign(unsigned int size);
  inline void adoptFactoryContassign(::capnp::Orphan< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>> disownFactoryContassign();

  inline bool hasFactoryContassignbit();
  inline  ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>::Builder getFactoryContassignbit();
  inline void setFactoryContassignbit( ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>::Builder initFactoryContassignbit(unsigned int size);
  inline void adoptFactoryContassignbit(::capnp::Orphan< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>> disownFactoryContassignbit();

  inline bool hasFactoryContinuestmt();
  inline  ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>::Builder getFactoryContinuestmt();
  inline void setFactoryContinuestmt( ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>::Builder initFactoryContinuestmt(unsigned int size);
  inline void adoptFactoryContinuestmt(::capnp::Orphan< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>> disownFactoryContinuestmt();

  inline bool hasFactoryCover();
  inline  ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>::Builder getFactoryCover();
  inline void setFactoryCover( ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>::Builder initFactoryCover(unsigned int size);
  inline void adoptFactoryCover(::capnp::Orphan< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>> disownFactoryCover();

  inline bool hasFactoryDeassign();
  inline  ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>::Builder getFactoryDeassign();
  inline void setFactoryDeassign( ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>::Builder initFactoryDeassign(unsigned int size);
  inline void adoptFactoryDeassign(::capnp::Orphan< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>> disownFactoryDeassign();

  inline bool hasFactoryDefparam();
  inline  ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>::Builder getFactoryDefparam();
  inline void setFactoryDefparam( ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>::Builder initFactoryDefparam(unsigned int size);
  inline void adoptFactoryDefparam(::capnp::Orphan< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>> disownFactoryDefparam();

  inline bool hasFactoryDelaycontrol();
  inline  ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>::Builder getFactoryDelaycontrol();
  inline void setFactoryDelaycontrol( ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>::Builder initFactoryDelaycontrol(unsigned int size);
  inline void adoptFactoryDelaycontrol(::capnp::Orphan< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>> disownFactoryDelaycontrol();

  inline bool hasFactoryDelayterm();
  inline  ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>::Builder getFactoryDelayterm();
  inline void setFactoryDelayterm( ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>::Builder initFactoryDelayterm(unsigned int size);
  inline void adoptFactoryDelayterm(::capnp::Orphan< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>> disownFactoryDelayterm();

  inline bool hasFactoryDesign();
  inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Builder getFactoryDesign();
  inline void setFactoryDesign( ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Builder initFactoryDesign(unsigned int size);
  inline void adoptFactoryDesign(::capnp::Orphan< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>> disownFactoryDesign();

  inline bool hasFactoryDisable();
  inline  ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>::Builder getFactoryDisable();
  inline void setFactoryDisable( ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>::Builder initFactoryDisable(unsigned int size);
  inline void adoptFactoryDisable(::capnp::Orphan< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>> disownFactoryDisable();

  inline bool hasFactoryDisablefork();
  inline  ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>::Builder getFactoryDisablefork();
  inline void setFactoryDisablefork( ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>::Builder initFactoryDisablefork(unsigned int size);
  inline void adoptFactoryDisablefork(::capnp::Orphan< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>> disownFactoryDisablefork();

  inline bool hasFactoryDistitem();
  inline  ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>::Builder getFactoryDistitem();
  inline void setFactoryDistitem( ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>::Builder initFactoryDistitem(unsigned int size);
  inline void adoptFactoryDistitem(::capnp::Orphan< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>> disownFactoryDistitem();

  inline bool hasFactoryDistribution();
  inline  ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>::Builder getFactoryDistribution();
  inline void setFactoryDistribution( ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>::Builder initFactoryDistribution(unsigned int size);
  inline void adoptFactoryDistribution(::capnp::Orphan< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>> disownFactoryDistribution();

  inline bool hasFactoryDowhile();
  inline  ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>::Builder getFactoryDowhile();
  inline void setFactoryDowhile( ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>::Builder initFactoryDowhile(unsigned int size);
  inline void adoptFactoryDowhile(::capnp::Orphan< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>> disownFactoryDowhile();

  inline bool hasFactoryEnumconst();
  inline  ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>::Builder getFactoryEnumconst();
  inline void setFactoryEnumconst( ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>::Builder initFactoryEnumconst(unsigned int size);
  inline void adoptFactoryEnumconst(::capnp::Orphan< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>> disownFactoryEnumconst();

  inline bool hasFactoryEnumnet();
  inline  ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>::Builder getFactoryEnumnet();
  inline void setFactoryEnumnet( ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>::Builder initFactoryEnumnet(unsigned int size);
  inline void adoptFactoryEnumnet(::capnp::Orphan< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>> disownFactoryEnumnet();

  inline bool hasFactoryEnumtypespec();
  inline  ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryEnumtypespec();
  inline void setFactoryEnumtypespec( ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryEnumtypespec(unsigned int size);
  inline void adoptFactoryEnumtypespec(::capnp::Orphan< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>> disownFactoryEnumtypespec();

  inline bool hasFactoryEnumvar();
  inline  ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>::Builder getFactoryEnumvar();
  inline void setFactoryEnumvar( ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>::Builder initFactoryEnumvar(unsigned int size);
  inline void adoptFactoryEnumvar(::capnp::Orphan< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>> disownFactoryEnumvar();

  inline bool hasFactoryEventcontrol();
  inline  ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>::Builder getFactoryEventcontrol();
  inline void setFactoryEventcontrol( ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>::Builder initFactoryEventcontrol(unsigned int size);
  inline void adoptFactoryEventcontrol(::capnp::Orphan< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>> disownFactoryEventcontrol();

  inline bool hasFactoryEventstmt();
  inline  ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryEventstmt();
  inline void setFactoryEventstmt( ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryEventstmt(unsigned int size);
  inline void adoptFactoryEventstmt(::capnp::Orphan< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>> disownFactoryEventstmt();

  inline bool hasFactoryEventtypespec();
  inline  ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryEventtypespec();
  inline void setFactoryEventtypespec( ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryEventtypespec(unsigned int size);
  inline void adoptFactoryEventtypespec(::capnp::Orphan< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>> disownFactoryEventtypespec();

  inline bool hasFactoryExpectstmt();
  inline  ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryExpectstmt();
  inline void setFactoryExpectstmt( ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryExpectstmt(unsigned int size);
  inline void adoptFactoryExpectstmt(::capnp::Orphan< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>> disownFactoryExpectstmt();

  inline bool hasFactoryExtends();
  inline  ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>::Builder getFactoryExtends();
  inline void setFactoryExtends( ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>::Builder initFactoryExtends(unsigned int size);
  inline void adoptFactoryExtends(::capnp::Orphan< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>> disownFactoryExtends();

  inline bool hasFactoryFinalstmt();
  inline  ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryFinalstmt();
  inline void setFactoryFinalstmt( ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryFinalstmt(unsigned int size);
  inline void adoptFactoryFinalstmt(::capnp::Orphan< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>> disownFactoryFinalstmt();

  inline bool hasFactoryForce();
  inline  ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>::Builder getFactoryForce();
  inline void setFactoryForce( ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>::Builder initFactoryForce(unsigned int size);
  inline void adoptFactoryForce(::capnp::Orphan< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>> disownFactoryForce();

  inline bool hasFactoryForeachstmt();
  inline  ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryForeachstmt();
  inline void setFactoryForeachstmt( ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryForeachstmt(unsigned int size);
  inline void adoptFactoryForeachstmt(::capnp::Orphan< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>> disownFactoryForeachstmt();

  inline bool hasFactoryForeverstmt();
  inline  ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryForeverstmt();
  inline void setFactoryForeverstmt( ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryForeverstmt(unsigned int size);
  inline void adoptFactoryForeverstmt(::capnp::Orphan< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>> disownFactoryForeverstmt();

  inline bool hasFactoryForkstmt();
  inline  ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryForkstmt();
  inline void setFactoryForkstmt( ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryForkstmt(unsigned int size);
  inline void adoptFactoryForkstmt(::capnp::Orphan< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>> disownFactoryForkstmt();

  inline bool hasFactoryForstmt();
  inline  ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryForstmt();
  inline void setFactoryForstmt( ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryForstmt(unsigned int size);
  inline void adoptFactoryForstmt(::capnp::Orphan< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>> disownFactoryForstmt();

  inline bool hasFactoryFunccall();
  inline  ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>::Builder getFactoryFunccall();
  inline void setFactoryFunccall( ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>::Builder initFactoryFunccall(unsigned int size);
  inline void adoptFactoryFunccall(::capnp::Orphan< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>> disownFactoryFunccall();

  inline bool hasFactoryFunction();
  inline  ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>::Builder getFactoryFunction();
  inline void setFactoryFunction( ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>::Builder initFactoryFunction(unsigned int size);
  inline void adoptFactoryFunction(::capnp::Orphan< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>> disownFactoryFunction();

  inline bool hasFactoryGate();
  inline  ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>::Builder getFactoryGate();
  inline void setFactoryGate( ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>::Builder initFactoryGate(unsigned int size);
  inline void adoptFactoryGate(::capnp::Orphan< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>> disownFactoryGate();

  inline bool hasFactoryGatearray();
  inline  ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>::Builder getFactoryGatearray();
  inline void setFactoryGatearray( ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>::Builder initFactoryGatearray(unsigned int size);
  inline void adoptFactoryGatearray(::capnp::Orphan< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>> disownFactoryGatearray();

  inline bool hasFactoryGencase();
  inline  ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>::Builder getFactoryGencase();
  inline void setFactoryGencase( ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>::Builder initFactoryGencase(unsigned int size);
  inline void adoptFactoryGencase(::capnp::Orphan< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>> disownFactoryGencase();

  inline bool hasFactoryGenfor();
  inline  ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>::Builder getFactoryGenfor();
  inline void setFactoryGenfor( ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>::Builder initFactoryGenfor(unsigned int size);
  inline void adoptFactoryGenfor(::capnp::Orphan< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>> disownFactoryGenfor();

  inline bool hasFactoryGenif();
  inline  ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>::Builder getFactoryGenif();
  inline void setFactoryGenif( ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>::Builder initFactoryGenif(unsigned int size);
  inline void adoptFactoryGenif(::capnp::Orphan< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>> disownFactoryGenif();

  inline bool hasFactoryGenifelse();
  inline  ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>::Builder getFactoryGenifelse();
  inline void setFactoryGenifelse( ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>::Builder initFactoryGenifelse(unsigned int size);
  inline void adoptFactoryGenifelse(::capnp::Orphan< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>> disownFactoryGenifelse();

  inline bool hasFactoryGenregion();
  inline  ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>::Builder getFactoryGenregion();
  inline void setFactoryGenregion( ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>::Builder initFactoryGenregion(unsigned int size);
  inline void adoptFactoryGenregion(::capnp::Orphan< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>> disownFactoryGenregion();

  inline bool hasFactoryGenscope();
  inline  ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>::Builder getFactoryGenscope();
  inline void setFactoryGenscope( ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>::Builder initFactoryGenscope(unsigned int size);
  inline void adoptFactoryGenscope(::capnp::Orphan< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>> disownFactoryGenscope();

  inline bool hasFactoryGenscopearray();
  inline  ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>::Builder getFactoryGenscopearray();
  inline void setFactoryGenscopearray( ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>::Builder initFactoryGenscopearray(unsigned int size);
  inline void adoptFactoryGenscopearray(::capnp::Orphan< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>> disownFactoryGenscopearray();

  inline bool hasFactoryGenvar();
  inline  ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>::Builder getFactoryGenvar();
  inline void setFactoryGenvar( ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>::Builder initFactoryGenvar(unsigned int size);
  inline void adoptFactoryGenvar(::capnp::Orphan< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>> disownFactoryGenvar();

  inline bool hasFactoryHierpath();
  inline  ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>::Builder getFactoryHierpath();
  inline void setFactoryHierpath( ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>::Builder initFactoryHierpath(unsigned int size);
  inline void adoptFactoryHierpath(::capnp::Orphan< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>> disownFactoryHierpath();

  inline bool hasFactoryIfelse();
  inline  ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>::Builder getFactoryIfelse();
  inline void setFactoryIfelse( ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>::Builder initFactoryIfelse(unsigned int size);
  inline void adoptFactoryIfelse(::capnp::Orphan< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>> disownFactoryIfelse();

  inline bool hasFactoryIfstmt();
  inline  ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryIfstmt();
  inline void setFactoryIfstmt( ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryIfstmt(unsigned int size);
  inline void adoptFactoryIfstmt(::capnp::Orphan< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>> disownFactoryIfstmt();

  inline bool hasFactoryImmediateassert();
  inline  ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>::Builder getFactoryImmediateassert();
  inline void setFactoryImmediateassert( ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>::Builder initFactoryImmediateassert(unsigned int size);
  inline void adoptFactoryImmediateassert(::capnp::Orphan< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>> disownFactoryImmediateassert();

  inline bool hasFactoryImmediateassume();
  inline  ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>::Builder getFactoryImmediateassume();
  inline void setFactoryImmediateassume( ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>::Builder initFactoryImmediateassume(unsigned int size);
  inline void adoptFactoryImmediateassume(::capnp::Orphan< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>> disownFactoryImmediateassume();

  inline bool hasFactoryImmediatecover();
  inline  ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>::Builder getFactoryImmediatecover();
  inline void setFactoryImmediatecover( ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>::Builder initFactoryImmediatecover(unsigned int size);
  inline void adoptFactoryImmediatecover(::capnp::Orphan< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>> disownFactoryImmediatecover();

  inline bool hasFactoryImplication();
  inline  ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>::Builder getFactoryImplication();
  inline void setFactoryImplication( ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>::Builder initFactoryImplication(unsigned int size);
  inline void adoptFactoryImplication(::capnp::Orphan< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>> disownFactoryImplication();

  inline bool hasFactoryImporttypespec();
  inline  ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryImporttypespec();
  inline void setFactoryImporttypespec( ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryImporttypespec(unsigned int size);
  inline void adoptFactoryImporttypespec(::capnp::Orphan< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>> disownFactoryImporttypespec();

  inline bool hasFactoryIncludefileinfo();
  inline  ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>::Builder getFactoryIncludefileinfo();
  inline void setFactoryIncludefileinfo( ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>::Builder initFactoryIncludefileinfo(unsigned int size);
  inline void adoptFactoryIncludefileinfo(::capnp::Orphan< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>> disownFactoryIncludefileinfo();

  inline bool hasFactoryIndexedpartselect();
  inline  ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>::Builder getFactoryIndexedpartselect();
  inline void setFactoryIndexedpartselect( ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>::Builder initFactoryIndexedpartselect(unsigned int size);
  inline void adoptFactoryIndexedpartselect(::capnp::Orphan< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>> disownFactoryIndexedpartselect();

  inline bool hasFactoryInitial();
  inline  ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>::Builder getFactoryInitial();
  inline void setFactoryInitial( ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>::Builder initFactoryInitial(unsigned int size);
  inline void adoptFactoryInitial(::capnp::Orphan< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>> disownFactoryInitial();

  inline bool hasFactoryIntegernet();
  inline  ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>::Builder getFactoryIntegernet();
  inline void setFactoryIntegernet( ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>::Builder initFactoryIntegernet(unsigned int size);
  inline void adoptFactoryIntegernet(::capnp::Orphan< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>> disownFactoryIntegernet();

  inline bool hasFactoryIntegertypespec();
  inline  ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryIntegertypespec();
  inline void setFactoryIntegertypespec( ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryIntegertypespec(unsigned int size);
  inline void adoptFactoryIntegertypespec(::capnp::Orphan< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>> disownFactoryIntegertypespec();

  inline bool hasFactoryIntegervar();
  inline  ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>::Builder getFactoryIntegervar();
  inline void setFactoryIntegervar( ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>::Builder initFactoryIntegervar(unsigned int size);
  inline void adoptFactoryIntegervar(::capnp::Orphan< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>> disownFactoryIntegervar();

  inline bool hasFactoryInterfacearray();
  inline  ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>::Builder getFactoryInterfacearray();
  inline void setFactoryInterfacearray( ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>::Builder initFactoryInterfacearray(unsigned int size);
  inline void adoptFactoryInterfacearray(::capnp::Orphan< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>> disownFactoryInterfacearray();

  inline bool hasFactoryInterfaceinst();
  inline  ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>::Builder getFactoryInterfaceinst();
  inline void setFactoryInterfaceinst( ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>::Builder initFactoryInterfaceinst(unsigned int size);
  inline void adoptFactoryInterfaceinst(::capnp::Orphan< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>> disownFactoryInterfaceinst();

  inline bool hasFactoryInterfacetfdecl();
  inline  ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>::Builder getFactoryInterfacetfdecl();
  inline void setFactoryInterfacetfdecl( ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>::Builder initFactoryInterfacetfdecl(unsigned int size);
  inline void adoptFactoryInterfacetfdecl(::capnp::Orphan< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>> disownFactoryInterfacetfdecl();

  inline bool hasFactoryInterfacetypespec();
  inline  ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryInterfacetypespec();
  inline void setFactoryInterfacetypespec( ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryInterfacetypespec(unsigned int size);
  inline void adoptFactoryInterfacetypespec(::capnp::Orphan< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>> disownFactoryInterfacetypespec();

  inline bool hasFactoryInttypespec();
  inline  ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryInttypespec();
  inline void setFactoryInttypespec( ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryInttypespec(unsigned int size);
  inline void adoptFactoryInttypespec(::capnp::Orphan< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>> disownFactoryInttypespec();

  inline bool hasFactoryIntvar();
  inline  ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>::Builder getFactoryIntvar();
  inline void setFactoryIntvar( ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>::Builder initFactoryIntvar(unsigned int size);
  inline void adoptFactoryIntvar(::capnp::Orphan< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>> disownFactoryIntvar();

  inline bool hasFactoryIodecl();
  inline  ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>::Builder getFactoryIodecl();
  inline void setFactoryIodecl( ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>::Builder initFactoryIodecl(unsigned int size);
  inline void adoptFactoryIodecl(::capnp::Orphan< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>> disownFactoryIodecl();

  inline bool hasFactoryLetdecl();
  inline  ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>::Builder getFactoryLetdecl();
  inline void setFactoryLetdecl( ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>::Builder initFactoryLetdecl(unsigned int size);
  inline void adoptFactoryLetdecl(::capnp::Orphan< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>> disownFactoryLetdecl();

  inline bool hasFactoryLetexpr();
  inline  ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>::Builder getFactoryLetexpr();
  inline void setFactoryLetexpr( ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>::Builder initFactoryLetexpr(unsigned int size);
  inline void adoptFactoryLetexpr(::capnp::Orphan< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>> disownFactoryLetexpr();

  inline bool hasFactoryLogicnet();
  inline  ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>::Builder getFactoryLogicnet();
  inline void setFactoryLogicnet( ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>::Builder initFactoryLogicnet(unsigned int size);
  inline void adoptFactoryLogicnet(::capnp::Orphan< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>> disownFactoryLogicnet();

  inline bool hasFactoryLogictypespec();
  inline  ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryLogictypespec();
  inline void setFactoryLogictypespec( ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryLogictypespec(unsigned int size);
  inline void adoptFactoryLogictypespec(::capnp::Orphan< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>> disownFactoryLogictypespec();

  inline bool hasFactoryLogicvar();
  inline  ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>::Builder getFactoryLogicvar();
  inline void setFactoryLogicvar( ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>::Builder initFactoryLogicvar(unsigned int size);
  inline void adoptFactoryLogicvar(::capnp::Orphan< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>> disownFactoryLogicvar();

  inline bool hasFactoryLonginttypespec();
  inline  ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryLonginttypespec();
  inline void setFactoryLonginttypespec( ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryLonginttypespec(unsigned int size);
  inline void adoptFactoryLonginttypespec(::capnp::Orphan< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>> disownFactoryLonginttypespec();

  inline bool hasFactoryLongintvar();
  inline  ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>::Builder getFactoryLongintvar();
  inline void setFactoryLongintvar( ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>::Builder initFactoryLongintvar(unsigned int size);
  inline void adoptFactoryLongintvar(::capnp::Orphan< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>> disownFactoryLongintvar();

  inline bool hasFactoryMethodfunccall();
  inline  ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>::Builder getFactoryMethodfunccall();
  inline void setFactoryMethodfunccall( ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>::Builder initFactoryMethodfunccall(unsigned int size);
  inline void adoptFactoryMethodfunccall(::capnp::Orphan< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>> disownFactoryMethodfunccall();

  inline bool hasFactoryMethodtaskcall();
  inline  ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>::Builder getFactoryMethodtaskcall();
  inline void setFactoryMethodtaskcall( ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>::Builder initFactoryMethodtaskcall(unsigned int size);
  inline void adoptFactoryMethodtaskcall(::capnp::Orphan< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>> disownFactoryMethodtaskcall();

  inline bool hasFactoryModpath();
  inline  ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>::Builder getFactoryModpath();
  inline void setFactoryModpath( ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>::Builder initFactoryModpath(unsigned int size);
  inline void adoptFactoryModpath(::capnp::Orphan< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>> disownFactoryModpath();

  inline bool hasFactoryModport();
  inline  ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>::Builder getFactoryModport();
  inline void setFactoryModport( ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>::Builder initFactoryModport(unsigned int size);
  inline void adoptFactoryModport(::capnp::Orphan< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>> disownFactoryModport();

  inline bool hasFactoryModulearray();
  inline  ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>::Builder getFactoryModulearray();
  inline void setFactoryModulearray( ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>::Builder initFactoryModulearray(unsigned int size);
  inline void adoptFactoryModulearray(::capnp::Orphan< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>> disownFactoryModulearray();

  inline bool hasFactoryModuleinst();
  inline  ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>::Builder getFactoryModuleinst();
  inline void setFactoryModuleinst( ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>::Builder initFactoryModuleinst(unsigned int size);
  inline void adoptFactoryModuleinst(::capnp::Orphan< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>> disownFactoryModuleinst();

  inline bool hasFactoryModuletypespec();
  inline  ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryModuletypespec();
  inline void setFactoryModuletypespec( ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryModuletypespec(unsigned int size);
  inline void adoptFactoryModuletypespec(::capnp::Orphan< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>> disownFactoryModuletypespec();

  inline bool hasFactoryMulticlocksequenceexpr();
  inline  ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>::Builder getFactoryMulticlocksequenceexpr();
  inline void setFactoryMulticlocksequenceexpr( ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>::Builder initFactoryMulticlocksequenceexpr(unsigned int size);
  inline void adoptFactoryMulticlocksequenceexpr(::capnp::Orphan< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>> disownFactoryMulticlocksequenceexpr();

  inline bool hasFactoryNamedbegin();
  inline  ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>::Builder getFactoryNamedbegin();
  inline void setFactoryNamedbegin( ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>::Builder initFactoryNamedbegin(unsigned int size);
  inline void adoptFactoryNamedbegin(::capnp::Orphan< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>> disownFactoryNamedbegin();

  inline bool hasFactoryNamedevent();
  inline  ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>::Builder getFactoryNamedevent();
  inline void setFactoryNamedevent( ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>::Builder initFactoryNamedevent(unsigned int size);
  inline void adoptFactoryNamedevent(::capnp::Orphan< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>> disownFactoryNamedevent();

  inline bool hasFactoryNamedeventarray();
  inline  ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>::Builder getFactoryNamedeventarray();
  inline void setFactoryNamedeventarray( ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>::Builder initFactoryNamedeventarray(unsigned int size);
  inline void adoptFactoryNamedeventarray(::capnp::Orphan< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>> disownFactoryNamedeventarray();

  inline bool hasFactoryNamedfork();
  inline  ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>::Builder getFactoryNamedfork();
  inline void setFactoryNamedfork( ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>::Builder initFactoryNamedfork(unsigned int size);
  inline void adoptFactoryNamedfork(::capnp::Orphan< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>> disownFactoryNamedfork();

  inline bool hasFactoryNetbit();
  inline  ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>::Builder getFactoryNetbit();
  inline void setFactoryNetbit( ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>::Builder initFactoryNetbit(unsigned int size);
  inline void adoptFactoryNetbit(::capnp::Orphan< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>> disownFactoryNetbit();

  inline bool hasFactoryNullstmt();
  inline  ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryNullstmt();
  inline void setFactoryNullstmt( ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryNullstmt(unsigned int size);
  inline void adoptFactoryNullstmt(::capnp::Orphan< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>> disownFactoryNullstmt();

  inline bool hasFactoryOperation();
  inline  ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>::Builder getFactoryOperation();
  inline void setFactoryOperation( ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>::Builder initFactoryOperation(unsigned int size);
  inline void adoptFactoryOperation(::capnp::Orphan< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>> disownFactoryOperation();

  inline bool hasFactoryOrderedwait();
  inline  ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>::Builder getFactoryOrderedwait();
  inline void setFactoryOrderedwait( ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>::Builder initFactoryOrderedwait(unsigned int size);
  inline void adoptFactoryOrderedwait(::capnp::Orphan< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>> disownFactoryOrderedwait();

  inline bool hasFactoryPackage();
  inline  ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>::Builder getFactoryPackage();
  inline void setFactoryPackage( ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>::Builder initFactoryPackage(unsigned int size);
  inline void adoptFactoryPackage(::capnp::Orphan< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>> disownFactoryPackage();

  inline bool hasFactoryPackedarraynet();
  inline  ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>::Builder getFactoryPackedarraynet();
  inline void setFactoryPackedarraynet( ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>::Builder initFactoryPackedarraynet(unsigned int size);
  inline void adoptFactoryPackedarraynet(::capnp::Orphan< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>> disownFactoryPackedarraynet();

  inline bool hasFactoryPackedarraytypespec();
  inline  ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryPackedarraytypespec();
  inline void setFactoryPackedarraytypespec( ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryPackedarraytypespec(unsigned int size);
  inline void adoptFactoryPackedarraytypespec(::capnp::Orphan< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>> disownFactoryPackedarraytypespec();

  inline bool hasFactoryPackedarrayvar();
  inline  ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>::Builder getFactoryPackedarrayvar();
  inline void setFactoryPackedarrayvar( ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>::Builder initFactoryPackedarrayvar(unsigned int size);
  inline void adoptFactoryPackedarrayvar(::capnp::Orphan< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>> disownFactoryPackedarrayvar();

  inline bool hasFactoryParamassign();
  inline  ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>::Builder getFactoryParamassign();
  inline void setFactoryParamassign( ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>::Builder initFactoryParamassign(unsigned int size);
  inline void adoptFactoryParamassign(::capnp::Orphan< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>> disownFactoryParamassign();

  inline bool hasFactoryParameter();
  inline  ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>::Builder getFactoryParameter();
  inline void setFactoryParameter( ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>::Builder initFactoryParameter(unsigned int size);
  inline void adoptFactoryParameter(::capnp::Orphan< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>> disownFactoryParameter();

  inline bool hasFactoryPartselect();
  inline  ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>::Builder getFactoryPartselect();
  inline void setFactoryPartselect( ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>::Builder initFactoryPartselect(unsigned int size);
  inline void adoptFactoryPartselect(::capnp::Orphan< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>> disownFactoryPartselect();

  inline bool hasFactoryPathterm();
  inline  ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>::Builder getFactoryPathterm();
  inline void setFactoryPathterm( ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>::Builder initFactoryPathterm(unsigned int size);
  inline void adoptFactoryPathterm(::capnp::Orphan< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>> disownFactoryPathterm();

  inline bool hasFactoryPort();
  inline  ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>::Builder getFactoryPort();
  inline void setFactoryPort( ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>::Builder initFactoryPort(unsigned int size);
  inline void adoptFactoryPort(::capnp::Orphan< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>> disownFactoryPort();

  inline bool hasFactoryPortbit();
  inline  ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>::Builder getFactoryPortbit();
  inline void setFactoryPortbit( ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>::Builder initFactoryPortbit(unsigned int size);
  inline void adoptFactoryPortbit(::capnp::Orphan< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>> disownFactoryPortbit();

  inline bool hasFactoryPrimterm();
  inline  ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>::Builder getFactoryPrimterm();
  inline void setFactoryPrimterm( ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>::Builder initFactoryPrimterm(unsigned int size);
  inline void adoptFactoryPrimterm(::capnp::Orphan< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>> disownFactoryPrimterm();

  inline bool hasFactoryProgram();
  inline  ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>::Builder getFactoryProgram();
  inline void setFactoryProgram( ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>::Builder initFactoryProgram(unsigned int size);
  inline void adoptFactoryProgram(::capnp::Orphan< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>> disownFactoryProgram();

  inline bool hasFactoryProgramarray();
  inline  ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>::Builder getFactoryProgramarray();
  inline void setFactoryProgramarray( ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>::Builder initFactoryProgramarray(unsigned int size);
  inline void adoptFactoryProgramarray(::capnp::Orphan< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>> disownFactoryProgramarray();

  inline bool hasFactoryPropertydecl();
  inline  ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>::Builder getFactoryPropertydecl();
  inline void setFactoryPropertydecl( ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>::Builder initFactoryPropertydecl(unsigned int size);
  inline void adoptFactoryPropertydecl(::capnp::Orphan< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>> disownFactoryPropertydecl();

  inline bool hasFactoryPropertyinst();
  inline  ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>::Builder getFactoryPropertyinst();
  inline void setFactoryPropertyinst( ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>::Builder initFactoryPropertyinst(unsigned int size);
  inline void adoptFactoryPropertyinst(::capnp::Orphan< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>> disownFactoryPropertyinst();

  inline bool hasFactoryPropertyspec();
  inline  ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>::Builder getFactoryPropertyspec();
  inline void setFactoryPropertyspec( ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>::Builder initFactoryPropertyspec(unsigned int size);
  inline void adoptFactoryPropertyspec(::capnp::Orphan< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>> disownFactoryPropertyspec();

  inline bool hasFactoryPropertytypespec();
  inline  ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryPropertytypespec();
  inline void setFactoryPropertytypespec( ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryPropertytypespec(unsigned int size);
  inline void adoptFactoryPropertytypespec(::capnp::Orphan< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>> disownFactoryPropertytypespec();

  inline bool hasFactoryPropformaldecl();
  inline  ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>::Builder getFactoryPropformaldecl();
  inline void setFactoryPropformaldecl( ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>::Builder initFactoryPropformaldecl(unsigned int size);
  inline void adoptFactoryPropformaldecl(::capnp::Orphan< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>> disownFactoryPropformaldecl();

  inline bool hasFactoryRange();
  inline  ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>::Builder getFactoryRange();
  inline void setFactoryRange( ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>::Builder initFactoryRange(unsigned int size);
  inline void adoptFactoryRange(::capnp::Orphan< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>> disownFactoryRange();

  inline bool hasFactoryRealtypespec();
  inline  ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryRealtypespec();
  inline void setFactoryRealtypespec( ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryRealtypespec(unsigned int size);
  inline void adoptFactoryRealtypespec(::capnp::Orphan< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>> disownFactoryRealtypespec();

  inline bool hasFactoryRealvar();
  inline  ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>::Builder getFactoryRealvar();
  inline void setFactoryRealvar( ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>::Builder initFactoryRealvar(unsigned int size);
  inline void adoptFactoryRealvar(::capnp::Orphan< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>> disownFactoryRealvar();

  inline bool hasFactoryRefmodule();
  inline  ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>::Builder getFactoryRefmodule();
  inline void setFactoryRefmodule( ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>::Builder initFactoryRefmodule(unsigned int size);
  inline void adoptFactoryRefmodule(::capnp::Orphan< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>> disownFactoryRefmodule();

  inline bool hasFactoryRefobj();
  inline  ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>::Builder getFactoryRefobj();
  inline void setFactoryRefobj( ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>::Builder initFactoryRefobj(unsigned int size);
  inline void adoptFactoryRefobj(::capnp::Orphan< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>> disownFactoryRefobj();

  inline bool hasFactoryReftypespec();
  inline  ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryReftypespec();
  inline void setFactoryReftypespec( ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryReftypespec(unsigned int size);
  inline void adoptFactoryReftypespec(::capnp::Orphan< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>> disownFactoryReftypespec();

  inline bool hasFactoryRefvar();
  inline  ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>::Builder getFactoryRefvar();
  inline void setFactoryRefvar( ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>::Builder initFactoryRefvar(unsigned int size);
  inline void adoptFactoryRefvar(::capnp::Orphan< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>> disownFactoryRefvar();

  inline bool hasFactoryReg();
  inline  ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>::Builder getFactoryReg();
  inline void setFactoryReg( ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>::Builder initFactoryReg(unsigned int size);
  inline void adoptFactoryReg(::capnp::Orphan< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>> disownFactoryReg();

  inline bool hasFactoryRegarray();
  inline  ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>::Builder getFactoryRegarray();
  inline void setFactoryRegarray( ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>::Builder initFactoryRegarray(unsigned int size);
  inline void adoptFactoryRegarray(::capnp::Orphan< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>> disownFactoryRegarray();

  inline bool hasFactoryRelease();
  inline  ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>::Builder getFactoryRelease();
  inline void setFactoryRelease( ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>::Builder initFactoryRelease(unsigned int size);
  inline void adoptFactoryRelease(::capnp::Orphan< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>> disownFactoryRelease();

  inline bool hasFactoryRepeat();
  inline  ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>::Builder getFactoryRepeat();
  inline void setFactoryRepeat( ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>::Builder initFactoryRepeat(unsigned int size);
  inline void adoptFactoryRepeat(::capnp::Orphan< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>> disownFactoryRepeat();

  inline bool hasFactoryRepeatcontrol();
  inline  ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>::Builder getFactoryRepeatcontrol();
  inline void setFactoryRepeatcontrol( ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>::Builder initFactoryRepeatcontrol(unsigned int size);
  inline void adoptFactoryRepeatcontrol(::capnp::Orphan< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>> disownFactoryRepeatcontrol();

  inline bool hasFactoryRestrict();
  inline  ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>::Builder getFactoryRestrict();
  inline void setFactoryRestrict( ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>::Builder initFactoryRestrict(unsigned int size);
  inline void adoptFactoryRestrict(::capnp::Orphan< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>> disownFactoryRestrict();

  inline bool hasFactoryReturnstmt();
  inline  ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryReturnstmt();
  inline void setFactoryReturnstmt( ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryReturnstmt(unsigned int size);
  inline void adoptFactoryReturnstmt(::capnp::Orphan< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>> disownFactoryReturnstmt();

  inline bool hasFactorySeqformaldecl();
  inline  ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>::Builder getFactorySeqformaldecl();
  inline void setFactorySeqformaldecl( ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>::Builder initFactorySeqformaldecl(unsigned int size);
  inline void adoptFactorySeqformaldecl(::capnp::Orphan< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>> disownFactorySeqformaldecl();

  inline bool hasFactorySequencedecl();
  inline  ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>::Builder getFactorySequencedecl();
  inline void setFactorySequencedecl( ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>::Builder initFactorySequencedecl(unsigned int size);
  inline void adoptFactorySequencedecl(::capnp::Orphan< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>> disownFactorySequencedecl();

  inline bool hasFactorySequenceinst();
  inline  ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>::Builder getFactorySequenceinst();
  inline void setFactorySequenceinst( ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>::Builder initFactorySequenceinst(unsigned int size);
  inline void adoptFactorySequenceinst(::capnp::Orphan< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>> disownFactorySequenceinst();

  inline bool hasFactorySequencetypespec();
  inline  ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>::Builder getFactorySequencetypespec();
  inline void setFactorySequencetypespec( ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>::Builder initFactorySequencetypespec(unsigned int size);
  inline void adoptFactorySequencetypespec(::capnp::Orphan< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>> disownFactorySequencetypespec();

  inline bool hasFactoryShortinttypespec();
  inline  ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryShortinttypespec();
  inline void setFactoryShortinttypespec( ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryShortinttypespec(unsigned int size);
  inline void adoptFactoryShortinttypespec(::capnp::Orphan< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>> disownFactoryShortinttypespec();

  inline bool hasFactoryShortintvar();
  inline  ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>::Builder getFactoryShortintvar();
  inline void setFactoryShortintvar( ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>::Builder initFactoryShortintvar(unsigned int size);
  inline void adoptFactoryShortintvar(::capnp::Orphan< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>> disownFactoryShortintvar();

  inline bool hasFactoryShortrealtypespec();
  inline  ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryShortrealtypespec();
  inline void setFactoryShortrealtypespec( ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryShortrealtypespec(unsigned int size);
  inline void adoptFactoryShortrealtypespec(::capnp::Orphan< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>> disownFactoryShortrealtypespec();

  inline bool hasFactoryShortrealvar();
  inline  ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>::Builder getFactoryShortrealvar();
  inline void setFactoryShortrealvar( ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>::Builder initFactoryShortrealvar(unsigned int size);
  inline void adoptFactoryShortrealvar(::capnp::Orphan< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>> disownFactoryShortrealvar();

  inline bool hasFactorySoftdisable();
  inline  ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>::Builder getFactorySoftdisable();
  inline void setFactorySoftdisable( ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>::Builder initFactorySoftdisable(unsigned int size);
  inline void adoptFactorySoftdisable(::capnp::Orphan< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>> disownFactorySoftdisable();

  inline bool hasFactorySpecparam();
  inline  ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>::Builder getFactorySpecparam();
  inline void setFactorySpecparam( ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>::Builder initFactorySpecparam(unsigned int size);
  inline void adoptFactorySpecparam(::capnp::Orphan< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>> disownFactorySpecparam();

  inline bool hasFactoryStringtypespec();
  inline  ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryStringtypespec();
  inline void setFactoryStringtypespec( ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryStringtypespec(unsigned int size);
  inline void adoptFactoryStringtypespec(::capnp::Orphan< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>> disownFactoryStringtypespec();

  inline bool hasFactoryStringvar();
  inline  ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>::Builder getFactoryStringvar();
  inline void setFactoryStringvar( ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>::Builder initFactoryStringvar(unsigned int size);
  inline void adoptFactoryStringvar(::capnp::Orphan< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>> disownFactoryStringvar();

  inline bool hasFactoryStructnet();
  inline  ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>::Builder getFactoryStructnet();
  inline void setFactoryStructnet( ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>::Builder initFactoryStructnet(unsigned int size);
  inline void adoptFactoryStructnet(::capnp::Orphan< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>> disownFactoryStructnet();

  inline bool hasFactoryStructpattern();
  inline  ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>::Builder getFactoryStructpattern();
  inline void setFactoryStructpattern( ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>::Builder initFactoryStructpattern(unsigned int size);
  inline void adoptFactoryStructpattern(::capnp::Orphan< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>> disownFactoryStructpattern();

  inline bool hasFactoryStructtypespec();
  inline  ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryStructtypespec();
  inline void setFactoryStructtypespec( ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryStructtypespec(unsigned int size);
  inline void adoptFactoryStructtypespec(::capnp::Orphan< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>> disownFactoryStructtypespec();

  inline bool hasFactoryStructvar();
  inline  ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>::Builder getFactoryStructvar();
  inline void setFactoryStructvar( ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>::Builder initFactoryStructvar(unsigned int size);
  inline void adoptFactoryStructvar(::capnp::Orphan< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>> disownFactoryStructvar();

  inline bool hasFactorySwitcharray();
  inline  ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>::Builder getFactorySwitcharray();
  inline void setFactorySwitcharray( ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>::Builder initFactorySwitcharray(unsigned int size);
  inline void adoptFactorySwitcharray(::capnp::Orphan< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>> disownFactorySwitcharray();

  inline bool hasFactorySwitchtran();
  inline  ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>::Builder getFactorySwitchtran();
  inline void setFactorySwitchtran( ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>::Builder initFactorySwitchtran(unsigned int size);
  inline void adoptFactorySwitchtran(::capnp::Orphan< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>> disownFactorySwitchtran();

  inline bool hasFactorySysfunccall();
  inline  ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>::Builder getFactorySysfunccall();
  inline void setFactorySysfunccall( ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>::Builder initFactorySysfunccall(unsigned int size);
  inline void adoptFactorySysfunccall(::capnp::Orphan< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>> disownFactorySysfunccall();

  inline bool hasFactorySystaskcall();
  inline  ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>::Builder getFactorySystaskcall();
  inline void setFactorySystaskcall( ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>::Builder initFactorySystaskcall(unsigned int size);
  inline void adoptFactorySystaskcall(::capnp::Orphan< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>> disownFactorySystaskcall();

  inline bool hasFactoryTableentry();
  inline  ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>::Builder getFactoryTableentry();
  inline void setFactoryTableentry( ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>::Builder initFactoryTableentry(unsigned int size);
  inline void adoptFactoryTableentry(::capnp::Orphan< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>> disownFactoryTableentry();

  inline bool hasFactoryTaggedpattern();
  inline  ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>::Builder getFactoryTaggedpattern();
  inline void setFactoryTaggedpattern( ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>::Builder initFactoryTaggedpattern(unsigned int size);
  inline void adoptFactoryTaggedpattern(::capnp::Orphan< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>> disownFactoryTaggedpattern();

  inline bool hasFactoryTask();
  inline  ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>::Builder getFactoryTask();
  inline void setFactoryTask( ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>::Builder initFactoryTask(unsigned int size);
  inline void adoptFactoryTask(::capnp::Orphan< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>> disownFactoryTask();

  inline bool hasFactoryTaskcall();
  inline  ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>::Builder getFactoryTaskcall();
  inline void setFactoryTaskcall( ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>::Builder initFactoryTaskcall(unsigned int size);
  inline void adoptFactoryTaskcall(::capnp::Orphan< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>> disownFactoryTaskcall();

  inline bool hasFactoryTchk();
  inline  ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>::Builder getFactoryTchk();
  inline void setFactoryTchk( ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>::Builder initFactoryTchk(unsigned int size);
  inline void adoptFactoryTchk(::capnp::Orphan< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>> disownFactoryTchk();

  inline bool hasFactoryTchkterm();
  inline  ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>::Builder getFactoryTchkterm();
  inline void setFactoryTchkterm( ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>::Builder initFactoryTchkterm(unsigned int size);
  inline void adoptFactoryTchkterm(::capnp::Orphan< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>> disownFactoryTchkterm();

  inline bool hasFactoryThreadobj();
  inline  ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>::Builder getFactoryThreadobj();
  inline void setFactoryThreadobj( ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>::Builder initFactoryThreadobj(unsigned int size);
  inline void adoptFactoryThreadobj(::capnp::Orphan< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>> disownFactoryThreadobj();

  inline bool hasFactoryTimenet();
  inline  ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>::Builder getFactoryTimenet();
  inline void setFactoryTimenet( ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>::Builder initFactoryTimenet(unsigned int size);
  inline void adoptFactoryTimenet(::capnp::Orphan< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>> disownFactoryTimenet();

  inline bool hasFactoryTimetypespec();
  inline  ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryTimetypespec();
  inline void setFactoryTimetypespec( ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryTimetypespec(unsigned int size);
  inline void adoptFactoryTimetypespec(::capnp::Orphan< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>> disownFactoryTimetypespec();

  inline bool hasFactoryTimevar();
  inline  ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>::Builder getFactoryTimevar();
  inline void setFactoryTimevar( ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>::Builder initFactoryTimevar(unsigned int size);
  inline void adoptFactoryTimevar(::capnp::Orphan< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>> disownFactoryTimevar();

  inline bool hasFactoryTypeparameter();
  inline  ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>::Builder getFactoryTypeparameter();
  inline void setFactoryTypeparameter( ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>::Builder initFactoryTypeparameter(unsigned int size);
  inline void adoptFactoryTypeparameter(::capnp::Orphan< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>> disownFactoryTypeparameter();

  inline bool hasFactoryTypespecmember();
  inline  ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>::Builder getFactoryTypespecmember();
  inline void setFactoryTypespecmember( ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>::Builder initFactoryTypespecmember(unsigned int size);
  inline void adoptFactoryTypespecmember(::capnp::Orphan< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>> disownFactoryTypespecmember();

  inline bool hasFactoryUdp();
  inline  ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>::Builder getFactoryUdp();
  inline void setFactoryUdp( ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>::Builder initFactoryUdp(unsigned int size);
  inline void adoptFactoryUdp(::capnp::Orphan< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>> disownFactoryUdp();

  inline bool hasFactoryUdparray();
  inline  ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>::Builder getFactoryUdparray();
  inline void setFactoryUdparray( ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>::Builder initFactoryUdparray(unsigned int size);
  inline void adoptFactoryUdparray(::capnp::Orphan< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>> disownFactoryUdparray();

  inline bool hasFactoryUdpdefn();
  inline  ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>::Builder getFactoryUdpdefn();
  inline void setFactoryUdpdefn( ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>::Builder initFactoryUdpdefn(unsigned int size);
  inline void adoptFactoryUdpdefn(::capnp::Orphan< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>> disownFactoryUdpdefn();

  inline bool hasFactoryUniontypespec();
  inline  ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryUniontypespec();
  inline void setFactoryUniontypespec( ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryUniontypespec(unsigned int size);
  inline void adoptFactoryUniontypespec(::capnp::Orphan< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>> disownFactoryUniontypespec();

  inline bool hasFactoryUnionvar();
  inline  ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>::Builder getFactoryUnionvar();
  inline void setFactoryUnionvar( ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>::Builder initFactoryUnionvar(unsigned int size);
  inline void adoptFactoryUnionvar(::capnp::Orphan< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>> disownFactoryUnionvar();

  inline bool hasFactoryUnsupportedexpr();
  inline  ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>::Builder getFactoryUnsupportedexpr();
  inline void setFactoryUnsupportedexpr( ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>::Builder initFactoryUnsupportedexpr(unsigned int size);
  inline void adoptFactoryUnsupportedexpr(::capnp::Orphan< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>> disownFactoryUnsupportedexpr();

  inline bool hasFactoryUnsupportedstmt();
  inline  ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryUnsupportedstmt();
  inline void setFactoryUnsupportedstmt( ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryUnsupportedstmt(unsigned int size);
  inline void adoptFactoryUnsupportedstmt(::capnp::Orphan< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>> disownFactoryUnsupportedstmt();

  inline bool hasFactoryUnsupportedtypespec();
  inline  ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryUnsupportedtypespec();
  inline void setFactoryUnsupportedtypespec( ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryUnsupportedtypespec(unsigned int size);
  inline void adoptFactoryUnsupportedtypespec(::capnp::Orphan< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>> disownFactoryUnsupportedtypespec();

  inline bool hasFactoryUsersystf();
  inline  ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>::Builder getFactoryUsersystf();
  inline void setFactoryUsersystf( ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>::Builder initFactoryUsersystf(unsigned int size);
  inline void adoptFactoryUsersystf(::capnp::Orphan< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>> disownFactoryUsersystf();

  inline bool hasFactoryVarbit();
  inline  ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>::Builder getFactoryVarbit();
  inline void setFactoryVarbit( ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>::Builder initFactoryVarbit(unsigned int size);
  inline void adoptFactoryVarbit(::capnp::Orphan< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>> disownFactoryVarbit();

  inline bool hasFactoryVarselect();
  inline  ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>::Builder getFactoryVarselect();
  inline void setFactoryVarselect( ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>::Builder initFactoryVarselect(unsigned int size);
  inline void adoptFactoryVarselect(::capnp::Orphan< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>> disownFactoryVarselect();

  inline bool hasFactoryVirtualinterfacevar();
  inline  ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>::Builder getFactoryVirtualinterfacevar();
  inline void setFactoryVirtualinterfacevar( ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>::Builder initFactoryVirtualinterfacevar(unsigned int size);
  inline void adoptFactoryVirtualinterfacevar(::capnp::Orphan< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>> disownFactoryVirtualinterfacevar();

  inline bool hasFactoryVoidtypespec();
  inline  ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>::Builder getFactoryVoidtypespec();
  inline void setFactoryVoidtypespec( ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>::Builder initFactoryVoidtypespec(unsigned int size);
  inline void adoptFactoryVoidtypespec(::capnp::Orphan< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>> disownFactoryVoidtypespec();

  inline bool hasFactoryWaitfork();
  inline  ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>::Builder getFactoryWaitfork();
  inline void setFactoryWaitfork( ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>::Builder initFactoryWaitfork(unsigned int size);
  inline void adoptFactoryWaitfork(::capnp::Orphan< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>> disownFactoryWaitfork();

  inline bool hasFactoryWaitstmt();
  inline  ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>::Builder getFactoryWaitstmt();
  inline void setFactoryWaitstmt( ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>::Builder initFactoryWaitstmt(unsigned int size);
  inline void adoptFactoryWaitstmt(::capnp::Orphan< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>> disownFactoryWaitstmt();

  inline bool hasFactoryWhilestmt();
  inline  ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>::Builder getFactoryWhilestmt();
  inline void setFactoryWhilestmt( ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>::Builder initFactoryWhilestmt(unsigned int size);
  inline void adoptFactoryWhilestmt(::capnp::Orphan< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>> disownFactoryWhilestmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UhdmRoot::Pipeline {
public:
  typedef UhdmRoot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Any::Reader {
public:
  typedef Any Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getUhdmId() const;

  inline bool hasVpiParent() const;
  inline  ::ObjIndexType::Reader getVpiParent() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint32_t getVpiEndLineNo() const;

  inline  ::uint16_t getVpiColumnNo() const;

  inline  ::uint16_t getVpiEndColumnNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Any::Builder {
public:
  typedef Any Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getUhdmId();
  inline void setUhdmId( ::uint64_t value);

  inline bool hasVpiParent();
  inline  ::ObjIndexType::Builder getVpiParent();
  inline void setVpiParent( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiParent();
  inline void adoptVpiParent(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiParent();

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint32_t getVpiEndLineNo();
  inline void setVpiEndLineNo( ::uint32_t value);

  inline  ::uint16_t getVpiColumnNo();
  inline void setVpiColumnNo( ::uint16_t value);

  inline  ::uint16_t getVpiEndColumnNo();
  inline void setVpiEndColumnNo( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Any::Pipeline {
public:
  typedef Any Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getVpiParent();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Attribute::Reader {
public:
  typedef Attribute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline bool getVpiDefAttribute() const;

  inline  ::uint64_t getVpiValue() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Attribute::Builder {
public:
  typedef Attribute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool getVpiDefAttribute();
  inline void setVpiDefAttribute(bool value);

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefLineNo();
  inline void setVpiDefLineNo( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Attribute::Pipeline {
public:
  typedef Attribute Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Virtualinterfacevar::Reader {
public:
  typedef Virtualinterfacevar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Virtualinterfacevar::Builder {
public:
  typedef Virtualinterfacevar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Virtualinterfacevar::Pipeline {
public:
  typedef Virtualinterfacevar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Letdecl::Reader {
public:
  typedef Letdecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasExpressions() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getExpressions() const;

  inline bool hasSeqformaldecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getSeqformaldecls() const;

  inline  ::uint64_t getVpiName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Letdecl::Builder {
public:
  typedef Letdecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasExpressions();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getExpressions();
  inline void setExpressions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initExpressions(unsigned int size);
  inline void adoptExpressions(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownExpressions();

  inline bool hasSeqformaldecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getSeqformaldecls();
  inline void setSeqformaldecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSeqformaldecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initSeqformaldecls(unsigned int size);
  inline void adoptSeqformaldecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownSeqformaldecls();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Letdecl::Pipeline {
public:
  typedef Letdecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Concurrentassertions::Reader {
public:
  typedef Concurrentassertions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiIsClockInferred() const;

  inline bool hasClockingevent() const;
  inline  ::ObjIndexType::Reader getClockingevent() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline bool hasVpiProperty() const;
  inline  ::ObjIndexType::Reader getVpiProperty() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Concurrentassertions::Builder {
public:
  typedef Concurrentassertions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiIsClockInferred();
  inline void setVpiIsClockInferred(bool value);

  inline bool hasClockingevent();
  inline  ::ObjIndexType::Builder getClockingevent();
  inline void setClockingevent( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initClockingevent();
  inline void adoptClockingevent(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownClockingevent();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline bool hasVpiProperty();
  inline  ::ObjIndexType::Builder getVpiProperty();
  inline void setVpiProperty( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiProperty();
  inline void adoptVpiProperty(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiProperty();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Concurrentassertions::Pipeline {
public:
  typedef Concurrentassertions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getClockingevent();
  inline  ::ObjIndexType::Pipeline getStmt();
  inline  ::ObjIndexType::Pipeline getVpiProperty();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Processstmt::Reader {
public:
  typedef Processstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline  ::uint64_t getModuleinst() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Processstmt::Builder {
public:
  typedef Processstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline  ::uint64_t getModuleinst();
  inline void setModuleinst( ::uint64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Processstmt::Pipeline {
public:
  typedef Processstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Always::Reader {
public:
  typedef Always Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Processstmt::Reader getBase() const;

  inline  ::int64_t getVpiAlwaysType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Always::Builder {
public:
  typedef Always Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Processstmt::Builder getBase();
  inline void setBase( ::Processstmt::Reader value);
  inline  ::Processstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Processstmt>&& value);
  inline ::capnp::Orphan< ::Processstmt> disownBase();

  inline  ::int64_t getVpiAlwaysType();
  inline void setVpiAlwaysType( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Always::Pipeline {
public:
  typedef Always Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Processstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Finalstmt::Reader {
public:
  typedef Finalstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Processstmt::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Finalstmt::Builder {
public:
  typedef Finalstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Processstmt::Builder getBase();
  inline void setBase( ::Processstmt::Reader value);
  inline  ::Processstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Processstmt>&& value);
  inline ::capnp::Orphan< ::Processstmt> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Finalstmt::Pipeline {
public:
  typedef Finalstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Processstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Initial::Reader {
public:
  typedef Initial Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Processstmt::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Initial::Builder {
public:
  typedef Initial Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Processstmt::Builder getBase();
  inline void setBase( ::Processstmt::Reader value);
  inline  ::Processstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Processstmt>&& value);
  inline ::capnp::Orphan< ::Processstmt> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Initial::Pipeline {
public:
  typedef Initial Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Processstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Atomicstmt::Reader {
public:
  typedef Atomicstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Atomicstmt::Builder {
public:
  typedef Atomicstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Atomicstmt::Pipeline {
public:
  typedef Atomicstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Delaycontrol::Reader {
public:
  typedef Delaycontrol Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::uint64_t getVpiDelay() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Delaycontrol::Builder {
public:
  typedef Delaycontrol Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::uint64_t getVpiDelay();
  inline void setVpiDelay( ::uint64_t value);

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Delaycontrol::Pipeline {
public:
  typedef Delaycontrol Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getStmt();
  inline  ::ObjIndexType::Pipeline getDelay();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Delayterm::Reader {
public:
  typedef Delayterm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Delayterm::Builder {
public:
  typedef Delayterm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Delayterm::Pipeline {
public:
  typedef Delayterm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Eventcontrol::Reader {
public:
  typedef Eventcontrol Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Eventcontrol::Builder {
public:
  typedef Eventcontrol Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Eventcontrol::Pipeline {
public:
  typedef Eventcontrol Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Repeatcontrol::Reader {
public:
  typedef Repeatcontrol Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Repeatcontrol::Builder {
public:
  typedef Repeatcontrol Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Repeatcontrol::Pipeline {
public:
  typedef Repeatcontrol Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Scope::Reader {
public:
  typedef Scope Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getSequencedecls() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getConcurrentassertions() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getNamedeventarrays() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariables() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvars() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLogicvars() const;

  inline bool hasArrayvars() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getArrayvars() const;

  inline bool hasArrayvarmems() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getArrayvarmems() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getParameters() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getParamassigns() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTypespecs() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getInstanceitems() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLetdecls() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Scope::Builder {
public:
  typedef Scope Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownSequencedecls();

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownConcurrentassertions();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownNamedeventarrays();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariables();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownVirtualinterfacevars();

  inline bool hasLogicvars();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLogicvars();
  inline void setLogicvars( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLogicvars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLogicvars(unsigned int size);
  inline void adoptLogicvars(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownLogicvars();

  inline bool hasArrayvars();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getArrayvars();
  inline void setArrayvars( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setArrayvars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initArrayvars(unsigned int size);
  inline void adoptArrayvars(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownArrayvars();

  inline bool hasArrayvarmems();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getArrayvarmems();
  inline void setArrayvarmems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setArrayvarmems(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initArrayvarmems(unsigned int size);
  inline void adoptArrayvarmems(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownArrayvarmems();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownParameters();

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownParamassigns();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTypespecs();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownInstanceitems();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownLetdecls();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Scope::Pipeline {
public:
  typedef Scope Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Begin::Reader {
public:
  typedef Begin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline bool hasStmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getStmts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Begin::Builder {
public:
  typedef Begin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline bool hasStmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getStmts();
  inline void setStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initStmts(unsigned int size);
  inline void adoptStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownStmts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Begin::Pipeline {
public:
  typedef Begin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedbegin::Reader {
public:
  typedef Namedbegin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline bool hasStmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getStmts() const;

  inline  ::uint64_t getVpiEndLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedbegin::Builder {
public:
  typedef Namedbegin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline bool hasStmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getStmts();
  inline void setStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initStmts(unsigned int size);
  inline void adoptStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownStmts();

  inline  ::uint64_t getVpiEndLabel();
  inline void setVpiEndLabel( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedbegin::Pipeline {
public:
  typedef Namedbegin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedfork::Reader {
public:
  typedef Namedfork Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline  ::int64_t getVpiJoinType() const;

  inline bool hasStmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getStmts() const;

  inline  ::uint64_t getVpiEndLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedfork::Builder {
public:
  typedef Namedfork Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline  ::int64_t getVpiJoinType();
  inline void setVpiJoinType( ::int64_t value);

  inline bool hasStmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getStmts();
  inline void setStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initStmts(unsigned int size);
  inline void adoptStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownStmts();

  inline  ::uint64_t getVpiEndLabel();
  inline void setVpiEndLabel( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedfork::Pipeline {
public:
  typedef Namedfork Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Forkstmt::Reader {
public:
  typedef Forkstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline  ::int64_t getVpiJoinType() const;

  inline bool hasStmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getStmts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Forkstmt::Builder {
public:
  typedef Forkstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline  ::int64_t getVpiJoinType();
  inline void setVpiJoinType( ::int64_t value);

  inline bool hasStmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getStmts();
  inline void setStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initStmts(unsigned int size);
  inline void adoptStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownStmts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Forkstmt::Pipeline {
public:
  typedef Forkstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Forstmt::Reader {
public:
  typedef Forstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline  ::int64_t getVpiLocalVarDecls() const;

  inline bool hasVpiForInitStmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiForInitStmts() const;

  inline bool hasVpiForIncStmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiForIncStmts() const;

  inline bool hasVpiForInitStmt() const;
  inline  ::ObjIndexType::Reader getVpiForInitStmt() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiForIncStmt() const;
  inline  ::ObjIndexType::Reader getVpiForIncStmt() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Forstmt::Builder {
public:
  typedef Forstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline  ::int64_t getVpiLocalVarDecls();
  inline void setVpiLocalVarDecls( ::int64_t value);

  inline bool hasVpiForInitStmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiForInitStmts();
  inline void setVpiForInitStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiForInitStmts(unsigned int size);
  inline void adoptVpiForInitStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiForInitStmts();

  inline bool hasVpiForIncStmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiForIncStmts();
  inline void setVpiForIncStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiForIncStmts(unsigned int size);
  inline void adoptVpiForIncStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiForIncStmts();

  inline bool hasVpiForInitStmt();
  inline  ::ObjIndexType::Builder getVpiForInitStmt();
  inline void setVpiForInitStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiForInitStmt();
  inline void adoptVpiForInitStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiForInitStmt();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiForIncStmt();
  inline  ::ObjIndexType::Builder getVpiForIncStmt();
  inline void setVpiForIncStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiForIncStmt();
  inline void adoptVpiForIncStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiForIncStmt();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Forstmt::Pipeline {
public:
  typedef Forstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiForInitStmt();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiForIncStmt();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Ifstmt::Reader {
public:
  typedef Ifstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::int64_t getVpiQualifier() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Ifstmt::Builder {
public:
  typedef Ifstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::int64_t getVpiQualifier();
  inline void setVpiQualifier( ::int64_t value);

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Ifstmt::Pipeline {
public:
  typedef Ifstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Eventstmt::Reader {
public:
  typedef Eventstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool getVpiBlocking() const;

  inline  ::uint64_t getNamedevent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Eventstmt::Builder {
public:
  typedef Eventstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool getVpiBlocking();
  inline void setVpiBlocking(bool value);

  inline  ::uint64_t getNamedevent();
  inline void setNamedevent( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Eventstmt::Pipeline {
public:
  typedef Eventstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Threadobj::Reader {
public:
  typedef Threadobj Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Threadobj::Builder {
public:
  typedef Threadobj Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Threadobj::Pipeline {
public:
  typedef Threadobj Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Foreverstmt::Reader {
public:
  typedef Foreverstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Foreverstmt::Builder {
public:
  typedef Foreverstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Foreverstmt::Pipeline {
public:
  typedef Foreverstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Waits::Reader {
public:
  typedef Waits Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Waits::Builder {
public:
  typedef Waits Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Waits::Pipeline {
public:
  typedef Waits Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Waitstmt::Reader {
public:
  typedef Waitstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Waits::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Waitstmt::Builder {
public:
  typedef Waitstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Waits::Builder getBase();
  inline void setBase( ::Waits::Reader value);
  inline  ::Waits::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Waits>&& value);
  inline ::capnp::Orphan< ::Waits> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Waitstmt::Pipeline {
public:
  typedef Waitstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Waits::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Waitfork::Reader {
public:
  typedef Waitfork Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Waits::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Waitfork::Builder {
public:
  typedef Waitfork Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Waits::Builder getBase();
  inline void setBase( ::Waits::Reader value);
  inline  ::Waits::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Waits>&& value);
  inline ::capnp::Orphan< ::Waits> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Waitfork::Pipeline {
public:
  typedef Waitfork Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Waits::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Orderedwait::Reader {
public:
  typedef Orderedwait Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Waits::Reader getBase() const;

  inline bool hasVpiConditions() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiConditions() const;

  inline bool hasVpiElseStmt() const;
  inline  ::ObjIndexType::Reader getVpiElseStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Orderedwait::Builder {
public:
  typedef Orderedwait Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Waits::Builder getBase();
  inline void setBase( ::Waits::Reader value);
  inline  ::Waits::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Waits>&& value);
  inline ::capnp::Orphan< ::Waits> disownBase();

  inline bool hasVpiConditions();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiConditions();
  inline void setVpiConditions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiConditions(unsigned int size);
  inline void adoptVpiConditions(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiConditions();

  inline bool hasVpiElseStmt();
  inline  ::ObjIndexType::Builder getVpiElseStmt();
  inline void setVpiElseStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiElseStmt();
  inline void adoptVpiElseStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiElseStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Orderedwait::Pipeline {
public:
  typedef Orderedwait Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Waits::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiElseStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Disables::Reader {
public:
  typedef Disables Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Disables::Builder {
public:
  typedef Disables Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Disables::Pipeline {
public:
  typedef Disables Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Disable::Reader {
public:
  typedef Disable Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Disables::Reader getBase() const;

  inline bool hasVpiExpr() const;
  inline  ::ObjIndexType::Reader getVpiExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Disable::Builder {
public:
  typedef Disable Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Disables::Builder getBase();
  inline void setBase( ::Disables::Reader value);
  inline  ::Disables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Disables>&& value);
  inline ::capnp::Orphan< ::Disables> disownBase();

  inline bool hasVpiExpr();
  inline  ::ObjIndexType::Builder getVpiExpr();
  inline void setVpiExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiExpr();
  inline void adoptVpiExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Disable::Pipeline {
public:
  typedef Disable Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Disables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Disablefork::Reader {
public:
  typedef Disablefork Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Disables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Disablefork::Builder {
public:
  typedef Disablefork Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Disables::Builder getBase();
  inline void setBase( ::Disables::Reader value);
  inline  ::Disables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Disables>&& value);
  inline ::capnp::Orphan< ::Disables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Disablefork::Pipeline {
public:
  typedef Disablefork Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Disables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Continuestmt::Reader {
public:
  typedef Continuestmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Continuestmt::Builder {
public:
  typedef Continuestmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Continuestmt::Pipeline {
public:
  typedef Continuestmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Breakstmt::Reader {
public:
  typedef Breakstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Breakstmt::Builder {
public:
  typedef Breakstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Breakstmt::Pipeline {
public:
  typedef Breakstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Returnstmt::Reader {
public:
  typedef Returnstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Returnstmt::Builder {
public:
  typedef Returnstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Returnstmt::Pipeline {
public:
  typedef Returnstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Whilestmt::Reader {
public:
  typedef Whilestmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Whilestmt::Builder {
public:
  typedef Whilestmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Whilestmt::Pipeline {
public:
  typedef Whilestmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Repeat::Reader {
public:
  typedef Repeat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Repeat::Builder {
public:
  typedef Repeat Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Repeat::Pipeline {
public:
  typedef Repeat Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Dowhile::Reader {
public:
  typedef Dowhile Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Dowhile::Builder {
public:
  typedef Dowhile Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Dowhile::Pipeline {
public:
  typedef Dowhile Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Ifelse::Reader {
public:
  typedef Ifelse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::int64_t getVpiQualifier() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

  inline bool hasVpiElseStmt() const;
  inline  ::ObjIndexType::Reader getVpiElseStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Ifelse::Builder {
public:
  typedef Ifelse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::int64_t getVpiQualifier();
  inline void setVpiQualifier( ::int64_t value);

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

  inline bool hasVpiElseStmt();
  inline  ::ObjIndexType::Builder getVpiElseStmt();
  inline void setVpiElseStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiElseStmt();
  inline void adoptVpiElseStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiElseStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Ifelse::Pipeline {
public:
  typedef Ifelse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
  inline  ::ObjIndexType::Pipeline getVpiElseStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Casestmt::Reader {
public:
  typedef Casestmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::uint64_t getVpiRandType() const;

  inline  ::int64_t getVpiCaseType() const;

  inline  ::int64_t getVpiQualifier() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasCaseitems() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCaseitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Casestmt::Builder {
public:
  typedef Casestmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::uint64_t getVpiRandType();
  inline void setVpiRandType( ::uint64_t value);

  inline  ::int64_t getVpiCaseType();
  inline void setVpiCaseType( ::int64_t value);

  inline  ::int64_t getVpiQualifier();
  inline void setVpiQualifier( ::int64_t value);

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasCaseitems();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCaseitems();
  inline void setCaseitems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCaseitems(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCaseitems(unsigned int size);
  inline void adoptCaseitems(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCaseitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Casestmt::Pipeline {
public:
  typedef Casestmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Force::Reader {
public:
  typedef Force Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasRhs() const;
  inline  ::ObjIndexType::Reader getRhs() const;

  inline bool hasLhs() const;
  inline  ::ObjIndexType::Reader getLhs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Force::Builder {
public:
  typedef Force Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasRhs();
  inline  ::ObjIndexType::Builder getRhs();
  inline void setRhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRhs();
  inline void adoptRhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRhs();

  inline bool hasLhs();
  inline  ::ObjIndexType::Builder getLhs();
  inline void setLhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLhs();
  inline void adoptLhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLhs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Force::Pipeline {
public:
  typedef Force Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getRhs();
  inline  ::ObjIndexType::Pipeline getLhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Assignstmt::Reader {
public:
  typedef Assignstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasRhs() const;
  inline  ::ObjIndexType::Reader getRhs() const;

  inline bool hasLhs() const;
  inline  ::ObjIndexType::Reader getLhs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Assignstmt::Builder {
public:
  typedef Assignstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasRhs();
  inline  ::ObjIndexType::Builder getRhs();
  inline void setRhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRhs();
  inline void adoptRhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRhs();

  inline bool hasLhs();
  inline  ::ObjIndexType::Builder getLhs();
  inline void setLhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLhs();
  inline void adoptLhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLhs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Assignstmt::Pipeline {
public:
  typedef Assignstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getRhs();
  inline  ::ObjIndexType::Pipeline getLhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Deassign::Reader {
public:
  typedef Deassign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasLhs() const;
  inline  ::ObjIndexType::Reader getLhs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Deassign::Builder {
public:
  typedef Deassign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasLhs();
  inline  ::ObjIndexType::Builder getLhs();
  inline void setLhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLhs();
  inline void adoptLhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLhs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Deassign::Pipeline {
public:
  typedef Deassign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Release::Reader {
public:
  typedef Release Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasLhs() const;
  inline  ::ObjIndexType::Reader getLhs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Release::Builder {
public:
  typedef Release Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasLhs();
  inline  ::ObjIndexType::Builder getLhs();
  inline void setLhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLhs();
  inline void adoptLhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLhs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Release::Pipeline {
public:
  typedef Release Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Nullstmt::Reader {
public:
  typedef Nullstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Nullstmt::Builder {
public:
  typedef Nullstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Nullstmt::Pipeline {
public:
  typedef Nullstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Expectstmt::Reader {
public:
  typedef Expectstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline bool hasElsestmt() const;
  inline  ::ObjIndexType::Reader getElsestmt() const;

  inline  ::uint64_t getPropertyspec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Expectstmt::Builder {
public:
  typedef Expectstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline bool hasElsestmt();
  inline  ::ObjIndexType::Builder getElsestmt();
  inline void setElsestmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initElsestmt();
  inline void adoptElsestmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownElsestmt();

  inline  ::uint64_t getPropertyspec();
  inline void setPropertyspec( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Expectstmt::Pipeline {
public:
  typedef Expectstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getStmt();
  inline  ::ObjIndexType::Pipeline getElsestmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Foreachstmt::Reader {
public:
  typedef Foreachstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline bool hasVariable() const;
  inline  ::ObjIndexType::Reader getVariable() const;

  inline bool hasVpiLoopVars() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiLoopVars() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Foreachstmt::Builder {
public:
  typedef Foreachstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline bool hasVariable();
  inline  ::ObjIndexType::Builder getVariable();
  inline void setVariable( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVariable();
  inline void adoptVariable(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVariable();

  inline bool hasVpiLoopVars();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiLoopVars();
  inline void setVpiLoopVars( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiLoopVars(unsigned int size);
  inline void adoptVpiLoopVars(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiLoopVars();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Foreachstmt::Pipeline {
public:
  typedef Foreachstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVariable();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genscope::Reader {
public:
  typedef Genscope Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline bool hasVpiIndex() const;
  inline  ::ObjIndexType::Reader getVpiIndex() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiProtected() const;

  inline bool getVpiImplicitDecl() const;

  inline bool hasNets() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getNets() const;

  inline bool hasArraynets() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getArraynets() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getProcess() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getContassigns() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getModules() const;

  inline bool hasModulearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getModulearrays() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getPrimitives() const;

  inline bool hasPrimitivearrays() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getPrimitivearrays() const;

  inline bool hasDefparams() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getDefparams() const;

  inline bool hasGenscopearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getGenscopearrays() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getProgramarrays() const;

  inline bool hasAssertions() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getAssertions() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfacearrays() const;

  inline bool hasAliasstmts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAliasstmts() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getClockingblocks() const;

  inline bool hasTaskfuncs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTaskfuncs() const;

  inline bool hasElabtasks() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getElabtasks() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genscope::Builder {
public:
  typedef Genscope Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline bool hasVpiIndex();
  inline  ::ObjIndexType::Builder getVpiIndex();
  inline void setVpiIndex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiIndex();
  inline void adoptVpiIndex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiIndex();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline bool hasNets();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getNets();
  inline void setNets( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initNets(unsigned int size);
  inline void adoptNets(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownNets();

  inline bool hasArraynets();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getArraynets();
  inline void setArraynets( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setArraynets(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initArraynets(unsigned int size);
  inline void adoptArraynets(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownArraynets();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownProcess();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownContassigns();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownModules();

  inline bool hasModulearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getModulearrays();
  inline void setModulearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initModulearrays(unsigned int size);
  inline void adoptModulearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownModulearrays();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownPrimitives();

  inline bool hasPrimitivearrays();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getPrimitivearrays();
  inline void setPrimitivearrays( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initPrimitivearrays(unsigned int size);
  inline void adoptPrimitivearrays(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownPrimitivearrays();

  inline bool hasDefparams();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getDefparams();
  inline void setDefparams( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDefparams(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initDefparams(unsigned int size);
  inline void adoptDefparams(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownDefparams();

  inline bool hasGenscopearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getGenscopearrays();
  inline void setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initGenscopearrays(unsigned int size);
  inline void adoptGenscopearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownGenscopearrays();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownProgramarrays();

  inline bool hasAssertions();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getAssertions();
  inline void setAssertions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initAssertions(unsigned int size);
  inline void adoptAssertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownAssertions();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfacearrays();

  inline bool hasAliasstmts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAliasstmts();
  inline void setAliasstmts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAliasstmts(unsigned int size);
  inline void adoptAliasstmts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAliasstmts();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownClockingblocks();

  inline bool hasTaskfuncs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTaskfuncs();
  inline void setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTaskfuncs(unsigned int size);
  inline void adoptTaskfuncs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTaskfuncs();

  inline bool hasElabtasks();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getElabtasks();
  inline void setElabtasks( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initElabtasks(unsigned int size);
  inline void adoptElabtasks(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownElabtasks();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genscope::Pipeline {
public:
  typedef Genscope Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiIndex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genvar::Reader {
public:
  typedef Genvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasGenscopearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getGenscopearrays() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genvar::Builder {
public:
  typedef Genvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasGenscopearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getGenscopearrays();
  inline void setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initGenscopearrays(unsigned int size);
  inline void adoptGenscopearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownGenscopearrays();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genvar::Pipeline {
public:
  typedef Genvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genscopearray::Reader {
public:
  typedef Genscopearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getGenvar() const;

  inline bool hasGenscopes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getGenscopes() const;

  inline bool hasVpiInstance() const;
  inline  ::ObjIndexType::Reader getVpiInstance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genscopearray::Builder {
public:
  typedef Genscopearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getGenvar();
  inline void setGenvar( ::uint64_t value);

  inline bool hasGenscopes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getGenscopes();
  inline void setGenscopes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGenscopes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initGenscopes(unsigned int size);
  inline void adoptGenscopes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownGenscopes();

  inline bool hasVpiInstance();
  inline  ::ObjIndexType::Builder getVpiInstance();
  inline void setVpiInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiInstance();
  inline void adoptVpiInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiInstance();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genscopearray::Pipeline {
public:
  typedef Genscopearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Assertstmt::Reader {
public:
  typedef Assertstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Concurrentassertions::Reader getBase() const;

  inline bool hasElsestmt() const;
  inline  ::ObjIndexType::Reader getElsestmt() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Assertstmt::Builder {
public:
  typedef Assertstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Concurrentassertions::Builder getBase();
  inline void setBase( ::Concurrentassertions::Reader value);
  inline  ::Concurrentassertions::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Concurrentassertions>&& value);
  inline ::capnp::Orphan< ::Concurrentassertions> disownBase();

  inline bool hasElsestmt();
  inline  ::ObjIndexType::Builder getElsestmt();
  inline void setElsestmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initElsestmt();
  inline void adoptElsestmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownElsestmt();

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Assertstmt::Pipeline {
public:
  typedef Assertstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Concurrentassertions::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getElsestmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Cover::Reader {
public:
  typedef Cover Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Concurrentassertions::Reader getBase() const;

  inline bool getVpiIsCoverSequence() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Cover::Builder {
public:
  typedef Cover Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Concurrentassertions::Builder getBase();
  inline void setBase( ::Concurrentassertions::Reader value);
  inline  ::Concurrentassertions::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Concurrentassertions>&& value);
  inline ::capnp::Orphan< ::Concurrentassertions> disownBase();

  inline bool getVpiIsCoverSequence();
  inline void setVpiIsCoverSequence(bool value);

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Cover::Pipeline {
public:
  typedef Cover Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Concurrentassertions::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Assume::Reader {
public:
  typedef Assume Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Concurrentassertions::Reader getBase() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Assume::Builder {
public:
  typedef Assume Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Concurrentassertions::Builder getBase();
  inline void setBase( ::Concurrentassertions::Reader value);
  inline  ::Concurrentassertions::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Concurrentassertions>&& value);
  inline ::capnp::Orphan< ::Concurrentassertions> disownBase();

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Assume::Pipeline {
public:
  typedef Assume Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Concurrentassertions::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Restrict::Reader {
public:
  typedef Restrict Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Concurrentassertions::Reader getBase() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Restrict::Builder {
public:
  typedef Restrict Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Concurrentassertions::Builder getBase();
  inline void setBase( ::Concurrentassertions::Reader value);
  inline  ::Concurrentassertions::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Concurrentassertions>&& value);
  inline ::capnp::Orphan< ::Concurrentassertions> disownBase();

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Restrict::Pipeline {
public:
  typedef Restrict Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Concurrentassertions::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Immediateassert::Reader {
public:
  typedef Immediateassert Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::int64_t getVpiIsDeferred() const;

  inline  ::int64_t getVpiIsFinal() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline bool hasElsestmt() const;
  inline  ::ObjIndexType::Reader getElsestmt() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Immediateassert::Builder {
public:
  typedef Immediateassert Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::int64_t getVpiIsDeferred();
  inline void setVpiIsDeferred( ::int64_t value);

  inline  ::int64_t getVpiIsFinal();
  inline void setVpiIsFinal( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline bool hasElsestmt();
  inline  ::ObjIndexType::Builder getElsestmt();
  inline void setElsestmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initElsestmt();
  inline void adoptElsestmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownElsestmt();

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Immediateassert::Pipeline {
public:
  typedef Immediateassert Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getStmt();
  inline  ::ObjIndexType::Pipeline getElsestmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Immediateassume::Reader {
public:
  typedef Immediateassume Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::int64_t getVpiIsDeferred() const;

  inline  ::int64_t getVpiIsFinal() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline bool hasElsestmt() const;
  inline  ::ObjIndexType::Reader getElsestmt() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Immediateassume::Builder {
public:
  typedef Immediateassume Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::int64_t getVpiIsDeferred();
  inline void setVpiIsDeferred( ::int64_t value);

  inline  ::int64_t getVpiIsFinal();
  inline void setVpiIsFinal( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline bool hasElsestmt();
  inline  ::ObjIndexType::Builder getElsestmt();
  inline void setElsestmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initElsestmt();
  inline void adoptElsestmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownElsestmt();

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Immediateassume::Pipeline {
public:
  typedef Immediateassume Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getStmt();
  inline  ::ObjIndexType::Pipeline getElsestmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Immediatecover::Reader {
public:
  typedef Immediatecover Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::int64_t getVpiIsDeferred() const;

  inline  ::int64_t getVpiIsFinal() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Immediatecover::Builder {
public:
  typedef Immediatecover Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::int64_t getVpiIsDeferred();
  inline void setVpiIsDeferred( ::int64_t value);

  inline  ::int64_t getVpiIsFinal();
  inline void setVpiIsFinal( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Immediatecover::Pipeline {
public:
  typedef Immediatecover Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Expr::Reader {
public:
  typedef Expr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiDecompile() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::uint64_t getVpiValue() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Expr::Builder {
public:
  typedef Expr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiDecompile();
  inline void setVpiDecompile( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Expr::Pipeline {
public:
  typedef Expr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Caseitem::Reader {
public:
  typedef Caseitem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasVpiExprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiExprs() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Caseitem::Builder {
public:
  typedef Caseitem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasVpiExprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiExprs();
  inline void setVpiExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiExprs(unsigned int size);
  inline void adoptVpiExprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiExprs();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Caseitem::Pipeline {
public:
  typedef Caseitem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Assignment::Reader {
public:
  typedef Assignment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::int64_t getVpiOpType() const;

  inline bool getVpiBlocking() const;

  inline bool hasRhs() const;
  inline  ::ObjIndexType::Reader getRhs() const;

  inline bool hasLhs() const;
  inline  ::ObjIndexType::Reader getLhs() const;

  inline  ::uint64_t getDelaycontrol() const;

  inline  ::uint64_t getEventcontrol() const;

  inline  ::uint64_t getRepeatcontrol() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Assignment::Builder {
public:
  typedef Assignment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::int64_t getVpiOpType();
  inline void setVpiOpType( ::int64_t value);

  inline bool getVpiBlocking();
  inline void setVpiBlocking(bool value);

  inline bool hasRhs();
  inline  ::ObjIndexType::Builder getRhs();
  inline void setRhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRhs();
  inline void adoptRhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRhs();

  inline bool hasLhs();
  inline  ::ObjIndexType::Builder getLhs();
  inline void setLhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLhs();
  inline void adoptLhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLhs();

  inline  ::uint64_t getDelaycontrol();
  inline void setDelaycontrol( ::uint64_t value);

  inline  ::uint64_t getEventcontrol();
  inline void setEventcontrol( ::uint64_t value);

  inline  ::uint64_t getRepeatcontrol();
  inline void setRepeatcontrol( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Assignment::Pipeline {
public:
  typedef Assignment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getRhs();
  inline  ::ObjIndexType::Pipeline getLhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anypattern::Reader {
public:
  typedef Anypattern Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anypattern::Builder {
public:
  typedef Anypattern Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anypattern::Pipeline {
public:
  typedef Anypattern Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Taggedpattern::Reader {
public:
  typedef Taggedpattern Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasPattern() const;
  inline  ::ObjIndexType::Reader getPattern() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Taggedpattern::Builder {
public:
  typedef Taggedpattern Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasPattern();
  inline  ::ObjIndexType::Builder getPattern();
  inline void setPattern( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initPattern();
  inline void adoptPattern(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownPattern();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Taggedpattern::Pipeline {
public:
  typedef Taggedpattern Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getPattern();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Structpattern::Reader {
public:
  typedef Structpattern Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasPattern() const;
  inline  ::ObjIndexType::Reader getPattern() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Structpattern::Builder {
public:
  typedef Structpattern Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasPattern();
  inline  ::ObjIndexType::Builder getPattern();
  inline void setPattern( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initPattern();
  inline void adoptPattern(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownPattern();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Structpattern::Pipeline {
public:
  typedef Structpattern Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getPattern();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Unsupportedexpr::Reader {
public:
  typedef Unsupportedexpr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Expr::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Unsupportedexpr::Builder {
public:
  typedef Unsupportedexpr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Expr::Builder getBase();
  inline void setBase( ::Expr::Reader value);
  inline  ::Expr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Expr>&& value);
  inline ::capnp::Orphan< ::Expr> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Unsupportedexpr::Pipeline {
public:
  typedef Unsupportedexpr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Expr::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Unsupportedstmt::Reader {
public:
  typedef Unsupportedstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Atomicstmt::Reader getBase() const;

  inline  ::uint64_t getVpiValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Unsupportedstmt::Builder {
public:
  typedef Unsupportedstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Atomicstmt::Builder getBase();
  inline void setBase( ::Atomicstmt::Reader value);
  inline  ::Atomicstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Atomicstmt>&& value);
  inline ::capnp::Orphan< ::Atomicstmt> disownBase();

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Unsupportedstmt::Pipeline {
public:
  typedef Unsupportedstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Atomicstmt::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Includefileinfo::Reader {
public:
  typedef Includefileinfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiIncludedFile() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Includefileinfo::Builder {
public:
  typedef Includefileinfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiIncludedFile();
  inline void setVpiIncludedFile( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Includefileinfo::Pipeline {
public:
  typedef Includefileinfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Sequenceinst::Reader {
public:
  typedef Sequenceinst Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getSequencedecl() const;

  inline bool hasNamedeventsequenceexprgroups() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getNamedeventsequenceexprgroups() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Sequenceinst::Builder {
public:
  typedef Sequenceinst Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getSequencedecl();
  inline void setSequencedecl( ::uint64_t value);

  inline bool hasNamedeventsequenceexprgroups();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getNamedeventsequenceexprgroups();
  inline void setNamedeventsequenceexprgroups( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initNamedeventsequenceexprgroups(unsigned int size);
  inline void adoptNamedeventsequenceexprgroups(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownNamedeventsequenceexprgroups();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Sequenceinst::Pipeline {
public:
  typedef Sequenceinst Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Seqformaldecl::Reader {
public:
  typedef Seqformaldecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::int64_t getVpiDirection() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline bool hasNamedeventsequenceexprgroup() const;
  inline  ::ObjIndexType::Reader getNamedeventsequenceexprgroup() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Seqformaldecl::Builder {
public:
  typedef Seqformaldecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::int64_t getVpiDirection();
  inline void setVpiDirection( ::int64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline bool hasNamedeventsequenceexprgroup();
  inline  ::ObjIndexType::Builder getNamedeventsequenceexprgroup();
  inline void setNamedeventsequenceexprgroup( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initNamedeventsequenceexprgroup();
  inline void adoptNamedeventsequenceexprgroup(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownNamedeventsequenceexprgroup();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Seqformaldecl::Pipeline {
public:
  typedef Seqformaldecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getNamedeventsequenceexprgroup();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Sequencedecl::Reader {
public:
  typedef Sequencedecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariables() const;

  inline bool hasSequenceexprmulticlockgroup() const;
  inline  ::ObjIndexType::Reader getSequenceexprmulticlockgroup() const;

  inline bool hasSeqformaldecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getSeqformaldecls() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Sequencedecl::Builder {
public:
  typedef Sequencedecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariables();

  inline bool hasSequenceexprmulticlockgroup();
  inline  ::ObjIndexType::Builder getSequenceexprmulticlockgroup();
  inline void setSequenceexprmulticlockgroup( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSequenceexprmulticlockgroup();
  inline void adoptSequenceexprmulticlockgroup(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSequenceexprmulticlockgroup();

  inline bool hasSeqformaldecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getSeqformaldecls();
  inline void setSeqformaldecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSeqformaldecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initSeqformaldecls(unsigned int size);
  inline void adoptSeqformaldecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownSeqformaldecls();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Sequencedecl::Pipeline {
public:
  typedef Sequencedecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getSequenceexprmulticlockgroup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Propformaldecl::Reader {
public:
  typedef Propformaldecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::int64_t getVpiDirection() const;

  inline bool hasVpiExpr() const;
  inline  ::ObjIndexType::Reader getVpiExpr() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Propformaldecl::Builder {
public:
  typedef Propformaldecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::int64_t getVpiDirection();
  inline void setVpiDirection( ::int64_t value);

  inline bool hasVpiExpr();
  inline  ::ObjIndexType::Builder getVpiExpr();
  inline void setVpiExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiExpr();
  inline void adoptVpiExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiExpr();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Propformaldecl::Pipeline {
public:
  typedef Propformaldecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiExpr();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Propertyinst::Reader {
public:
  typedef Propertyinst Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasVpiDisableCondition() const;
  inline  ::ObjIndexType::Reader getVpiDisableCondition() const;

  inline bool hasVpiArguments() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiArguments() const;

  inline  ::uint64_t getPropertydecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getClockingblock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Propertyinst::Builder {
public:
  typedef Propertyinst Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasVpiDisableCondition();
  inline  ::ObjIndexType::Builder getVpiDisableCondition();
  inline void setVpiDisableCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiDisableCondition();
  inline void adoptVpiDisableCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiDisableCondition();

  inline bool hasVpiArguments();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiArguments();
  inline void setVpiArguments( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiArguments(unsigned int size);
  inline void adoptVpiArguments(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiArguments();

  inline  ::uint64_t getPropertydecl();
  inline void setPropertydecl( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getClockingblock();
  inline void setClockingblock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Propertyinst::Pipeline {
public:
  typedef Propertyinst Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiDisableCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Propertyspec::Reader {
public:
  typedef Propertyspec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasVpiDisableCondition() const;
  inline  ::ObjIndexType::Reader getVpiDisableCondition() const;

  inline bool hasVpiClockingEvent() const;
  inline  ::ObjIndexType::Reader getVpiClockingEvent() const;

  inline bool hasVpiPropertyExpr() const;
  inline  ::ObjIndexType::Reader getVpiPropertyExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Propertyspec::Builder {
public:
  typedef Propertyspec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasVpiDisableCondition();
  inline  ::ObjIndexType::Builder getVpiDisableCondition();
  inline void setVpiDisableCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiDisableCondition();
  inline void adoptVpiDisableCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiDisableCondition();

  inline bool hasVpiClockingEvent();
  inline  ::ObjIndexType::Builder getVpiClockingEvent();
  inline void setVpiClockingEvent( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiClockingEvent();
  inline void adoptVpiClockingEvent(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiClockingEvent();

  inline bool hasVpiPropertyExpr();
  inline  ::ObjIndexType::Builder getVpiPropertyExpr();
  inline void setVpiPropertyExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiPropertyExpr();
  inline void adoptVpiPropertyExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiPropertyExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Propertyspec::Pipeline {
public:
  typedef Propertyspec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiDisableCondition();
  inline  ::ObjIndexType::Pipeline getVpiClockingEvent();
  inline  ::ObjIndexType::Pipeline getVpiPropertyExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Propertydecl::Reader {
public:
  typedef Propertydecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline bool hasPropformaldecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPropformaldecls() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariables() const;

  inline  ::uint64_t getPropertyspec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Propertydecl::Builder {
public:
  typedef Propertydecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline bool hasPropformaldecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPropformaldecls();
  inline void setPropformaldecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPropformaldecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPropformaldecls(unsigned int size);
  inline void adoptPropformaldecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPropformaldecls();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariables();

  inline  ::uint64_t getPropertyspec();
  inline void setPropertyspec( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Propertydecl::Pipeline {
public:
  typedef Propertydecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clockedproperty::Reader {
public:
  typedef Clockedproperty Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasVpiClockingEvent() const;
  inline  ::ObjIndexType::Reader getVpiClockingEvent() const;

  inline bool hasVpiPropertyExpr() const;
  inline  ::ObjIndexType::Reader getVpiPropertyExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clockedproperty::Builder {
public:
  typedef Clockedproperty Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasVpiClockingEvent();
  inline  ::ObjIndexType::Builder getVpiClockingEvent();
  inline void setVpiClockingEvent( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiClockingEvent();
  inline void adoptVpiClockingEvent(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiClockingEvent();

  inline bool hasVpiPropertyExpr();
  inline  ::ObjIndexType::Builder getVpiPropertyExpr();
  inline void setVpiPropertyExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiPropertyExpr();
  inline void adoptVpiPropertyExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiPropertyExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clockedproperty::Pipeline {
public:
  typedef Clockedproperty Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiClockingEvent();
  inline  ::ObjIndexType::Pipeline getVpiPropertyExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Casepropertyitem::Reader {
public:
  typedef Casepropertyitem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasExpressions() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getExpressions() const;

  inline bool hasPropertyexpr() const;
  inline  ::ObjIndexType::Reader getPropertyexpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Casepropertyitem::Builder {
public:
  typedef Casepropertyitem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasExpressions();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getExpressions();
  inline void setExpressions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initExpressions(unsigned int size);
  inline void adoptExpressions(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownExpressions();

  inline bool hasPropertyexpr();
  inline  ::ObjIndexType::Builder getPropertyexpr();
  inline void setPropertyexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initPropertyexpr();
  inline void adoptPropertyexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownPropertyexpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Casepropertyitem::Pipeline {
public:
  typedef Casepropertyitem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getPropertyexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Caseproperty::Reader {
public:
  typedef Caseproperty Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasCasepropertyitems() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCasepropertyitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Caseproperty::Builder {
public:
  typedef Caseproperty Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasCasepropertyitems();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCasepropertyitems();
  inline void setCasepropertyitems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCasepropertyitems(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCasepropertyitems(unsigned int size);
  inline void adoptCasepropertyitems(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCasepropertyitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Caseproperty::Pipeline {
public:
  typedef Caseproperty Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Multiclocksequenceexpr::Reader {
public:
  typedef Multiclocksequenceexpr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasClockedseqs() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getClockedseqs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Multiclocksequenceexpr::Builder {
public:
  typedef Multiclocksequenceexpr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasClockedseqs();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getClockedseqs();
  inline void setClockedseqs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setClockedseqs(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initClockedseqs(unsigned int size);
  inline void adoptClockedseqs(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownClockedseqs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Multiclocksequenceexpr::Pipeline {
public:
  typedef Multiclocksequenceexpr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clockedseq::Reader {
public:
  typedef Clockedseq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasVpiClockingEvent() const;
  inline  ::ObjIndexType::Reader getVpiClockingEvent() const;

  inline bool hasVpiSequenceExpr() const;
  inline  ::ObjIndexType::Reader getVpiSequenceExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clockedseq::Builder {
public:
  typedef Clockedseq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasVpiClockingEvent();
  inline  ::ObjIndexType::Builder getVpiClockingEvent();
  inline void setVpiClockingEvent( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiClockingEvent();
  inline void adoptVpiClockingEvent(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiClockingEvent();

  inline bool hasVpiSequenceExpr();
  inline  ::ObjIndexType::Builder getVpiSequenceExpr();
  inline void setVpiSequenceExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiSequenceExpr();
  inline void adoptVpiSequenceExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiSequenceExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clockedseq::Pipeline {
public:
  typedef Clockedseq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiClockingEvent();
  inline  ::ObjIndexType::Pipeline getVpiSequenceExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Simpleexpr::Reader {
public:
  typedef Simpleexpr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Expr::Reader getBase() const;

  inline bool hasVpiUses() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiUses() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Simpleexpr::Builder {
public:
  typedef Simpleexpr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Expr::Builder getBase();
  inline void setBase( ::Expr::Reader value);
  inline  ::Expr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Expr>&& value);
  inline ::capnp::Orphan< ::Expr> disownBase();

  inline bool hasVpiUses();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiUses();
  inline void setVpiUses( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiUses(unsigned int size);
  inline void adoptVpiUses(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiUses();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Simpleexpr::Pipeline {
public:
  typedef Simpleexpr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Expr::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Constant::Reader {
public:
  typedef Constant Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Expr::Reader getBase() const;

  inline  ::int64_t getVpiConstType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Constant::Builder {
public:
  typedef Constant Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Expr::Builder getBase();
  inline void setBase( ::Expr::Reader value);
  inline  ::Expr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Expr>&& value);
  inline ::capnp::Orphan< ::Expr> disownBase();

  inline  ::int64_t getVpiConstType();
  inline void setVpiConstType( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Constant::Pipeline {
public:
  typedef Constant Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Expr::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Letexpr::Reader {
public:
  typedef Letexpr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Expr::Reader getBase() const;

  inline bool hasArguments() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getArguments() const;

  inline  ::uint64_t getLetdecl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Letexpr::Builder {
public:
  typedef Letexpr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Expr::Builder getBase();
  inline void setBase( ::Expr::Reader value);
  inline  ::Expr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Expr>&& value);
  inline ::capnp::Orphan< ::Expr> disownBase();

  inline bool hasArguments();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getArguments();
  inline void setArguments( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initArguments(unsigned int size);
  inline void adoptArguments(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownArguments();

  inline  ::uint64_t getLetdecl();
  inline void setLetdecl( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Letexpr::Pipeline {
public:
  typedef Letexpr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Expr::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Operation::Reader {
public:
  typedef Operation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Expr::Reader getBase() const;

  inline  ::int64_t getVpiOpType() const;

  inline bool getVpiReordered() const;

  inline bool getVpiFlattened() const;

  inline bool getVpiOpStrong() const;

  inline bool hasOperands() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getOperands() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Operation::Builder {
public:
  typedef Operation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Expr::Builder getBase();
  inline void setBase( ::Expr::Reader value);
  inline  ::Expr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Expr>&& value);
  inline ::capnp::Orphan< ::Expr> disownBase();

  inline  ::int64_t getVpiOpType();
  inline void setVpiOpType( ::int64_t value);

  inline bool getVpiReordered();
  inline void setVpiReordered(bool value);

  inline bool getVpiFlattened();
  inline void setVpiFlattened(bool value);

  inline bool getVpiOpStrong();
  inline void setVpiOpStrong(bool value);

  inline bool hasOperands();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getOperands();
  inline void setOperands( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initOperands(unsigned int size);
  inline void adoptOperands(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownOperands();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Operation::Pipeline {
public:
  typedef Operation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Expr::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Refobj::Reader {
public:
  typedef Refobj Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Simpleexpr::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiGeneric() const;

  inline bool hasActualgroup() const;
  inline  ::ObjIndexType::Reader getActualgroup() const;

  inline bool getVpiStructMember() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Refobj::Builder {
public:
  typedef Refobj Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Simpleexpr::Builder getBase();
  inline void setBase( ::Simpleexpr::Reader value);
  inline  ::Simpleexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Simpleexpr>&& value);
  inline ::capnp::Orphan< ::Simpleexpr> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiGeneric();
  inline void setVpiGeneric(bool value);

  inline bool hasActualgroup();
  inline  ::ObjIndexType::Builder getActualgroup();
  inline void setActualgroup( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initActualgroup();
  inline void adoptActualgroup(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownActualgroup();

  inline bool getVpiStructMember();
  inline void setVpiStructMember(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Refobj::Pipeline {
public:
  typedef Refobj Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Simpleexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getActualgroup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Refmodule::Reader {
public:
  typedef Refmodule Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool hasActualgroup() const;
  inline  ::ObjIndexType::Reader getActualgroup() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPorts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Refmodule::Builder {
public:
  typedef Refmodule Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool hasActualgroup();
  inline  ::ObjIndexType::Builder getActualgroup();
  inline void setActualgroup( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initActualgroup();
  inline void adoptActualgroup(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownActualgroup();

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPorts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Refmodule::Pipeline {
public:
  typedef Refmodule Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getActualgroup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Reftypespec::Reader {
public:
  typedef Reftypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Simpleexpr::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool hasActualtypespec() const;
  inline  ::ObjIndexType::Reader getActualtypespec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Reftypespec::Builder {
public:
  typedef Reftypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Simpleexpr::Builder getBase();
  inline void setBase( ::Simpleexpr::Reader value);
  inline  ::Simpleexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Simpleexpr>&& value);
  inline ::capnp::Orphan< ::Simpleexpr> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool hasActualtypespec();
  inline  ::ObjIndexType::Builder getActualtypespec();
  inline void setActualtypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initActualtypespec();
  inline void adoptActualtypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownActualtypespec();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Reftypespec::Pipeline {
public:
  typedef Reftypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Simpleexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getActualtypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Partselect::Reader {
public:
  typedef Partselect Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Refobj::Reader getBase() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasLeftrange() const;
  inline  ::ObjIndexType::Reader getLeftrange() const;

  inline bool hasRightrange() const;
  inline  ::ObjIndexType::Reader getRightrange() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Partselect::Builder {
public:
  typedef Partselect Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Refobj::Builder getBase();
  inline void setBase( ::Refobj::Reader value);
  inline  ::Refobj::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Refobj>&& value);
  inline ::capnp::Orphan< ::Refobj> disownBase();

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasLeftrange();
  inline  ::ObjIndexType::Builder getLeftrange();
  inline void setLeftrange( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftrange();
  inline void adoptLeftrange(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftrange();

  inline bool hasRightrange();
  inline  ::ObjIndexType::Builder getRightrange();
  inline void setRightrange( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightrange();
  inline void adoptRightrange(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightrange();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Partselect::Pipeline {
public:
  typedef Partselect Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Refobj::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftrange();
  inline  ::ObjIndexType::Pipeline getRightrange();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Indexedpartselect::Reader {
public:
  typedef Indexedpartselect Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Refobj::Reader getBase() const;

  inline bool getVpiConstantSelect() const;

  inline  ::int64_t getVpiIndexedPartSelectType() const;

  inline bool hasBaseexpr() const;
  inline  ::ObjIndexType::Reader getBaseexpr() const;

  inline bool hasWidthexpr() const;
  inline  ::ObjIndexType::Reader getWidthexpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Indexedpartselect::Builder {
public:
  typedef Indexedpartselect Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Refobj::Builder getBase();
  inline void setBase( ::Refobj::Reader value);
  inline  ::Refobj::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Refobj>&& value);
  inline ::capnp::Orphan< ::Refobj> disownBase();

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline  ::int64_t getVpiIndexedPartSelectType();
  inline void setVpiIndexedPartSelectType( ::int64_t value);

  inline bool hasBaseexpr();
  inline  ::ObjIndexType::Builder getBaseexpr();
  inline void setBaseexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initBaseexpr();
  inline void adoptBaseexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownBaseexpr();

  inline bool hasWidthexpr();
  inline  ::ObjIndexType::Builder getWidthexpr();
  inline void setWidthexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initWidthexpr();
  inline void adoptWidthexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownWidthexpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Indexedpartselect::Pipeline {
public:
  typedef Indexedpartselect Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Refobj::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getBaseexpr();
  inline  ::ObjIndexType::Pipeline getWidthexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Varselect::Reader {
public:
  typedef Varselect Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Refobj::Reader getBase() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasExprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getExprs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Varselect::Builder {
public:
  typedef Varselect Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Refobj::Builder getBase();
  inline void setBase( ::Refobj::Reader value);
  inline  ::Refobj::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Refobj>&& value);
  inline ::capnp::Orphan< ::Refobj> disownBase();

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasExprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getExprs();
  inline void setExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initExprs(unsigned int size);
  inline void adoptExprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownExprs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Varselect::Pipeline {
public:
  typedef Varselect Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Refobj::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bitselect::Reader {
public:
  typedef Bitselect Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Refobj::Reader getBase() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasVpiIndex() const;
  inline  ::ObjIndexType::Reader getVpiIndex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bitselect::Builder {
public:
  typedef Bitselect Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Refobj::Builder getBase();
  inline void setBase( ::Refobj::Reader value);
  inline  ::Refobj::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Refobj>&& value);
  inline ::capnp::Orphan< ::Refobj> disownBase();

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasVpiIndex();
  inline  ::ObjIndexType::Builder getVpiIndex();
  inline void setVpiIndex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiIndex();
  inline void adoptVpiIndex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiIndex();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bitselect::Pipeline {
public:
  typedef Bitselect Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Refobj::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiIndex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Variables::Reader {
public:
  typedef Variables Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Simpleexpr::Reader getBase() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariableloads() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModuleinst() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getIndexes() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Variables::Builder {
public:
  typedef Variables Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Simpleexpr::Builder getBase();
  inline void setBase( ::Simpleexpr::Reader value);
  inline  ::Simpleexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Simpleexpr>&& value);
  inline ::capnp::Orphan< ::Simpleexpr> disownBase();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariableloads();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModuleinst();
  inline void setModuleinst( ::uint64_t value);

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownIndexes();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Variables::Pipeline {
public:
  typedef Variables Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Simpleexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Hierpath::Reader {
public:
  typedef Hierpath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Simpleexpr::Reader getBase() const;

  inline bool hasPathelems() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getPathelems() const;

  inline bool hasRootvalue() const;
  inline  ::ObjIndexType::Reader getRootvalue() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Hierpath::Builder {
public:
  typedef Hierpath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Simpleexpr::Builder getBase();
  inline void setBase( ::Simpleexpr::Reader value);
  inline  ::Simpleexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Simpleexpr>&& value);
  inline ::capnp::Orphan< ::Simpleexpr> disownBase();

  inline bool hasPathelems();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getPathelems();
  inline void setPathelems( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initPathelems(unsigned int size);
  inline void adoptPathelems(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownPathelems();

  inline bool hasRootvalue();
  inline  ::ObjIndexType::Builder getRootvalue();
  inline void setRootvalue( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRootvalue();
  inline void adoptRootvalue(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRootvalue();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Hierpath::Pipeline {
public:
  typedef Hierpath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Simpleexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getRootvalue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Refvar::Reader {
public:
  typedef Refvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiGeneric() const;

  inline bool hasActualgroup() const;
  inline  ::ObjIndexType::Reader getActualgroup() const;

  inline bool hasTaskfunc() const;
  inline  ::ObjIndexType::Reader getTaskfunc() const;

  inline bool getVpiStructMember() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Refvar::Builder {
public:
  typedef Refvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiGeneric();
  inline void setVpiGeneric(bool value);

  inline bool hasActualgroup();
  inline  ::ObjIndexType::Builder getActualgroup();
  inline void setActualgroup( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initActualgroup();
  inline void adoptActualgroup(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownActualgroup();

  inline bool hasTaskfunc();
  inline  ::ObjIndexType::Builder getTaskfunc();
  inline void setTaskfunc( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTaskfunc();
  inline void adoptTaskfunc(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTaskfunc();

  inline bool getVpiStructMember();
  inline void setVpiStructMember(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Refvar::Pipeline {
public:
  typedef Refvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getActualgroup();
  inline  ::ObjIndexType::Pipeline getTaskfunc();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Shortrealvar::Reader {
public:
  typedef Shortrealvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Shortrealvar::Builder {
public:
  typedef Shortrealvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Shortrealvar::Pipeline {
public:
  typedef Shortrealvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Realvar::Reader {
public:
  typedef Realvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Realvar::Builder {
public:
  typedef Realvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Realvar::Pipeline {
public:
  typedef Realvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bytevar::Reader {
public:
  typedef Bytevar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bytevar::Builder {
public:
  typedef Bytevar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bytevar::Pipeline {
public:
  typedef Bytevar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Shortintvar::Reader {
public:
  typedef Shortintvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Shortintvar::Builder {
public:
  typedef Shortintvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Shortintvar::Pipeline {
public:
  typedef Shortintvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Intvar::Reader {
public:
  typedef Intvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Intvar::Builder {
public:
  typedef Intvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Intvar::Pipeline {
public:
  typedef Intvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Longintvar::Reader {
public:
  typedef Longintvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Longintvar::Builder {
public:
  typedef Longintvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Longintvar::Pipeline {
public:
  typedef Longintvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Integervar::Reader {
public:
  typedef Integervar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Integervar::Builder {
public:
  typedef Integervar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Integervar::Pipeline {
public:
  typedef Integervar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Timevar::Reader {
public:
  typedef Timevar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Timevar::Builder {
public:
  typedef Timevar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Timevar::Pipeline {
public:
  typedef Timevar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arrayvar::Reader {
public:
  typedef Arrayvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline  ::int64_t getVpiArrayType() const;

  inline bool hasVarselects() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getVarselects() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariables() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arrayvar::Builder {
public:
  typedef Arrayvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline  ::int64_t getVpiArrayType();
  inline void setVpiArrayType( ::int64_t value);

  inline bool hasVarselects();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getVarselects();
  inline void setVarselects( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVarselects(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initVarselects(unsigned int size);
  inline void adoptVarselects(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownVarselects();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariables();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arrayvar::Pipeline {
public:
  typedef Arrayvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arrayexpr::Reader {
public:
  typedef Arrayexpr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Expr::Reader getBase() const;

  inline bool hasExprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getExprs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arrayexpr::Builder {
public:
  typedef Arrayexpr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Expr::Builder getBase();
  inline void setBase( ::Expr::Reader value);
  inline  ::Expr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Expr>&& value);
  inline ::capnp::Orphan< ::Expr> disownBase();

  inline bool hasExprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getExprs();
  inline void setExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initExprs(unsigned int size);
  inline void adoptExprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownExprs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arrayexpr::Pipeline {
public:
  typedef Arrayexpr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Expr::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Regarray::Reader {
public:
  typedef Regarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool getVpiIsMemory() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasRegs() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRegs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Regarray::Builder {
public:
  typedef Regarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool getVpiIsMemory();
  inline void setVpiIsMemory(bool value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasRegs();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRegs();
  inline void setRegs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRegs(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRegs(unsigned int size);
  inline void adoptRegs(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRegs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Regarray::Pipeline {
public:
  typedef Regarray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Reg::Reader {
public:
  typedef Reg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasIndex() const;
  inline  ::ObjIndexType::Reader getIndex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Reg::Builder {
public:
  typedef Reg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasIndex();
  inline  ::ObjIndexType::Builder getIndex();
  inline void setIndex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initIndex();
  inline void adoptIndex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownIndex();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Reg::Pipeline {
public:
  typedef Reg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getIndex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Packedarrayvar::Reader {
public:
  typedef Packedarrayvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiPacked() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getVarbits() const;

  inline bool hasElements() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getElements() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Packedarrayvar::Builder {
public:
  typedef Packedarrayvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiPacked();
  inline void setVpiPacked(bool value);

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownVarbits();

  inline bool hasElements();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getElements();
  inline void setElements( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initElements(unsigned int size);
  inline void adoptElements(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownElements();

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Packedarrayvar::Pipeline {
public:
  typedef Packedarrayvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getExprindex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bitvar::Reader {
public:
  typedef Bitvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getVarbits() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bitvar::Builder {
public:
  typedef Bitvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownVarbits();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bitvar::Pipeline {
public:
  typedef Bitvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Logicvar::Reader {
public:
  typedef Logicvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getVarbits() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Logicvar::Builder {
public:
  typedef Logicvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownVarbits();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Logicvar::Pipeline {
public:
  typedef Logicvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Structvar::Reader {
public:
  typedef Structvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getVarbits() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariables() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Structvar::Builder {
public:
  typedef Structvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownVarbits();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariables();

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Structvar::Pipeline {
public:
  typedef Structvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExprindex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Unionvar::Reader {
public:
  typedef Unionvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getVarbits() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariables() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Unionvar::Builder {
public:
  typedef Unionvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownVarbits();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariables();

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Unionvar::Pipeline {
public:
  typedef Unionvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExprindex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enumvar::Reader {
public:
  typedef Enumvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enumvar::Builder {
public:
  typedef Enumvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enumvar::Pipeline {
public:
  typedef Enumvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExprindex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Stringvar::Reader {
public:
  typedef Stringvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Stringvar::Builder {
public:
  typedef Stringvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Stringvar::Pipeline {
public:
  typedef Stringvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Chandlevar::Reader {
public:
  typedef Chandlevar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline bool hasActualgroup() const;
  inline  ::ObjIndexType::Reader getActualgroup() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Chandlevar::Builder {
public:
  typedef Chandlevar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline bool hasActualgroup();
  inline  ::ObjIndexType::Builder getActualgroup();
  inline void setActualgroup( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initActualgroup();
  inline void adoptActualgroup(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownActualgroup();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Chandlevar::Pipeline {
public:
  typedef Chandlevar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getActualgroup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Varbit::Reader {
public:
  typedef Varbit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

  inline bool hasExprindexes() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getExprindexes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Varbit::Builder {
public:
  typedef Varbit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

  inline bool hasExprindexes();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getExprindexes();
  inline void setExprindexes( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initExprindexes(unsigned int size);
  inline void adoptExprindexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownExprindexes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Varbit::Pipeline {
public:
  typedef Varbit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExprindex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Taskfunc::Reader {
public:
  typedef Taskfunc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline bool getVpiMethod() const;

  inline  ::int64_t getVpiAccessType() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVirtual() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiDPIPure() const;

  inline bool getVpiDPIContext() const;

  inline  ::int64_t getVpiDPICStr() const;

  inline  ::uint64_t getVpiDPICIdentifier() const;

  inline bool hasLeftrange() const;
  inline  ::ObjIndexType::Reader getLeftrange() const;

  inline bool hasRightrange() const;
  inline  ::ObjIndexType::Reader getRightrange() const;

  inline bool hasReturn() const;
  inline  ::ObjIndexType::Reader getReturn() const;

  inline  ::uint64_t getClassdefn() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getIodecls() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Taskfunc::Builder {
public:
  typedef Taskfunc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline bool getVpiMethod();
  inline void setVpiMethod(bool value);

  inline  ::int64_t getVpiAccessType();
  inline void setVpiAccessType( ::int64_t value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVirtual();
  inline void setVpiVirtual(bool value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiDPIPure();
  inline void setVpiDPIPure(bool value);

  inline bool getVpiDPIContext();
  inline void setVpiDPIContext(bool value);

  inline  ::int64_t getVpiDPICStr();
  inline void setVpiDPICStr( ::int64_t value);

  inline  ::uint64_t getVpiDPICIdentifier();
  inline void setVpiDPICIdentifier( ::uint64_t value);

  inline bool hasLeftrange();
  inline  ::ObjIndexType::Builder getLeftrange();
  inline void setLeftrange( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftrange();
  inline void adoptLeftrange(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftrange();

  inline bool hasRightrange();
  inline  ::ObjIndexType::Builder getRightrange();
  inline void setRightrange( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightrange();
  inline void adoptRightrange(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightrange();

  inline bool hasReturn();
  inline  ::ObjIndexType::Builder getReturn();
  inline void setReturn( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initReturn();
  inline void adoptReturn(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownReturn();

  inline  ::uint64_t getClassdefn();
  inline void setClassdefn( ::uint64_t value);

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownIodecls();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Taskfunc::Pipeline {
public:
  typedef Taskfunc Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftrange();
  inline  ::ObjIndexType::Pipeline getRightrange();
  inline  ::ObjIndexType::Pipeline getReturn();
  inline  ::ObjIndexType::Pipeline getStmt();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Task::Reader {
public:
  typedef Task Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Taskfunc::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Task::Builder {
public:
  typedef Task Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Taskfunc::Builder getBase();
  inline void setBase( ::Taskfunc::Reader value);
  inline  ::Taskfunc::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Taskfunc>&& value);
  inline ::capnp::Orphan< ::Taskfunc> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Task::Pipeline {
public:
  typedef Task Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Taskfunc::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Function::Reader {
public:
  typedef Function Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Taskfunc::Reader getBase() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiFuncType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Function::Builder {
public:
  typedef Function Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Taskfunc::Builder getBase();
  inline void setBase( ::Taskfunc::Reader value);
  inline  ::Taskfunc::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Taskfunc>&& value);
  inline ::capnp::Orphan< ::Taskfunc> disownBase();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiFuncType();
  inline void setVpiFuncType( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Function::Pipeline {
public:
  typedef Function Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Taskfunc::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modport::Reader {
public:
  typedef Modport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getIodecls() const;

  inline  ::uint64_t getInterfaceinst() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modport::Builder {
public:
  typedef Modport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownIodecls();

  inline  ::uint64_t getInterfaceinst();
  inline void setInterfaceinst( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modport::Pipeline {
public:
  typedef Modport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacetfdecl::Reader {
public:
  typedef Interfacetfdecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiAccessType() const;

  inline bool hasTasks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTasks() const;

  inline bool hasFunctions() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getFunctions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacetfdecl::Builder {
public:
  typedef Interfacetfdecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiAccessType();
  inline void setVpiAccessType( ::uint64_t value);

  inline bool hasTasks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTasks();
  inline void setTasks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTasks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTasks(unsigned int size);
  inline void adoptTasks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTasks();

  inline bool hasFunctions();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getFunctions();
  inline void setFunctions( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFunctions(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initFunctions(unsigned int size);
  inline void adoptFunctions(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownFunctions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacetfdecl::Pipeline {
public:
  typedef Interfacetfdecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Contassign::Reader {
public:
  typedef Contassign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::uint64_t getVpiValue() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasRhs() const;
  inline  ::ObjIndexType::Reader getRhs() const;

  inline bool hasLhs() const;
  inline  ::ObjIndexType::Reader getLhs() const;

  inline bool hasContassignbits() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getContassignbits() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Contassign::Builder {
public:
  typedef Contassign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasRhs();
  inline  ::ObjIndexType::Builder getRhs();
  inline void setRhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRhs();
  inline void adoptRhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRhs();

  inline bool hasLhs();
  inline  ::ObjIndexType::Builder getLhs();
  inline void setLhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLhs();
  inline void adoptLhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLhs();

  inline bool hasContassignbits();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getContassignbits();
  inline void setContassignbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setContassignbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initContassignbits(unsigned int size);
  inline void adoptContassignbits(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownContassignbits();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Contassign::Pipeline {
public:
  typedef Contassign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getRhs();
  inline  ::ObjIndexType::Pipeline getLhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Contassignbit::Reader {
public:
  typedef Contassignbit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiOffset() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::uint64_t getVpiValue() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasRhs() const;
  inline  ::ObjIndexType::Reader getRhs() const;

  inline bool hasLhs() const;
  inline  ::ObjIndexType::Reader getLhs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Contassignbit::Builder {
public:
  typedef Contassignbit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiOffset();
  inline void setVpiOffset( ::int64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasRhs();
  inline  ::ObjIndexType::Builder getRhs();
  inline void setRhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRhs();
  inline void adoptRhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRhs();

  inline bool hasLhs();
  inline  ::ObjIndexType::Builder getLhs();
  inline void setLhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLhs();
  inline void adoptLhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLhs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Contassignbit::Pipeline {
public:
  typedef Contassignbit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getRhs();
  inline  ::ObjIndexType::Pipeline getLhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Ports::Reader {
public:
  typedef Ports Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiPortIndex() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::int64_t getVpiPortType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiVector() const;

  inline bool getVpiConnByName() const;

  inline  ::int64_t getVpiDirection() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::uint64_t getVpiExplicitName() const;

  inline bool hasHighconn() const;
  inline  ::ObjIndexType::Reader getHighconn() const;

  inline bool hasLowconn() const;
  inline  ::ObjIndexType::Reader getLowconn() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline  ::uint64_t getModuleinst() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Ports::Builder {
public:
  typedef Ports Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiPortIndex();
  inline void setVpiPortIndex( ::int64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::int64_t getVpiPortType();
  inline void setVpiPortType( ::int64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiConnByName();
  inline void setVpiConnByName(bool value);

  inline  ::int64_t getVpiDirection();
  inline void setVpiDirection( ::int64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::uint64_t getVpiExplicitName();
  inline void setVpiExplicitName( ::uint64_t value);

  inline bool hasHighconn();
  inline  ::ObjIndexType::Builder getHighconn();
  inline void setHighconn( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initHighconn();
  inline void adoptHighconn(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownHighconn();

  inline bool hasLowconn();
  inline  ::ObjIndexType::Builder getLowconn();
  inline void setLowconn( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLowconn();
  inline void adoptLowconn(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLowconn();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline  ::uint64_t getModuleinst();
  inline void setModuleinst( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Ports::Pipeline {
public:
  typedef Ports Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getHighconn();
  inline  ::ObjIndexType::Pipeline getLowconn();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Port::Reader {
public:
  typedef Port Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Ports::Reader getBase() const;

  inline bool hasBits() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getBits() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Port::Builder {
public:
  typedef Port Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Ports::Builder getBase();
  inline void setBase( ::Ports::Reader value);
  inline  ::Ports::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Ports>&& value);
  inline ::capnp::Orphan< ::Ports> disownBase();

  inline bool hasBits();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getBits();
  inline void setBits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initBits(unsigned int size);
  inline void adoptBits(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownBits();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Port::Pipeline {
public:
  typedef Port Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ports::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Portbit::Reader {
public:
  typedef Portbit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Ports::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Portbit::Builder {
public:
  typedef Portbit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Ports::Builder getBase();
  inline void setBase( ::Ports::Reader value);
  inline  ::Ports::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Ports>&& value);
  inline ::capnp::Orphan< ::Ports> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Portbit::Pipeline {
public:
  typedef Portbit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ports::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Checkerport::Reader {
public:
  typedef Checkerport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Ports::Reader getBase() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline  ::uint64_t getProperty() const;

  inline  ::uint64_t getSequence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Checkerport::Builder {
public:
  typedef Checkerport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Ports::Builder getBase();
  inline void setBase( ::Ports::Reader value);
  inline  ::Ports::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Ports>&& value);
  inline ::capnp::Orphan< ::Ports> disownBase();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline  ::uint64_t getProperty();
  inline void setProperty( ::uint64_t value);

  inline  ::uint64_t getSequence();
  inline void setSequence( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Checkerport::Pipeline {
public:
  typedef Checkerport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ports::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Checkerinstport::Reader {
public:
  typedef Checkerinstport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getProperty() const;

  inline  ::uint64_t getSequence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Checkerinstport::Builder {
public:
  typedef Checkerinstport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getProperty();
  inline void setProperty( ::uint64_t value);

  inline  ::uint64_t getSequence();
  inline void setSequence( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Checkerinstport::Pipeline {
public:
  typedef Checkerinstport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Primitive::Reader {
public:
  typedef Primitive Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiDefName() const;

  inline  ::uint64_t getVpiDelay() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiPrimType() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline  ::uint64_t getVpiValue() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasIndex() const;
  inline  ::ObjIndexType::Reader getIndex() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPrimterms() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Primitive::Builder {
public:
  typedef Primitive Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline  ::uint64_t getVpiDelay();
  inline void setVpiDelay( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiPrimType();
  inline void setVpiPrimType( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasIndex();
  inline  ::ObjIndexType::Builder getIndex();
  inline void setIndex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initIndex();
  inline void adoptIndex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownIndex();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPrimterms();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Primitive::Pipeline {
public:
  typedef Primitive Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getIndex();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gate::Reader {
public:
  typedef Gate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Primitive::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gate::Builder {
public:
  typedef Gate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Primitive::Builder getBase();
  inline void setBase( ::Primitive::Reader value);
  inline  ::Primitive::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Primitive>&& value);
  inline ::capnp::Orphan< ::Primitive> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gate::Pipeline {
public:
  typedef Gate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Primitive::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Switchtran::Reader {
public:
  typedef Switchtran Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Primitive::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Switchtran::Builder {
public:
  typedef Switchtran Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Primitive::Builder getBase();
  inline void setBase( ::Primitive::Reader value);
  inline  ::Primitive::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Primitive>&& value);
  inline ::capnp::Orphan< ::Primitive> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Switchtran::Pipeline {
public:
  typedef Switchtran Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Primitive::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Udp::Reader {
public:
  typedef Udp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Primitive::Reader getBase() const;

  inline  ::uint64_t getUdpdefn() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Udp::Builder {
public:
  typedef Udp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Primitive::Builder getBase();
  inline void setBase( ::Primitive::Reader value);
  inline  ::Primitive::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Primitive>&& value);
  inline ::capnp::Orphan< ::Primitive> disownBase();

  inline  ::uint64_t getUdpdefn();
  inline void setUdpdefn( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Udp::Pipeline {
public:
  typedef Udp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Primitive::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modpath::Reader {
public:
  typedef Modpath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modpath::Builder {
public:
  typedef Modpath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modpath::Pipeline {
public:
  typedef Modpath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tchk::Reader {
public:
  typedef Tchk Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getModuleinst() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasExprtchkterms() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getExprtchkterms() const;

  inline  ::uint64_t getTchkrefterm() const;

  inline  ::uint64_t getTchkdataterm() const;

  inline  ::uint64_t getReg() const;

  inline  ::uint64_t getVpiDelay() const;

  inline  ::int64_t getVpiTchkType() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tchk::Builder {
public:
  typedef Tchk Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getModuleinst();
  inline void setModuleinst( ::uint64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasExprtchkterms();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getExprtchkterms();
  inline void setExprtchkterms( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initExprtchkterms(unsigned int size);
  inline void adoptExprtchkterms(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownExprtchkterms();

  inline  ::uint64_t getTchkrefterm();
  inline void setTchkrefterm( ::uint64_t value);

  inline  ::uint64_t getTchkdataterm();
  inline void setTchkdataterm( ::uint64_t value);

  inline  ::uint64_t getReg();
  inline void setReg( ::uint64_t value);

  inline  ::uint64_t getVpiDelay();
  inline void setVpiDelay( ::uint64_t value);

  inline  ::int64_t getVpiTchkType();
  inline void setVpiTchkType( ::int64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tchk::Pipeline {
public:
  typedef Tchk Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Range::Reader {
public:
  typedef Range Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Range::Builder {
public:
  typedef Range Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Range::Pipeline {
public:
  typedef Range Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Udpdefn::Reader {
public:
  typedef Udpdefn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiDefName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiPrimType() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getIodecls() const;

  inline bool hasTableentrys() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTableentrys() const;

  inline  ::uint64_t getInitial() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Udpdefn::Builder {
public:
  typedef Udpdefn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiPrimType();
  inline void setVpiPrimType( ::int64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownIodecls();

  inline bool hasTableentrys();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTableentrys();
  inline void setTableentrys( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTableentrys(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTableentrys(unsigned int size);
  inline void adoptTableentrys(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTableentrys();

  inline  ::uint64_t getInitial();
  inline void setInitial( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Udpdefn::Pipeline {
public:
  typedef Udpdefn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tableentry::Reader {
public:
  typedef Tableentry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::uint64_t getVpiValue() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tableentry::Builder {
public:
  typedef Tableentry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tableentry::Pipeline {
public:
  typedef Tableentry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Iodecl::Reader {
public:
  typedef Iodecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiDirection() const;

  inline  ::uint64_t getVpiName() const;

  inline bool getVpiScalar() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiVector() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Iodecl::Builder {
public:
  typedef Iodecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiDirection();
  inline void setVpiDirection( ::int64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Iodecl::Pipeline {
public:
  typedef Iodecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Aliasstmt::Reader {
public:
  typedef Aliasstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Aliasstmt::Builder {
public:
  typedef Aliasstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Aliasstmt::Pipeline {
public:
  typedef Aliasstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clockingblock::Reader {
public:
  typedef Clockingblock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline  ::int64_t getVpiInputEdge() const;

  inline  ::int64_t getVpiOutputEdge() const;

  inline  ::uint64_t getInputskew() const;

  inline  ::uint64_t getOutputskew() const;

  inline  ::uint64_t getClockingevent() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasClockingiodecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getClockingiodecls() const;

  inline  ::uint64_t getPrefix() const;

  inline  ::uint64_t getActual() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clockingblock::Builder {
public:
  typedef Clockingblock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline  ::int64_t getVpiInputEdge();
  inline void setVpiInputEdge( ::int64_t value);

  inline  ::int64_t getVpiOutputEdge();
  inline void setVpiOutputEdge( ::int64_t value);

  inline  ::uint64_t getInputskew();
  inline void setInputskew( ::uint64_t value);

  inline  ::uint64_t getOutputskew();
  inline void setOutputskew( ::uint64_t value);

  inline  ::uint64_t getClockingevent();
  inline void setClockingevent( ::uint64_t value);

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasClockingiodecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getClockingiodecls();
  inline void setClockingiodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setClockingiodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initClockingiodecls(unsigned int size);
  inline void adoptClockingiodecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownClockingiodecls();

  inline  ::uint64_t getPrefix();
  inline void setPrefix( ::uint64_t value);

  inline  ::uint64_t getActual();
  inline void setActual( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clockingblock::Pipeline {
public:
  typedef Clockingblock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clockingiodecl::Reader {
public:
  typedef Clockingiodecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiDirection() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::int64_t getVpiInputEdge() const;

  inline  ::int64_t getVpiOutputEdge() const;

  inline  ::uint64_t getInputskew() const;

  inline  ::uint64_t getOutputskew() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clockingiodecl::Builder {
public:
  typedef Clockingiodecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiDirection();
  inline void setVpiDirection( ::int64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::int64_t getVpiInputEdge();
  inline void setVpiInputEdge( ::int64_t value);

  inline  ::int64_t getVpiOutputEdge();
  inline void setVpiOutputEdge( ::int64_t value);

  inline  ::uint64_t getInputskew();
  inline void setInputskew( ::uint64_t value);

  inline  ::uint64_t getOutputskew();
  inline void setOutputskew( ::uint64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clockingiodecl::Pipeline {
public:
  typedef Clockingiodecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Paramassign::Reader {
public:
  typedef Paramassign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool getVpiConnByName() const;

  inline bool getVpiOverriden() const;

  inline bool hasRhs() const;
  inline  ::ObjIndexType::Reader getRhs() const;

  inline bool hasLhs() const;
  inline  ::ObjIndexType::Reader getLhs() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Paramassign::Builder {
public:
  typedef Paramassign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool getVpiConnByName();
  inline void setVpiConnByName(bool value);

  inline bool getVpiOverriden();
  inline void setVpiOverriden(bool value);

  inline bool hasRhs();
  inline  ::ObjIndexType::Builder getRhs();
  inline void setRhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRhs();
  inline void adoptRhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRhs();

  inline bool hasLhs();
  inline  ::ObjIndexType::Builder getLhs();
  inline void setLhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLhs();
  inline void adoptLhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLhs();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Paramassign::Pipeline {
public:
  typedef Paramassign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getRhs();
  inline  ::ObjIndexType::Pipeline getLhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Instancearray::Reader {
public:
  typedef Instancearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getInstances() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getModules() const;

  inline bool hasElemtypespec() const;
  inline  ::ObjIndexType::Reader getElemtypespec() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPorts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Instancearray::Builder {
public:
  typedef Instancearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownInstances();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownModules();

  inline bool hasElemtypespec();
  inline  ::ObjIndexType::Builder getElemtypespec();
  inline void setElemtypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initElemtypespec();
  inline void adoptElemtypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownElemtypespec();

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPorts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Instancearray::Pipeline {
public:
  typedef Instancearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getElemtypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacearray::Reader {
public:
  typedef Interfacearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instancearray::Reader getBase() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getParamassigns() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacearray::Builder {
public:
  typedef Interfacearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instancearray::Builder getBase();
  inline void setBase( ::Instancearray::Reader value);
  inline  ::Instancearray::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instancearray>&& value);
  inline ::capnp::Orphan< ::Instancearray> disownBase();

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownParamassigns();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacearray::Pipeline {
public:
  typedef Interfacearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instancearray::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Programarray::Reader {
public:
  typedef Programarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instancearray::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Programarray::Builder {
public:
  typedef Programarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instancearray::Builder getBase();
  inline void setBase( ::Instancearray::Reader value);
  inline  ::Instancearray::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instancearray>&& value);
  inline ::capnp::Orphan< ::Instancearray> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Programarray::Pipeline {
public:
  typedef Programarray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instancearray::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modulearray::Reader {
public:
  typedef Modulearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instancearray::Reader getBase() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getParamassigns() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modulearray::Builder {
public:
  typedef Modulearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instancearray::Builder getBase();
  inline void setBase( ::Instancearray::Reader value);
  inline  ::Instancearray::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instancearray>&& value);
  inline ::capnp::Orphan< ::Instancearray> disownBase();

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownParamassigns();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modulearray::Pipeline {
public:
  typedef Modulearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instancearray::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Primitivearray::Reader {
public:
  typedef Primitivearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instancearray::Reader getBase() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getPrimitives() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Primitivearray::Builder {
public:
  typedef Primitivearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instancearray::Builder getBase();
  inline void setBase( ::Instancearray::Reader value);
  inline  ::Instancearray::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instancearray>&& value);
  inline ::capnp::Orphan< ::Instancearray> disownBase();

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownPrimitives();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Primitivearray::Pipeline {
public:
  typedef Primitivearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instancearray::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getDelay();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gatearray::Reader {
public:
  typedef Gatearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Primitivearray::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gatearray::Builder {
public:
  typedef Gatearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Primitivearray::Builder getBase();
  inline void setBase( ::Primitivearray::Reader value);
  inline  ::Primitivearray::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Primitivearray>&& value);
  inline ::capnp::Orphan< ::Primitivearray> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gatearray::Pipeline {
public:
  typedef Gatearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Primitivearray::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Switcharray::Reader {
public:
  typedef Switcharray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Primitivearray::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Switcharray::Builder {
public:
  typedef Switcharray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Primitivearray::Builder getBase();
  inline void setBase( ::Primitivearray::Reader value);
  inline  ::Primitivearray::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Primitivearray>&& value);
  inline ::capnp::Orphan< ::Primitivearray> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Switcharray::Pipeline {
public:
  typedef Switcharray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Primitivearray::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Udparray::Reader {
public:
  typedef Udparray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Primitivearray::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Udparray::Builder {
public:
  typedef Udparray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Primitivearray::Builder getBase();
  inline void setBase( ::Primitivearray::Reader value);
  inline  ::Primitivearray::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Primitivearray>&& value);
  inline ::capnp::Orphan< ::Primitivearray> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Udparray::Pipeline {
public:
  typedef Udparray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Primitivearray::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Typespec::Reader {
public:
  typedef Typespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasTypedefalias() const;
  inline  ::ObjIndexType::Reader getTypedefalias() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Typespec::Builder {
public:
  typedef Typespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasTypedefalias();
  inline  ::ObjIndexType::Builder getTypedefalias();
  inline void setTypedefalias( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypedefalias();
  inline void adoptTypedefalias(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypedefalias();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Typespec::Pipeline {
public:
  typedef Typespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getTypedefalias();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Netdrivers::Reader {
public:
  typedef Netdrivers Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Netdrivers::Builder {
public:
  typedef Netdrivers Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Netdrivers::Pipeline {
public:
  typedef Netdrivers Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Netloads::Reader {
public:
  typedef Netloads Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Netloads::Builder {
public:
  typedef Netloads Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Netloads::Pipeline {
public:
  typedef Netloads Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Primterm::Reader {
public:
  typedef Primterm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiDirection() const;

  inline  ::int64_t getVpiTermIndex() const;

  inline  ::uint64_t getVpiValue() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Primterm::Builder {
public:
  typedef Primterm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiDirection();
  inline void setVpiDirection( ::int64_t value);

  inline  ::int64_t getVpiTermIndex();
  inline void setVpiTermIndex( ::int64_t value);

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Primterm::Pipeline {
public:
  typedef Primterm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Pathterm::Reader {
public:
  typedef Pathterm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Pathterm::Builder {
public:
  typedef Pathterm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Pathterm::Pipeline {
public:
  typedef Pathterm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tchkterm::Reader {
public:
  typedef Tchkterm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasCondition() const;
  inline  ::ObjIndexType::Reader getCondition() const;

  inline  ::int64_t getVpiEdge() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tchkterm::Builder {
public:
  typedef Tchkterm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasCondition();
  inline  ::ObjIndexType::Builder getCondition();
  inline void setCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initCondition();
  inline void adoptCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownCondition();

  inline  ::int64_t getVpiEdge();
  inline void setVpiEdge( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tchkterm::Pipeline {
public:
  typedef Tchkterm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Nets::Reader {
public:
  typedef Nets Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Simpleexpr::Reader getBase() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::int64_t getVpiNetType() const;

  inline  ::int64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getLocalloads() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getContassigns() const;

  inline bool hasPathterms() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPathterms() const;

  inline bool hasTchkterms() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTchkterms() const;

  inline bool hasSimnet() const;
  inline  ::ObjIndexType::Reader getSimnet() const;

  inline  ::uint64_t getModuleinst() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Nets::Builder {
public:
  typedef Nets Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Simpleexpr::Builder getBase();
  inline void setBase( ::Simpleexpr::Reader value);
  inline  ::Simpleexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Simpleexpr>&& value);
  inline ::capnp::Orphan< ::Simpleexpr> disownBase();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::int64_t getVpiNetType();
  inline void setVpiNetType( ::int64_t value);

  inline  ::int64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::int64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownLocalloads();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownContassigns();

  inline bool hasPathterms();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPathterms();
  inline void setPathterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPathterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPathterms(unsigned int size);
  inline void adoptPathterms(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPathterms();

  inline bool hasTchkterms();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTchkterms();
  inline void setTchkterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTchkterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTchkterms(unsigned int size);
  inline void adoptTchkterms(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTchkterms();

  inline bool hasSimnet();
  inline  ::ObjIndexType::Builder getSimnet();
  inline void setSimnet( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnet();
  inline void adoptSimnet(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnet();

  inline  ::uint64_t getModuleinst();
  inline void setModuleinst( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Nets::Pipeline {
public:
  typedef Nets Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Simpleexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getSimnet();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Netbit::Reader {
public:
  typedef Netbit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Nets::Reader getBase() const;

  inline bool hasExprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getExprs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Netbit::Builder {
public:
  typedef Netbit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Nets::Builder getBase();
  inline void setBase( ::Nets::Reader value);
  inline  ::Nets::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Nets>&& value);
  inline ::capnp::Orphan< ::Nets> disownBase();

  inline bool hasExprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getExprs();
  inline void setExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initExprs(unsigned int size);
  inline void adoptExprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownExprs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Netbit::Pipeline {
public:
  typedef Netbit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Nets::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Net::Reader {
public:
  typedef Net Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Nets::Reader getBase() const;

  inline bool hasNetbits() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getNetbits() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline bool hasExprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getExprs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Net::Builder {
public:
  typedef Net Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Nets::Builder getBase();
  inline void setBase( ::Nets::Reader value);
  inline  ::Nets::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Nets>&& value);
  inline ::capnp::Orphan< ::Nets> disownBase();

  inline bool hasNetbits();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getNetbits();
  inline void setNetbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNetbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initNetbits(unsigned int size);
  inline void adoptNetbits(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownNetbits();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline bool hasExprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getExprs();
  inline void setExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initExprs(unsigned int size);
  inline void adoptExprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownExprs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Net::Pipeline {
public:
  typedef Net Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Nets::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Structnet::Reader {
public:
  typedef Structnet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Net::Reader getBase() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool hasNets() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getNets() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Structnet::Builder {
public:
  typedef Structnet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Net::Builder getBase();
  inline void setBase( ::Net::Reader value);
  inline  ::Net::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Net>&& value);
  inline ::capnp::Orphan< ::Net> disownBase();

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool hasNets();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getNets();
  inline void setNets( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initNets(unsigned int size);
  inline void adoptNets(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownNets();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Structnet::Pipeline {
public:
  typedef Structnet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Net::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enumnet::Reader {
public:
  typedef Enumnet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Net::Reader getBase() const;

  inline bool getVpiPackedArrayMember() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enumnet::Builder {
public:
  typedef Enumnet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Net::Builder getBase();
  inline void setBase( ::Net::Reader value);
  inline  ::Net::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Net>&& value);
  inline ::capnp::Orphan< ::Net> disownBase();

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enumnet::Pipeline {
public:
  typedef Enumnet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Net::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Integernet::Reader {
public:
  typedef Integernet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Net::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Integernet::Builder {
public:
  typedef Integernet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Net::Builder getBase();
  inline void setBase( ::Net::Reader value);
  inline  ::Net::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Net>&& value);
  inline ::capnp::Orphan< ::Net> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Integernet::Pipeline {
public:
  typedef Integernet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Net::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Timenet::Reader {
public:
  typedef Timenet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Net::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Timenet::Builder {
public:
  typedef Timenet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Net::Builder getBase();
  inline void setBase( ::Net::Reader value);
  inline  ::Net::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Net>&& value);
  inline ::capnp::Orphan< ::Net> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Timenet::Pipeline {
public:
  typedef Timenet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Net::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Logicnet::Reader {
public:
  typedef Logicnet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Net::Reader getBase() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Logicnet::Builder {
public:
  typedef Logicnet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Net::Builder getBase();
  inline void setBase( ::Net::Reader value);
  inline  ::Net::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Net>&& value);
  inline ::capnp::Orphan< ::Net> disownBase();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Logicnet::Pipeline {
public:
  typedef Logicnet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Net::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arraynet::Reader {
public:
  typedef Arraynet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Nets::Reader getBase() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasNets() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getNets() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arraynet::Builder {
public:
  typedef Arraynet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Nets::Builder getBase();
  inline void setBase( ::Nets::Reader value);
  inline  ::Nets::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Nets>&& value);
  inline ::capnp::Orphan< ::Nets> disownBase();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasNets();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getNets();
  inline void setNets( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initNets(unsigned int size);
  inline void adoptNets(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownNets();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arraynet::Pipeline {
public:
  typedef Arraynet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Nets::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Packedarraynet::Reader {
public:
  typedef Packedarraynet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Net::Reader getBase() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasElements() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getElements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Packedarraynet::Builder {
public:
  typedef Packedarraynet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Net::Builder getBase();
  inline void setBase( ::Net::Reader value);
  inline  ::Net::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Net>&& value);
  inline ::capnp::Orphan< ::Net> disownBase();

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasElements();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getElements();
  inline void setElements( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initElements(unsigned int size);
  inline void adoptElements(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownElements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Packedarraynet::Pipeline {
public:
  typedef Packedarraynet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Net::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Eventtypespec::Reader {
public:
  typedef Eventtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Eventtypespec::Builder {
public:
  typedef Eventtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Eventtypespec::Pipeline {
public:
  typedef Eventtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedevent::Reader {
public:
  typedef Namedevent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline  ::uint64_t getEventtypespec() const;

  inline bool hasThreads() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getThreads() const;

  inline  ::uint64_t getVpiEndLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedevent::Builder {
public:
  typedef Namedevent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline  ::uint64_t getEventtypespec();
  inline void setEventtypespec( ::uint64_t value);

  inline bool hasThreads();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getThreads();
  inline void setThreads( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setThreads(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initThreads(unsigned int size);
  inline void adoptThreads(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownThreads();

  inline  ::uint64_t getVpiEndLabel();
  inline void setVpiEndLabel( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedevent::Pipeline {
public:
  typedef Namedevent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedeventarray::Reader {
public:
  typedef Namedeventarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedeventarray::Builder {
public:
  typedef Namedeventarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedeventarray::Pipeline {
public:
  typedef Namedeventarray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Parameter::Reader {
public:
  typedef Parameter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Simpleexpr::Reader getBase() const;

  inline  ::int64_t getVpiConstType() const;

  inline bool getVpiSigned() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftrange() const;
  inline  ::ObjIndexType::Reader getLeftrange() const;

  inline bool hasRightrange() const;
  inline  ::ObjIndexType::Reader getRightrange() const;

  inline bool getVpiLocalParam() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getVpiImported() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Parameter::Builder {
public:
  typedef Parameter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Simpleexpr::Builder getBase();
  inline void setBase( ::Simpleexpr::Reader value);
  inline  ::Simpleexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Simpleexpr>&& value);
  inline ::capnp::Orphan< ::Simpleexpr> disownBase();

  inline  ::int64_t getVpiConstType();
  inline void setVpiConstType( ::int64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftrange();
  inline  ::ObjIndexType::Builder getLeftrange();
  inline void setLeftrange( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftrange();
  inline void adoptLeftrange(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftrange();

  inline bool hasRightrange();
  inline  ::ObjIndexType::Builder getRightrange();
  inline void setRightrange( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightrange();
  inline void adoptRightrange(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightrange();

  inline bool getVpiLocalParam();
  inline void setVpiLocalParam(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getVpiImported();
  inline void setVpiImported( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Parameter::Pipeline {
public:
  typedef Parameter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Simpleexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftrange();
  inline  ::ObjIndexType::Pipeline getRightrange();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Defparam::Reader {
public:
  typedef Defparam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasRhs() const;
  inline  ::ObjIndexType::Reader getRhs() const;

  inline  ::uint64_t getLhs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Defparam::Builder {
public:
  typedef Defparam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasRhs();
  inline  ::ObjIndexType::Builder getRhs();
  inline void setRhs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRhs();
  inline void adoptRhs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRhs();

  inline  ::uint64_t getLhs();
  inline void setLhs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Defparam::Pipeline {
public:
  typedef Defparam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getRhs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Specparam::Reader {
public:
  typedef Specparam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Simpleexpr::Reader getBase() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Specparam::Builder {
public:
  typedef Specparam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Simpleexpr::Builder getBase();
  inline void setBase( ::Simpleexpr::Reader value);
  inline  ::Simpleexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Simpleexpr>&& value);
  inline ::capnp::Orphan< ::Simpleexpr> disownBase();

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Specparam::Pipeline {
public:
  typedef Specparam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Simpleexpr::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classtypespec::Reader {
public:
  typedef Classtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline  ::int64_t getVpiClassType() const;

  inline bool getVpiAutomatic() const;

  inline  ::uint64_t getExtends() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVariables() const;

  inline bool hasTaskfuncs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTaskfuncs() const;

  inline bool hasConstraints() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getConstraints() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getParameters() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getParamassigns() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getVirtualinterfacevars() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getNamedeventarrays() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getScopes() const;

  inline  ::uint64_t getClassdefn() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classtypespec::Builder {
public:
  typedef Classtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline  ::int64_t getVpiClassType();
  inline void setVpiClassType( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::uint64_t getExtends();
  inline void setExtends( ::uint64_t value);

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVariables();

  inline bool hasTaskfuncs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTaskfuncs();
  inline void setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTaskfuncs(unsigned int size);
  inline void adoptTaskfuncs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTaskfuncs();

  inline bool hasConstraints();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getConstraints();
  inline void setConstraints( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setConstraints(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initConstraints(unsigned int size);
  inline void adoptConstraints(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownConstraints();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownParameters();

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownParamassigns();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownVirtualinterfacevars();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownNamedeventarrays();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownScopes();

  inline  ::uint64_t getClassdefn();
  inline void setClassdefn( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classtypespec::Pipeline {
public:
  typedef Classtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Extends::Reader {
public:
  typedef Extends Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getClasstypespec() const;

  inline bool hasArguments() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getArguments() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Extends::Builder {
public:
  typedef Extends Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getClasstypespec();
  inline void setClasstypespec( ::uint64_t value);

  inline bool hasArguments();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getArguments();
  inline void setArguments( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initArguments(unsigned int size);
  inline void adoptArguments(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownArguments();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Extends::Pipeline {
public:
  typedef Extends Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classdefn::Reader {
public:
  typedef Classdefn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline bool getVpiVirtual() const;

  inline bool getVpiAutomatic() const;

  inline  ::uint64_t getExtends() const;

  inline bool hasTaskfuncs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTaskfuncs() const;

  inline bool hasConstraints() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getConstraints() const;

  inline bool hasDeriveds() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getDeriveds() const;

  inline bool hasClasstypespecs() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getClasstypespecs() const;

  inline  ::uint64_t getVpiEndLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classdefn::Builder {
public:
  typedef Classdefn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline bool getVpiVirtual();
  inline void setVpiVirtual(bool value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::uint64_t getExtends();
  inline void setExtends( ::uint64_t value);

  inline bool hasTaskfuncs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTaskfuncs();
  inline void setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTaskfuncs(unsigned int size);
  inline void adoptTaskfuncs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTaskfuncs();

  inline bool hasConstraints();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getConstraints();
  inline void setConstraints( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setConstraints(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initConstraints(unsigned int size);
  inline void adoptConstraints(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownConstraints();

  inline bool hasDeriveds();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getDeriveds();
  inline void setDeriveds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDeriveds(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initDeriveds(unsigned int size);
  inline void adoptDeriveds(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownDeriveds();

  inline bool hasClasstypespecs();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getClasstypespecs();
  inline void setClasstypespecs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setClasstypespecs(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initClasstypespecs(unsigned int size);
  inline void adoptClasstypespecs(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownClasstypespecs();

  inline  ::uint64_t getVpiEndLabel();
  inline void setVpiEndLabel( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classdefn::Pipeline {
public:
  typedef Classdefn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classobj::Reader {
public:
  typedef Classobj Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline  ::int64_t getVpiObjId() const;

  inline  ::uint64_t getClasstypespec() const;

  inline bool hasThreads() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getThreads() const;

  inline bool hasMessages() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getMessages() const;

  inline bool hasTaskfuncs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTaskfuncs() const;

  inline bool hasConstraints() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getConstraints() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classobj::Builder {
public:
  typedef Classobj Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline  ::int64_t getVpiObjId();
  inline void setVpiObjId( ::int64_t value);

  inline  ::uint64_t getClasstypespec();
  inline void setClasstypespec( ::uint64_t value);

  inline bool hasThreads();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getThreads();
  inline void setThreads( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setThreads(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initThreads(unsigned int size);
  inline void adoptThreads(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownThreads();

  inline bool hasMessages();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getMessages();
  inline void setMessages( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initMessages(unsigned int size);
  inline void adoptMessages(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownMessages();

  inline bool hasTaskfuncs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTaskfuncs();
  inline void setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTaskfuncs(unsigned int size);
  inline void adoptTaskfuncs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTaskfuncs();

  inline bool hasConstraints();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getConstraints();
  inline void setConstraints( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setConstraints(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initConstraints(unsigned int size);
  inline void adoptConstraints(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownConstraints();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classobj::Pipeline {
public:
  typedef Classobj Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classvar::Reader {
public:
  typedef Classvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Variables::Reader getBase() const;

  inline  ::int64_t getVpiObjId() const;

  inline  ::uint64_t getClassobj() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classvar::Builder {
public:
  typedef Classvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Variables::Builder getBase();
  inline void setBase( ::Variables::Reader value);
  inline  ::Variables::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Variables>&& value);
  inline ::capnp::Orphan< ::Variables> disownBase();

  inline  ::int64_t getVpiObjId();
  inline void setVpiObjId( ::int64_t value);

  inline  ::uint64_t getClassobj();
  inline void setClassobj( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classvar::Pipeline {
public:
  typedef Classvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Variables::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Instance::Reader {
public:
  typedef Instance Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Scope::Reader getBase() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefLineNo() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getProgramarrays() const;

  inline bool hasClassdefns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getClassdefns() const;

  inline bool hasTaskfuncs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTaskfuncs() const;

  inline bool hasNets() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getNets() const;

  inline bool hasArraynets() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getArraynets() const;

  inline bool hasSpecparams() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getSpecparams() const;

  inline bool hasAssertions() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getAssertions() const;

  inline  ::uint64_t getModuleinst() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Instance::Builder {
public:
  typedef Instance Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Scope::Builder getBase();
  inline void setBase( ::Scope::Reader value);
  inline  ::Scope::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Scope>&& value);
  inline ::capnp::Orphan< ::Scope> disownBase();

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefLineNo();
  inline void setVpiDefLineNo( ::int64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownProgramarrays();

  inline bool hasClassdefns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getClassdefns();
  inline void setClassdefns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setClassdefns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initClassdefns(unsigned int size);
  inline void adoptClassdefns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownClassdefns();

  inline bool hasTaskfuncs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTaskfuncs();
  inline void setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTaskfuncs(unsigned int size);
  inline void adoptTaskfuncs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTaskfuncs();

  inline bool hasNets();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getNets();
  inline void setNets( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initNets(unsigned int size);
  inline void adoptNets(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownNets();

  inline bool hasArraynets();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getArraynets();
  inline void setArraynets( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setArraynets(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initArraynets(unsigned int size);
  inline void adoptArraynets(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownArraynets();

  inline bool hasSpecparams();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getSpecparams();
  inline void setSpecparams( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSpecparams(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initSpecparams(unsigned int size);
  inline void adoptSpecparams(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownSpecparams();

  inline bool hasAssertions();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getAssertions();
  inline void setAssertions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initAssertions(unsigned int size);
  inline void adoptAssertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownAssertions();

  inline  ::uint64_t getModuleinst();
  inline void setModuleinst( ::uint64_t value);

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Instance::Pipeline {
public:
  typedef Instance Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Scope::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfaceinst::Reader {
public:
  typedef Interfaceinst Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instance::Reader getBase() const;

  inline  ::int64_t getVpiIndex() const;

  inline bool hasInterfacetfdecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfacetfdecls() const;

  inline bool hasModports() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getModports() const;

  inline  ::uint64_t getGlobalclocking() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasModpaths() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getModpaths() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getContassigns() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getClockingblocks() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfacearrays() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getProcess() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPorts() const;

  inline bool hasGenscopearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getGenscopearrays() const;

  inline bool hasElabtasks() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getElabtasks() const;

  inline bool hasGenstmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getGenstmts() const;

  inline  ::uint64_t getVpiEndLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfaceinst::Builder {
public:
  typedef Interfaceinst Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instance::Builder getBase();
  inline void setBase( ::Instance::Reader value);
  inline  ::Instance::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instance>&& value);
  inline ::capnp::Orphan< ::Instance> disownBase();

  inline  ::int64_t getVpiIndex();
  inline void setVpiIndex( ::int64_t value);

  inline bool hasInterfacetfdecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfacetfdecls();
  inline void setInterfacetfdecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfacetfdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfacetfdecls(unsigned int size);
  inline void adoptInterfacetfdecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfacetfdecls();

  inline bool hasModports();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getModports();
  inline void setModports( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModports(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initModports(unsigned int size);
  inline void adoptModports(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownModports();

  inline  ::uint64_t getGlobalclocking();
  inline void setGlobalclocking( ::uint64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasModpaths();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getModpaths();
  inline void setModpaths( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModpaths(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initModpaths(unsigned int size);
  inline void adoptModpaths(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownModpaths();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownContassigns();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownClockingblocks();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfacearrays();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownProcess();

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPorts();

  inline bool hasGenscopearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getGenscopearrays();
  inline void setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initGenscopearrays(unsigned int size);
  inline void adoptGenscopearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownGenscopearrays();

  inline bool hasElabtasks();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getElabtasks();
  inline void setElabtasks( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initElabtasks(unsigned int size);
  inline void adoptElabtasks(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownElabtasks();

  inline bool hasGenstmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getGenstmts();
  inline void setGenstmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initGenstmts(unsigned int size);
  inline void adoptGenstmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownGenstmts();

  inline  ::uint64_t getVpiEndLabel();
  inline void setVpiEndLabel( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfaceinst::Pipeline {
public:
  typedef Interfaceinst Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instance::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExprdist();
  inline  ::ObjIndexType::Pipeline getInstancearray();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Program::Reader {
public:
  typedef Program Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instance::Reader getBase() const;

  inline  ::int64_t getVpiIndex() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfaces() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfacearrays() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getProcess() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getContassigns() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getClockingblocks() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPorts() const;

  inline bool hasGenscopearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getGenscopearrays() const;

  inline  ::uint64_t getVpiEndLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Program::Builder {
public:
  typedef Program Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instance::Builder getBase();
  inline void setBase( ::Instance::Reader value);
  inline  ::Instance::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instance>&& value);
  inline ::capnp::Orphan< ::Instance> disownBase();

  inline  ::int64_t getVpiIndex();
  inline void setVpiIndex( ::int64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfaces();

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfacearrays();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownProcess();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownContassigns();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownClockingblocks();

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPorts();

  inline bool hasGenscopearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getGenscopearrays();
  inline void setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initGenscopearrays(unsigned int size);
  inline void adoptGenscopearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownGenscopearrays();

  inline  ::uint64_t getVpiEndLabel();
  inline void setVpiEndLabel( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Program::Pipeline {
public:
  typedef Program Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instance::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getInstancearray();
  inline  ::ObjIndexType::Pipeline getExprdist();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Package::Reader {
public:
  typedef Package Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instance::Reader getBase() const;

  inline bool getVpiUnit() const;

  inline  ::uint64_t getVpiEndLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Package::Builder {
public:
  typedef Package Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instance::Builder getBase();
  inline void setBase( ::Instance::Reader value);
  inline  ::Instance::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instance>&& value);
  inline ::capnp::Orphan< ::Instance> disownBase();

  inline bool getVpiUnit();
  inline void setVpiUnit(bool value);

  inline  ::uint64_t getVpiEndLabel();
  inline void setVpiEndLabel( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Package::Pipeline {
public:
  typedef Package Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instance::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Moduleinst::Reader {
public:
  typedef Moduleinst Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instance::Reader getBase() const;

  inline  ::int64_t getVpiIndex() const;

  inline bool getVpiTopModule() const;

  inline  ::int64_t getVpiDefDecayTime() const;

  inline  ::uint64_t getGlobalclocking() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline  ::uint64_t getModulearray() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPorts() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInterfacearrays() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getProcess() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getModules() const;

  inline bool hasModulearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getModulearrays() const;

  inline bool hasGenscopearrays() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getGenscopearrays() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getContassigns() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getPrimitives() const;

  inline bool hasPrimitivearrays() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getPrimitivearrays() const;

  inline bool hasModpaths() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getModpaths() const;

  inline bool hasTchks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTchks() const;

  inline bool hasDefparams() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getDefparams() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getIodecls() const;

  inline bool hasAliasstmts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAliasstmts() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getClockingblocks() const;

  inline bool hasElabtasks() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getElabtasks() const;

  inline bool hasRefmodules() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRefmodules() const;

  inline bool hasGenstmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getGenstmts() const;

  inline  ::uint64_t getVpiEndLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Moduleinst::Builder {
public:
  typedef Moduleinst Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instance::Builder getBase();
  inline void setBase( ::Instance::Reader value);
  inline  ::Instance::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instance>&& value);
  inline ::capnp::Orphan< ::Instance> disownBase();

  inline  ::int64_t getVpiIndex();
  inline void setVpiIndex( ::int64_t value);

  inline bool getVpiTopModule();
  inline void setVpiTopModule(bool value);

  inline  ::int64_t getVpiDefDecayTime();
  inline void setVpiDefDecayTime( ::int64_t value);

  inline  ::uint64_t getGlobalclocking();
  inline void setGlobalclocking( ::uint64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline  ::uint64_t getModulearray();
  inline void setModulearray( ::uint64_t value);

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPorts();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownInterfacearrays();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownProcess();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownModules();

  inline bool hasModulearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getModulearrays();
  inline void setModulearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initModulearrays(unsigned int size);
  inline void adoptModulearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownModulearrays();

  inline bool hasGenscopearrays();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getGenscopearrays();
  inline void setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initGenscopearrays(unsigned int size);
  inline void adoptGenscopearrays(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownGenscopearrays();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownContassigns();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownPrimitives();

  inline bool hasPrimitivearrays();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getPrimitivearrays();
  inline void setPrimitivearrays( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initPrimitivearrays(unsigned int size);
  inline void adoptPrimitivearrays(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownPrimitivearrays();

  inline bool hasModpaths();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getModpaths();
  inline void setModpaths( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModpaths(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initModpaths(unsigned int size);
  inline void adoptModpaths(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownModpaths();

  inline bool hasTchks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTchks();
  inline void setTchks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTchks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTchks(unsigned int size);
  inline void adoptTchks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTchks();

  inline bool hasDefparams();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getDefparams();
  inline void setDefparams( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDefparams(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initDefparams(unsigned int size);
  inline void adoptDefparams(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownDefparams();

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownIodecls();

  inline bool hasAliasstmts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAliasstmts();
  inline void setAliasstmts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAliasstmts(unsigned int size);
  inline void adoptAliasstmts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAliasstmts();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownClockingblocks();

  inline bool hasElabtasks();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getElabtasks();
  inline void setElabtasks( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initElabtasks(unsigned int size);
  inline void adoptElabtasks(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownElabtasks();

  inline bool hasRefmodules();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRefmodules();
  inline void setRefmodules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRefmodules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRefmodules(unsigned int size);
  inline void adoptRefmodules(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRefmodules();

  inline bool hasGenstmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getGenstmts();
  inline void setGenstmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initGenstmts(unsigned int size);
  inline void adoptGenstmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownGenstmts();

  inline  ::uint64_t getVpiEndLabel();
  inline void setVpiEndLabel( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Moduleinst::Pipeline {
public:
  typedef Moduleinst Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instance::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExprdist();
  inline  ::ObjIndexType::Pipeline getInstancearray();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Checkerdecl::Reader {
public:
  typedef Checkerdecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instance::Reader getBase() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getProcess() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getContassigns() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPorts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Checkerdecl::Builder {
public:
  typedef Checkerdecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instance::Builder getBase();
  inline void setBase( ::Instance::Reader value);
  inline  ::Instance::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instance>&& value);
  inline ::capnp::Orphan< ::Instance> disownBase();

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownProcess();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownContassigns();

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPorts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Checkerdecl::Pipeline {
public:
  typedef Checkerdecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instance::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Checkerinst::Reader {
public:
  typedef Checkerinst Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Instance::Reader getBase() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPorts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Checkerinst::Builder {
public:
  typedef Checkerinst Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Instance::Builder getBase();
  inline void setBase( ::Instance::Reader value);
  inline  ::Instance::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Instance>&& value);
  inline ::capnp::Orphan< ::Instance> disownBase();

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPorts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Checkerinst::Pipeline {
public:
  typedef Checkerinst Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Instance::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Shortrealtypespec::Reader {
public:
  typedef Shortrealtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline  ::uint64_t getResolutionfunc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Shortrealtypespec::Builder {
public:
  typedef Shortrealtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline  ::uint64_t getResolutionfunc();
  inline void setResolutionfunc( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Shortrealtypespec::Pipeline {
public:
  typedef Shortrealtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Realtypespec::Reader {
public:
  typedef Realtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline  ::uint64_t getResolutionfunc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Realtypespec::Builder {
public:
  typedef Realtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline  ::uint64_t getResolutionfunc();
  inline void setResolutionfunc( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Realtypespec::Pipeline {
public:
  typedef Realtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bytetypespec::Reader {
public:
  typedef Bytetypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiSigned() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bytetypespec::Builder {
public:
  typedef Bytetypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bytetypespec::Pipeline {
public:
  typedef Bytetypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Shortinttypespec::Reader {
public:
  typedef Shortinttypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiSigned() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Shortinttypespec::Builder {
public:
  typedef Shortinttypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Shortinttypespec::Pipeline {
public:
  typedef Shortinttypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Inttypespec::Reader {
public:
  typedef Inttypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline  ::uint64_t getVpiValue() const;

  inline bool hasCasttoexpr() const;
  inline  ::ObjIndexType::Reader getCasttoexpr() const;

  inline bool getVpiSigned() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Inttypespec::Builder {
public:
  typedef Inttypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline bool hasCasttoexpr();
  inline  ::ObjIndexType::Builder getCasttoexpr();
  inline void setCasttoexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initCasttoexpr();
  inline void adoptCasttoexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownCasttoexpr();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Inttypespec::Pipeline {
public:
  typedef Inttypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getCasttoexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Longinttypespec::Reader {
public:
  typedef Longinttypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiSigned() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Longinttypespec::Builder {
public:
  typedef Longinttypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Longinttypespec::Pipeline {
public:
  typedef Longinttypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Integertypespec::Reader {
public:
  typedef Integertypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline  ::uint64_t getVpiValue() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool getVpiSigned() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Integertypespec::Builder {
public:
  typedef Integertypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Integertypespec::Pipeline {
public:
  typedef Integertypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Timetypespec::Reader {
public:
  typedef Timetypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiSigned() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Timetypespec::Builder {
public:
  typedef Timetypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Timetypespec::Pipeline {
public:
  typedef Timetypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enumtypespec::Reader {
public:
  typedef Enumtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool hasBasetypespec() const;
  inline  ::ObjIndexType::Reader getBasetypespec() const;

  inline bool hasEnumconsts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getEnumconsts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enumtypespec::Builder {
public:
  typedef Enumtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool hasBasetypespec();
  inline  ::ObjIndexType::Builder getBasetypespec();
  inline void setBasetypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initBasetypespec();
  inline void adoptBasetypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownBasetypespec();

  inline bool hasEnumconsts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getEnumconsts();
  inline void setEnumconsts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setEnumconsts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initEnumconsts(unsigned int size);
  inline void adoptEnumconsts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownEnumconsts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enumtypespec::Pipeline {
public:
  typedef Enumtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getBasetypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Stringtypespec::Reader {
public:
  typedef Stringtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Stringtypespec::Builder {
public:
  typedef Stringtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Stringtypespec::Pipeline {
public:
  typedef Stringtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Chandletypespec::Reader {
public:
  typedef Chandletypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Chandletypespec::Builder {
public:
  typedef Chandletypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Chandletypespec::Pipeline {
public:
  typedef Chandletypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Moduletypespec::Reader {
public:
  typedef Moduletypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Moduletypespec::Builder {
public:
  typedef Moduletypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Moduletypespec::Pipeline {
public:
  typedef Moduletypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Structtypespec::Reader {
public:
  typedef Structtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiPacked() const;

  inline bool hasMembers() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getMembers() const;

  inline  ::uint64_t getResolutionfunc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Structtypespec::Builder {
public:
  typedef Structtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiPacked();
  inline void setVpiPacked(bool value);

  inline bool hasMembers();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getMembers();
  inline void setMembers( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMembers(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initMembers(unsigned int size);
  inline void adoptMembers(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownMembers();

  inline  ::uint64_t getResolutionfunc();
  inline void setResolutionfunc( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Structtypespec::Pipeline {
public:
  typedef Structtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Uniontypespec::Reader {
public:
  typedef Uniontypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiPacked() const;

  inline bool getVpiTagged() const;

  inline bool hasMembers() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getMembers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Uniontypespec::Builder {
public:
  typedef Uniontypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiPacked();
  inline void setVpiPacked(bool value);

  inline bool getVpiTagged();
  inline void setVpiTagged(bool value);

  inline bool hasMembers();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getMembers();
  inline void setMembers( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMembers(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initMembers(unsigned int size);
  inline void adoptMembers(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownMembers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Uniontypespec::Pipeline {
public:
  typedef Uniontypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Logictypespec::Reader {
public:
  typedef Logictypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiVector() const;

  inline  ::uint64_t getElemtypespec() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasIndextypespec() const;
  inline  ::ObjIndexType::Reader getIndextypespec() const;

  inline bool getVpiSigned() const;

  inline  ::uint64_t getResolutionfunc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Logictypespec::Builder {
public:
  typedef Logictypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline  ::uint64_t getElemtypespec();
  inline void setElemtypespec( ::uint64_t value);

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasIndextypespec();
  inline  ::ObjIndexType::Builder getIndextypespec();
  inline void setIndextypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initIndextypespec();
  inline void adoptIndextypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownIndextypespec();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::uint64_t getResolutionfunc();
  inline void setResolutionfunc( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Logictypespec::Pipeline {
public:
  typedef Logictypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getIndextypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Packedarraytypespec::Reader {
public:
  typedef Packedarraytypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiVector() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasElemtypespec() const;
  inline  ::ObjIndexType::Reader getElemtypespec() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline  ::uint64_t getResolutionfunc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Packedarraytypespec::Builder {
public:
  typedef Packedarraytypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasElemtypespec();
  inline  ::ObjIndexType::Builder getElemtypespec();
  inline void setElemtypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initElemtypespec();
  inline void adoptElemtypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownElemtypespec();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline  ::uint64_t getResolutionfunc();
  inline void setResolutionfunc( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Packedarraytypespec::Pipeline {
public:
  typedef Packedarraytypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getElemtypespec();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arraytypespec::Reader {
public:
  typedef Arraytypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline  ::int64_t getVpiArrayType() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasIndextypespec() const;
  inline  ::ObjIndexType::Reader getIndextypespec() const;

  inline bool hasElemtypespec() const;
  inline  ::ObjIndexType::Reader getElemtypespec() const;

  inline  ::uint64_t getResolutionfunc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arraytypespec::Builder {
public:
  typedef Arraytypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline  ::int64_t getVpiArrayType();
  inline void setVpiArrayType( ::int64_t value);

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasIndextypespec();
  inline  ::ObjIndexType::Builder getIndextypespec();
  inline void setIndextypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initIndextypespec();
  inline void adoptIndextypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownIndextypespec();

  inline bool hasElemtypespec();
  inline  ::ObjIndexType::Builder getElemtypespec();
  inline void setElemtypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initElemtypespec();
  inline void adoptElemtypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownElemtypespec();

  inline  ::uint64_t getResolutionfunc();
  inline void setResolutionfunc( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arraytypespec::Pipeline {
public:
  typedef Arraytypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getIndextypespec();
  inline  ::ObjIndexType::Pipeline getElemtypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voidtypespec::Reader {
public:
  typedef Voidtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voidtypespec::Builder {
public:
  typedef Voidtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voidtypespec::Pipeline {
public:
  typedef Voidtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Unsupportedtypespec::Reader {
public:
  typedef Unsupportedtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiPacked() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Unsupportedtypespec::Builder {
public:
  typedef Unsupportedtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiPacked();
  inline void setVpiPacked(bool value);

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Unsupportedtypespec::Pipeline {
public:
  typedef Unsupportedtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Sequencetypespec::Reader {
public:
  typedef Sequencetypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Sequencetypespec::Builder {
public:
  typedef Sequencetypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Sequencetypespec::Pipeline {
public:
  typedef Sequencetypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Propertytypespec::Reader {
public:
  typedef Propertytypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Propertytypespec::Builder {
public:
  typedef Propertytypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Propertytypespec::Pipeline {
public:
  typedef Propertytypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacetypespec::Reader {
public:
  typedef Interfacetypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiIsModPort() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getParamassigns() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacetypespec::Builder {
public:
  typedef Interfacetypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiIsModPort();
  inline void setVpiIsModPort(bool value);

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownParamassigns();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacetypespec::Pipeline {
public:
  typedef Interfacetypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Typeparameter::Reader {
public:
  typedef Typeparameter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiLocalParam() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline  ::uint64_t getVpiImported() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Typeparameter::Builder {
public:
  typedef Typeparameter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiLocalParam();
  inline void setVpiLocalParam(bool value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline  ::uint64_t getVpiImported();
  inline void setVpiImported( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Typeparameter::Pipeline {
public:
  typedef Typeparameter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Typespecmember::Reader {
public:
  typedef Typespecmember Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline bool getVpiRandType() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasDefaultvalue() const;
  inline  ::ObjIndexType::Reader getDefaultvalue() const;

  inline  ::uint64_t getVpiRefFile() const;

  inline  ::int64_t getVpiRefLineNo() const;

  inline  ::int64_t getVpiRefColumnNo() const;

  inline  ::int64_t getVpiRefEndLineNo() const;

  inline  ::int64_t getVpiRefEndColumnNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Typespecmember::Builder {
public:
  typedef Typespecmember Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool getVpiRandType();
  inline void setVpiRandType(bool value);

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasDefaultvalue();
  inline  ::ObjIndexType::Builder getDefaultvalue();
  inline void setDefaultvalue( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDefaultvalue();
  inline void adoptDefaultvalue(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDefaultvalue();

  inline  ::uint64_t getVpiRefFile();
  inline void setVpiRefFile( ::uint64_t value);

  inline  ::int64_t getVpiRefLineNo();
  inline void setVpiRefLineNo( ::int64_t value);

  inline  ::int64_t getVpiRefColumnNo();
  inline void setVpiRefColumnNo( ::int64_t value);

  inline  ::int64_t getVpiRefEndLineNo();
  inline void setVpiRefEndLineNo( ::int64_t value);

  inline  ::int64_t getVpiRefEndColumnNo();
  inline void setVpiRefEndColumnNo( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Typespecmember::Pipeline {
public:
  typedef Typespecmember Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getDefaultvalue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enumconst::Reader {
public:
  typedef Enumconst Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiValue() const;

  inline  ::uint64_t getVpiDecompile() const;

  inline  ::int64_t getVpiSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enumconst::Builder {
public:
  typedef Enumconst Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiValue();
  inline void setVpiValue( ::uint64_t value);

  inline  ::uint64_t getVpiDecompile();
  inline void setVpiDecompile( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enumconst::Pipeline {
public:
  typedef Enumconst Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bittypespec::Reader {
public:
  typedef Bittypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline bool getVpiVector() const;

  inline  ::uint64_t getBittypespec() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool getVpiSigned() const;

  inline  ::uint64_t getResolutionfunc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bittypespec::Builder {
public:
  typedef Bittypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline  ::uint64_t getBittypespec();
  inline void setBittypespec( ::uint64_t value);

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::uint64_t getResolutionfunc();
  inline void setResolutionfunc( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bittypespec::Pipeline {
public:
  typedef Bittypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tfcall::Reader {
public:
  typedef Tfcall Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Expr::Reader getBase() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasTfcallargs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTfcallargs() const;

  inline  ::uint64_t getVpiName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tfcall::Builder {
public:
  typedef Tfcall Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Expr::Builder getBase();
  inline void setBase( ::Expr::Reader value);
  inline  ::Expr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Expr>&& value);
  inline ::capnp::Orphan< ::Expr> disownBase();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasTfcallargs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTfcallargs();
  inline void setTfcallargs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTfcallargs(unsigned int size);
  inline void adoptTfcallargs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTfcallargs();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tfcall::Pipeline {
public:
  typedef Tfcall Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Expr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getScope();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Usersystf::Reader {
public:
  typedef Usersystf Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Usersystf::Builder {
public:
  typedef Usersystf Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Usersystf::Pipeline {
public:
  typedef Usersystf Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Sysfunccall::Reader {
public:
  typedef Sysfunccall Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Tfcall::Reader getBase() const;

  inline  ::int64_t getVpiFuncType() const;

  inline bool getVpiUserDefn() const;

  inline  ::uint64_t getUsersystf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Sysfunccall::Builder {
public:
  typedef Sysfunccall Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Tfcall::Builder getBase();
  inline void setBase( ::Tfcall::Reader value);
  inline  ::Tfcall::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Tfcall>&& value);
  inline ::capnp::Orphan< ::Tfcall> disownBase();

  inline  ::int64_t getVpiFuncType();
  inline void setVpiFuncType( ::int64_t value);

  inline bool getVpiUserDefn();
  inline void setVpiUserDefn(bool value);

  inline  ::uint64_t getUsersystf();
  inline void setUsersystf( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Sysfunccall::Pipeline {
public:
  typedef Sysfunccall Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Tfcall::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Systaskcall::Reader {
public:
  typedef Systaskcall Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Tfcall::Reader getBase() const;

  inline bool getVpiUserDefn() const;

  inline  ::uint64_t getUsersystf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Systaskcall::Builder {
public:
  typedef Systaskcall Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Tfcall::Builder getBase();
  inline void setBase( ::Tfcall::Reader value);
  inline  ::Tfcall::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Tfcall>&& value);
  inline ::capnp::Orphan< ::Tfcall> disownBase();

  inline bool getVpiUserDefn();
  inline void setVpiUserDefn(bool value);

  inline  ::uint64_t getUsersystf();
  inline void setUsersystf( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Systaskcall::Pipeline {
public:
  typedef Systaskcall Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Tfcall::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Methodfunccall::Reader {
public:
  typedef Methodfunccall Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Tfcall::Reader getBase() const;

  inline bool getVpiUserDefn() const;

  inline bool hasPrefix() const;
  inline  ::ObjIndexType::Reader getPrefix() const;

  inline bool hasWith() const;
  inline  ::ObjIndexType::Reader getWith() const;

  inline  ::uint64_t getFunction() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Methodfunccall::Builder {
public:
  typedef Methodfunccall Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Tfcall::Builder getBase();
  inline void setBase( ::Tfcall::Reader value);
  inline  ::Tfcall::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Tfcall>&& value);
  inline ::capnp::Orphan< ::Tfcall> disownBase();

  inline bool getVpiUserDefn();
  inline void setVpiUserDefn(bool value);

  inline bool hasPrefix();
  inline  ::ObjIndexType::Builder getPrefix();
  inline void setPrefix( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initPrefix();
  inline void adoptPrefix(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownPrefix();

  inline bool hasWith();
  inline  ::ObjIndexType::Builder getWith();
  inline void setWith( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initWith();
  inline void adoptWith(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownWith();

  inline  ::uint64_t getFunction();
  inline void setFunction( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Methodfunccall::Pipeline {
public:
  typedef Methodfunccall Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Tfcall::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getPrefix();
  inline  ::ObjIndexType::Pipeline getWith();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Methodtaskcall::Reader {
public:
  typedef Methodtaskcall Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Tfcall::Reader getBase() const;

  inline bool getVpiUserDefn() const;

  inline bool hasPrefix() const;
  inline  ::ObjIndexType::Reader getPrefix() const;

  inline bool hasWith() const;
  inline  ::ObjIndexType::Reader getWith() const;

  inline  ::uint64_t getTask() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Methodtaskcall::Builder {
public:
  typedef Methodtaskcall Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Tfcall::Builder getBase();
  inline void setBase( ::Tfcall::Reader value);
  inline  ::Tfcall::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Tfcall>&& value);
  inline ::capnp::Orphan< ::Tfcall> disownBase();

  inline bool getVpiUserDefn();
  inline void setVpiUserDefn(bool value);

  inline bool hasPrefix();
  inline  ::ObjIndexType::Builder getPrefix();
  inline void setPrefix( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initPrefix();
  inline void adoptPrefix(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownPrefix();

  inline bool hasWith();
  inline  ::ObjIndexType::Builder getWith();
  inline void setWith( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initWith();
  inline void adoptWith(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownWith();

  inline  ::uint64_t getTask();
  inline void setTask( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Methodtaskcall::Pipeline {
public:
  typedef Methodtaskcall Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Tfcall::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getPrefix();
  inline  ::ObjIndexType::Pipeline getWith();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Funccall::Reader {
public:
  typedef Funccall Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Tfcall::Reader getBase() const;

  inline  ::int64_t getVpiFuncType() const;

  inline  ::uint64_t getFunction() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Funccall::Builder {
public:
  typedef Funccall Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Tfcall::Builder getBase();
  inline void setBase( ::Tfcall::Reader value);
  inline  ::Tfcall::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Tfcall>&& value);
  inline ::capnp::Orphan< ::Tfcall> disownBase();

  inline  ::int64_t getVpiFuncType();
  inline void setVpiFuncType( ::int64_t value);

  inline  ::uint64_t getFunction();
  inline void setFunction( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Funccall::Pipeline {
public:
  typedef Funccall Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Tfcall::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Taskcall::Reader {
public:
  typedef Taskcall Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Tfcall::Reader getBase() const;

  inline  ::uint64_t getTask() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Taskcall::Builder {
public:
  typedef Taskcall Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Tfcall::Builder getBase();
  inline void setBase( ::Tfcall::Reader value);
  inline  ::Tfcall::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Tfcall>&& value);
  inline ::capnp::Orphan< ::Tfcall> disownBase();

  inline  ::uint64_t getTask();
  inline void setTask( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Taskcall::Pipeline {
public:
  typedef Taskcall Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Tfcall::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Constraintexpr::Reader {
public:
  typedef Constraintexpr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Constraintexpr::Builder {
public:
  typedef Constraintexpr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Constraintexpr::Pipeline {
public:
  typedef Constraintexpr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Constraintordering::Reader {
public:
  typedef Constraintordering Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool hasSolvebefores() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getSolvebefores() const;

  inline bool hasSolveafters() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getSolveafters() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Constraintordering::Builder {
public:
  typedef Constraintordering Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool hasSolvebefores();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getSolvebefores();
  inline void setSolvebefores( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initSolvebefores(unsigned int size);
  inline void adoptSolvebefores(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownSolvebefores();

  inline bool hasSolveafters();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getSolveafters();
  inline void setSolveafters( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initSolveafters(unsigned int size);
  inline void adoptSolveafters(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownSolveafters();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Constraintordering::Pipeline {
public:
  typedef Constraintordering Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Constraint::Reader {
public:
  typedef Constraint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiVirtual() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline  ::int64_t getVpiAccessType() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

  inline bool getVpiIsConstraintEnabled() const;

  inline bool hasConstraintitems() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getConstraintitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Constraint::Builder {
public:
  typedef Constraint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiVirtual();
  inline void setVpiVirtual(bool value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline  ::int64_t getVpiAccessType();
  inline void setVpiAccessType( ::int64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

  inline bool getVpiIsConstraintEnabled();
  inline void setVpiIsConstraintEnabled(bool value);

  inline bool hasConstraintitems();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getConstraintitems();
  inline void setConstraintitems( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initConstraintitems(unsigned int size);
  inline void adoptConstraintitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownConstraintitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Constraint::Pipeline {
public:
  typedef Constraint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Importtypespec::Reader {
public:
  typedef Importtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Typespec::Reader getBase() const;

  inline  ::uint64_t getItem() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Importtypespec::Builder {
public:
  typedef Importtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Typespec::Builder getBase();
  inline void setBase( ::Typespec::Reader value);
  inline  ::Typespec::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Typespec>&& value);
  inline ::capnp::Orphan< ::Typespec> disownBase();

  inline  ::uint64_t getItem();
  inline void setItem( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Importtypespec::Pipeline {
public:
  typedef Importtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Typespec::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Distitem::Reader {
public:
  typedef Distitem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::int64_t getVpiDistType() const;

  inline bool hasValuerange() const;
  inline  ::ObjIndexType::Reader getValuerange() const;

  inline bool hasWeight() const;
  inline  ::ObjIndexType::Reader getWeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Distitem::Builder {
public:
  typedef Distitem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::int64_t getVpiDistType();
  inline void setVpiDistType( ::int64_t value);

  inline bool hasValuerange();
  inline  ::ObjIndexType::Builder getValuerange();
  inline void setValuerange( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initValuerange();
  inline void adoptValuerange(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownValuerange();

  inline bool hasWeight();
  inline  ::ObjIndexType::Builder getWeight();
  inline void setWeight( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initWeight();
  inline void adoptWeight(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownWeight();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Distitem::Pipeline {
public:
  typedef Distitem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getValuerange();
  inline  ::ObjIndexType::Pipeline getWeight();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Distribution::Reader {
public:
  typedef Distribution Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Constraintexpr::Reader getBase() const;

  inline bool getVpiSoft() const;

  inline bool hasDistitems() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getDistitems() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Distribution::Builder {
public:
  typedef Distribution Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Constraintexpr::Builder getBase();
  inline void setBase( ::Constraintexpr::Reader value);
  inline  ::Constraintexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Constraintexpr>&& value);
  inline ::capnp::Orphan< ::Constraintexpr> disownBase();

  inline bool getVpiSoft();
  inline void setVpiSoft(bool value);

  inline bool hasDistitems();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getDistitems();
  inline void setDistitems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDistitems(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initDistitems(unsigned int size);
  inline void adoptDistitems(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownDistitems();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Distribution::Pipeline {
public:
  typedef Distribution Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Constraintexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Implication::Reader {
public:
  typedef Implication Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Constraintexpr::Reader getBase() const;

  inline bool hasCondition() const;
  inline  ::ObjIndexType::Reader getCondition() const;

  inline bool hasConstraintexprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getConstraintexprs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Implication::Builder {
public:
  typedef Implication Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Constraintexpr::Builder getBase();
  inline void setBase( ::Constraintexpr::Reader value);
  inline  ::Constraintexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Constraintexpr>&& value);
  inline ::capnp::Orphan< ::Constraintexpr> disownBase();

  inline bool hasCondition();
  inline  ::ObjIndexType::Builder getCondition();
  inline void setCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initCondition();
  inline void adoptCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownCondition();

  inline bool hasConstraintexprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getConstraintexprs();
  inline void setConstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initConstraintexprs(unsigned int size);
  inline void adoptConstraintexprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownConstraintexprs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Implication::Pipeline {
public:
  typedef Implication Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Constraintexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Constrif::Reader {
public:
  typedef Constrif Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Constraintexpr::Reader getBase() const;

  inline bool hasCondition() const;
  inline  ::ObjIndexType::Reader getCondition() const;

  inline bool hasConstraintexprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getConstraintexprs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Constrif::Builder {
public:
  typedef Constrif Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Constraintexpr::Builder getBase();
  inline void setBase( ::Constraintexpr::Reader value);
  inline  ::Constraintexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Constraintexpr>&& value);
  inline ::capnp::Orphan< ::Constraintexpr> disownBase();

  inline bool hasCondition();
  inline  ::ObjIndexType::Builder getCondition();
  inline void setCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initCondition();
  inline void adoptCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownCondition();

  inline bool hasConstraintexprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getConstraintexprs();
  inline void setConstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initConstraintexprs(unsigned int size);
  inline void adoptConstraintexprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownConstraintexprs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Constrif::Pipeline {
public:
  typedef Constrif Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Constraintexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Constrifelse::Reader {
public:
  typedef Constrifelse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Constraintexpr::Reader getBase() const;

  inline bool hasCondition() const;
  inline  ::ObjIndexType::Reader getCondition() const;

  inline bool hasConstraintexprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getConstraintexprs() const;

  inline bool hasElseconstraintexprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getElseconstraintexprs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Constrifelse::Builder {
public:
  typedef Constrifelse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Constraintexpr::Builder getBase();
  inline void setBase( ::Constraintexpr::Reader value);
  inline  ::Constraintexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Constraintexpr>&& value);
  inline ::capnp::Orphan< ::Constraintexpr> disownBase();

  inline bool hasCondition();
  inline  ::ObjIndexType::Builder getCondition();
  inline void setCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initCondition();
  inline void adoptCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownCondition();

  inline bool hasConstraintexprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getConstraintexprs();
  inline void setConstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initConstraintexprs(unsigned int size);
  inline void adoptConstraintexprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownConstraintexprs();

  inline bool hasElseconstraintexprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getElseconstraintexprs();
  inline void setElseconstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initElseconstraintexprs(unsigned int size);
  inline void adoptElseconstraintexprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownElseconstraintexprs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Constrifelse::Pipeline {
public:
  typedef Constrifelse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Constraintexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Constrforeach::Reader {
public:
  typedef Constrforeach Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Constraintexpr::Reader getBase() const;

  inline bool hasVariable() const;
  inline  ::ObjIndexType::Reader getVariable() const;

  inline bool hasVpiLoopVars() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiLoopVars() const;

  inline bool hasConstraintexprs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getConstraintexprs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Constrforeach::Builder {
public:
  typedef Constrforeach Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Constraintexpr::Builder getBase();
  inline void setBase( ::Constraintexpr::Reader value);
  inline  ::Constraintexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Constraintexpr>&& value);
  inline ::capnp::Orphan< ::Constraintexpr> disownBase();

  inline bool hasVariable();
  inline  ::ObjIndexType::Builder getVariable();
  inline void setVariable( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVariable();
  inline void adoptVariable(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVariable();

  inline bool hasVpiLoopVars();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiLoopVars();
  inline void setVpiLoopVars( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiLoopVars(unsigned int size);
  inline void adoptVpiLoopVars(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiLoopVars();

  inline bool hasConstraintexprs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getConstraintexprs();
  inline void setConstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initConstraintexprs(unsigned int size);
  inline void adoptConstraintexprs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownConstraintexprs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Constrforeach::Pipeline {
public:
  typedef Constrforeach Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Constraintexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVariable();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Softdisable::Reader {
public:
  typedef Softdisable Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Constraintexpr::Reader getBase() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Softdisable::Builder {
public:
  typedef Softdisable Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Constraintexpr::Builder getBase();
  inline void setBase( ::Constraintexpr::Reader value);
  inline  ::Constraintexpr::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Constraintexpr>&& value);
  inline ::capnp::Orphan< ::Constraintexpr> disownBase();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Softdisable::Pipeline {
public:
  typedef Softdisable Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Constraintexpr::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genstmt::Reader {
public:
  typedef Genstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAttributes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genstmt::Builder {
public:
  typedef Genstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasAttributes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAttributes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAttributes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genstmt::Pipeline {
public:
  typedef Genstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genif::Reader {
public:
  typedef Genif Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Genstmt::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genif::Builder {
public:
  typedef Genif Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Genstmt::Builder getBase();
  inline void setBase( ::Genstmt::Reader value);
  inline  ::Genstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Genstmt>&& value);
  inline ::capnp::Orphan< ::Genstmt> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genif::Pipeline {
public:
  typedef Genif Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Genstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genifelse::Reader {
public:
  typedef Genifelse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Genstmt::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

  inline bool hasVpiElseStmt() const;
  inline  ::ObjIndexType::Reader getVpiElseStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genifelse::Builder {
public:
  typedef Genifelse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Genstmt::Builder getBase();
  inline void setBase( ::Genstmt::Reader value);
  inline  ::Genstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Genstmt>&& value);
  inline ::capnp::Orphan< ::Genstmt> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

  inline bool hasVpiElseStmt();
  inline  ::ObjIndexType::Builder getVpiElseStmt();
  inline void setVpiElseStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiElseStmt();
  inline void adoptVpiElseStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiElseStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genifelse::Pipeline {
public:
  typedef Genifelse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Genstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
  inline  ::ObjIndexType::Pipeline getVpiElseStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genfor::Reader {
public:
  typedef Genfor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Genstmt::Reader getBase() const;

  inline  ::int64_t getVpiLocalVarDecls() const;

  inline bool hasVpiForInitStmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiForInitStmts() const;

  inline bool hasVpiForIncStmts() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getVpiForIncStmts() const;

  inline bool hasVpiForInitStmt() const;
  inline  ::ObjIndexType::Reader getVpiForInitStmt() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasVpiForIncStmt() const;
  inline  ::ObjIndexType::Reader getVpiForIncStmt() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genfor::Builder {
public:
  typedef Genfor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Genstmt::Builder getBase();
  inline void setBase( ::Genstmt::Reader value);
  inline  ::Genstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Genstmt>&& value);
  inline ::capnp::Orphan< ::Genstmt> disownBase();

  inline  ::int64_t getVpiLocalVarDecls();
  inline void setVpiLocalVarDecls( ::int64_t value);

  inline bool hasVpiForInitStmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiForInitStmts();
  inline void setVpiForInitStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiForInitStmts(unsigned int size);
  inline void adoptVpiForInitStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiForInitStmts();

  inline bool hasVpiForIncStmts();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getVpiForIncStmts();
  inline void setVpiForIncStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initVpiForIncStmts(unsigned int size);
  inline void adoptVpiForIncStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownVpiForIncStmts();

  inline bool hasVpiForInitStmt();
  inline  ::ObjIndexType::Builder getVpiForInitStmt();
  inline void setVpiForInitStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiForInitStmt();
  inline void adoptVpiForInitStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiForInitStmt();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasVpiForIncStmt();
  inline  ::ObjIndexType::Builder getVpiForIncStmt();
  inline void setVpiForIncStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiForIncStmt();
  inline void adoptVpiForIncStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiForIncStmt();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genfor::Pipeline {
public:
  typedef Genfor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Genstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiForInitStmt();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
  inline  ::ObjIndexType::Pipeline getVpiForIncStmt();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gencase::Reader {
public:
  typedef Gencase Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Genstmt::Reader getBase() const;

  inline bool hasVpiCondition() const;
  inline  ::ObjIndexType::Reader getVpiCondition() const;

  inline bool hasCaseitems() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCaseitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gencase::Builder {
public:
  typedef Gencase Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Genstmt::Builder getBase();
  inline void setBase( ::Genstmt::Reader value);
  inline  ::Genstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Genstmt>&& value);
  inline ::capnp::Orphan< ::Genstmt> disownBase();

  inline bool hasVpiCondition();
  inline  ::ObjIndexType::Builder getVpiCondition();
  inline void setVpiCondition( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiCondition();
  inline void adoptVpiCondition(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiCondition();

  inline bool hasCaseitems();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCaseitems();
  inline void setCaseitems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCaseitems(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCaseitems(unsigned int size);
  inline void adoptCaseitems(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCaseitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gencase::Pipeline {
public:
  typedef Gencase Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Genstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiCondition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genregion::Reader {
public:
  typedef Genregion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Genstmt::Reader getBase() const;

  inline bool hasVpiStmt() const;
  inline  ::ObjIndexType::Reader getVpiStmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genregion::Builder {
public:
  typedef Genregion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Genstmt::Builder getBase();
  inline void setBase( ::Genstmt::Reader value);
  inline  ::Genstmt::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Genstmt>&& value);
  inline ::capnp::Orphan< ::Genstmt> disownBase();

  inline bool hasVpiStmt();
  inline  ::ObjIndexType::Builder getVpiStmt();
  inline void setVpiStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVpiStmt();
  inline void adoptVpiStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVpiStmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genregion::Pipeline {
public:
  typedef Genregion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Genstmt::Pipeline getBase();
  inline  ::ObjIndexType::Pipeline getVpiStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Design::Reader {
public:
  typedef Design Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBase() const;
  inline  ::Any::Reader getBase() const;

  inline bool getVpiElaborated() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasIncludefileinfos() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getIncludefileinfos() const;

  inline bool hasAllPackages() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAllPackages() const;

  inline bool hasTopPackages() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTopPackages() const;

  inline bool hasAllClasses() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAllClasses() const;

  inline bool hasAllInterfaces() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAllInterfaces() const;

  inline bool hasAllUdps() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAllUdps() const;

  inline bool hasAllPrograms() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAllPrograms() const;

  inline bool hasAllModules() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getAllModules() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTypespecs() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLetdecls() const;

  inline bool hasTaskfuncs() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getTaskfuncs() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader getParameters() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getParamassigns() const;

  inline bool hasTopModules() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTopModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Design::Builder {
public:
  typedef Design Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBase();
  inline  ::Any::Builder getBase();
  inline void setBase( ::Any::Reader value);
  inline  ::Any::Builder initBase();
  inline void adoptBase(::capnp::Orphan< ::Any>&& value);
  inline ::capnp::Orphan< ::Any> disownBase();

  inline bool getVpiElaborated();
  inline void setVpiElaborated(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasIncludefileinfos();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getIncludefileinfos();
  inline void setIncludefileinfos( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIncludefileinfos(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initIncludefileinfos(unsigned int size);
  inline void adoptIncludefileinfos(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownIncludefileinfos();

  inline bool hasAllPackages();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAllPackages();
  inline void setAllPackages( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAllPackages(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAllPackages(unsigned int size);
  inline void adoptAllPackages(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAllPackages();

  inline bool hasTopPackages();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTopPackages();
  inline void setTopPackages( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTopPackages(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTopPackages(unsigned int size);
  inline void adoptTopPackages(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTopPackages();

  inline bool hasAllClasses();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAllClasses();
  inline void setAllClasses( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAllClasses(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAllClasses(unsigned int size);
  inline void adoptAllClasses(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAllClasses();

  inline bool hasAllInterfaces();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAllInterfaces();
  inline void setAllInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAllInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAllInterfaces(unsigned int size);
  inline void adoptAllInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAllInterfaces();

  inline bool hasAllUdps();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAllUdps();
  inline void setAllUdps( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAllUdps(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAllUdps(unsigned int size);
  inline void adoptAllUdps(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAllUdps();

  inline bool hasAllPrograms();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAllPrograms();
  inline void setAllPrograms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAllPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAllPrograms(unsigned int size);
  inline void adoptAllPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAllPrograms();

  inline bool hasAllModules();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getAllModules();
  inline void setAllModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAllModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initAllModules(unsigned int size);
  inline void adoptAllModules(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownAllModules();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTypespecs();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownLetdecls();

  inline bool hasTaskfuncs();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getTaskfuncs();
  inline void setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initTaskfuncs(unsigned int size);
  inline void adoptTaskfuncs(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownTaskfuncs();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> disownParameters();

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownParamassigns();

  inline bool hasTopModules();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTopModules();
  inline void setTopModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTopModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTopModules(unsigned int size);
  inline void adoptTopModules(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTopModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Design::Pipeline {
public:
  typedef Design Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Any::Pipeline getBase();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t ObjIndexType::Reader::getIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ObjIndexType::Builder::getIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ObjIndexType::Builder::setIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ObjIndexType::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ObjIndexType::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ObjIndexType::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UhdmRoot::Reader::getVersion() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UhdmRoot::Builder::getVersion() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UhdmRoot::Builder::setVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UhdmRoot::Reader::getObjectId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UhdmRoot::Builder::getObjectId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UhdmRoot::Builder::setObjectId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UhdmRoot::Reader::hasDesigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasDesigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getDesigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getDesigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setDesigns( ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initDesigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptDesigns(
    ::capnp::Orphan< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownDesigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasSymbols() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasSymbols() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader UhdmRoot::Reader::getSymbols() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder UhdmRoot::Builder::getSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setSymbols( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UhdmRoot::Builder::setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder UhdmRoot::Builder::initSymbols(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptSymbols(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> UhdmRoot::Builder::disownSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAliasstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAliasstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryAliasstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryAliasstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAliasstmt( ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryAliasstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAliasstmt(
    ::capnp::Orphan< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryAliasstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAlways() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAlways() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryAlways() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryAlways() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAlways( ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryAlways(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAlways(
    ::capnp::Orphan< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryAlways() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Always,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAnypattern() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAnypattern() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryAnypattern() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryAnypattern() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAnypattern( ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryAnypattern(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAnypattern(
    ::capnp::Orphan< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryAnypattern() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Anypattern,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryArrayexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryArrayexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryArrayexpr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryArrayexpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryArrayexpr( ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryArrayexpr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryArrayexpr(
    ::capnp::Orphan< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryArrayexpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayexpr,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryArraynet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryArraynet() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryArraynet( ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryArraynet(
    ::capnp::Orphan< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryArraytypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryArraytypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryArraytypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryArraytypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryArraytypespec( ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryArraytypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryArraytypespec(
    ::capnp::Orphan< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryArraytypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraytypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryArrayvar( ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryArrayvar(
    ::capnp::Orphan< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAssertstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAssertstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryAssertstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryAssertstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAssertstmt( ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryAssertstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAssertstmt(
    ::capnp::Orphan< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryAssertstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assertstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAssignment() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAssignment() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryAssignment() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryAssignment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAssignment( ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryAssignment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAssignment(
    ::capnp::Orphan< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryAssignment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assignment,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAssignstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAssignstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryAssignstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryAssignstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAssignstmt( ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryAssignstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAssignstmt(
    ::capnp::Orphan< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryAssignstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assignstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAssume() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAssume() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryAssume() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryAssume() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAssume( ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryAssume(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAssume(
    ::capnp::Orphan< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryAssume() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Assume,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAttribute() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAttribute() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryAttribute() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryAttribute() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAttribute( ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryAttribute(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAttribute(
    ::capnp::Orphan< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryAttribute() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Attribute,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBegin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBegin() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryBegin() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryBegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBegin( ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryBegin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBegin(
    ::capnp::Orphan< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryBegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBitselect() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBitselect() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryBitselect() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryBitselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBitselect( ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryBitselect(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBitselect(
    ::capnp::Orphan< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryBitselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitselect,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBittypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBittypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryBittypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryBittypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBittypespec( ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryBittypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBittypespec(
    ::capnp::Orphan< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryBittypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bittypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBitvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBitvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryBitvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryBitvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBitvar( ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryBitvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBitvar(
    ::capnp::Orphan< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryBitvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBreakstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBreakstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryBreakstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryBreakstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBreakstmt( ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryBreakstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBreakstmt(
    ::capnp::Orphan< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryBreakstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Breakstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBytetypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBytetypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryBytetypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryBytetypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBytetypespec( ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryBytetypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBytetypespec(
    ::capnp::Orphan< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryBytetypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytetypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBytevar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBytevar() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryBytevar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryBytevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBytevar( ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryBytevar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBytevar(
    ::capnp::Orphan< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryBytevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCaseitem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCaseitem() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCaseitem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCaseitem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCaseitem( ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCaseitem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCaseitem(
    ::capnp::Orphan< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCaseitem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Caseitem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCaseproperty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCaseproperty() {
  return !_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCaseproperty() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCaseproperty() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCaseproperty( ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCaseproperty(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCaseproperty(
    ::capnp::Orphan< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCaseproperty() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Caseproperty,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCasepropertyitem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCasepropertyitem() {
  return !_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCasepropertyitem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCasepropertyitem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCasepropertyitem( ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCasepropertyitem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCasepropertyitem(
    ::capnp::Orphan< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCasepropertyitem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Casepropertyitem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCasestmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCasestmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCasestmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCasestmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCasestmt( ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCasestmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCasestmt(
    ::capnp::Orphan< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCasestmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Casestmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryChandletypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryChandletypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryChandletypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryChandletypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryChandletypespec( ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryChandletypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryChandletypespec(
    ::capnp::Orphan< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryChandletypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandletypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryChandlevar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryChandlevar() {
  return !_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryChandlevar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryChandlevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryChandlevar( ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryChandlevar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryChandlevar(
    ::capnp::Orphan< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryChandlevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCheckerdecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCheckerdecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCheckerdecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCheckerdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCheckerdecl( ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCheckerdecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCheckerdecl(
    ::capnp::Orphan< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCheckerdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerdecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCheckerinst() const {
  return !_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCheckerinst() {
  return !_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCheckerinst() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCheckerinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCheckerinst( ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCheckerinst(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCheckerinst(
    ::capnp::Orphan< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCheckerinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinst,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCheckerinstport() const {
  return !_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCheckerinstport() {
  return !_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCheckerinstport() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCheckerinstport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCheckerinstport( ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCheckerinstport(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCheckerinstport(
    ::capnp::Orphan< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCheckerinstport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerinstport,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCheckerport() const {
  return !_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCheckerport() {
  return !_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCheckerport() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCheckerport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCheckerport( ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCheckerport(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCheckerport(
    ::capnp::Orphan< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCheckerport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Checkerport,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClassdefn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClassdefn() {
  return !_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClassdefn( ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClassdefn(
    ::capnp::Orphan< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClassobj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClassobj() {
  return !_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryClassobj() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryClassobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClassobj( ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryClassobj(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClassobj(
    ::capnp::Orphan< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryClassobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClasstypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClasstypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryClasstypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryClasstypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClasstypespec( ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryClasstypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClasstypespec(
    ::capnp::Orphan< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryClasstypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClassvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClassvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryClassvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryClassvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClassvar( ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryClassvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClassvar(
    ::capnp::Orphan< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryClassvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClockedproperty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClockedproperty() {
  return !_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryClockedproperty() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryClockedproperty() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClockedproperty( ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryClockedproperty(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClockedproperty(
    ::capnp::Orphan< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryClockedproperty() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedproperty,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClockedseq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClockedseq() {
  return !_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryClockedseq() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryClockedseq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClockedseq( ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryClockedseq(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClockedseq(
    ::capnp::Orphan< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryClockedseq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockedseq,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClockingblock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClockingblock() {
  return !_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryClockingblock() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryClockingblock() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClockingblock( ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryClockingblock(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClockingblock(
    ::capnp::Orphan< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryClockingblock() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClockingiodecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClockingiodecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryClockingiodecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryClockingiodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClockingiodecl( ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryClockingiodecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClockingiodecl(
    ::capnp::Orphan< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryClockingiodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingiodecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryConstant() const {
  return !_reader.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryConstant() {
  return !_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryConstant() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryConstant() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryConstant( ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryConstant(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryConstant(
    ::capnp::Orphan< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryConstant() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constant,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryConstraint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryConstraint() {
  return !_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryConstraint() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryConstraint() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryConstraint( ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryConstraint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryConstraint(
    ::capnp::Orphan< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryConstraint() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constraint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryConstraintordering() const {
  return !_reader.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryConstraintordering() {
  return !_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryConstraintordering() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryConstraintordering() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryConstraintordering( ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryConstraintordering(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryConstraintordering(
    ::capnp::Orphan< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryConstraintordering() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constraintordering,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryConstrforeach() const {
  return !_reader.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryConstrforeach() {
  return !_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryConstrforeach() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryConstrforeach() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryConstrforeach( ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryConstrforeach(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryConstrforeach(
    ::capnp::Orphan< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryConstrforeach() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrforeach,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryConstrif() const {
  return !_reader.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryConstrif() {
  return !_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryConstrif() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryConstrif() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryConstrif( ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryConstrif(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryConstrif(
    ::capnp::Orphan< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryConstrif() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrif,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryConstrifelse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryConstrifelse() {
  return !_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryConstrifelse() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryConstrifelse() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryConstrifelse( ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryConstrifelse(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryConstrifelse(
    ::capnp::Orphan< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryConstrifelse() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Constrifelse,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryContassign() const {
  return !_reader.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryContassign() {
  return !_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryContassign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryContassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryContassign( ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryContassign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryContassign(
    ::capnp::Orphan< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryContassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryContassignbit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryContassignbit() {
  return !_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryContassignbit() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryContassignbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryContassignbit( ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryContassignbit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryContassignbit(
    ::capnp::Orphan< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryContassignbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassignbit,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryContinuestmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryContinuestmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryContinuestmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryContinuestmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryContinuestmt( ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryContinuestmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryContinuestmt(
    ::capnp::Orphan< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryContinuestmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Continuestmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryCover() const {
  return !_reader.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryCover() {
  return !_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryCover() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryCover() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryCover( ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryCover(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryCover(
    ::capnp::Orphan< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryCover() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Cover,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDeassign() const {
  return !_reader.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDeassign() {
  return !_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDeassign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDeassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDeassign( ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDeassign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDeassign(
    ::capnp::Orphan< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDeassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Deassign,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDefparam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDefparam() {
  return !_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDefparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDefparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDefparam( ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDefparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDefparam(
    ::capnp::Orphan< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDefparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDelaycontrol() const {
  return !_reader.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDelaycontrol() {
  return !_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDelaycontrol() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDelaycontrol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDelaycontrol( ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDelaycontrol(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDelaycontrol(
    ::capnp::Orphan< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDelaycontrol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Delaycontrol,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDelayterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDelayterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDelayterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDelayterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDelayterm( ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDelayterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDelayterm(
    ::capnp::Orphan< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDelayterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Delayterm,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDesign() const {
  return !_reader.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDesign() {
  return !_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDesign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDesign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDesign( ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDesign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDesign(
    ::capnp::Orphan< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDesign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDisable() const {
  return !_reader.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDisable() {
  return !_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDisable() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDisable() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDisable( ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDisable(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDisable(
    ::capnp::Orphan< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDisable() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Disable,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDisablefork() const {
  return !_reader.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDisablefork() {
  return !_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDisablefork() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDisablefork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDisablefork( ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDisablefork(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDisablefork(
    ::capnp::Orphan< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDisablefork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Disablefork,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDistitem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDistitem() {
  return !_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDistitem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDistitem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDistitem( ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDistitem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDistitem(
    ::capnp::Orphan< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDistitem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distitem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDistribution() const {
  return !_reader.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDistribution() {
  return !_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDistribution() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDistribution() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDistribution( ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDistribution(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDistribution(
    ::capnp::Orphan< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDistribution() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDowhile() const {
  return !_reader.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDowhile() {
  return !_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryDowhile() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryDowhile() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDowhile( ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryDowhile(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDowhile(
    ::capnp::Orphan< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryDowhile() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Dowhile,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEnumconst() const {
  return !_reader.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEnumconst() {
  return !_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryEnumconst() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryEnumconst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEnumconst( ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryEnumconst(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEnumconst(
    ::capnp::Orphan< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryEnumconst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumconst,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEnumnet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEnumnet() {
  return !_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryEnumnet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryEnumnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEnumnet( ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryEnumnet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEnumnet(
    ::capnp::Orphan< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryEnumnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEnumtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEnumtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryEnumtypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryEnumtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEnumtypespec( ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryEnumtypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEnumtypespec(
    ::capnp::Orphan< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryEnumtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEnumvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEnumvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryEnumvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryEnumvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEnumvar( ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryEnumvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEnumvar(
    ::capnp::Orphan< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryEnumvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEventcontrol() const {
  return !_reader.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEventcontrol() {
  return !_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryEventcontrol() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryEventcontrol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEventcontrol( ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryEventcontrol(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEventcontrol(
    ::capnp::Orphan< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryEventcontrol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventcontrol,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEventstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEventstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryEventstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryEventstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEventstmt( ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryEventstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEventstmt(
    ::capnp::Orphan< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryEventstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEventtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEventtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryEventtypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryEventtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEventtypespec( ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryEventtypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEventtypespec(
    ::capnp::Orphan< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryEventtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Eventtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryExpectstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryExpectstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryExpectstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryExpectstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryExpectstmt( ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryExpectstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryExpectstmt(
    ::capnp::Orphan< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryExpectstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Expectstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryExtends() const {
  return !_reader.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryExtends() {
  return !_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryExtends() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryExtends() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryExtends( ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryExtends(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryExtends(
    ::capnp::Orphan< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryExtends() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Extends,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryFinalstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryFinalstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryFinalstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryFinalstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryFinalstmt( ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryFinalstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryFinalstmt(
    ::capnp::Orphan< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryFinalstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Finalstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryForce() const {
  return !_reader.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryForce() {
  return !_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryForce() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryForce() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryForce( ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryForce(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryForce(
    ::capnp::Orphan< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryForce() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Force,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryForeachstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryForeachstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryForeachstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryForeachstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryForeachstmt( ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryForeachstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryForeachstmt(
    ::capnp::Orphan< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryForeachstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryForeverstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryForeverstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryForeverstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryForeverstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryForeverstmt( ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryForeverstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryForeverstmt(
    ::capnp::Orphan< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryForeverstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreverstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryForkstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryForkstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryForkstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryForkstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryForkstmt( ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryForkstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryForkstmt(
    ::capnp::Orphan< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryForkstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryForstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryForstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryForstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryForstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryForstmt( ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryForstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryForstmt(
    ::capnp::Orphan< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryForstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryFunccall() const {
  return !_reader.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryFunccall() {
  return !_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryFunccall() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryFunccall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryFunccall( ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryFunccall(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryFunccall(
    ::capnp::Orphan< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryFunccall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Funccall,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryFunction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryFunction() {
  return !_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryFunction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryFunction() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryFunction( ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryFunction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryFunction(
    ::capnp::Orphan< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryFunction() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGate() {
  return !_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGate() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGate() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGate( ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGate(
    ::capnp::Orphan< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGate() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gate,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGatearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGatearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGatearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGatearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGatearray( ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGatearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGatearray(
    ::capnp::Orphan< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGatearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGencase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGencase() {
  return !_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGencase() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGencase() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGencase( ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGencase(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGencase(
    ::capnp::Orphan< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGencase() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gencase,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGenfor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGenfor() {
  return !_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGenfor() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGenfor() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGenfor( ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGenfor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGenfor(
    ::capnp::Orphan< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGenfor() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genfor,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGenif() const {
  return !_reader.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGenif() {
  return !_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGenif() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGenif() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGenif( ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGenif(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGenif(
    ::capnp::Orphan< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGenif() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genif,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGenifelse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGenifelse() {
  return !_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGenifelse() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGenifelse() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGenifelse( ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGenifelse(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGenifelse(
    ::capnp::Orphan< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGenifelse() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genifelse,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGenregion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGenregion() {
  return !_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGenregion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGenregion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGenregion( ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGenregion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGenregion(
    ::capnp::Orphan< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGenregion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genregion,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGenscope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<83>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGenscope() {
  return !_builder.getPointerField(
      ::capnp::bounded<83>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGenscope() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<83>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGenscope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<83>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGenscope( ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<83>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGenscope(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<83>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGenscope(
    ::capnp::Orphan< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<83>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGenscope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<83>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGenscopearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<84>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGenscopearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<84>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGenscopearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<84>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGenscopearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<84>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGenscopearray( ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<84>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGenscopearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<84>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGenscopearray(
    ::capnp::Orphan< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<84>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGenscopearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscopearray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<84>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGenvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<85>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGenvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<85>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryGenvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<85>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryGenvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<85>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGenvar( ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<85>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryGenvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<85>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGenvar(
    ::capnp::Orphan< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<85>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryGenvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<85>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryHierpath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<86>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryHierpath() {
  return !_builder.getPointerField(
      ::capnp::bounded<86>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryHierpath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<86>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryHierpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<86>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryHierpath( ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<86>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryHierpath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<86>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryHierpath(
    ::capnp::Orphan< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<86>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryHierpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Hierpath,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<86>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIfelse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<87>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIfelse() {
  return !_builder.getPointerField(
      ::capnp::bounded<87>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIfelse() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<87>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIfelse() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<87>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIfelse( ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<87>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIfelse(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<87>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIfelse(
    ::capnp::Orphan< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<87>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIfelse() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Ifelse,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<87>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIfstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<88>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIfstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<88>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIfstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<88>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIfstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<88>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIfstmt( ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<88>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIfstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<88>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIfstmt(
    ::capnp::Orphan< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<88>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIfstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Ifstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<88>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryImmediateassert() const {
  return !_reader.getPointerField(
      ::capnp::bounded<89>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryImmediateassert() {
  return !_builder.getPointerField(
      ::capnp::bounded<89>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryImmediateassert() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<89>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryImmediateassert() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<89>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryImmediateassert( ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<89>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryImmediateassert(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<89>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryImmediateassert(
    ::capnp::Orphan< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<89>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryImmediateassert() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassert,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<89>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryImmediateassume() const {
  return !_reader.getPointerField(
      ::capnp::bounded<90>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryImmediateassume() {
  return !_builder.getPointerField(
      ::capnp::bounded<90>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryImmediateassume() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<90>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryImmediateassume() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<90>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryImmediateassume( ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<90>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryImmediateassume(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<90>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryImmediateassume(
    ::capnp::Orphan< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<90>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryImmediateassume() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediateassume,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<90>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryImmediatecover() const {
  return !_reader.getPointerField(
      ::capnp::bounded<91>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryImmediatecover() {
  return !_builder.getPointerField(
      ::capnp::bounded<91>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryImmediatecover() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<91>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryImmediatecover() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<91>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryImmediatecover( ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<91>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryImmediatecover(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<91>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryImmediatecover(
    ::capnp::Orphan< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<91>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryImmediatecover() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Immediatecover,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<91>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryImplication() const {
  return !_reader.getPointerField(
      ::capnp::bounded<92>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryImplication() {
  return !_builder.getPointerField(
      ::capnp::bounded<92>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryImplication() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<92>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryImplication() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<92>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryImplication( ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<92>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryImplication(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<92>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryImplication(
    ::capnp::Orphan< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<92>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryImplication() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Implication,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<92>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryImporttypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<93>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryImporttypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<93>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryImporttypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<93>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryImporttypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<93>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryImporttypespec( ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<93>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryImporttypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<93>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryImporttypespec(
    ::capnp::Orphan< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<93>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryImporttypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Importtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<93>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIncludefileinfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<94>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIncludefileinfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<94>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIncludefileinfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<94>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIncludefileinfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<94>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIncludefileinfo( ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<94>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIncludefileinfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<94>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIncludefileinfo(
    ::capnp::Orphan< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<94>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIncludefileinfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Includefileinfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<94>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIndexedpartselect() const {
  return !_reader.getPointerField(
      ::capnp::bounded<95>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIndexedpartselect() {
  return !_builder.getPointerField(
      ::capnp::bounded<95>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIndexedpartselect() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<95>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIndexedpartselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<95>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIndexedpartselect( ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<95>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIndexedpartselect(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<95>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIndexedpartselect(
    ::capnp::Orphan< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<95>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIndexedpartselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Indexedpartselect,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<95>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInitial() const {
  return !_reader.getPointerField(
      ::capnp::bounded<96>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInitial() {
  return !_builder.getPointerField(
      ::capnp::bounded<96>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryInitial() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<96>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryInitial() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<96>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInitial( ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<96>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryInitial(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<96>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInitial(
    ::capnp::Orphan< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<96>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryInitial() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Initial,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<96>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIntegernet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<97>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIntegernet() {
  return !_builder.getPointerField(
      ::capnp::bounded<97>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIntegernet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<97>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIntegernet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<97>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIntegernet( ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<97>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIntegernet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<97>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIntegernet(
    ::capnp::Orphan< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<97>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIntegernet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<97>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIntegertypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<98>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIntegertypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<98>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIntegertypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<98>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIntegertypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<98>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIntegertypespec( ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<98>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIntegertypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<98>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIntegertypespec(
    ::capnp::Orphan< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<98>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIntegertypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integertypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<98>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIntegervar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<99>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIntegervar() {
  return !_builder.getPointerField(
      ::capnp::bounded<99>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIntegervar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<99>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIntegervar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<99>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIntegervar( ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<99>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIntegervar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<99>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIntegervar(
    ::capnp::Orphan< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<99>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIntegervar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<99>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<100>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<100>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryInterfacearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<100>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryInterfacearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<100>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacearray( ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<100>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryInterfacearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<100>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacearray(
    ::capnp::Orphan< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<100>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryInterfacearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<100>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfaceinst() const {
  return !_reader.getPointerField(
      ::capnp::bounded<101>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfaceinst() {
  return !_builder.getPointerField(
      ::capnp::bounded<101>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryInterfaceinst() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<101>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryInterfaceinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<101>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfaceinst( ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<101>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryInterfaceinst(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<101>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfaceinst(
    ::capnp::Orphan< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<101>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryInterfaceinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfaceinst,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<101>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacetfdecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<102>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacetfdecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<102>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryInterfacetfdecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<102>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryInterfacetfdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<102>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacetfdecl( ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<102>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryInterfacetfdecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<102>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacetfdecl(
    ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<102>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryInterfacetfdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<102>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacetypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<103>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacetypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<103>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryInterfacetypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<103>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryInterfacetypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<103>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacetypespec( ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<103>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryInterfacetypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<103>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacetypespec(
    ::capnp::Orphan< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<103>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryInterfacetypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<103>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInttypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<104>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInttypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<104>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryInttypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<104>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryInttypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<104>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInttypespec( ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<104>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryInttypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<104>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInttypespec(
    ::capnp::Orphan< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<104>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryInttypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Inttypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<104>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIntvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<105>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIntvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<105>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIntvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<105>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIntvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<105>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIntvar( ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<105>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIntvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<105>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIntvar(
    ::capnp::Orphan< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<105>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIntvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<105>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIodecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<106>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIodecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<106>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryIodecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<106>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryIodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<106>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIodecl( ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<106>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryIodecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<106>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIodecl(
    ::capnp::Orphan< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<106>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryIodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<106>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLetdecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<107>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLetdecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<107>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryLetdecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<107>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryLetdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<107>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLetdecl( ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<107>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryLetdecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<107>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLetdecl(
    ::capnp::Orphan< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<107>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryLetdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<107>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLetexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<108>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLetexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<108>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryLetexpr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<108>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryLetexpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<108>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLetexpr( ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<108>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryLetexpr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<108>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLetexpr(
    ::capnp::Orphan< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<108>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryLetexpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letexpr,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<108>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLogicnet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<109>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLogicnet() {
  return !_builder.getPointerField(
      ::capnp::bounded<109>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryLogicnet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<109>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryLogicnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<109>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLogicnet( ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<109>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryLogicnet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<109>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLogicnet(
    ::capnp::Orphan< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<109>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryLogicnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<109>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLogictypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<110>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLogictypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<110>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryLogictypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<110>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryLogictypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<110>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLogictypespec( ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<110>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryLogictypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<110>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLogictypespec(
    ::capnp::Orphan< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<110>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryLogictypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logictypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<110>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<111>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<111>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<111>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<111>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLogicvar( ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<111>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<111>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLogicvar(
    ::capnp::Orphan< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<111>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<111>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLonginttypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<112>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLonginttypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<112>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryLonginttypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<112>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryLonginttypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<112>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLonginttypespec( ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<112>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryLonginttypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<112>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLonginttypespec(
    ::capnp::Orphan< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<112>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryLonginttypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longinttypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<112>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLongintvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<113>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLongintvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<113>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryLongintvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<113>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryLongintvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<113>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLongintvar( ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<113>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryLongintvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<113>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLongintvar(
    ::capnp::Orphan< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<113>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryLongintvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<113>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryMethodfunccall() const {
  return !_reader.getPointerField(
      ::capnp::bounded<114>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryMethodfunccall() {
  return !_builder.getPointerField(
      ::capnp::bounded<114>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryMethodfunccall() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<114>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryMethodfunccall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<114>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryMethodfunccall( ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<114>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryMethodfunccall(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<114>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryMethodfunccall(
    ::capnp::Orphan< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<114>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryMethodfunccall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Methodfunccall,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<114>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryMethodtaskcall() const {
  return !_reader.getPointerField(
      ::capnp::bounded<115>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryMethodtaskcall() {
  return !_builder.getPointerField(
      ::capnp::bounded<115>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryMethodtaskcall() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<115>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryMethodtaskcall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<115>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryMethodtaskcall( ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<115>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryMethodtaskcall(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<115>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryMethodtaskcall(
    ::capnp::Orphan< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<115>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryMethodtaskcall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Methodtaskcall,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<115>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModpath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<116>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModpath() {
  return !_builder.getPointerField(
      ::capnp::bounded<116>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryModpath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<116>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryModpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<116>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModpath( ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<116>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryModpath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<116>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModpath(
    ::capnp::Orphan< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<116>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryModpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<116>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModport() const {
  return !_reader.getPointerField(
      ::capnp::bounded<117>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModport() {
  return !_builder.getPointerField(
      ::capnp::bounded<117>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryModport() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<117>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryModport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<117>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModport( ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<117>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryModport(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<117>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModport(
    ::capnp::Orphan< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<117>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryModport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<117>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModulearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<118>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModulearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<118>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryModulearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<118>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryModulearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<118>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModulearray( ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<118>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryModulearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<118>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModulearray(
    ::capnp::Orphan< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<118>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryModulearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<118>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModuleinst() const {
  return !_reader.getPointerField(
      ::capnp::bounded<119>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModuleinst() {
  return !_builder.getPointerField(
      ::capnp::bounded<119>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryModuleinst() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<119>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryModuleinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<119>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModuleinst( ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<119>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryModuleinst(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<119>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModuleinst(
    ::capnp::Orphan< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<119>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryModuleinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Moduleinst,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<119>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModuletypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<120>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModuletypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<120>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryModuletypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<120>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryModuletypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<120>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModuletypespec( ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<120>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryModuletypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<120>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModuletypespec(
    ::capnp::Orphan< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<120>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryModuletypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Moduletypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<120>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryMulticlocksequenceexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<121>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryMulticlocksequenceexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<121>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryMulticlocksequenceexpr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<121>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryMulticlocksequenceexpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<121>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryMulticlocksequenceexpr( ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<121>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryMulticlocksequenceexpr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<121>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryMulticlocksequenceexpr(
    ::capnp::Orphan< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<121>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryMulticlocksequenceexpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Multiclocksequenceexpr,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<121>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedbegin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<122>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedbegin() {
  return !_builder.getPointerField(
      ::capnp::bounded<122>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryNamedbegin() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<122>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryNamedbegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<122>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedbegin( ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<122>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryNamedbegin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<122>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedbegin(
    ::capnp::Orphan< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<122>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryNamedbegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<122>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedevent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<123>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedevent() {
  return !_builder.getPointerField(
      ::capnp::bounded<123>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<123>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<123>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedevent( ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<123>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<123>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedevent(
    ::capnp::Orphan< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<123>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<123>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedeventarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<124>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedeventarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<124>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<124>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<124>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedeventarray( ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<124>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<124>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<124>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<124>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedfork() const {
  return !_reader.getPointerField(
      ::capnp::bounded<125>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedfork() {
  return !_builder.getPointerField(
      ::capnp::bounded<125>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryNamedfork() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<125>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryNamedfork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<125>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedfork( ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<125>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryNamedfork(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<125>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedfork(
    ::capnp::Orphan< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<125>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryNamedfork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<125>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNetbit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<126>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNetbit() {
  return !_builder.getPointerField(
      ::capnp::bounded<126>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryNetbit() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<126>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryNetbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<126>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNetbit( ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<126>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryNetbit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<126>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNetbit(
    ::capnp::Orphan< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<126>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryNetbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<126>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNullstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<127>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNullstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<127>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryNullstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<127>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryNullstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<127>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNullstmt( ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<127>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryNullstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<127>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNullstmt(
    ::capnp::Orphan< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<127>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryNullstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Nullstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<127>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryOperation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<128>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryOperation() {
  return !_builder.getPointerField(
      ::capnp::bounded<128>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryOperation() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<128>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryOperation() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<128>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryOperation( ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<128>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryOperation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<128>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryOperation(
    ::capnp::Orphan< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<128>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryOperation() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<128>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryOrderedwait() const {
  return !_reader.getPointerField(
      ::capnp::bounded<129>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryOrderedwait() {
  return !_builder.getPointerField(
      ::capnp::bounded<129>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryOrderedwait() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<129>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryOrderedwait() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<129>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryOrderedwait( ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<129>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryOrderedwait(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<129>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryOrderedwait(
    ::capnp::Orphan< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<129>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryOrderedwait() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Orderedwait,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<129>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPackage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<130>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPackage() {
  return !_builder.getPointerField(
      ::capnp::bounded<130>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPackage() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<130>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPackage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<130>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPackage( ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<130>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPackage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<130>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPackage(
    ::capnp::Orphan< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<130>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPackage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<130>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPackedarraynet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<131>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPackedarraynet() {
  return !_builder.getPointerField(
      ::capnp::bounded<131>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPackedarraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<131>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPackedarraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<131>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPackedarraynet( ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<131>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPackedarraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<131>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPackedarraynet(
    ::capnp::Orphan< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<131>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPackedarraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<131>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPackedarraytypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<132>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPackedarraytypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<132>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPackedarraytypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<132>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPackedarraytypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<132>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPackedarraytypespec( ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<132>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPackedarraytypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<132>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPackedarraytypespec(
    ::capnp::Orphan< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<132>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPackedarraytypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraytypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<132>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPackedarrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<133>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPackedarrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<133>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPackedarrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<133>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPackedarrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<133>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPackedarrayvar( ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<133>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPackedarrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<133>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPackedarrayvar(
    ::capnp::Orphan< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<133>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPackedarrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<133>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryParamassign() const {
  return !_reader.getPointerField(
      ::capnp::bounded<134>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryParamassign() {
  return !_builder.getPointerField(
      ::capnp::bounded<134>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryParamassign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<134>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryParamassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<134>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryParamassign( ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<134>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryParamassign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<134>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryParamassign(
    ::capnp::Orphan< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<134>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryParamassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<134>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryParameter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<135>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryParameter() {
  return !_builder.getPointerField(
      ::capnp::bounded<135>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryParameter() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<135>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryParameter() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<135>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryParameter( ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<135>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryParameter(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<135>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryParameter(
    ::capnp::Orphan< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<135>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryParameter() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Parameter,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<135>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPartselect() const {
  return !_reader.getPointerField(
      ::capnp::bounded<136>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPartselect() {
  return !_builder.getPointerField(
      ::capnp::bounded<136>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPartselect() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<136>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPartselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<136>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPartselect( ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<136>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPartselect(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<136>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPartselect(
    ::capnp::Orphan< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<136>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPartselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<136>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<137>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<137>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<137>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<137>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPathterm( ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<137>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<137>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPathterm(
    ::capnp::Orphan< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<137>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<137>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPort() const {
  return !_reader.getPointerField(
      ::capnp::bounded<138>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPort() {
  return !_builder.getPointerField(
      ::capnp::bounded<138>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<138>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPort() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<138>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPort( ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<138>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<138>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPort(
    ::capnp::Orphan< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<138>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPort() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<138>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPortbit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<139>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPortbit() {
  return !_builder.getPointerField(
      ::capnp::bounded<139>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPortbit() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<139>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPortbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<139>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPortbit( ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<139>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPortbit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<139>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPortbit(
    ::capnp::Orphan< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<139>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPortbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<139>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPrimterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<140>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPrimterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<140>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPrimterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<140>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPrimterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<140>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPrimterm( ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<140>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPrimterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<140>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPrimterm(
    ::capnp::Orphan< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<140>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPrimterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<140>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProgram() const {
  return !_reader.getPointerField(
      ::capnp::bounded<141>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProgram() {
  return !_builder.getPointerField(
      ::capnp::bounded<141>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryProgram() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<141>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<141>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProgram( ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<141>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryProgram(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<141>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProgram(
    ::capnp::Orphan< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<141>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<141>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProgramarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<142>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProgramarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<142>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryProgramarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<142>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryProgramarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<142>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProgramarray( ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<142>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryProgramarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<142>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProgramarray(
    ::capnp::Orphan< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<142>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryProgramarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<142>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPropertydecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<143>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPropertydecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<143>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPropertydecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<143>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPropertydecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<143>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPropertydecl( ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<143>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPropertydecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<143>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPropertydecl(
    ::capnp::Orphan< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<143>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPropertydecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<143>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPropertyinst() const {
  return !_reader.getPointerField(
      ::capnp::bounded<144>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPropertyinst() {
  return !_builder.getPointerField(
      ::capnp::bounded<144>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPropertyinst() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<144>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPropertyinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<144>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPropertyinst( ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<144>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPropertyinst(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<144>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPropertyinst(
    ::capnp::Orphan< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<144>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPropertyinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyinst,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<144>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPropertyspec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<145>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPropertyspec() {
  return !_builder.getPointerField(
      ::capnp::bounded<145>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPropertyspec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<145>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPropertyspec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<145>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPropertyspec( ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<145>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPropertyspec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<145>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPropertyspec(
    ::capnp::Orphan< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<145>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPropertyspec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertyspec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<145>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPropertytypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<146>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPropertytypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<146>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPropertytypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<146>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPropertytypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<146>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPropertytypespec( ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<146>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPropertytypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<146>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPropertytypespec(
    ::capnp::Orphan< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<146>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPropertytypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertytypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<146>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPropformaldecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<147>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPropformaldecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<147>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryPropformaldecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<147>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryPropformaldecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<147>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPropformaldecl( ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<147>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryPropformaldecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<147>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPropformaldecl(
    ::capnp::Orphan< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<147>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryPropformaldecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propformaldecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<147>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<148>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRange() {
  return !_builder.getPointerField(
      ::capnp::bounded<148>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRange() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<148>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<148>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRange( ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<148>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRange(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<148>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRange(
    ::capnp::Orphan< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<148>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<148>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRealtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<149>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRealtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<149>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRealtypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<149>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRealtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<149>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRealtypespec( ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<149>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRealtypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<149>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRealtypespec(
    ::capnp::Orphan< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<149>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRealtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<149>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRealvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<150>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRealvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<150>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRealvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<150>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRealvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<150>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRealvar( ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<150>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRealvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<150>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRealvar(
    ::capnp::Orphan< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<150>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRealvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<150>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRefmodule() const {
  return !_reader.getPointerField(
      ::capnp::bounded<151>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRefmodule() {
  return !_builder.getPointerField(
      ::capnp::bounded<151>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRefmodule() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<151>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRefmodule() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<151>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRefmodule( ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<151>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRefmodule(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<151>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRefmodule(
    ::capnp::Orphan< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<151>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRefmodule() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refmodule,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<151>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRefobj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<152>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRefobj() {
  return !_builder.getPointerField(
      ::capnp::bounded<152>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRefobj() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<152>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRefobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<152>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRefobj( ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<152>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRefobj(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<152>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRefobj(
    ::capnp::Orphan< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<152>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRefobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<152>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryReftypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<153>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryReftypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<153>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryReftypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<153>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryReftypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<153>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryReftypespec( ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<153>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryReftypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<153>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryReftypespec(
    ::capnp::Orphan< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<153>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryReftypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Reftypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<153>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRefvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<154>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRefvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<154>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRefvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<154>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRefvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<154>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRefvar( ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<154>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRefvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<154>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRefvar(
    ::capnp::Orphan< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<154>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRefvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<154>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryReg() const {
  return !_reader.getPointerField(
      ::capnp::bounded<155>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryReg() {
  return !_builder.getPointerField(
      ::capnp::bounded<155>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryReg() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<155>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryReg() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<155>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryReg( ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<155>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryReg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<155>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryReg(
    ::capnp::Orphan< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<155>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryReg() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Reg,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<155>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRegarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<156>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRegarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<156>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRegarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<156>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRegarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<156>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRegarray( ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<156>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRegarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<156>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRegarray(
    ::capnp::Orphan< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<156>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRegarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Regarray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<156>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRelease() const {
  return !_reader.getPointerField(
      ::capnp::bounded<157>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRelease() {
  return !_builder.getPointerField(
      ::capnp::bounded<157>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRelease() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<157>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRelease() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<157>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRelease( ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<157>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRelease(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<157>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRelease(
    ::capnp::Orphan< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<157>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRelease() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Release,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<157>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRepeat() const {
  return !_reader.getPointerField(
      ::capnp::bounded<158>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRepeat() {
  return !_builder.getPointerField(
      ::capnp::bounded<158>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRepeat() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<158>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRepeat() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<158>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRepeat( ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<158>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRepeat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<158>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRepeat(
    ::capnp::Orphan< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<158>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRepeat() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Repeat,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<158>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRepeatcontrol() const {
  return !_reader.getPointerField(
      ::capnp::bounded<159>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRepeatcontrol() {
  return !_builder.getPointerField(
      ::capnp::bounded<159>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRepeatcontrol() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<159>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRepeatcontrol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<159>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRepeatcontrol( ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<159>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRepeatcontrol(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<159>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRepeatcontrol(
    ::capnp::Orphan< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<159>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRepeatcontrol() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Repeatcontrol,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<159>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRestrict() const {
  return !_reader.getPointerField(
      ::capnp::bounded<160>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRestrict() {
  return !_builder.getPointerField(
      ::capnp::bounded<160>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryRestrict() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<160>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryRestrict() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<160>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRestrict( ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<160>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryRestrict(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<160>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRestrict(
    ::capnp::Orphan< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<160>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryRestrict() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Restrict,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<160>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryReturnstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<161>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryReturnstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<161>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryReturnstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<161>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryReturnstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<161>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryReturnstmt( ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<161>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryReturnstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<161>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryReturnstmt(
    ::capnp::Orphan< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<161>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryReturnstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Returnstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<161>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySeqformaldecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<162>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySeqformaldecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<162>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySeqformaldecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<162>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySeqformaldecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<162>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySeqformaldecl( ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<162>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySeqformaldecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<162>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySeqformaldecl(
    ::capnp::Orphan< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<162>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySeqformaldecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Seqformaldecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<162>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySequencedecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<163>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySequencedecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<163>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySequencedecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<163>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySequencedecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<163>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySequencedecl( ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<163>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySequencedecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<163>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySequencedecl(
    ::capnp::Orphan< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<163>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySequencedecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<163>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySequenceinst() const {
  return !_reader.getPointerField(
      ::capnp::bounded<164>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySequenceinst() {
  return !_builder.getPointerField(
      ::capnp::bounded<164>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySequenceinst() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<164>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySequenceinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<164>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySequenceinst( ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<164>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySequenceinst(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<164>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySequenceinst(
    ::capnp::Orphan< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<164>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySequenceinst() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequenceinst,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<164>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySequencetypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<165>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySequencetypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<165>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySequencetypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<165>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySequencetypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<165>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySequencetypespec( ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<165>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySequencetypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<165>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySequencetypespec(
    ::capnp::Orphan< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<165>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySequencetypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencetypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<165>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryShortinttypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<166>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryShortinttypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<166>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryShortinttypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<166>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryShortinttypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<166>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryShortinttypespec( ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<166>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryShortinttypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<166>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryShortinttypespec(
    ::capnp::Orphan< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<166>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryShortinttypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortinttypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<166>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryShortintvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<167>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryShortintvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<167>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryShortintvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<167>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryShortintvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<167>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryShortintvar( ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<167>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryShortintvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<167>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryShortintvar(
    ::capnp::Orphan< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<167>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryShortintvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<167>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryShortrealtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<168>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryShortrealtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<168>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryShortrealtypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<168>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryShortrealtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<168>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryShortrealtypespec( ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<168>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryShortrealtypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<168>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryShortrealtypespec(
    ::capnp::Orphan< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<168>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryShortrealtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<168>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryShortrealvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<169>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryShortrealvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<169>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryShortrealvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<169>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryShortrealvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<169>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryShortrealvar( ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<169>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryShortrealvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<169>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryShortrealvar(
    ::capnp::Orphan< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<169>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryShortrealvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<169>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySoftdisable() const {
  return !_reader.getPointerField(
      ::capnp::bounded<170>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySoftdisable() {
  return !_builder.getPointerField(
      ::capnp::bounded<170>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySoftdisable() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<170>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySoftdisable() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<170>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySoftdisable( ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<170>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySoftdisable(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<170>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySoftdisable(
    ::capnp::Orphan< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<170>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySoftdisable() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Softdisable,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<170>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySpecparam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<171>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySpecparam() {
  return !_builder.getPointerField(
      ::capnp::bounded<171>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<171>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<171>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySpecparam( ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<171>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<171>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySpecparam(
    ::capnp::Orphan< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<171>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<171>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStringtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<172>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStringtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<172>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryStringtypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<172>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryStringtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<172>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStringtypespec( ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<172>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryStringtypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<172>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStringtypespec(
    ::capnp::Orphan< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<172>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryStringtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<172>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStringvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<173>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStringvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<173>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryStringvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<173>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryStringvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<173>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStringvar( ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<173>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryStringvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<173>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStringvar(
    ::capnp::Orphan< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<173>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryStringvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<173>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStructnet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<174>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStructnet() {
  return !_builder.getPointerField(
      ::capnp::bounded<174>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryStructnet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<174>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryStructnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<174>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStructnet( ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<174>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryStructnet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<174>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStructnet(
    ::capnp::Orphan< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<174>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryStructnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<174>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStructpattern() const {
  return !_reader.getPointerField(
      ::capnp::bounded<175>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStructpattern() {
  return !_builder.getPointerField(
      ::capnp::bounded<175>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryStructpattern() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<175>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryStructpattern() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<175>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStructpattern( ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<175>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryStructpattern(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<175>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStructpattern(
    ::capnp::Orphan< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<175>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryStructpattern() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structpattern,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<175>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStructtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<176>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStructtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<176>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryStructtypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<176>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryStructtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<176>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStructtypespec( ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<176>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryStructtypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<176>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStructtypespec(
    ::capnp::Orphan< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<176>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryStructtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<176>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStructvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<177>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStructvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<177>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryStructvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<177>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryStructvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<177>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStructvar( ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<177>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryStructvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<177>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStructvar(
    ::capnp::Orphan< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<177>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryStructvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<177>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySwitcharray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<178>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySwitcharray() {
  return !_builder.getPointerField(
      ::capnp::bounded<178>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySwitcharray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<178>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySwitcharray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<178>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySwitcharray( ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<178>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySwitcharray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<178>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySwitcharray(
    ::capnp::Orphan< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<178>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySwitcharray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<178>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySwitchtran() const {
  return !_reader.getPointerField(
      ::capnp::bounded<179>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySwitchtran() {
  return !_builder.getPointerField(
      ::capnp::bounded<179>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySwitchtran() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<179>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySwitchtran() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<179>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySwitchtran( ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<179>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySwitchtran(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<179>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySwitchtran(
    ::capnp::Orphan< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<179>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySwitchtran() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switchtran,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<179>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySysfunccall() const {
  return !_reader.getPointerField(
      ::capnp::bounded<180>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySysfunccall() {
  return !_builder.getPointerField(
      ::capnp::bounded<180>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySysfunccall() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<180>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySysfunccall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<180>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySysfunccall( ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<180>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySysfunccall(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<180>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySysfunccall(
    ::capnp::Orphan< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<180>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySysfunccall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sysfunccall,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<180>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySystaskcall() const {
  return !_reader.getPointerField(
      ::capnp::bounded<181>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySystaskcall() {
  return !_builder.getPointerField(
      ::capnp::bounded<181>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactorySystaskcall() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<181>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactorySystaskcall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<181>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySystaskcall( ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<181>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactorySystaskcall(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<181>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySystaskcall(
    ::capnp::Orphan< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<181>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactorySystaskcall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Systaskcall,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<181>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTableentry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<182>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTableentry() {
  return !_builder.getPointerField(
      ::capnp::bounded<182>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTableentry() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<182>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTableentry() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<182>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTableentry( ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<182>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTableentry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<182>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTableentry(
    ::capnp::Orphan< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<182>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTableentry() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tableentry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<182>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTaggedpattern() const {
  return !_reader.getPointerField(
      ::capnp::bounded<183>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTaggedpattern() {
  return !_builder.getPointerField(
      ::capnp::bounded<183>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTaggedpattern() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<183>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTaggedpattern() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<183>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTaggedpattern( ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<183>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTaggedpattern(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<183>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTaggedpattern(
    ::capnp::Orphan< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<183>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTaggedpattern() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Taggedpattern,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<183>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTask() const {
  return !_reader.getPointerField(
      ::capnp::bounded<184>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTask() {
  return !_builder.getPointerField(
      ::capnp::bounded<184>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTask() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<184>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTask() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<184>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTask( ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<184>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTask(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<184>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTask(
    ::capnp::Orphan< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<184>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTask() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<184>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTaskcall() const {
  return !_reader.getPointerField(
      ::capnp::bounded<185>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTaskcall() {
  return !_builder.getPointerField(
      ::capnp::bounded<185>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTaskcall() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<185>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTaskcall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<185>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTaskcall( ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<185>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTaskcall(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<185>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTaskcall(
    ::capnp::Orphan< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<185>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTaskcall() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Taskcall,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<185>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTchk() const {
  return !_reader.getPointerField(
      ::capnp::bounded<186>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTchk() {
  return !_builder.getPointerField(
      ::capnp::bounded<186>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTchk() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<186>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTchk() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<186>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTchk( ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<186>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTchk(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<186>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTchk(
    ::capnp::Orphan< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<186>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTchk() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<186>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<187>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<187>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<187>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<187>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTchkterm( ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<187>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<187>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTchkterm(
    ::capnp::Orphan< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<187>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<187>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryThreadobj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<188>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryThreadobj() {
  return !_builder.getPointerField(
      ::capnp::bounded<188>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryThreadobj() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<188>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryThreadobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<188>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryThreadobj( ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<188>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryThreadobj(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<188>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryThreadobj(
    ::capnp::Orphan< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<188>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryThreadobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Threadobj,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<188>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTimenet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<189>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTimenet() {
  return !_builder.getPointerField(
      ::capnp::bounded<189>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTimenet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<189>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTimenet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<189>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTimenet( ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<189>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTimenet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<189>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTimenet(
    ::capnp::Orphan< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<189>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTimenet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<189>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTimetypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<190>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTimetypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<190>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTimetypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<190>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTimetypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<190>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTimetypespec( ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<190>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTimetypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<190>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTimetypespec(
    ::capnp::Orphan< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<190>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTimetypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timetypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<190>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTimevar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<191>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTimevar() {
  return !_builder.getPointerField(
      ::capnp::bounded<191>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTimevar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<191>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTimevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<191>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTimevar( ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<191>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTimevar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<191>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTimevar(
    ::capnp::Orphan< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<191>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTimevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<191>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTypeparameter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<192>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTypeparameter() {
  return !_builder.getPointerField(
      ::capnp::bounded<192>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTypeparameter() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<192>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTypeparameter() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<192>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTypeparameter( ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<192>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTypeparameter(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<192>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTypeparameter(
    ::capnp::Orphan< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<192>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTypeparameter() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Typeparameter,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<192>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTypespecmember() const {
  return !_reader.getPointerField(
      ::capnp::bounded<193>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTypespecmember() {
  return !_builder.getPointerField(
      ::capnp::bounded<193>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryTypespecmember() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<193>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryTypespecmember() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<193>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTypespecmember( ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<193>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryTypespecmember(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<193>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTypespecmember(
    ::capnp::Orphan< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<193>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryTypespecmember() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Typespecmember,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<193>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUdp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<194>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUdp() {
  return !_builder.getPointerField(
      ::capnp::bounded<194>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUdp() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<194>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUdp() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<194>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUdp( ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<194>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUdp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<194>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUdp(
    ::capnp::Orphan< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<194>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUdp() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udp,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<194>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUdparray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<195>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUdparray() {
  return !_builder.getPointerField(
      ::capnp::bounded<195>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUdparray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<195>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUdparray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<195>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUdparray( ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<195>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUdparray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<195>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUdparray(
    ::capnp::Orphan< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<195>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUdparray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<195>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUdpdefn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<196>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUdpdefn() {
  return !_builder.getPointerField(
      ::capnp::bounded<196>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUdpdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<196>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUdpdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<196>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUdpdefn( ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<196>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUdpdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<196>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUdpdefn(
    ::capnp::Orphan< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<196>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUdpdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<196>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUniontypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<197>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUniontypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<197>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUniontypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<197>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUniontypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<197>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUniontypespec( ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<197>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUniontypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<197>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUniontypespec(
    ::capnp::Orphan< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<197>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUniontypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Uniontypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<197>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUnionvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<198>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUnionvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<198>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUnionvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<198>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUnionvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<198>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUnionvar( ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<198>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUnionvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<198>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUnionvar(
    ::capnp::Orphan< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<198>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUnionvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<198>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUnsupportedexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<199>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUnsupportedexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<199>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUnsupportedexpr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<199>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUnsupportedexpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<199>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUnsupportedexpr( ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<199>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUnsupportedexpr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<199>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUnsupportedexpr(
    ::capnp::Orphan< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<199>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUnsupportedexpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedexpr,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<199>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUnsupportedstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<200>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUnsupportedstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<200>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUnsupportedstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<200>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUnsupportedstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<200>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUnsupportedstmt( ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<200>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUnsupportedstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<200>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUnsupportedstmt(
    ::capnp::Orphan< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<200>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUnsupportedstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<200>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUnsupportedtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<201>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUnsupportedtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<201>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUnsupportedtypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<201>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUnsupportedtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<201>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUnsupportedtypespec( ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<201>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUnsupportedtypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<201>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUnsupportedtypespec(
    ::capnp::Orphan< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<201>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUnsupportedtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unsupportedtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<201>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUsersystf() const {
  return !_reader.getPointerField(
      ::capnp::bounded<202>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUsersystf() {
  return !_builder.getPointerField(
      ::capnp::bounded<202>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryUsersystf() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<202>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryUsersystf() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<202>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUsersystf( ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<202>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryUsersystf(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<202>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUsersystf(
    ::capnp::Orphan< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<202>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryUsersystf() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Usersystf,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<202>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryVarbit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<203>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryVarbit() {
  return !_builder.getPointerField(
      ::capnp::bounded<203>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryVarbit() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<203>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryVarbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<203>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryVarbit( ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<203>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryVarbit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<203>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryVarbit(
    ::capnp::Orphan< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<203>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryVarbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<203>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryVarselect() const {
  return !_reader.getPointerField(
      ::capnp::bounded<204>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryVarselect() {
  return !_builder.getPointerField(
      ::capnp::bounded<204>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryVarselect() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<204>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryVarselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<204>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryVarselect( ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<204>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryVarselect(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<204>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryVarselect(
    ::capnp::Orphan< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<204>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryVarselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<204>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryVirtualinterfacevar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<205>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryVirtualinterfacevar() {
  return !_builder.getPointerField(
      ::capnp::bounded<205>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryVirtualinterfacevar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<205>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryVirtualinterfacevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<205>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryVirtualinterfacevar( ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<205>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryVirtualinterfacevar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<205>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryVirtualinterfacevar(
    ::capnp::Orphan< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<205>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryVirtualinterfacevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<205>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryVoidtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<206>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryVoidtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<206>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryVoidtypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<206>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryVoidtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<206>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryVoidtypespec( ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<206>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryVoidtypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<206>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryVoidtypespec(
    ::capnp::Orphan< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<206>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryVoidtypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Voidtypespec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<206>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryWaitfork() const {
  return !_reader.getPointerField(
      ::capnp::bounded<207>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryWaitfork() {
  return !_builder.getPointerField(
      ::capnp::bounded<207>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryWaitfork() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<207>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryWaitfork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<207>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryWaitfork( ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<207>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryWaitfork(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<207>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryWaitfork(
    ::capnp::Orphan< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<207>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryWaitfork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Waitfork,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<207>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryWaitstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<208>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryWaitstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<208>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryWaitstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<208>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryWaitstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<208>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryWaitstmt( ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<208>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryWaitstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<208>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryWaitstmt(
    ::capnp::Orphan< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<208>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryWaitstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Waitstmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<208>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryWhilestmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<209>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryWhilestmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<209>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>::Reader UhdmRoot::Reader::getFactoryWhilestmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<209>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::getFactoryWhilestmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<209>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryWhilestmt( ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<209>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>::Builder UhdmRoot::Builder::initFactoryWhilestmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<209>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryWhilestmt(
    ::capnp::Orphan< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<209>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>> UhdmRoot::Builder::disownFactoryWhilestmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Whilestmt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<209>() * ::capnp::POINTERS));
}

inline  ::uint64_t Any::Reader::getUhdmId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Any::Builder::getUhdmId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Any::Builder::setUhdmId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Any::Reader::hasVpiParent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Any::Builder::hasVpiParent() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Any::Reader::getVpiParent() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Any::Builder::getVpiParent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Any::Pipeline::getVpiParent() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Any::Builder::setVpiParent( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Any::Builder::initVpiParent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Any::Builder::adoptVpiParent(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Any::Builder::disownVpiParent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Any::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Any::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Any::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Any::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Any::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Any::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Any::Reader::getVpiEndLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Any::Builder::getVpiEndLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Any::Builder::setVpiEndLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Any::Reader::getVpiColumnNo() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Any::Builder::getVpiColumnNo() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Any::Builder::setVpiColumnNo( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Any::Reader::getVpiEndColumnNo() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Any::Builder::getVpiEndColumnNo() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Any::Builder::setVpiEndColumnNo( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Attribute::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Attribute::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Attribute::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Attribute::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Attribute::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Attribute::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Attribute::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Attribute::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::getVpiDefAttribute() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Attribute::Builder::getVpiDefAttribute() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setVpiDefAttribute(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Attribute::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Attribute::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Attribute::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Attribute::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Attribute::Reader::getVpiDefLineNo() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Attribute::Builder::getVpiDefLineNo() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setVpiDefLineNo( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Virtualinterfacevar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Virtualinterfacevar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Virtualinterfacevar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Virtualinterfacevar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Virtualinterfacevar::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Virtualinterfacevar::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Virtualinterfacevar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Virtualinterfacevar::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Virtualinterfacevar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Letdecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Letdecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Letdecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Letdecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Letdecl::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Letdecl::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Letdecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Letdecl::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Letdecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Letdecl::Reader::hasExpressions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Letdecl::Builder::hasExpressions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Letdecl::Reader::getExpressions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Letdecl::Builder::getExpressions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Letdecl::Builder::setExpressions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Letdecl::Builder::initExpressions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Letdecl::Builder::adoptExpressions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Letdecl::Builder::disownExpressions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Letdecl::Reader::hasSeqformaldecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Letdecl::Builder::hasSeqformaldecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Letdecl::Reader::getSeqformaldecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Letdecl::Builder::getSeqformaldecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Letdecl::Builder::setSeqformaldecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Letdecl::Builder::setSeqformaldecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Letdecl::Builder::initSeqformaldecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Letdecl::Builder::adoptSeqformaldecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Letdecl::Builder::disownSeqformaldecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Letdecl::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Letdecl::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Letdecl::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Concurrentassertions::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Concurrentassertions::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Concurrentassertions::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Concurrentassertions::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Concurrentassertions::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Concurrentassertions::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Concurrentassertions::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Concurrentassertions::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Concurrentassertions::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Concurrentassertions::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Concurrentassertions::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Concurrentassertions::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Concurrentassertions::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Concurrentassertions::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Concurrentassertions::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Concurrentassertions::Reader::getVpiIsClockInferred() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool Concurrentassertions::Builder::getVpiIsClockInferred() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void Concurrentassertions::Builder::setVpiIsClockInferred(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline bool Concurrentassertions::Reader::hasClockingevent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Concurrentassertions::Builder::hasClockingevent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Concurrentassertions::Reader::getClockingevent() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Concurrentassertions::Builder::getClockingevent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Concurrentassertions::Pipeline::getClockingevent() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Concurrentassertions::Builder::setClockingevent( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Concurrentassertions::Builder::initClockingevent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Concurrentassertions::Builder::adoptClockingevent(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Concurrentassertions::Builder::disownClockingevent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Concurrentassertions::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Concurrentassertions::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Concurrentassertions::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Concurrentassertions::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Concurrentassertions::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Concurrentassertions::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Concurrentassertions::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Concurrentassertions::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Concurrentassertions::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Concurrentassertions::Reader::hasVpiProperty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Concurrentassertions::Builder::hasVpiProperty() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Concurrentassertions::Reader::getVpiProperty() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Concurrentassertions::Builder::getVpiProperty() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Concurrentassertions::Pipeline::getVpiProperty() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Concurrentassertions::Builder::setVpiProperty( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Concurrentassertions::Builder::initVpiProperty() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Concurrentassertions::Builder::adoptVpiProperty(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Concurrentassertions::Builder::disownVpiProperty() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Concurrentassertions::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Concurrentassertions::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Concurrentassertions::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Concurrentassertions::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Concurrentassertions::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Concurrentassertions::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Concurrentassertions::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Concurrentassertions::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Concurrentassertions::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Processstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Processstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Processstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Processstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Processstmt::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Processstmt::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Processstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Processstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Processstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Processstmt::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Processstmt::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Processstmt::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Processstmt::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Processstmt::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Processstmt::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Processstmt::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Processstmt::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Processstmt::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Processstmt::Reader::getModuleinst() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Processstmt::Builder::getModuleinst() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Processstmt::Builder::setModuleinst( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Processstmt::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Processstmt::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Processstmt::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Processstmt::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Processstmt::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Processstmt::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Processstmt::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Processstmt::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Processstmt::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Always::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Always::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Processstmt::Reader Always::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Processstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Processstmt::Builder Always::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Processstmt::Pipeline Always::Pipeline::getBase() {
  return  ::Processstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Always::Builder::setBase( ::Processstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Processstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Processstmt::Builder Always::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Always::Builder::adoptBase(
    ::capnp::Orphan< ::Processstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Processstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Processstmt> Always::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Always::Reader::getVpiAlwaysType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Always::Builder::getVpiAlwaysType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Always::Builder::setVpiAlwaysType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Finalstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Finalstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Processstmt::Reader Finalstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Processstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Processstmt::Builder Finalstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Processstmt::Pipeline Finalstmt::Pipeline::getBase() {
  return  ::Processstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Finalstmt::Builder::setBase( ::Processstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Processstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Processstmt::Builder Finalstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Finalstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Processstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Processstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Processstmt> Finalstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Initial::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Initial::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Processstmt::Reader Initial::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Processstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Processstmt::Builder Initial::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Processstmt::Pipeline Initial::Pipeline::getBase() {
  return  ::Processstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Initial::Builder::setBase( ::Processstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Processstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Processstmt::Builder Initial::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Initial::Builder::adoptBase(
    ::capnp::Orphan< ::Processstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Processstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Processstmt> Initial::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Processstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Atomicstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Atomicstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Atomicstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Atomicstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Atomicstmt::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Atomicstmt::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Atomicstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Atomicstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Atomicstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Atomicstmt::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Atomicstmt::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Atomicstmt::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Atomicstmt::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Atomicstmt::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Atomicstmt::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Atomicstmt::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Atomicstmt::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Atomicstmt::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Atomicstmt::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Atomicstmt::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Atomicstmt::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Delaycontrol::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Delaycontrol::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Delaycontrol::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Delaycontrol::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Delaycontrol::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Delaycontrol::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Delaycontrol::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Delaycontrol::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Delaycontrol::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Delaycontrol::Reader::getVpiDelay() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Delaycontrol::Builder::getVpiDelay() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Delaycontrol::Builder::setVpiDelay( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Delaycontrol::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Delaycontrol::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Delaycontrol::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Delaycontrol::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Delaycontrol::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Delaycontrol::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Delaycontrol::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Delaycontrol::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Delaycontrol::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Delaycontrol::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Delaycontrol::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Delaycontrol::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Delaycontrol::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Delaycontrol::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Delaycontrol::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Delaycontrol::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Delaycontrol::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Delaycontrol::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Delayterm::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Delayterm::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Delayterm::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Delayterm::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Delayterm::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Delayterm::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Delayterm::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Delayterm::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Delayterm::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Eventcontrol::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Eventcontrol::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Eventcontrol::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Eventcontrol::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Eventcontrol::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Eventcontrol::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Eventcontrol::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Eventcontrol::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Eventcontrol::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Eventcontrol::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Eventcontrol::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Eventcontrol::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Eventcontrol::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Eventcontrol::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Eventcontrol::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Eventcontrol::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Eventcontrol::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Eventcontrol::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Eventcontrol::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Eventcontrol::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Eventcontrol::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Eventcontrol::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Eventcontrol::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Eventcontrol::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Eventcontrol::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Eventcontrol::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Eventcontrol::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Repeatcontrol::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Repeatcontrol::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Repeatcontrol::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Repeatcontrol::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Repeatcontrol::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Repeatcontrol::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Repeatcontrol::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Repeatcontrol::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Repeatcontrol::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Scope::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Scope::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Scope::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Scope::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Scope::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Scope::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Scope::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Scope::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Scope::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Scope::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Scope::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Scope::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Scope::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Scope::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setPropertydecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setSequencedecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Scope::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Scope::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setNamedevents( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Scope::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Scope::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasLogicvars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasLogicvars() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getLogicvars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getLogicvars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setLogicvars( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setLogicvars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initLogicvars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptLogicvars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownLogicvars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasArrayvars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasArrayvars() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getArrayvars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getArrayvars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setArrayvars( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setArrayvars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initArrayvars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptArrayvars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownArrayvars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasArrayvarmems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasArrayvarmems() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getArrayvarmems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getArrayvarmems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setArrayvarmems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setArrayvarmems(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initArrayvarmems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptArrayvarmems(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownArrayvarmems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Scope::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setParameters( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Scope::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasParamassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasParamassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Scope::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setScopes( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Scope::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Scope::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setTypespecs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Scope::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Scope::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Scope::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Scope::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setLetdecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Scope::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Scope::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Scope::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Scope::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline void Scope::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Scope::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Scope::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Scope::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Begin::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Begin::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Begin::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Begin::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Begin::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Begin::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Begin::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Begin::Reader::getStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Begin::Builder::getStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Begin::Builder::initStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Begin::Builder::disownStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Namedbegin::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Namedbegin::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Namedbegin::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Namedbegin::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Namedbegin::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Namedbegin::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Namedbegin::Reader::getStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Namedbegin::Builder::getStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Namedbegin::Builder::initStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Namedbegin::Builder::disownStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Namedbegin::Reader::getVpiEndLabel() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiEndLabel() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiEndLabel( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Namedfork::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Namedfork::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Namedfork::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Namedfork::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Namedfork::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Namedfork::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Namedfork::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Namedfork::Reader::getVpiJoinType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Namedfork::Builder::getVpiJoinType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setVpiJoinType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Namedfork::Reader::hasStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Namedfork::Reader::getStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Namedfork::Builder::getStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Namedfork::Builder::initStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Namedfork::Builder::disownStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Namedfork::Reader::getVpiEndLabel() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedfork::Builder::getVpiEndLabel() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setVpiEndLabel( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Forkstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Forkstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Forkstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Forkstmt::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Forkstmt::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Forkstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Forkstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Forkstmt::Reader::getVpiJoinType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Forkstmt::Builder::getVpiJoinType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Forkstmt::Builder::setVpiJoinType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Forkstmt::Reader::hasStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Forkstmt::Reader::getStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Forkstmt::Builder::getStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Forkstmt::Builder::initStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Forkstmt::Builder::disownStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Forstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Forstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Forstmt::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Forstmt::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Forstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Forstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Forstmt::Reader::getVpiLocalVarDecls() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Forstmt::Builder::getVpiLocalVarDecls() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Forstmt::Builder::setVpiLocalVarDecls( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Forstmt::Reader::hasVpiForInitStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasVpiForInitStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Forstmt::Reader::getVpiForInitStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Forstmt::Builder::getVpiForInitStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setVpiForInitStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Forstmt::Builder::initVpiForInitStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptVpiForInitStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Forstmt::Builder::disownVpiForInitStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasVpiForIncStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasVpiForIncStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Forstmt::Reader::getVpiForIncStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Forstmt::Builder::getVpiForIncStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setVpiForIncStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Forstmt::Builder::initVpiForIncStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptVpiForIncStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Forstmt::Builder::disownVpiForIncStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasVpiForInitStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasVpiForInitStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Forstmt::Reader::getVpiForInitStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Forstmt::Builder::getVpiForInitStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Forstmt::Pipeline::getVpiForInitStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Forstmt::Builder::setVpiForInitStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Forstmt::Builder::initVpiForInitStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::adoptVpiForInitStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Forstmt::Builder::disownVpiForInitStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Forstmt::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Forstmt::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Forstmt::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Forstmt::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Forstmt::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Forstmt::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasVpiForIncStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasVpiForIncStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Forstmt::Reader::getVpiForIncStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Forstmt::Builder::getVpiForIncStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Forstmt::Pipeline::getVpiForIncStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Forstmt::Builder::setVpiForIncStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Forstmt::Builder::initVpiForIncStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::adoptVpiForIncStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Forstmt::Builder::disownVpiForIncStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Forstmt::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Forstmt::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Forstmt::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Forstmt::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Forstmt::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Forstmt::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Ifstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Ifstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Ifstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Ifstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Ifstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Ifstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Ifstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Ifstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Ifstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Ifstmt::Reader::getVpiQualifier() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Ifstmt::Builder::getVpiQualifier() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Ifstmt::Builder::setVpiQualifier( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Ifstmt::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Ifstmt::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ifstmt::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ifstmt::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ifstmt::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Ifstmt::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ifstmt::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Ifstmt::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ifstmt::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Ifstmt::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Ifstmt::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ifstmt::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ifstmt::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ifstmt::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Ifstmt::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ifstmt::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Ifstmt::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ifstmt::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Eventstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Eventstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Eventstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Eventstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Eventstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Eventstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Eventstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Eventstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Eventstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Eventstmt::Reader::getVpiBlocking() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Eventstmt::Builder::getVpiBlocking() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Eventstmt::Builder::setVpiBlocking(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Eventstmt::Reader::getNamedevent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Eventstmt::Builder::getNamedevent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Eventstmt::Builder::setNamedevent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Threadobj::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Threadobj::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Threadobj::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Threadobj::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Threadobj::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Threadobj::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Threadobj::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Threadobj::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Threadobj::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Foreverstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Foreverstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Foreverstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Foreverstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Foreverstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Foreverstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Foreverstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Foreverstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Foreverstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Foreverstmt::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Foreverstmt::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Foreverstmt::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Foreverstmt::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Foreverstmt::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Foreverstmt::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Foreverstmt::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Foreverstmt::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Foreverstmt::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Waits::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Waits::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Waits::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Waits::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Waits::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Waits::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Waits::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Waits::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Waits::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Waits::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Waits::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Waits::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Waits::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Waits::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Waits::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Waits::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Waits::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Waits::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Waitstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Waitstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Waits::Reader Waitstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Waits>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Waits::Builder Waitstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Waits::Pipeline Waitstmt::Pipeline::getBase() {
  return  ::Waits::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Waitstmt::Builder::setBase( ::Waits::Reader value) {
  ::capnp::_::PointerHelpers< ::Waits>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Waits::Builder Waitstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Waitstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Waits>&& value) {
  ::capnp::_::PointerHelpers< ::Waits>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Waits> Waitstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Waitstmt::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Waitstmt::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Waitstmt::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Waitstmt::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Waitstmt::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Waitstmt::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Waitstmt::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Waitstmt::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Waitstmt::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Waitfork::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Waitfork::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Waits::Reader Waitfork::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Waits>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Waits::Builder Waitfork::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Waits::Pipeline Waitfork::Pipeline::getBase() {
  return  ::Waits::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Waitfork::Builder::setBase( ::Waits::Reader value) {
  ::capnp::_::PointerHelpers< ::Waits>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Waits::Builder Waitfork::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Waitfork::Builder::adoptBase(
    ::capnp::Orphan< ::Waits>&& value) {
  ::capnp::_::PointerHelpers< ::Waits>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Waits> Waitfork::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Orderedwait::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Orderedwait::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Waits::Reader Orderedwait::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Waits>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Waits::Builder Orderedwait::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Waits::Pipeline Orderedwait::Pipeline::getBase() {
  return  ::Waits::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Orderedwait::Builder::setBase( ::Waits::Reader value) {
  ::capnp::_::PointerHelpers< ::Waits>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Waits::Builder Orderedwait::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Orderedwait::Builder::adoptBase(
    ::capnp::Orphan< ::Waits>&& value) {
  ::capnp::_::PointerHelpers< ::Waits>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Waits> Orderedwait::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Waits>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Orderedwait::Reader::hasVpiConditions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Orderedwait::Builder::hasVpiConditions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Orderedwait::Reader::getVpiConditions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Orderedwait::Builder::getVpiConditions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Orderedwait::Builder::setVpiConditions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Orderedwait::Builder::initVpiConditions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Orderedwait::Builder::adoptVpiConditions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Orderedwait::Builder::disownVpiConditions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Orderedwait::Reader::hasVpiElseStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Orderedwait::Builder::hasVpiElseStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Orderedwait::Reader::getVpiElseStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Orderedwait::Builder::getVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Orderedwait::Pipeline::getVpiElseStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Orderedwait::Builder::setVpiElseStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Orderedwait::Builder::initVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Orderedwait::Builder::adoptVpiElseStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Orderedwait::Builder::disownVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Disables::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Disables::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Disables::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Disables::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Disables::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Disables::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Disables::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Disables::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Disables::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Disable::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Disable::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Disables::Reader Disable::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Disables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Disables::Builder Disable::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Disables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Disables::Pipeline Disable::Pipeline::getBase() {
  return  ::Disables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Disable::Builder::setBase( ::Disables::Reader value) {
  ::capnp::_::PointerHelpers< ::Disables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Disables::Builder Disable::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Disables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Disable::Builder::adoptBase(
    ::capnp::Orphan< ::Disables>&& value) {
  ::capnp::_::PointerHelpers< ::Disables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Disables> Disable::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Disables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Disable::Reader::hasVpiExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Disable::Builder::hasVpiExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Disable::Reader::getVpiExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Disable::Builder::getVpiExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Disable::Pipeline::getVpiExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Disable::Builder::setVpiExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Disable::Builder::initVpiExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Disable::Builder::adoptVpiExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Disable::Builder::disownVpiExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Disablefork::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Disablefork::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Disables::Reader Disablefork::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Disables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Disables::Builder Disablefork::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Disables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Disables::Pipeline Disablefork::Pipeline::getBase() {
  return  ::Disables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Disablefork::Builder::setBase( ::Disables::Reader value) {
  ::capnp::_::PointerHelpers< ::Disables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Disables::Builder Disablefork::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Disables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Disablefork::Builder::adoptBase(
    ::capnp::Orphan< ::Disables>&& value) {
  ::capnp::_::PointerHelpers< ::Disables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Disables> Disablefork::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Disables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Continuestmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Continuestmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Continuestmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Continuestmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Continuestmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Continuestmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Continuestmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Continuestmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Continuestmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Breakstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Breakstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Breakstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Breakstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Breakstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Breakstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Breakstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Breakstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Breakstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Returnstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Returnstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Returnstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Returnstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Returnstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Returnstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Returnstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Returnstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Returnstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Returnstmt::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Returnstmt::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Returnstmt::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Returnstmt::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Returnstmt::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Returnstmt::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Returnstmt::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Returnstmt::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Returnstmt::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Whilestmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Whilestmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Whilestmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Whilestmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Whilestmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Whilestmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Whilestmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Whilestmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Whilestmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Whilestmt::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Whilestmt::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Whilestmt::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Whilestmt::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Whilestmt::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Whilestmt::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Whilestmt::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Whilestmt::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Whilestmt::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Whilestmt::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Whilestmt::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Whilestmt::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Whilestmt::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Whilestmt::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Whilestmt::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Whilestmt::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Whilestmt::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Whilestmt::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Repeat::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Repeat::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Repeat::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Repeat::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Repeat::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Repeat::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Repeat::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Repeat::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Repeat::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Repeat::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Repeat::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Repeat::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Repeat::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Repeat::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Repeat::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Repeat::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Repeat::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Repeat::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Repeat::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Repeat::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Repeat::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Repeat::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Repeat::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Repeat::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Repeat::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Repeat::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Repeat::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dowhile::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Dowhile::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Dowhile::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Dowhile::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Dowhile::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Dowhile::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Dowhile::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Dowhile::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Dowhile::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Dowhile::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Dowhile::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Dowhile::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Dowhile::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Dowhile::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Dowhile::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Dowhile::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Dowhile::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Dowhile::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Dowhile::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Dowhile::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Dowhile::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Dowhile::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Dowhile::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Dowhile::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Dowhile::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dowhile::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Dowhile::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Ifelse::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Ifelse::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Ifelse::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Ifelse::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Ifelse::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Ifelse::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Ifelse::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Ifelse::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Ifelse::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Ifelse::Reader::getVpiQualifier() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Ifelse::Builder::getVpiQualifier() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Ifelse::Builder::setVpiQualifier( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Ifelse::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Ifelse::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ifelse::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ifelse::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ifelse::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Ifelse::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ifelse::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Ifelse::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ifelse::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Ifelse::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Ifelse::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ifelse::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ifelse::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ifelse::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Ifelse::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ifelse::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Ifelse::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ifelse::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Ifelse::Reader::hasVpiElseStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Ifelse::Builder::hasVpiElseStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ifelse::Reader::getVpiElseStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ifelse::Builder::getVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ifelse::Pipeline::getVpiElseStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Ifelse::Builder::setVpiElseStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ifelse::Builder::initVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Ifelse::Builder::adoptVpiElseStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ifelse::Builder::disownVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Casestmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Casestmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Casestmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Casestmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Casestmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Casestmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Casestmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Casestmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Casestmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Casestmt::Reader::getVpiRandType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Casestmt::Builder::getVpiRandType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Casestmt::Builder::setVpiRandType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Casestmt::Reader::getVpiCaseType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Casestmt::Builder::getVpiCaseType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Casestmt::Builder::setVpiCaseType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Casestmt::Reader::getVpiQualifier() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Casestmt::Builder::getVpiQualifier() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Casestmt::Builder::setVpiQualifier( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Casestmt::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Casestmt::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Casestmt::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Casestmt::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Casestmt::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Casestmt::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Casestmt::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Casestmt::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Casestmt::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Casestmt::Reader::hasCaseitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Casestmt::Builder::hasCaseitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Casestmt::Reader::getCaseitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Casestmt::Builder::getCaseitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Casestmt::Builder::setCaseitems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Casestmt::Builder::setCaseitems(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Casestmt::Builder::initCaseitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Casestmt::Builder::adoptCaseitems(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Casestmt::Builder::disownCaseitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Force::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Force::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Force::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Force::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Force::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Force::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Force::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Force::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Force::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Force::Reader::hasRhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Force::Builder::hasRhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Force::Reader::getRhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Force::Builder::getRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Force::Pipeline::getRhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Force::Builder::setRhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Force::Builder::initRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Force::Builder::adoptRhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Force::Builder::disownRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Force::Reader::hasLhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Force::Builder::hasLhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Force::Reader::getLhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Force::Builder::getLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Force::Pipeline::getLhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Force::Builder::setLhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Force::Builder::initLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Force::Builder::adoptLhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Force::Builder::disownLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Assignstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Assignstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Assignstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Assignstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Assignstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Assignstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Assignstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Assignstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Assignstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Assignstmt::Reader::hasRhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Assignstmt::Builder::hasRhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Assignstmt::Reader::getRhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Assignstmt::Builder::getRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Assignstmt::Pipeline::getRhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Assignstmt::Builder::setRhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Assignstmt::Builder::initRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Assignstmt::Builder::adoptRhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Assignstmt::Builder::disownRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Assignstmt::Reader::hasLhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Assignstmt::Builder::hasLhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Assignstmt::Reader::getLhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Assignstmt::Builder::getLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Assignstmt::Pipeline::getLhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Assignstmt::Builder::setLhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Assignstmt::Builder::initLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Assignstmt::Builder::adoptLhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Assignstmt::Builder::disownLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Deassign::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Deassign::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Deassign::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Deassign::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Deassign::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Deassign::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Deassign::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Deassign::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Deassign::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Deassign::Reader::hasLhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Deassign::Builder::hasLhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Deassign::Reader::getLhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Deassign::Builder::getLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Deassign::Pipeline::getLhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Deassign::Builder::setLhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Deassign::Builder::initLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Deassign::Builder::adoptLhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Deassign::Builder::disownLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Release::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Release::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Release::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Release::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Release::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Release::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Release::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Release::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Release::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Release::Reader::hasLhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Release::Builder::hasLhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Release::Reader::getLhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Release::Builder::getLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Release::Pipeline::getLhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Release::Builder::setLhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Release::Builder::initLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Release::Builder::adoptLhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Release::Builder::disownLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Nullstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Nullstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Nullstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Nullstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Nullstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Nullstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Nullstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Nullstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Nullstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Expectstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Expectstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Expectstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Expectstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Expectstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Expectstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Expectstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Expectstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Expectstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Expectstmt::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Expectstmt::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Expectstmt::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Expectstmt::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Expectstmt::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Expectstmt::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Expectstmt::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Expectstmt::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Expectstmt::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Expectstmt::Reader::hasElsestmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Expectstmt::Builder::hasElsestmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Expectstmt::Reader::getElsestmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Expectstmt::Builder::getElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Expectstmt::Pipeline::getElsestmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Expectstmt::Builder::setElsestmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Expectstmt::Builder::initElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Expectstmt::Builder::adoptElsestmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Expectstmt::Builder::disownElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Expectstmt::Reader::getPropertyspec() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Expectstmt::Builder::getPropertyspec() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Expectstmt::Builder::setPropertyspec( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Foreachstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Foreachstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Foreachstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Foreachstmt::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Foreachstmt::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Foreachstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Foreachstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasVariable() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasVariable() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Foreachstmt::Reader::getVariable() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Foreachstmt::Builder::getVariable() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Foreachstmt::Pipeline::getVariable() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Foreachstmt::Builder::setVariable( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Foreachstmt::Builder::initVariable() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::adoptVariable(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Foreachstmt::Builder::disownVariable() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasVpiLoopVars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasVpiLoopVars() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Foreachstmt::Reader::getVpiLoopVars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Foreachstmt::Builder::getVpiLoopVars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setVpiLoopVars( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Foreachstmt::Builder::initVpiLoopVars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptVpiLoopVars(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Foreachstmt::Builder::disownVpiLoopVars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Foreachstmt::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Foreachstmt::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Foreachstmt::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Foreachstmt::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Foreachstmt::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Foreachstmt::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Genscope::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Genscope::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Genscope::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Genscope::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Genscope::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Genscope::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasVpiIndex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasVpiIndex() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genscope::Reader::getVpiIndex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genscope::Builder::getVpiIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genscope::Pipeline::getVpiIndex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Genscope::Builder::setVpiIndex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genscope::Builder::initVpiIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::adoptVpiIndex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genscope::Builder::disownVpiIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Genscope::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Genscope::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Genscope::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Genscope::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Genscope::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Genscope::Reader::hasNets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasNets() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genscope::Reader::getNets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::getNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setNets( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::initNets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptNets(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genscope::Builder::disownNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasArraynets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasArraynets() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getArraynets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getArraynets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setArraynets( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setArraynets(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initArraynets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptArraynets(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownArraynets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genscope::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genscope::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasModulearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasModulearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getModulearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setModulearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initModulearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptModulearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasPrimitives() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasPrimitives() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genscope::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setPrimitives( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genscope::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasPrimitivearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasPrimitivearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genscope::Reader::getPrimitivearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::getPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setPrimitivearrays( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::initPrimitivearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptPrimitivearrays(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genscope::Builder::disownPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasDefparams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasDefparams() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getDefparams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setDefparams( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setDefparams(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initDefparams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptDefparams(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasGenscopearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasGenscopearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getGenscopearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initGenscopearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptGenscopearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasPrograms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasPrograms() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setPrograms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasProgramarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setProgramarrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasAssertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasAssertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genscope::Reader::getAssertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::getAssertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setAssertions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::initAssertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptAssertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genscope::Builder::disownAssertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasInterfaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasInterfaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setInterfacearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasAliasstmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasAliasstmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getAliasstmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setAliasstmts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initAliasstmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptAliasstmts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasClockingblocks() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscope::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setClockingblocks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscope::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscope::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasTaskfuncs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasTaskfuncs() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genscope::Reader::getTaskfuncs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::getTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::initTaskfuncs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptTaskfuncs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genscope::Builder::disownTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasElabtasks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasElabtasks() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genscope::Reader::getElabtasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::getElabtasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setElabtasks( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genscope::Builder::initElabtasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptElabtasks(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genscope::Builder::disownElabtasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool Genvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Genvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Genvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Genvar::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Genvar::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Genvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genvar::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Genvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Genvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Genvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Genvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Genvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Genvar::Reader::hasGenscopearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genvar::Builder::hasGenscopearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genvar::Reader::getGenscopearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genvar::Builder::getGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genvar::Builder::setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Genvar::Builder::setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genvar::Builder::initGenscopearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Genvar::Builder::adoptGenscopearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genvar::Builder::disownGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genscopearray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genscopearray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Genscopearray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Genscopearray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Genscopearray::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Genscopearray::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Genscopearray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genscopearray::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Genscopearray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Genscopearray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Genscopearray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Genscopearray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Genscopearray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genscopearray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Genscopearray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Genscopearray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genscopearray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Genscopearray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Genscopearray::Reader::getGenvar() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genscopearray::Builder::getGenvar() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Genscopearray::Builder::setGenvar( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Genscopearray::Reader::hasGenscopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genscopearray::Builder::hasGenscopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genscopearray::Reader::getGenscopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscopearray::Builder::getGenscopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genscopearray::Builder::setGenscopes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Genscopearray::Builder::setGenscopes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genscopearray::Builder::initGenscopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Genscopearray::Builder::adoptGenscopes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genscopearray::Builder::disownGenscopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genscopearray::Reader::hasVpiInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Genscopearray::Builder::hasVpiInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genscopearray::Reader::getVpiInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genscopearray::Builder::getVpiInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genscopearray::Pipeline::getVpiInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Genscopearray::Builder::setVpiInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genscopearray::Builder::initVpiInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Genscopearray::Builder::adoptVpiInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genscopearray::Builder::disownVpiInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Assertstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Assertstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Concurrentassertions::Reader Assertstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Concurrentassertions::Builder Assertstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Concurrentassertions::Pipeline Assertstmt::Pipeline::getBase() {
  return  ::Concurrentassertions::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Assertstmt::Builder::setBase( ::Concurrentassertions::Reader value) {
  ::capnp::_::PointerHelpers< ::Concurrentassertions>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Concurrentassertions::Builder Assertstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Assertstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Concurrentassertions>&& value) {
  ::capnp::_::PointerHelpers< ::Concurrentassertions>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Concurrentassertions> Assertstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Assertstmt::Reader::hasElsestmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Assertstmt::Builder::hasElsestmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Assertstmt::Reader::getElsestmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Assertstmt::Builder::getElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Assertstmt::Pipeline::getElsestmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Assertstmt::Builder::setElsestmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Assertstmt::Builder::initElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Assertstmt::Builder::adoptElsestmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Assertstmt::Builder::disownElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Assertstmt::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Assertstmt::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Assertstmt::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Cover::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Cover::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Concurrentassertions::Reader Cover::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Concurrentassertions::Builder Cover::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Concurrentassertions::Pipeline Cover::Pipeline::getBase() {
  return  ::Concurrentassertions::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Cover::Builder::setBase( ::Concurrentassertions::Reader value) {
  ::capnp::_::PointerHelpers< ::Concurrentassertions>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Concurrentassertions::Builder Cover::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Cover::Builder::adoptBase(
    ::capnp::Orphan< ::Concurrentassertions>&& value) {
  ::capnp::_::PointerHelpers< ::Concurrentassertions>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Concurrentassertions> Cover::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Cover::Reader::getVpiIsCoverSequence() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Cover::Builder::getVpiIsCoverSequence() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Cover::Builder::setVpiIsCoverSequence(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Cover::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Cover::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Cover::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Assume::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Assume::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Concurrentassertions::Reader Assume::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Concurrentassertions::Builder Assume::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Concurrentassertions::Pipeline Assume::Pipeline::getBase() {
  return  ::Concurrentassertions::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Assume::Builder::setBase( ::Concurrentassertions::Reader value) {
  ::capnp::_::PointerHelpers< ::Concurrentassertions>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Concurrentassertions::Builder Assume::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Assume::Builder::adoptBase(
    ::capnp::Orphan< ::Concurrentassertions>&& value) {
  ::capnp::_::PointerHelpers< ::Concurrentassertions>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Concurrentassertions> Assume::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Assume::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Assume::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Assume::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Restrict::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Restrict::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Concurrentassertions::Reader Restrict::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Concurrentassertions::Builder Restrict::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Concurrentassertions::Pipeline Restrict::Pipeline::getBase() {
  return  ::Concurrentassertions::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Restrict::Builder::setBase( ::Concurrentassertions::Reader value) {
  ::capnp::_::PointerHelpers< ::Concurrentassertions>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Concurrentassertions::Builder Restrict::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Restrict::Builder::adoptBase(
    ::capnp::Orphan< ::Concurrentassertions>&& value) {
  ::capnp::_::PointerHelpers< ::Concurrentassertions>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Concurrentassertions> Restrict::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Concurrentassertions>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Restrict::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Restrict::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Restrict::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Immediateassert::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Immediateassert::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Immediateassert::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Immediateassert::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Immediateassert::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Immediateassert::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Immediateassert::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Immediateassert::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Immediateassert::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Immediateassert::Reader::getVpiIsDeferred() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Immediateassert::Builder::getVpiIsDeferred() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Immediateassert::Builder::setVpiIsDeferred( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Immediateassert::Reader::getVpiIsFinal() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Immediateassert::Builder::getVpiIsFinal() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Immediateassert::Builder::setVpiIsFinal( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Immediateassert::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Immediateassert::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Immediateassert::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Immediateassert::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Immediateassert::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Immediateassert::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Immediateassert::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Immediateassert::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Immediateassert::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Immediateassert::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Immediateassert::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Immediateassert::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Immediateassert::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Immediateassert::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Immediateassert::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Immediateassert::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Immediateassert::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Immediateassert::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Immediateassert::Reader::hasElsestmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Immediateassert::Builder::hasElsestmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Immediateassert::Reader::getElsestmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Immediateassert::Builder::getElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Immediateassert::Pipeline::getElsestmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Immediateassert::Builder::setElsestmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Immediateassert::Builder::initElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Immediateassert::Builder::adoptElsestmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Immediateassert::Builder::disownElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Immediateassert::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Immediateassert::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Immediateassert::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Immediateassume::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Immediateassume::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Immediateassume::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Immediateassume::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Immediateassume::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Immediateassume::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Immediateassume::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Immediateassume::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Immediateassume::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Immediateassume::Reader::getVpiIsDeferred() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Immediateassume::Builder::getVpiIsDeferred() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Immediateassume::Builder::setVpiIsDeferred( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Immediateassume::Reader::getVpiIsFinal() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Immediateassume::Builder::getVpiIsFinal() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Immediateassume::Builder::setVpiIsFinal( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Immediateassume::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Immediateassume::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Immediateassume::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Immediateassume::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Immediateassume::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Immediateassume::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Immediateassume::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Immediateassume::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Immediateassume::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Immediateassume::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Immediateassume::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Immediateassume::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Immediateassume::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Immediateassume::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Immediateassume::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Immediateassume::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Immediateassume::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Immediateassume::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Immediateassume::Reader::hasElsestmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Immediateassume::Builder::hasElsestmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Immediateassume::Reader::getElsestmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Immediateassume::Builder::getElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Immediateassume::Pipeline::getElsestmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Immediateassume::Builder::setElsestmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Immediateassume::Builder::initElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Immediateassume::Builder::adoptElsestmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Immediateassume::Builder::disownElsestmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Immediateassume::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Immediateassume::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Immediateassume::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Immediatecover::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Immediatecover::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Immediatecover::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Immediatecover::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Immediatecover::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Immediatecover::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Immediatecover::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Immediatecover::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Immediatecover::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Immediatecover::Reader::getVpiIsDeferred() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Immediatecover::Builder::getVpiIsDeferred() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Immediatecover::Builder::setVpiIsDeferred( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Immediatecover::Reader::getVpiIsFinal() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Immediatecover::Builder::getVpiIsFinal() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Immediatecover::Builder::setVpiIsFinal( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Immediatecover::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Immediatecover::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Immediatecover::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Immediatecover::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Immediatecover::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Immediatecover::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Immediatecover::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Immediatecover::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Immediatecover::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Immediatecover::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Immediatecover::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Immediatecover::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Immediatecover::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Immediatecover::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Immediatecover::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Immediatecover::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Immediatecover::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Immediatecover::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Immediatecover::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Immediatecover::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Immediatecover::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Expr::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Expr::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Expr::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Expr::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Expr::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Expr::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Expr::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Expr::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Expr::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Expr::Reader::getVpiDecompile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Expr::Builder::getVpiDecompile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Expr::Builder::setVpiDecompile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Expr::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Expr::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Expr::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Expr::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Expr::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Expr::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Expr::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Expr::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Expr::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Expr::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Expr::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Expr::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Expr::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Expr::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Expr::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Caseitem::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Caseitem::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Caseitem::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Caseitem::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Caseitem::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Caseitem::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Caseitem::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Caseitem::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Caseitem::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Caseitem::Reader::hasVpiExprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Caseitem::Builder::hasVpiExprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Caseitem::Reader::getVpiExprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Caseitem::Builder::getVpiExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Caseitem::Builder::setVpiExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Caseitem::Builder::initVpiExprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Caseitem::Builder::adoptVpiExprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Caseitem::Builder::disownVpiExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Caseitem::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Caseitem::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Caseitem::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Caseitem::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Caseitem::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Caseitem::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Caseitem::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Caseitem::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Caseitem::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Assignment::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Assignment::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Assignment::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Assignment::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Assignment::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Assignment::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Assignment::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Assignment::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Assignment::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Assignment::Reader::getVpiOpType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Assignment::Builder::getVpiOpType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Assignment::Builder::setVpiOpType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Assignment::Reader::getVpiBlocking() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Assignment::Builder::getVpiBlocking() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Assignment::Builder::setVpiBlocking(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Assignment::Reader::hasRhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Assignment::Builder::hasRhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Assignment::Reader::getRhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Assignment::Builder::getRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Assignment::Pipeline::getRhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Assignment::Builder::setRhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Assignment::Builder::initRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Assignment::Builder::adoptRhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Assignment::Builder::disownRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Assignment::Reader::hasLhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Assignment::Builder::hasLhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Assignment::Reader::getLhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Assignment::Builder::getLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Assignment::Pipeline::getLhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Assignment::Builder::setLhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Assignment::Builder::initLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Assignment::Builder::adoptLhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Assignment::Builder::disownLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Assignment::Reader::getDelaycontrol() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Assignment::Builder::getDelaycontrol() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Assignment::Builder::setDelaycontrol( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Assignment::Reader::getEventcontrol() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Assignment::Builder::getEventcontrol() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Assignment::Builder::setEventcontrol( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Assignment::Reader::getRepeatcontrol() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Assignment::Builder::getRepeatcontrol() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Assignment::Builder::setRepeatcontrol( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Anypattern::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Anypattern::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Anypattern::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Anypattern::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Anypattern::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Anypattern::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Anypattern::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Anypattern::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Anypattern::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Anypattern::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Anypattern::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Anypattern::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Taggedpattern::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Taggedpattern::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Taggedpattern::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Taggedpattern::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Taggedpattern::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Taggedpattern::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Taggedpattern::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Taggedpattern::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Taggedpattern::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Taggedpattern::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Taggedpattern::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Taggedpattern::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Taggedpattern::Reader::hasPattern() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Taggedpattern::Builder::hasPattern() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Taggedpattern::Reader::getPattern() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Taggedpattern::Builder::getPattern() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Taggedpattern::Pipeline::getPattern() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Taggedpattern::Builder::setPattern( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Taggedpattern::Builder::initPattern() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Taggedpattern::Builder::adoptPattern(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Taggedpattern::Builder::disownPattern() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Taggedpattern::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Taggedpattern::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Taggedpattern::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Taggedpattern::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Taggedpattern::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Taggedpattern::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Taggedpattern::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Taggedpattern::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Taggedpattern::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Structpattern::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Structpattern::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Structpattern::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Structpattern::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Structpattern::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Structpattern::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Structpattern::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Structpattern::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Structpattern::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Structpattern::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structpattern::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Structpattern::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Structpattern::Reader::hasPattern() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Structpattern::Builder::hasPattern() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structpattern::Reader::getPattern() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structpattern::Builder::getPattern() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structpattern::Pipeline::getPattern() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Structpattern::Builder::setPattern( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structpattern::Builder::initPattern() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Structpattern::Builder::adoptPattern(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structpattern::Builder::disownPattern() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Unsupportedexpr::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Unsupportedexpr::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Expr::Reader Unsupportedexpr::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Expr::Builder Unsupportedexpr::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Expr::Pipeline Unsupportedexpr::Pipeline::getBase() {
  return  ::Expr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Unsupportedexpr::Builder::setBase( ::Expr::Reader value) {
  ::capnp::_::PointerHelpers< ::Expr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Expr::Builder Unsupportedexpr::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Unsupportedexpr::Builder::adoptBase(
    ::capnp::Orphan< ::Expr>&& value) {
  ::capnp::_::PointerHelpers< ::Expr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Expr> Unsupportedexpr::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Unsupportedstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Unsupportedstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Atomicstmt::Reader Unsupportedstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Atomicstmt::Builder Unsupportedstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Atomicstmt::Pipeline Unsupportedstmt::Pipeline::getBase() {
  return  ::Atomicstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Unsupportedstmt::Builder::setBase( ::Atomicstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Atomicstmt::Builder Unsupportedstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Unsupportedstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Atomicstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Atomicstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Atomicstmt> Unsupportedstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Atomicstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Unsupportedstmt::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unsupportedstmt::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Unsupportedstmt::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Includefileinfo::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Includefileinfo::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Includefileinfo::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Includefileinfo::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Includefileinfo::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Includefileinfo::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Includefileinfo::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Includefileinfo::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Includefileinfo::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Includefileinfo::Reader::getVpiIncludedFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Includefileinfo::Builder::getVpiIncludedFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Includefileinfo::Builder::setVpiIncludedFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Sequenceinst::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Sequenceinst::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Sequenceinst::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Sequenceinst::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Sequenceinst::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Sequenceinst::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Sequenceinst::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Sequenceinst::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Sequenceinst::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Sequenceinst::Reader::getSequencedecl() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sequenceinst::Builder::getSequencedecl() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Sequenceinst::Builder::setSequencedecl( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Sequenceinst::Reader::hasNamedeventsequenceexprgroups() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Sequenceinst::Builder::hasNamedeventsequenceexprgroups() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Sequenceinst::Reader::getNamedeventsequenceexprgroups() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Sequenceinst::Builder::getNamedeventsequenceexprgroups() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Sequenceinst::Builder::setNamedeventsequenceexprgroups( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Sequenceinst::Builder::initNamedeventsequenceexprgroups(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Sequenceinst::Builder::adoptNamedeventsequenceexprgroups(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Sequenceinst::Builder::disownNamedeventsequenceexprgroups() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Sequenceinst::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sequenceinst::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Sequenceinst::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Sequenceinst::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sequenceinst::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Sequenceinst::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Seqformaldecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Seqformaldecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Seqformaldecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Seqformaldecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Seqformaldecl::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Seqformaldecl::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Seqformaldecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Seqformaldecl::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Seqformaldecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Seqformaldecl::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Seqformaldecl::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Seqformaldecl::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Seqformaldecl::Reader::getVpiDirection() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Seqformaldecl::Builder::getVpiDirection() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Seqformaldecl::Builder::setVpiDirection( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Seqformaldecl::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Seqformaldecl::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Seqformaldecl::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Seqformaldecl::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Seqformaldecl::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Seqformaldecl::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Seqformaldecl::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Seqformaldecl::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Seqformaldecl::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Seqformaldecl::Reader::hasNamedeventsequenceexprgroup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Seqformaldecl::Builder::hasNamedeventsequenceexprgroup() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Seqformaldecl::Reader::getNamedeventsequenceexprgroup() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Seqformaldecl::Builder::getNamedeventsequenceexprgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Seqformaldecl::Pipeline::getNamedeventsequenceexprgroup() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Seqformaldecl::Builder::setNamedeventsequenceexprgroup( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Seqformaldecl::Builder::initNamedeventsequenceexprgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Seqformaldecl::Builder::adoptNamedeventsequenceexprgroup(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Seqformaldecl::Builder::disownNamedeventsequenceexprgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Seqformaldecl::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Seqformaldecl::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Seqformaldecl::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Seqformaldecl::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Seqformaldecl::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Seqformaldecl::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Seqformaldecl::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Seqformaldecl::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Seqformaldecl::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Sequencedecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Sequencedecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Sequencedecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Sequencedecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Sequencedecl::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Sequencedecl::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Sequencedecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Sequencedecl::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Sequencedecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Sequencedecl::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sequencedecl::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Sequencedecl::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Sequencedecl::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sequencedecl::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Sequencedecl::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Sequencedecl::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Sequencedecl::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Sequencedecl::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Sequencedecl::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Sequencedecl::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Sequencedecl::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Sequencedecl::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Sequencedecl::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Sequencedecl::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Sequencedecl::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Sequencedecl::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Sequencedecl::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Sequencedecl::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Sequencedecl::Builder::setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Sequencedecl::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Sequencedecl::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Sequencedecl::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Sequencedecl::Reader::hasSequenceexprmulticlockgroup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Sequencedecl::Builder::hasSequenceexprmulticlockgroup() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Sequencedecl::Reader::getSequenceexprmulticlockgroup() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Sequencedecl::Builder::getSequenceexprmulticlockgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Sequencedecl::Pipeline::getSequenceexprmulticlockgroup() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Sequencedecl::Builder::setSequenceexprmulticlockgroup( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Sequencedecl::Builder::initSequenceexprmulticlockgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Sequencedecl::Builder::adoptSequenceexprmulticlockgroup(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Sequencedecl::Builder::disownSequenceexprmulticlockgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Sequencedecl::Reader::hasSeqformaldecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Sequencedecl::Builder::hasSeqformaldecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Sequencedecl::Reader::getSeqformaldecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Sequencedecl::Builder::getSeqformaldecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Sequencedecl::Builder::setSeqformaldecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Sequencedecl::Builder::setSeqformaldecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Sequencedecl::Builder::initSeqformaldecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Sequencedecl::Builder::adoptSeqformaldecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Sequencedecl::Builder::disownSeqformaldecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Propformaldecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Propformaldecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Propformaldecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Propformaldecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Propformaldecl::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Propformaldecl::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Propformaldecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Propformaldecl::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Propformaldecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Propformaldecl::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propformaldecl::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Propformaldecl::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Propformaldecl::Reader::getVpiDirection() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Propformaldecl::Builder::getVpiDirection() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Propformaldecl::Builder::setVpiDirection( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Propformaldecl::Reader::hasVpiExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Propformaldecl::Builder::hasVpiExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Propformaldecl::Reader::getVpiExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Propformaldecl::Builder::getVpiExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Propformaldecl::Pipeline::getVpiExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Propformaldecl::Builder::setVpiExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Propformaldecl::Builder::initVpiExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Propformaldecl::Builder::adoptVpiExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Propformaldecl::Builder::disownVpiExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Propformaldecl::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Propformaldecl::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Propformaldecl::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Propformaldecl::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Propformaldecl::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Propformaldecl::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Propformaldecl::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Propformaldecl::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Propformaldecl::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Propertyinst::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Propertyinst::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Propertyinst::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Propertyinst::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Propertyinst::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Propertyinst::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Propertyinst::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Propertyinst::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Propertyinst::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Propertyinst::Reader::hasVpiDisableCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Propertyinst::Builder::hasVpiDisableCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Propertyinst::Reader::getVpiDisableCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Propertyinst::Builder::getVpiDisableCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Propertyinst::Pipeline::getVpiDisableCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Propertyinst::Builder::setVpiDisableCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Propertyinst::Builder::initVpiDisableCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Propertyinst::Builder::adoptVpiDisableCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Propertyinst::Builder::disownVpiDisableCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Propertyinst::Reader::hasVpiArguments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Propertyinst::Builder::hasVpiArguments() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Propertyinst::Reader::getVpiArguments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Propertyinst::Builder::getVpiArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Propertyinst::Builder::setVpiArguments( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Propertyinst::Builder::initVpiArguments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Propertyinst::Builder::adoptVpiArguments(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Propertyinst::Builder::disownVpiArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Propertyinst::Reader::getPropertydecl() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertyinst::Builder::getPropertydecl() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Propertyinst::Builder::setPropertydecl( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Propertyinst::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertyinst::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Propertyinst::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Propertyinst::Reader::getClockingblock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertyinst::Builder::getClockingblock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Propertyinst::Builder::setClockingblock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Propertyspec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Propertyspec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Propertyspec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Propertyspec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Propertyspec::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Propertyspec::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Propertyspec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Propertyspec::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Propertyspec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Propertyspec::Reader::hasVpiDisableCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Propertyspec::Builder::hasVpiDisableCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Propertyspec::Reader::getVpiDisableCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Propertyspec::Builder::getVpiDisableCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Propertyspec::Pipeline::getVpiDisableCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Propertyspec::Builder::setVpiDisableCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Propertyspec::Builder::initVpiDisableCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Propertyspec::Builder::adoptVpiDisableCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Propertyspec::Builder::disownVpiDisableCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Propertyspec::Reader::hasVpiClockingEvent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Propertyspec::Builder::hasVpiClockingEvent() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Propertyspec::Reader::getVpiClockingEvent() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Propertyspec::Builder::getVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Propertyspec::Pipeline::getVpiClockingEvent() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Propertyspec::Builder::setVpiClockingEvent( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Propertyspec::Builder::initVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Propertyspec::Builder::adoptVpiClockingEvent(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Propertyspec::Builder::disownVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Propertyspec::Reader::hasVpiPropertyExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Propertyspec::Builder::hasVpiPropertyExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Propertyspec::Reader::getVpiPropertyExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Propertyspec::Builder::getVpiPropertyExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Propertyspec::Pipeline::getVpiPropertyExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Propertyspec::Builder::setVpiPropertyExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Propertyspec::Builder::initVpiPropertyExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Propertyspec::Builder::adoptVpiPropertyExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Propertyspec::Builder::disownVpiPropertyExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Propertydecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Propertydecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Propertydecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Propertydecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Propertydecl::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Propertydecl::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Propertydecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Propertydecl::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Propertydecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Propertydecl::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertydecl::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Propertydecl::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Propertydecl::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertydecl::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Propertydecl::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Propertydecl::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Propertydecl::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Propertydecl::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Propertydecl::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Propertydecl::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Propertydecl::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Propertydecl::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Propertydecl::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Propertydecl::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Propertydecl::Reader::hasPropformaldecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Propertydecl::Builder::hasPropformaldecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Propertydecl::Reader::getPropformaldecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Propertydecl::Builder::getPropformaldecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Propertydecl::Builder::setPropformaldecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Propertydecl::Builder::setPropformaldecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Propertydecl::Builder::initPropformaldecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Propertydecl::Builder::adoptPropformaldecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Propertydecl::Builder::disownPropformaldecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Propertydecl::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Propertydecl::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Propertydecl::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Propertydecl::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Propertydecl::Builder::setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Propertydecl::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Propertydecl::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Propertydecl::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Propertydecl::Reader::getPropertyspec() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertydecl::Builder::getPropertyspec() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Propertydecl::Builder::setPropertyspec( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Clockedproperty::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Clockedproperty::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Clockedproperty::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Clockedproperty::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Clockedproperty::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Clockedproperty::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Clockedproperty::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Clockedproperty::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Clockedproperty::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Clockedproperty::Reader::hasVpiClockingEvent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Clockedproperty::Builder::hasVpiClockingEvent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Clockedproperty::Reader::getVpiClockingEvent() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Clockedproperty::Builder::getVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Clockedproperty::Pipeline::getVpiClockingEvent() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Clockedproperty::Builder::setVpiClockingEvent( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Clockedproperty::Builder::initVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Clockedproperty::Builder::adoptVpiClockingEvent(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Clockedproperty::Builder::disownVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Clockedproperty::Reader::hasVpiPropertyExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Clockedproperty::Builder::hasVpiPropertyExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Clockedproperty::Reader::getVpiPropertyExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Clockedproperty::Builder::getVpiPropertyExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Clockedproperty::Pipeline::getVpiPropertyExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Clockedproperty::Builder::setVpiPropertyExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Clockedproperty::Builder::initVpiPropertyExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Clockedproperty::Builder::adoptVpiPropertyExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Clockedproperty::Builder::disownVpiPropertyExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Casepropertyitem::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Casepropertyitem::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Casepropertyitem::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Casepropertyitem::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Casepropertyitem::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Casepropertyitem::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Casepropertyitem::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Casepropertyitem::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Casepropertyitem::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Casepropertyitem::Reader::hasExpressions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Casepropertyitem::Builder::hasExpressions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Casepropertyitem::Reader::getExpressions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Casepropertyitem::Builder::getExpressions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Casepropertyitem::Builder::setExpressions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Casepropertyitem::Builder::initExpressions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Casepropertyitem::Builder::adoptExpressions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Casepropertyitem::Builder::disownExpressions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Casepropertyitem::Reader::hasPropertyexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Casepropertyitem::Builder::hasPropertyexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Casepropertyitem::Reader::getPropertyexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Casepropertyitem::Builder::getPropertyexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Casepropertyitem::Pipeline::getPropertyexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Casepropertyitem::Builder::setPropertyexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Casepropertyitem::Builder::initPropertyexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Casepropertyitem::Builder::adoptPropertyexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Casepropertyitem::Builder::disownPropertyexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Caseproperty::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Caseproperty::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Caseproperty::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Caseproperty::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Caseproperty::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Caseproperty::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Caseproperty::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Caseproperty::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Caseproperty::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Caseproperty::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Caseproperty::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Caseproperty::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Caseproperty::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Caseproperty::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Caseproperty::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Caseproperty::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Caseproperty::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Caseproperty::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Caseproperty::Reader::hasCasepropertyitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Caseproperty::Builder::hasCasepropertyitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Caseproperty::Reader::getCasepropertyitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Caseproperty::Builder::getCasepropertyitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Caseproperty::Builder::setCasepropertyitems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Caseproperty::Builder::setCasepropertyitems(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Caseproperty::Builder::initCasepropertyitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Caseproperty::Builder::adoptCasepropertyitems(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Caseproperty::Builder::disownCasepropertyitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Multiclocksequenceexpr::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Multiclocksequenceexpr::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Multiclocksequenceexpr::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Multiclocksequenceexpr::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Multiclocksequenceexpr::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Multiclocksequenceexpr::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Multiclocksequenceexpr::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Multiclocksequenceexpr::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Multiclocksequenceexpr::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Multiclocksequenceexpr::Reader::hasClockedseqs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Multiclocksequenceexpr::Builder::hasClockedseqs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Multiclocksequenceexpr::Reader::getClockedseqs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Multiclocksequenceexpr::Builder::getClockedseqs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Multiclocksequenceexpr::Builder::setClockedseqs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Multiclocksequenceexpr::Builder::setClockedseqs(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Multiclocksequenceexpr::Builder::initClockedseqs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Multiclocksequenceexpr::Builder::adoptClockedseqs(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Multiclocksequenceexpr::Builder::disownClockedseqs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Clockedseq::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Clockedseq::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Clockedseq::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Clockedseq::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Clockedseq::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Clockedseq::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Clockedseq::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Clockedseq::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Clockedseq::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Clockedseq::Reader::hasVpiClockingEvent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Clockedseq::Builder::hasVpiClockingEvent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Clockedseq::Reader::getVpiClockingEvent() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Clockedseq::Builder::getVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Clockedseq::Pipeline::getVpiClockingEvent() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Clockedseq::Builder::setVpiClockingEvent( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Clockedseq::Builder::initVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Clockedseq::Builder::adoptVpiClockingEvent(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Clockedseq::Builder::disownVpiClockingEvent() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Clockedseq::Reader::hasVpiSequenceExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Clockedseq::Builder::hasVpiSequenceExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Clockedseq::Reader::getVpiSequenceExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Clockedseq::Builder::getVpiSequenceExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Clockedseq::Pipeline::getVpiSequenceExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Clockedseq::Builder::setVpiSequenceExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Clockedseq::Builder::initVpiSequenceExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Clockedseq::Builder::adoptVpiSequenceExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Clockedseq::Builder::disownVpiSequenceExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Simpleexpr::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Simpleexpr::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Expr::Reader Simpleexpr::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Expr::Builder Simpleexpr::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Expr::Pipeline Simpleexpr::Pipeline::getBase() {
  return  ::Expr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Simpleexpr::Builder::setBase( ::Expr::Reader value) {
  ::capnp::_::PointerHelpers< ::Expr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Expr::Builder Simpleexpr::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Simpleexpr::Builder::adoptBase(
    ::capnp::Orphan< ::Expr>&& value) {
  ::capnp::_::PointerHelpers< ::Expr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Expr> Simpleexpr::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Simpleexpr::Reader::hasVpiUses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Simpleexpr::Builder::hasVpiUses() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Simpleexpr::Reader::getVpiUses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Simpleexpr::Builder::getVpiUses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Simpleexpr::Builder::setVpiUses( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Simpleexpr::Builder::initVpiUses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Simpleexpr::Builder::adoptVpiUses(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Simpleexpr::Builder::disownVpiUses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Constant::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Constant::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Expr::Reader Constant::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Expr::Builder Constant::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Expr::Pipeline Constant::Pipeline::getBase() {
  return  ::Expr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Constant::Builder::setBase( ::Expr::Reader value) {
  ::capnp::_::PointerHelpers< ::Expr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Expr::Builder Constant::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Constant::Builder::adoptBase(
    ::capnp::Orphan< ::Expr>&& value) {
  ::capnp::_::PointerHelpers< ::Expr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Expr> Constant::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Constant::Reader::getVpiConstType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Constant::Builder::getVpiConstType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Constant::Builder::setVpiConstType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Letexpr::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Letexpr::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Expr::Reader Letexpr::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Expr::Builder Letexpr::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Expr::Pipeline Letexpr::Pipeline::getBase() {
  return  ::Expr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Letexpr::Builder::setBase( ::Expr::Reader value) {
  ::capnp::_::PointerHelpers< ::Expr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Expr::Builder Letexpr::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Letexpr::Builder::adoptBase(
    ::capnp::Orphan< ::Expr>&& value) {
  ::capnp::_::PointerHelpers< ::Expr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Expr> Letexpr::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Letexpr::Reader::hasArguments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Letexpr::Builder::hasArguments() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Letexpr::Reader::getArguments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Letexpr::Builder::getArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Letexpr::Builder::setArguments( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Letexpr::Builder::initArguments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Letexpr::Builder::adoptArguments(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Letexpr::Builder::disownArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Letexpr::Reader::getLetdecl() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Letexpr::Builder::getLetdecl() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Letexpr::Builder::setLetdecl( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Operation::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Operation::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Expr::Reader Operation::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Expr::Builder Operation::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Expr::Pipeline Operation::Pipeline::getBase() {
  return  ::Expr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Operation::Builder::setBase( ::Expr::Reader value) {
  ::capnp::_::PointerHelpers< ::Expr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Expr::Builder Operation::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Operation::Builder::adoptBase(
    ::capnp::Orphan< ::Expr>&& value) {
  ::capnp::_::PointerHelpers< ::Expr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Expr> Operation::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Operation::Reader::getVpiOpType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Operation::Builder::getVpiOpType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiOpType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Operation::Reader::getVpiReordered() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Operation::Builder::getVpiReordered() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiReordered(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Operation::Reader::getVpiFlattened() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool Operation::Builder::getVpiFlattened() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiFlattened(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool Operation::Reader::getVpiOpStrong() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool Operation::Builder::getVpiOpStrong() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiOpStrong(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool Operation::Reader::hasOperands() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Operation::Builder::hasOperands() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Operation::Reader::getOperands() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Operation::Builder::getOperands() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Operation::Builder::setOperands( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Operation::Builder::initOperands(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Operation::Builder::adoptOperands(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Operation::Builder::disownOperands() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Operation::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Operation::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Operation::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Operation::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Operation::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Operation::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Operation::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Operation::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Operation::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Refobj::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Refobj::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Simpleexpr::Reader Refobj::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Simpleexpr::Builder Refobj::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Simpleexpr::Pipeline Refobj::Pipeline::getBase() {
  return  ::Simpleexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Refobj::Builder::setBase( ::Simpleexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Simpleexpr::Builder Refobj::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Refobj::Builder::adoptBase(
    ::capnp::Orphan< ::Simpleexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Simpleexpr> Refobj::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Refobj::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Refobj::Reader::getVpiGeneric() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool Refobj::Builder::getVpiGeneric() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiGeneric(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline bool Refobj::Reader::hasActualgroup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Refobj::Builder::hasActualgroup() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Refobj::Reader::getActualgroup() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Refobj::Builder::getActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Refobj::Pipeline::getActualgroup() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Refobj::Builder::setActualgroup( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Refobj::Builder::initActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Refobj::Builder::adoptActualgroup(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Refobj::Builder::disownActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Refobj::Reader::getVpiStructMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}

inline bool Refobj::Builder::getVpiStructMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiStructMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS, value);
}

inline bool Refmodule::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Refmodule::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Refmodule::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Refmodule::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Refmodule::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Refmodule::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Refmodule::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Refmodule::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Refmodule::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Refmodule::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refmodule::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Refmodule::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refmodule::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refmodule::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Refmodule::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Refmodule::Reader::hasActualgroup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Refmodule::Builder::hasActualgroup() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Refmodule::Reader::getActualgroup() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Refmodule::Builder::getActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Refmodule::Pipeline::getActualgroup() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Refmodule::Builder::setActualgroup( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Refmodule::Builder::initActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Refmodule::Builder::adoptActualgroup(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Refmodule::Builder::disownActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Refmodule::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Refmodule::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Refmodule::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Refmodule::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Refmodule::Builder::setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Refmodule::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Refmodule::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Refmodule::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Refmodule::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Reftypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Reftypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Simpleexpr::Reader Reftypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Simpleexpr::Builder Reftypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Simpleexpr::Pipeline Reftypespec::Pipeline::getBase() {
  return  ::Simpleexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Reftypespec::Builder::setBase( ::Simpleexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Simpleexpr::Builder Reftypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Reftypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Simpleexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Simpleexpr> Reftypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Reftypespec::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Reftypespec::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Reftypespec::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Reftypespec::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Reftypespec::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Reftypespec::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Reftypespec::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Reftypespec::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Reftypespec::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Reftypespec::Reader::hasActualtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Reftypespec::Builder::hasActualtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Reftypespec::Reader::getActualtypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Reftypespec::Builder::getActualtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Reftypespec::Pipeline::getActualtypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Reftypespec::Builder::setActualtypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Reftypespec::Builder::initActualtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Reftypespec::Builder::adoptActualtypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Reftypespec::Builder::disownActualtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Partselect::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Partselect::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Refobj::Reader Partselect::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Refobj>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Refobj::Builder Partselect::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Refobj::Pipeline Partselect::Pipeline::getBase() {
  return  ::Refobj::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Partselect::Builder::setBase( ::Refobj::Reader value) {
  ::capnp::_::PointerHelpers< ::Refobj>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Refobj::Builder Partselect::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Partselect::Builder::adoptBase(
    ::capnp::Orphan< ::Refobj>&& value) {
  ::capnp::_::PointerHelpers< ::Refobj>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Refobj> Partselect::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Partselect::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Partselect::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Partselect::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Partselect::Reader::hasLeftrange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Partselect::Builder::hasLeftrange() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Partselect::Reader::getLeftrange() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Partselect::Builder::getLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Partselect::Pipeline::getLeftrange() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Partselect::Builder::setLeftrange( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Partselect::Builder::initLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Partselect::Builder::adoptLeftrange(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Partselect::Builder::disownLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Partselect::Reader::hasRightrange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Partselect::Builder::hasRightrange() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Partselect::Reader::getRightrange() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Partselect::Builder::getRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Partselect::Pipeline::getRightrange() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Partselect::Builder::setRightrange( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Partselect::Builder::initRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Partselect::Builder::adoptRightrange(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Partselect::Builder::disownRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Indexedpartselect::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Indexedpartselect::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Refobj::Reader Indexedpartselect::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Refobj>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Refobj::Builder Indexedpartselect::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Refobj::Pipeline Indexedpartselect::Pipeline::getBase() {
  return  ::Refobj::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Indexedpartselect::Builder::setBase( ::Refobj::Reader value) {
  ::capnp::_::PointerHelpers< ::Refobj>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Refobj::Builder Indexedpartselect::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Indexedpartselect::Builder::adoptBase(
    ::capnp::Orphan< ::Refobj>&& value) {
  ::capnp::_::PointerHelpers< ::Refobj>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Refobj> Indexedpartselect::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Indexedpartselect::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Indexedpartselect::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Indexedpartselect::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Indexedpartselect::Reader::getVpiIndexedPartSelectType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Indexedpartselect::Builder::getVpiIndexedPartSelectType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Indexedpartselect::Builder::setVpiIndexedPartSelectType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Indexedpartselect::Reader::hasBaseexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Indexedpartselect::Builder::hasBaseexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Indexedpartselect::Reader::getBaseexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Indexedpartselect::Builder::getBaseexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Indexedpartselect::Pipeline::getBaseexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Indexedpartselect::Builder::setBaseexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Indexedpartselect::Builder::initBaseexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Indexedpartselect::Builder::adoptBaseexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Indexedpartselect::Builder::disownBaseexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Indexedpartselect::Reader::hasWidthexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Indexedpartselect::Builder::hasWidthexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Indexedpartselect::Reader::getWidthexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Indexedpartselect::Builder::getWidthexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Indexedpartselect::Pipeline::getWidthexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Indexedpartselect::Builder::setWidthexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Indexedpartselect::Builder::initWidthexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Indexedpartselect::Builder::adoptWidthexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Indexedpartselect::Builder::disownWidthexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Varselect::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Varselect::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Refobj::Reader Varselect::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Refobj>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Refobj::Builder Varselect::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Refobj::Pipeline Varselect::Pipeline::getBase() {
  return  ::Refobj::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Varselect::Builder::setBase( ::Refobj::Reader value) {
  ::capnp::_::PointerHelpers< ::Refobj>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Refobj::Builder Varselect::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Varselect::Builder::adoptBase(
    ::capnp::Orphan< ::Refobj>&& value) {
  ::capnp::_::PointerHelpers< ::Refobj>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Refobj> Varselect::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Varselect::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Varselect::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Varselect::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Varselect::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Varselect::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Varselect::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Varselect::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Varselect::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Varselect::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Varselect::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Varselect::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Varselect::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Varselect::Reader::hasExprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Varselect::Builder::hasExprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Varselect::Reader::getExprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Varselect::Builder::getExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Varselect::Builder::setExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Varselect::Builder::initExprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Varselect::Builder::adoptExprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Varselect::Builder::disownExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Bitselect::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bitselect::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Refobj::Reader Bitselect::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Refobj>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Refobj::Builder Bitselect::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Refobj::Pipeline Bitselect::Pipeline::getBase() {
  return  ::Refobj::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Bitselect::Builder::setBase( ::Refobj::Reader value) {
  ::capnp::_::PointerHelpers< ::Refobj>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Refobj::Builder Bitselect::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bitselect::Builder::adoptBase(
    ::capnp::Orphan< ::Refobj>&& value) {
  ::capnp::_::PointerHelpers< ::Refobj>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Refobj> Bitselect::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Refobj>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bitselect::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Bitselect::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bitselect::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Bitselect::Reader::hasVpiIndex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Bitselect::Builder::hasVpiIndex() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitselect::Reader::getVpiIndex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitselect::Builder::getVpiIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitselect::Pipeline::getVpiIndex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Bitselect::Builder::setVpiIndex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitselect::Builder::initVpiIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Bitselect::Builder::adoptVpiIndex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitselect::Builder::disownVpiIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Simpleexpr::Reader Variables::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Simpleexpr::Builder Variables::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Simpleexpr::Pipeline Variables::Pipeline::getBase() {
  return  ::Simpleexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Variables::Builder::setBase( ::Simpleexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Simpleexpr::Builder Variables::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Variables::Builder::adoptBase(
    ::capnp::Orphan< ::Simpleexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Simpleexpr> Variables::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Variables::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Variables::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Variables::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Variables::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Variables::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Variables::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Variables::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Variables::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Variables::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Variables::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Variables::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Variables::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Variables::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool Variables::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool Variables::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Variables::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Variables::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool Variables::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Variables::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Variables::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Variables::Builder::setPorts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Variables::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Variables::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Variables::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Variables::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Variables::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Variables::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Variables::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Variables::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Variables::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Variables::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Variables::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Variables::Builder::setVariableloads( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Variables::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Variables::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Variables::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Variables::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Variables::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Variables::Builder::setPrimterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Variables::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Variables::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Variables::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Variables::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Variables::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Variables::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Variables::Builder::setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Variables::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Variables::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Variables::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Variables::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t Variables::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Variables::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Variables::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Variables::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Variables::Reader::getModuleinst() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Variables::Builder::getModuleinst() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Variables::Builder::setModuleinst( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Variables::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Variables::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Variables::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Variables::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Variables::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Variables::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Variables::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Variables::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Variables::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Variables::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Variables::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Variables::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Variables::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Variables::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Variables::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Variables::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Variables::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Variables::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Variables::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Variables::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Variables::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Variables::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Variables::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Variables::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Variables::Builder::setIndexes( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Variables::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Variables::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Variables::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Variables::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Variables::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Variables::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Variables::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Variables::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Variables::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Variables::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Variables::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Variables::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Hierpath::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Hierpath::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Simpleexpr::Reader Hierpath::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Simpleexpr::Builder Hierpath::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Simpleexpr::Pipeline Hierpath::Pipeline::getBase() {
  return  ::Simpleexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Hierpath::Builder::setBase( ::Simpleexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Simpleexpr::Builder Hierpath::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Hierpath::Builder::adoptBase(
    ::capnp::Orphan< ::Simpleexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Simpleexpr> Hierpath::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Hierpath::Reader::hasPathelems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Hierpath::Builder::hasPathelems() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Hierpath::Reader::getPathelems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Hierpath::Builder::getPathelems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Hierpath::Builder::setPathelems( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Hierpath::Builder::initPathelems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Hierpath::Builder::adoptPathelems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Hierpath::Builder::disownPathelems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Hierpath::Reader::hasRootvalue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Hierpath::Builder::hasRootvalue() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Hierpath::Reader::getRootvalue() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Hierpath::Builder::getRootvalue() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Hierpath::Pipeline::getRootvalue() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Hierpath::Builder::setRootvalue( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Hierpath::Builder::initRootvalue() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Hierpath::Builder::adoptRootvalue(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Hierpath::Builder::disownRootvalue() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Hierpath::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Hierpath::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Hierpath::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Hierpath::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Hierpath::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Hierpath::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Refvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Refvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Refvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Refvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Refvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Refvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Refvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Refvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Refvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Refvar::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refvar::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Refvar::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Refvar::Reader::getVpiGeneric() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Refvar::Builder::getVpiGeneric() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Refvar::Builder::setVpiGeneric(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Refvar::Reader::hasActualgroup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Refvar::Builder::hasActualgroup() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Refvar::Reader::getActualgroup() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Refvar::Builder::getActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Refvar::Pipeline::getActualgroup() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Refvar::Builder::setActualgroup( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Refvar::Builder::initActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Refvar::Builder::adoptActualgroup(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Refvar::Builder::disownActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Refvar::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Refvar::Builder::hasTaskfunc() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Refvar::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Refvar::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Refvar::Pipeline::getTaskfunc() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Refvar::Builder::setTaskfunc( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Refvar::Builder::initTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Refvar::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Refvar::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Refvar::Reader::getVpiStructMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool Refvar::Builder::getVpiStructMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void Refvar::Builder::setVpiStructMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Shortrealvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Shortrealvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Shortrealvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Shortrealvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Shortrealvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Shortrealvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Realvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Realvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Realvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Realvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Realvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Realvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Bytevar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Bytevar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Bytevar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Bytevar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Bytevar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Bytevar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Shortintvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Shortintvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Shortintvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Shortintvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Shortintvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Shortintvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Intvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Intvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Intvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Intvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Intvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Intvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Longintvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Longintvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Longintvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Longintvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Longintvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Longintvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Integervar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Integervar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Integervar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Integervar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Integervar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Integervar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Timevar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Timevar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Timevar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Timevar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Timevar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Timevar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Arrayvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Arrayvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Arrayvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Arrayvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Arrayvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Arrayvar::Reader::getVpiArrayType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arrayvar::Builder::getVpiArrayType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiArrayType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::hasVarselects() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasVarselects() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Arrayvar::Reader::getVarselects() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arrayvar::Builder::getVarselects() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setVarselects( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Arrayvar::Builder::setVarselects(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arrayvar::Builder::initVarselects(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptVarselects(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Arrayvar::Builder::disownVarselects() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Arrayvar::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arrayvar::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Arrayvar::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arrayvar::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Arrayvar::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arrayvar::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arrayvar::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arrayvar::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arrayvar::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arrayvar::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arrayvar::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Arrayvar::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Arrayvar::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Arrayvar::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Arrayvar::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Arrayexpr::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayexpr::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Expr::Reader Arrayexpr::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Expr::Builder Arrayexpr::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Expr::Pipeline Arrayexpr::Pipeline::getBase() {
  return  ::Expr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Arrayexpr::Builder::setBase( ::Expr::Reader value) {
  ::capnp::_::PointerHelpers< ::Expr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Expr::Builder Arrayexpr::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Arrayexpr::Builder::adoptBase(
    ::capnp::Orphan< ::Expr>&& value) {
  ::capnp::_::PointerHelpers< ::Expr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Expr> Arrayexpr::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Arrayexpr::Reader::hasExprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayexpr::Builder::hasExprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Arrayexpr::Reader::getExprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Arrayexpr::Builder::getExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Arrayexpr::Builder::setExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Arrayexpr::Builder::initExprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Arrayexpr::Builder::adoptExprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Arrayexpr::Builder::disownExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Regarray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Regarray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Regarray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Regarray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Regarray::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Regarray::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Regarray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Regarray::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Regarray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Regarray::Reader::getVpiIsMemory() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Regarray::Builder::getVpiIsMemory() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Regarray::Builder::setVpiIsMemory(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Regarray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Regarray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Regarray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Regarray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Regarray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Regarray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Regarray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Regarray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Regarray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Regarray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Regarray::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Regarray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Regarray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Regarray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Regarray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Regarray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Regarray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Regarray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Regarray::Reader::hasRegs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Regarray::Builder::hasRegs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Regarray::Reader::getRegs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Regarray::Builder::getRegs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Regarray::Builder::setRegs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Regarray::Builder::setRegs(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Regarray::Builder::initRegs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Regarray::Builder::adoptRegs(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Regarray::Builder::disownRegs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Reg::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Reg::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Reg::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Reg::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Reg::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Reg::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Reg::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Reg::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Reg::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Reg::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Reg::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Reg::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Reg::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Reg::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Reg::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Reg::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Reg::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Reg::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Reg::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Reg::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Reg::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Reg::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Reg::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Reg::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Reg::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Reg::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Reg::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Reg::Reader::hasIndex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Reg::Builder::hasIndex() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Reg::Reader::getIndex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Reg::Builder::getIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Reg::Pipeline::getIndex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Reg::Builder::setIndex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Reg::Builder::initIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Reg::Builder::adoptIndex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Reg::Builder::disownIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Packedarrayvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Packedarrayvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Packedarrayvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Packedarrayvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Packedarrayvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiPacked() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiPacked() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiPacked(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Packedarrayvar::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Packedarrayvar::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Packedarrayvar::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Packedarrayvar::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Packedarrayvar::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Packedarrayvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Packedarrayvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Packedarrayvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Packedarrayvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Packedarrayvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasElements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasElements() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Packedarrayvar::Reader::getElements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Packedarrayvar::Builder::getElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setElements( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Packedarrayvar::Builder::initElements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptElements(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Packedarrayvar::Builder::disownElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Bitvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Bitvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Bitvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Bitvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Bitvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Bitvar::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Bitvar::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Bitvar::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Bitvar::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Bitvar::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitvar::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitvar::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitvar::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitvar::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitvar::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitvar::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitvar::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitvar::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitvar::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitvar::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Bitvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Bitvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Bitvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Bitvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Bitvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Logicvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Logicvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Logicvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Logicvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Logicvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Logicvar::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Logicvar::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Logicvar::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Logicvar::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Logicvar::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicvar::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicvar::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicvar::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicvar::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicvar::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicvar::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicvar::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicvar::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicvar::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicvar::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Logicvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Logicvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Logicvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Logicvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Logicvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Structvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Structvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Structvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Structvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Structvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Structvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Structvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Structvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Structvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Structvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Structvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Structvar::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Structvar::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Structvar::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Structvar::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structvar::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structvar::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structvar::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Structvar::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structvar::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structvar::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Unionvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Unionvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Unionvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Unionvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Unionvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Unionvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Unionvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Unionvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setVarbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Unionvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Unionvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Unionvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Unionvar::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Unionvar::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Unionvar::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Unionvar::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Unionvar::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Unionvar::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Unionvar::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Unionvar::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Unionvar::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Unionvar::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Enumvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Enumvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Enumvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Enumvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Enumvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Enumvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumvar::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumvar::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumvar::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Enumvar::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumvar::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumvar::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Stringvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Stringvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Stringvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Stringvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Stringvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Stringvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Chandlevar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Chandlevar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Chandlevar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Chandlevar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Chandlevar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Chandlevar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasActualgroup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasActualgroup() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Chandlevar::Reader::getActualgroup() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::getActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Chandlevar::Pipeline::getActualgroup() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Chandlevar::Builder::setActualgroup( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::initActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::adoptActualgroup(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Chandlevar::Builder::disownActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Varbit::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Varbit::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Varbit::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Varbit::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Varbit::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Varbit::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Varbit::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Varbit::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Varbit::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Varbit::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Varbit::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Varbit::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasExprindexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasExprindexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Varbit::Reader::getExprindexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Varbit::Builder::getExprindexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::setExprindexes( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Varbit::Builder::initExprindexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Varbit::Builder::adoptExprindexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Varbit::Builder::disownExprindexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Taskfunc::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Taskfunc::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Taskfunc::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Taskfunc::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Taskfunc::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Taskfunc::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Taskfunc::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Taskfunc::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Taskfunc::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Taskfunc::Reader::getVpiMethod() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Taskfunc::Builder::getVpiMethod() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiMethod(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Taskfunc::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Taskfunc::Builder::getVpiAccessType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiAccessType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Taskfunc::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Taskfunc::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Taskfunc::Reader::getVpiVirtual() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Taskfunc::Builder::getVpiVirtual() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiVirtual(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Taskfunc::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Taskfunc::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Taskfunc::Reader::getVpiDPIPure() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Taskfunc::Builder::getVpiDPIPure() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiDPIPure(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Taskfunc::Reader::getVpiDPIContext() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Taskfunc::Builder::getVpiDPIContext() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiDPIContext(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Taskfunc::Reader::getVpiDPICStr() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Taskfunc::Builder::getVpiDPICStr() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiDPICStr( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Taskfunc::Reader::getVpiDPICIdentifier() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Taskfunc::Builder::getVpiDPICIdentifier() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setVpiDPICIdentifier( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Taskfunc::Reader::hasLeftrange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Taskfunc::Builder::hasLeftrange() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Taskfunc::Reader::getLeftrange() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::getLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Taskfunc::Pipeline::getLeftrange() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Taskfunc::Builder::setLeftrange( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::initLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Taskfunc::Builder::adoptLeftrange(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Taskfunc::Builder::disownLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Taskfunc::Reader::hasRightrange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Taskfunc::Builder::hasRightrange() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Taskfunc::Reader::getRightrange() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::getRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Taskfunc::Pipeline::getRightrange() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Taskfunc::Builder::setRightrange( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::initRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Taskfunc::Builder::adoptRightrange(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Taskfunc::Builder::disownRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Taskfunc::Reader::hasReturn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Taskfunc::Builder::hasReturn() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Taskfunc::Reader::getReturn() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::getReturn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Taskfunc::Pipeline::getReturn() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Taskfunc::Builder::setReturn( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::initReturn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Taskfunc::Builder::adoptReturn(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Taskfunc::Builder::disownReturn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Taskfunc::Reader::getClassdefn() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Taskfunc::Builder::getClassdefn() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Taskfunc::Builder::setClassdefn( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Taskfunc::Reader::hasIodecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Taskfunc::Builder::hasIodecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Taskfunc::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Taskfunc::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Taskfunc::Builder::setIodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Taskfunc::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Taskfunc::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Taskfunc::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Taskfunc::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Taskfunc::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Taskfunc::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Taskfunc::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Taskfunc::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Taskfunc::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Taskfunc::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Taskfunc::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Taskfunc::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Taskfunc::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Taskfunc::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Taskfunc::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Taskfunc::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Taskfunc::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Taskfunc::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Taskfunc::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Taskfunc::Reader Task::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Taskfunc>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Taskfunc::Builder Task::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Taskfunc>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Taskfunc::Pipeline Task::Pipeline::getBase() {
  return  ::Taskfunc::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setBase( ::Taskfunc::Reader value) {
  ::capnp::_::PointerHelpers< ::Taskfunc>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Taskfunc::Builder Task::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Taskfunc>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptBase(
    ::capnp::Orphan< ::Taskfunc>&& value) {
  ::capnp::_::PointerHelpers< ::Taskfunc>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Taskfunc> Task::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Taskfunc>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Taskfunc::Reader Function::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Taskfunc>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Taskfunc::Builder Function::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Taskfunc>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Taskfunc::Pipeline Function::Pipeline::getBase() {
  return  ::Taskfunc::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Function::Builder::setBase( ::Taskfunc::Reader value) {
  ::capnp::_::PointerHelpers< ::Taskfunc>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Taskfunc::Builder Function::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Taskfunc>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Function::Builder::adoptBase(
    ::capnp::Orphan< ::Taskfunc>&& value) {
  ::capnp::_::PointerHelpers< ::Taskfunc>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Taskfunc> Function::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Taskfunc>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Function::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiFuncType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiFuncType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiFuncType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Modport::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Modport::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Modport::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Modport::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Modport::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Modport::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Modport::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Modport::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Modport::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Modport::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Modport::Reader::hasIodecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Modport::Builder::hasIodecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Modport::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Modport::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Modport::Builder::setIodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Modport::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Modport::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Modport::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Modport::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Modport::Reader::getInterfaceinst() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getInterfaceinst() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setInterfaceinst( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Interfacetfdecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Interfacetfdecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Interfacetfdecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Interfacetfdecl::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Interfacetfdecl::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Interfacetfdecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Interfacetfdecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiAccessType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiAccessType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Interfacetfdecl::Reader::hasTasks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasTasks() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfacetfdecl::Reader::getTasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfacetfdecl::Builder::getTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::setTasks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Interfacetfdecl::Builder::setTasks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfacetfdecl::Builder::initTasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Interfacetfdecl::Builder::adoptTasks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfacetfdecl::Builder::disownTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Interfacetfdecl::Reader::hasFunctions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasFunctions() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfacetfdecl::Reader::getFunctions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfacetfdecl::Builder::getFunctions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::setFunctions( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Interfacetfdecl::Builder::setFunctions(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfacetfdecl::Builder::initFunctions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Interfacetfdecl::Builder::adoptFunctions(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfacetfdecl::Builder::disownFunctions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Contassign::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Contassign::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Contassign::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Contassign::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Contassign::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Contassign::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Contassign::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Contassign::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Contassign::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Contassign::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Contassign::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Contassign::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Contassign::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Contassign::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Contassign::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassign::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Contassign::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Contassign::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Contassign::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Contassign::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Contassign::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Contassign::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Contassign::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Contassign::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Contassign::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Contassign::Reader::hasRhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Contassign::Builder::hasRhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Contassign::Reader::getRhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Contassign::Builder::getRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Contassign::Pipeline::getRhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Contassign::Builder::setRhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Contassign::Builder::initRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Contassign::Builder::adoptRhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Contassign::Builder::disownRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Contassign::Reader::hasLhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Contassign::Builder::hasLhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Contassign::Reader::getLhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Contassign::Builder::getLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Contassign::Pipeline::getLhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Contassign::Builder::setLhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Contassign::Builder::initLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Contassign::Builder::adoptLhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Contassign::Builder::disownLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Contassign::Reader::hasContassignbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Contassign::Builder::hasContassignbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Contassign::Reader::getContassignbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Contassign::Builder::getContassignbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Contassign::Builder::setContassignbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Contassign::Builder::setContassignbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Contassign::Builder::initContassignbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Contassign::Builder::adoptContassignbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Contassign::Builder::disownContassignbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Contassignbit::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Contassignbit::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Contassignbit::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Contassignbit::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Contassignbit::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Contassignbit::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Contassignbit::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Contassignbit::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Contassignbit::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Contassignbit::Reader::getVpiOffset() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Contassignbit::Builder::getVpiOffset() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Contassignbit::Builder::setVpiOffset( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Contassignbit::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Contassignbit::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Contassignbit::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Contassignbit::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Contassignbit::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Contassignbit::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Contassignbit::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Contassignbit::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Contassignbit::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassignbit::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassignbit::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Contassignbit::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Contassignbit::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Contassignbit::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Contassignbit::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Contassignbit::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Contassignbit::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Contassignbit::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Contassignbit::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Contassignbit::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Contassignbit::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Contassignbit::Reader::hasRhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Contassignbit::Builder::hasRhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Contassignbit::Reader::getRhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Contassignbit::Builder::getRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Contassignbit::Pipeline::getRhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Contassignbit::Builder::setRhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Contassignbit::Builder::initRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Contassignbit::Builder::adoptRhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Contassignbit::Builder::disownRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Contassignbit::Reader::hasLhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Contassignbit::Builder::hasLhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Contassignbit::Reader::getLhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Contassignbit::Builder::getLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Contassignbit::Pipeline::getLhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Contassignbit::Builder::setLhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Contassignbit::Builder::initLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Contassignbit::Builder::adoptLhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Contassignbit::Builder::disownLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Ports::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Ports::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Ports::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Ports::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Ports::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Ports::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Ports::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Ports::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Ports::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Ports::Reader::getVpiPortIndex() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Ports::Builder::getVpiPortIndex() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiPortIndex( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Ports::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Ports::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Ports::Reader::getVpiPortType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Ports::Builder::getVpiPortType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiPortType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Ports::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool Ports::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline bool Ports::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}

inline bool Ports::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS, value);
}

inline bool Ports::Reader::getVpiConnByName() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS);
}

inline bool Ports::Builder::getVpiConnByName() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiConnByName(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Ports::Reader::getVpiDirection() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Ports::Builder::getVpiDirection() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiDirection( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Ports::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Ports::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Ports::Reader::getVpiExplicitName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Ports::Builder::getVpiExplicitName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setVpiExplicitName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Ports::Reader::hasHighconn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Ports::Builder::hasHighconn() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ports::Reader::getHighconn() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ports::Builder::getHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ports::Pipeline::getHighconn() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Ports::Builder::setHighconn( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ports::Builder::initHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Ports::Builder::adoptHighconn(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ports::Builder::disownHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Ports::Reader::hasLowconn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Ports::Builder::hasLowconn() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ports::Reader::getLowconn() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ports::Builder::getLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ports::Pipeline::getLowconn() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Ports::Builder::setLowconn( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ports::Builder::initLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Ports::Builder::adoptLowconn(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ports::Builder::disownLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Ports::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Ports::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ports::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ports::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ports::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Ports::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ports::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Ports::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ports::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Ports::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Ports::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Ports::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Ports::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Ports::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Ports::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Ports::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Ports::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Ports::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t Ports::Reader::getModuleinst() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Ports::Builder::getModuleinst() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Ports::Builder::setModuleinst( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Port::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Port::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ports::Reader Port::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Ports>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ports::Builder Port::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ports::Pipeline Port::Pipeline::getBase() {
  return  ::Ports::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Port::Builder::setBase( ::Ports::Reader value) {
  ::capnp::_::PointerHelpers< ::Ports>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ports::Builder Port::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Port::Builder::adoptBase(
    ::capnp::Orphan< ::Ports>&& value) {
  ::capnp::_::PointerHelpers< ::Ports>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ports> Port::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Port::Reader::hasBits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Port::Builder::hasBits() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Port::Reader::getBits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Port::Builder::getBits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Port::Builder::setBits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Port::Builder::setBits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Port::Builder::initBits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Port::Builder::adoptBits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Port::Builder::disownBits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Port::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Port::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Port::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Port::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Port::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Port::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Port::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Port::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Port::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Portbit::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Portbit::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ports::Reader Portbit::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Ports>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ports::Builder Portbit::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ports::Pipeline Portbit::Pipeline::getBase() {
  return  ::Ports::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Portbit::Builder::setBase( ::Ports::Reader value) {
  ::capnp::_::PointerHelpers< ::Ports>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ports::Builder Portbit::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Portbit::Builder::adoptBase(
    ::capnp::Orphan< ::Ports>&& value) {
  ::capnp::_::PointerHelpers< ::Ports>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ports> Portbit::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Checkerport::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerport::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ports::Reader Checkerport::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Ports>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ports::Builder Checkerport::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ports::Pipeline Checkerport::Pipeline::getBase() {
  return  ::Ports::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Checkerport::Builder::setBase( ::Ports::Reader value) {
  ::capnp::_::PointerHelpers< ::Ports>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ports::Builder Checkerport::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Checkerport::Builder::adoptBase(
    ::capnp::Orphan< ::Ports>&& value) {
  ::capnp::_::PointerHelpers< ::Ports>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ports> Checkerport::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Ports>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Checkerport::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerport::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Checkerport::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Checkerport::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Checkerport::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Checkerport::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Checkerport::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Checkerport::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Checkerport::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Checkerport::Reader::getProperty() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Checkerport::Builder::getProperty() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Checkerport::Builder::setProperty( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Checkerport::Reader::getSequence() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Checkerport::Builder::getSequence() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Checkerport::Builder::setSequence( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Checkerinstport::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerinstport::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Checkerinstport::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Checkerinstport::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Checkerinstport::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Checkerinstport::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Checkerinstport::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Checkerinstport::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Checkerinstport::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Checkerinstport::Reader::getProperty() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Checkerinstport::Builder::getProperty() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Checkerinstport::Builder::setProperty( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Checkerinstport::Reader::getSequence() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Checkerinstport::Builder::getSequence() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Checkerinstport::Builder::setSequence( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Primitive::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Primitive::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Primitive::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Primitive::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Primitive::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Primitive::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Primitive::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Primitive::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Primitive::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Primitive::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Primitive::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiDelay() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiDelay() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiDelay( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Primitive::Reader::getVpiPrimType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Primitive::Builder::getVpiPrimType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiPrimType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Primitive::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Primitive::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Primitive::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Primitive::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Primitive::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Primitive::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Primitive::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Primitive::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Primitive::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Primitive::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Primitive::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Primitive::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Primitive::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Primitive::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Primitive::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Primitive::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Primitive::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Primitive::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Primitive::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Primitive::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Primitive::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Primitive::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Primitive::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Primitive::Reader::hasIndex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Primitive::Builder::hasIndex() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Primitive::Reader::getIndex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Primitive::Builder::getIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Primitive::Pipeline::getIndex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Primitive::Builder::setIndex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Primitive::Builder::initIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Primitive::Builder::adoptIndex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Primitive::Builder::disownIndex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Primitive::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Primitive::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Primitive::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Primitive::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Primitive::Builder::setPrimterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Primitive::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Primitive::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Primitive::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Primitive::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Gate::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Gate::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Primitive::Reader Gate::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Primitive>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Primitive::Builder Gate::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Primitive::Pipeline Gate::Pipeline::getBase() {
  return  ::Primitive::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Gate::Builder::setBase( ::Primitive::Reader value) {
  ::capnp::_::PointerHelpers< ::Primitive>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Primitive::Builder Gate::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Gate::Builder::adoptBase(
    ::capnp::Orphan< ::Primitive>&& value) {
  ::capnp::_::PointerHelpers< ::Primitive>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Primitive> Gate::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Switchtran::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Switchtran::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Primitive::Reader Switchtran::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Primitive>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Primitive::Builder Switchtran::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Primitive::Pipeline Switchtran::Pipeline::getBase() {
  return  ::Primitive::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Switchtran::Builder::setBase( ::Primitive::Reader value) {
  ::capnp::_::PointerHelpers< ::Primitive>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Primitive::Builder Switchtran::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Switchtran::Builder::adoptBase(
    ::capnp::Orphan< ::Primitive>&& value) {
  ::capnp::_::PointerHelpers< ::Primitive>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Primitive> Switchtran::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Udp::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Udp::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Primitive::Reader Udp::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Primitive>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Primitive::Builder Udp::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Primitive::Pipeline Udp::Pipeline::getBase() {
  return  ::Primitive::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Udp::Builder::setBase( ::Primitive::Reader value) {
  ::capnp::_::PointerHelpers< ::Primitive>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Primitive::Builder Udp::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Udp::Builder::adoptBase(
    ::capnp::Orphan< ::Primitive>&& value) {
  ::capnp::_::PointerHelpers< ::Primitive>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Primitive> Udp::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Primitive>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Udp::Reader::getUdpdefn() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udp::Builder::getUdpdefn() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Udp::Builder::setUdpdefn( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Modpath::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Modpath::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Modpath::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Modpath::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Modpath::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Modpath::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Modpath::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Modpath::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Modpath::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Modpath::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Modpath::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Modpath::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Modpath::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Modpath::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Modpath::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Modpath::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Modpath::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Modpath::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tchk::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Tchk::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Tchk::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Tchk::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Tchk::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Tchk::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Tchk::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Tchk::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Tchk::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Tchk::Reader::getModuleinst() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getModuleinst() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setModuleinst( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Tchk::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Tchk::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Tchk::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Tchk::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Tchk::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Tchk::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Tchk::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tchk::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Tchk::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tchk::Reader::hasExprtchkterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Tchk::Builder::hasExprtchkterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Tchk::Reader::getExprtchkterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Tchk::Builder::getExprtchkterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tchk::Builder::setExprtchkterms( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Tchk::Builder::initExprtchkterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Tchk::Builder::adoptExprtchkterms(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Tchk::Builder::disownExprtchkterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Tchk::Reader::getTchkrefterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getTchkrefterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setTchkrefterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getTchkdataterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getTchkdataterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setTchkdataterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getReg() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getReg() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setReg( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getVpiDelay() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getVpiDelay() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiDelay( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Tchk::Reader::getVpiTchkType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Tchk::Builder::getVpiTchkType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiTchkType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Tchk::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Tchk::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Tchk::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Tchk::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Tchk::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Tchk::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Tchk::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Tchk::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Tchk::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Range::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Range::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Range::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Range::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Range::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Range::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Range::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Range::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Range::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Range::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Range::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Range::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Range::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Range::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Range::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Range::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Range::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Range::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Range::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Range::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Range::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Range::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Range::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Range::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Range::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Range::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Range::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Range::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Range::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Range::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Udpdefn::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Udpdefn::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Udpdefn::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Udpdefn::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Udpdefn::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Udpdefn::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Udpdefn::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Udpdefn::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Udpdefn::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Udpdefn::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udpdefn::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Udpdefn::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Udpdefn::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Udpdefn::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool Udpdefn::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Udpdefn::Reader::getVpiPrimType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Udpdefn::Builder::getVpiPrimType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setVpiPrimType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Udpdefn::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Udpdefn::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Udpdefn::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Udpdefn::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Udpdefn::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Udpdefn::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Udpdefn::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Udpdefn::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Udpdefn::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Udpdefn::Reader::hasIodecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Udpdefn::Builder::hasIodecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Udpdefn::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Udpdefn::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Udpdefn::Builder::setIodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Udpdefn::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Udpdefn::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Udpdefn::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Udpdefn::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Udpdefn::Reader::hasTableentrys() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Udpdefn::Builder::hasTableentrys() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Udpdefn::Reader::getTableentrys() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Udpdefn::Builder::getTableentrys() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Udpdefn::Builder::setTableentrys( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Udpdefn::Builder::setTableentrys(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Udpdefn::Builder::initTableentrys(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Udpdefn::Builder::adoptTableentrys(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Udpdefn::Builder::disownTableentrys() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Udpdefn::Reader::getInitial() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udpdefn::Builder::getInitial() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setInitial( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Tableentry::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Tableentry::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Tableentry::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Tableentry::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Tableentry::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Tableentry::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Tableentry::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Tableentry::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Tableentry::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Tableentry::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Tableentry::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tableentry::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tableentry::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tableentry::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Tableentry::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Tableentry::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Tableentry::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Tableentry::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Tableentry::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tableentry::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Tableentry::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Tableentry::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Tableentry::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Tableentry::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Iodecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Iodecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Iodecl::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Iodecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Iodecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Iodecl::Reader::getVpiDirection() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Iodecl::Builder::getVpiDirection() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiDirection( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool Iodecl::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}

inline bool Iodecl::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Iodecl::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Iodecl::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS);
}

inline bool Iodecl::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Iodecl::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Iodecl::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Iodecl::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Iodecl::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Iodecl::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Iodecl::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Aliasstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Aliasstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Aliasstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Aliasstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Aliasstmt::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Aliasstmt::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Aliasstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Aliasstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Aliasstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Clockingblock::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Clockingblock::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Clockingblock::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Clockingblock::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Clockingblock::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Clockingblock::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Clockingblock::Reader::getVpiInputEdge() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Clockingblock::Builder::getVpiInputEdge() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiInputEdge( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Clockingblock::Reader::getVpiOutputEdge() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Clockingblock::Builder::getVpiOutputEdge() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiOutputEdge( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getInputskew() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getInputskew() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setInputskew( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getOutputskew() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getOutputskew() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setOutputskew( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getClockingevent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getClockingevent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setClockingevent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Clockingblock::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Clockingblock::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Clockingblock::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Clockingblock::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Clockingblock::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Clockingblock::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Clockingblock::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasClockingiodecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasClockingiodecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Clockingblock::Reader::getClockingiodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Clockingblock::Builder::getClockingiodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setClockingiodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setClockingiodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Clockingblock::Builder::initClockingiodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptClockingiodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Clockingblock::Builder::disownClockingiodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Clockingblock::Reader::getPrefix() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getPrefix() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setPrefix( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getActual() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getActual() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setActual( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Clockingiodecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingiodecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Clockingiodecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Clockingiodecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Clockingiodecl::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Clockingiodecl::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Clockingiodecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Clockingiodecl::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Clockingiodecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Clockingiodecl::Reader::getVpiDirection() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Clockingiodecl::Builder::getVpiDirection() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Clockingiodecl::Builder::setVpiDirection( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingiodecl::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingiodecl::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Clockingiodecl::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Clockingiodecl::Reader::getVpiInputEdge() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Clockingiodecl::Builder::getVpiInputEdge() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Clockingiodecl::Builder::setVpiInputEdge( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Clockingiodecl::Reader::getVpiOutputEdge() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Clockingiodecl::Builder::getVpiOutputEdge() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Clockingiodecl::Builder::setVpiOutputEdge( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingiodecl::Reader::getInputskew() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingiodecl::Builder::getInputskew() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Clockingiodecl::Builder::setInputskew( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingiodecl::Reader::getOutputskew() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingiodecl::Builder::getOutputskew() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Clockingiodecl::Builder::setOutputskew( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Clockingiodecl::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingiodecl::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Clockingiodecl::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Clockingiodecl::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Clockingiodecl::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Clockingiodecl::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Clockingiodecl::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Clockingiodecl::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Clockingiodecl::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Paramassign::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Paramassign::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Paramassign::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Paramassign::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Paramassign::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Paramassign::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Paramassign::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Paramassign::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Paramassign::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Paramassign::Reader::getVpiConnByName() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Paramassign::Builder::getVpiConnByName() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setVpiConnByName(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Paramassign::Reader::getVpiOverriden() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Paramassign::Builder::getVpiOverriden() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setVpiOverriden(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Paramassign::Reader::hasRhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Paramassign::Builder::hasRhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Paramassign::Reader::getRhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Paramassign::Builder::getRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Paramassign::Pipeline::getRhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Paramassign::Builder::setRhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Paramassign::Builder::initRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Paramassign::Builder::adoptRhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Paramassign::Builder::disownRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Paramassign::Reader::hasLhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Paramassign::Builder::hasLhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Paramassign::Reader::getLhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Paramassign::Builder::getLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Paramassign::Pipeline::getLhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Paramassign::Builder::setLhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Paramassign::Builder::initLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Paramassign::Builder::adoptLhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Paramassign::Builder::disownLhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Paramassign::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Paramassign::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Paramassign::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Paramassign::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Paramassign::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Paramassign::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Paramassign::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Paramassign::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Paramassign::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Instancearray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Instancearray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Instancearray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Instancearray::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Instancearray::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Instancearray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Instancearray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Instancearray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instancearray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Instancearray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Instancearray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instancearray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Instancearray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Instancearray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Instancearray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Instancearray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Instancearray::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Instancearray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Instancearray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Instancearray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Instancearray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Instancearray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Instancearray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Instancearray::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Instancearray::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instancearray::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Instancearray::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instancearray::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Instancearray::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Instancearray::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Instancearray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Instancearray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Instancearray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Instancearray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Instancearray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Instancearray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Instancearray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Instancearray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Instancearray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Instancearray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Instancearray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Instancearray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Instancearray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Instancearray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Instancearray::Reader::hasInstances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasInstances() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Instancearray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Instancearray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::setInstances( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Instancearray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Instancearray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Instancearray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Instancearray::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Instancearray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instancearray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::setModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Instancearray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instancearray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Instancearray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Instancearray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Instancearray::Reader::hasElemtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasElemtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Instancearray::Reader::getElemtypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Instancearray::Builder::getElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Instancearray::Pipeline::getElemtypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Instancearray::Builder::setElemtypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Instancearray::Builder::initElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::adoptElemtypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Instancearray::Builder::disownElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Instancearray::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Instancearray::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Instancearray::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instancearray::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Instancearray::Builder::setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Instancearray::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instancearray::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Instancearray::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Instancearray::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instancearray::Reader Interfacearray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instancearray>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instancearray::Builder Interfacearray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instancearray::Pipeline Interfacearray::Pipeline::getBase() {
  return  ::Instancearray::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Interfacearray::Builder::setBase( ::Instancearray::Reader value) {
  ::capnp::_::PointerHelpers< ::Instancearray>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instancearray::Builder Interfacearray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::adoptBase(
    ::capnp::Orphan< ::Instancearray>&& value) {
  ::capnp::_::PointerHelpers< ::Instancearray>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instancearray> Interfacearray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasParamassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasParamassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfacearray::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfacearray::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Interfacearray::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfacearray::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Interfacearray::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfacearray::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instancearray::Reader Programarray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instancearray>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instancearray::Builder Programarray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instancearray::Pipeline Programarray::Pipeline::getBase() {
  return  ::Instancearray::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Programarray::Builder::setBase( ::Instancearray::Reader value) {
  ::capnp::_::PointerHelpers< ::Instancearray>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instancearray::Builder Programarray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Programarray::Builder::adoptBase(
    ::capnp::Orphan< ::Instancearray>&& value) {
  ::capnp::_::PointerHelpers< ::Instancearray>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instancearray> Programarray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instancearray::Reader Modulearray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instancearray>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instancearray::Builder Modulearray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instancearray::Pipeline Modulearray::Pipeline::getBase() {
  return  ::Instancearray::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Modulearray::Builder::setBase( ::Instancearray::Reader value) {
  ::capnp::_::PointerHelpers< ::Instancearray>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instancearray::Builder Modulearray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::adoptBase(
    ::capnp::Orphan< ::Instancearray>&& value) {
  ::capnp::_::PointerHelpers< ::Instancearray>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instancearray> Modulearray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasParamassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasParamassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Modulearray::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Modulearray::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Modulearray::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Modulearray::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Modulearray::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Modulearray::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Primitivearray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Primitivearray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instancearray::Reader Primitivearray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instancearray>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instancearray::Builder Primitivearray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instancearray::Pipeline Primitivearray::Pipeline::getBase() {
  return  ::Instancearray::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Primitivearray::Builder::setBase( ::Instancearray::Reader value) {
  ::capnp::_::PointerHelpers< ::Instancearray>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instancearray::Builder Primitivearray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Primitivearray::Builder::adoptBase(
    ::capnp::Orphan< ::Instancearray>&& value) {
  ::capnp::_::PointerHelpers< ::Instancearray>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instancearray> Primitivearray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instancearray>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Primitivearray::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Primitivearray::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Primitivearray::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Primitivearray::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Primitivearray::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Primitivearray::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Primitivearray::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Primitivearray::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Primitivearray::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Primitivearray::Reader::hasPrimitives() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Primitivearray::Builder::hasPrimitives() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Primitivearray::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Primitivearray::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Primitivearray::Builder::setPrimitives( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Primitivearray::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Primitivearray::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Primitivearray::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Primitivearray::Reader Gatearray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Primitivearray::Builder Gatearray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Primitivearray::Pipeline Gatearray::Pipeline::getBase() {
  return  ::Primitivearray::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setBase( ::Primitivearray::Reader value) {
  ::capnp::_::PointerHelpers< ::Primitivearray>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Primitivearray::Builder Gatearray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptBase(
    ::capnp::Orphan< ::Primitivearray>&& value) {
  ::capnp::_::PointerHelpers< ::Primitivearray>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Primitivearray> Gatearray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Primitivearray::Reader Switcharray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Primitivearray::Builder Switcharray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Primitivearray::Pipeline Switcharray::Pipeline::getBase() {
  return  ::Primitivearray::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setBase( ::Primitivearray::Reader value) {
  ::capnp::_::PointerHelpers< ::Primitivearray>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Primitivearray::Builder Switcharray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptBase(
    ::capnp::Orphan< ::Primitivearray>&& value) {
  ::capnp::_::PointerHelpers< ::Primitivearray>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Primitivearray> Switcharray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Primitivearray::Reader Udparray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Primitivearray::Builder Udparray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Primitivearray::Pipeline Udparray::Pipeline::getBase() {
  return  ::Primitivearray::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setBase( ::Primitivearray::Reader value) {
  ::capnp::_::PointerHelpers< ::Primitivearray>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Primitivearray::Builder Udparray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptBase(
    ::capnp::Orphan< ::Primitivearray>&& value) {
  ::capnp::_::PointerHelpers< ::Primitivearray>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Primitivearray> Udparray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Primitivearray>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Typespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Typespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Typespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Typespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Typespec::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Typespec::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Typespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Typespec::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Typespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Typespec::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Typespec::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Typespec::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Typespec::Reader::hasTypedefalias() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Typespec::Builder::hasTypedefalias() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Typespec::Reader::getTypedefalias() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Typespec::Builder::getTypedefalias() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Typespec::Pipeline::getTypedefalias() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Typespec::Builder::setTypedefalias( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Typespec::Builder::initTypedefalias() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Typespec::Builder::adoptTypedefalias(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Typespec::Builder::disownTypedefalias() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Typespec::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Typespec::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Typespec::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Typespec::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Typespec::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Typespec::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Typespec::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Typespec::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Typespec::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Netdrivers::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Netdrivers::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Netdrivers::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Netdrivers::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Netdrivers::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Netdrivers::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Netdrivers::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Netdrivers::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Netdrivers::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Netloads::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Netloads::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Netloads::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Netloads::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Netloads::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Netloads::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Netloads::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Netloads::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Netloads::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Primterm::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Primterm::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Primterm::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Primterm::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Primterm::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Primterm::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Primterm::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Primterm::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Primterm::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Primterm::Reader::getVpiDirection() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Primterm::Builder::getVpiDirection() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Primterm::Builder::setVpiDirection( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Primterm::Reader::getVpiTermIndex() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Primterm::Builder::getVpiTermIndex() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Primterm::Builder::setVpiTermIndex( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primterm::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primterm::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Primterm::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Primterm::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Primterm::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Primterm::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Primterm::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Primterm::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Primterm::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Primterm::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Primterm::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Primterm::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Primterm::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Primterm::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Primterm::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Primterm::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Primterm::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Primterm::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Primterm::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Primterm::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Primterm::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Pathterm::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Pathterm::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Pathterm::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Pathterm::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Pathterm::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Pathterm::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Pathterm::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Pathterm::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Pathterm::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Pathterm::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Pathterm::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Pathterm::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Pathterm::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Pathterm::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Pathterm::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Pathterm::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Pathterm::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Pathterm::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tchkterm::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Tchkterm::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Tchkterm::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Tchkterm::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Tchkterm::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Tchkterm::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Tchkterm::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Tchkterm::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Tchkterm::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Tchkterm::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Tchkterm::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Tchkterm::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Tchkterm::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Tchkterm::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Tchkterm::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Tchkterm::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tchkterm::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Tchkterm::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tchkterm::Reader::hasCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Tchkterm::Builder::hasCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Tchkterm::Reader::getCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Tchkterm::Builder::getCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Tchkterm::Pipeline::getCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Tchkterm::Builder::setCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Tchkterm::Builder::initCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tchkterm::Builder::adoptCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Tchkterm::Builder::disownCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int64_t Tchkterm::Reader::getVpiEdge() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Tchkterm::Builder::getVpiEdge() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tchkterm::Builder::setVpiEdge( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Simpleexpr::Reader Nets::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Simpleexpr::Builder Nets::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Simpleexpr::Pipeline Nets::Pipeline::getBase() {
  return  ::Simpleexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Nets::Builder::setBase( ::Simpleexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Simpleexpr::Builder Nets::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Nets::Builder::adoptBase(
    ::capnp::Orphan< ::Simpleexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Simpleexpr> Nets::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Nets::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Nets::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Nets::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Nets::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Nets::Reader::getVpiNetType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Nets::Builder::getVpiNetType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Nets::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Nets::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiResolvedNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Nets::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Nets::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Nets::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Nets::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Nets::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Nets::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool Nets::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Nets::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Nets::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setPorts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Nets::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Nets::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setDrivers( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Nets::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Nets::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setLoads( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Nets::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Nets::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Nets::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Nets::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setLocalloads( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Nets::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Nets::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Nets::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Nets::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setPrimterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Nets::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Nets::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Nets::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Nets::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Nets::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Nets::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Nets::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Nets::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasPathterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasPathterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Nets::Reader::getPathterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Nets::Builder::getPathterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setPathterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Nets::Builder::setPathterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Nets::Builder::initPathterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptPathterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Nets::Builder::disownPathterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasTchkterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasTchkterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Nets::Reader::getTchkterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Nets::Builder::getTchkterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Nets::Builder::setTchkterms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Nets::Builder::setTchkterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Nets::Builder::initTchkterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Nets::Builder::adoptTchkterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Nets::Builder::disownTchkterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Nets::Reader::hasSimnet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Nets::Builder::hasSimnet() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Nets::Reader::getSimnet() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Nets::Builder::getSimnet() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Nets::Pipeline::getSimnet() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void Nets::Builder::setSimnet( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Nets::Builder::initSimnet() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Nets::Builder::adoptSimnet(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Nets::Builder::disownSimnet() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline  ::uint64_t Nets::Reader::getModuleinst() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Nets::Builder::getModuleinst() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Nets::Builder::setModuleinst( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Nets::Reader Netbit::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Nets>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Nets::Builder Netbit::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Nets::Pipeline Netbit::Pipeline::getBase() {
  return  ::Nets::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Netbit::Builder::setBase( ::Nets::Reader value) {
  ::capnp::_::PointerHelpers< ::Nets>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Nets::Builder Netbit::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::adoptBase(
    ::capnp::Orphan< ::Nets>&& value) {
  ::capnp::_::PointerHelpers< ::Nets>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Nets> Netbit::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasExprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasExprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Netbit::Reader::getExprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Netbit::Builder::getExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Netbit::Builder::initExprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptExprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Netbit::Builder::disownExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Net::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Net::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Nets::Reader Net::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Nets>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Nets::Builder Net::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Nets::Pipeline Net::Pipeline::getBase() {
  return  ::Nets::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Net::Builder::setBase( ::Nets::Reader value) {
  ::capnp::_::PointerHelpers< ::Nets>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Nets::Builder Net::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Net::Builder::adoptBase(
    ::capnp::Orphan< ::Nets>&& value) {
  ::capnp::_::PointerHelpers< ::Nets>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Nets> Net::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Net::Reader::hasNetbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Net::Builder::hasNetbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Net::Reader::getNetbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Net::Builder::getNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Net::Builder::setNetbits( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Net::Builder::setNetbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Net::Builder::initNetbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Net::Builder::adoptNetbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Net::Builder::disownNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Net::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Net::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Net::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Net::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Net::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Net::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Net::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Net::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Net::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Net::Reader::hasExprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Net::Builder::hasExprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Net::Reader::getExprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Net::Builder::getExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Net::Builder::setExprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Net::Builder::initExprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Net::Builder::adoptExprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Net::Builder::disownExprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Net::Reader Structnet::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Net>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Net::Builder Structnet::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Net>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Net::Pipeline Structnet::Pipeline::getBase() {
  return  ::Net::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Structnet::Builder::setBase( ::Net::Reader value) {
  ::capnp::_::PointerHelpers< ::Net>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Net::Builder Structnet::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Net>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::adoptBase(
    ::capnp::Orphan< ::Net>&& value) {
  ::capnp::_::PointerHelpers< ::Net>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Net> Structnet::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Net>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::hasNets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasNets() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Structnet::Reader::getNets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Structnet::Builder::getNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setNets( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Structnet::Builder::initNets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptNets(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Structnet::Builder::disownNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Net::Reader Enumnet::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Net>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Net::Builder Enumnet::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Net>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Net::Pipeline Enumnet::Pipeline::getBase() {
  return  ::Net::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Enumnet::Builder::setBase( ::Net::Reader value) {
  ::capnp::_::PointerHelpers< ::Net>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Net::Builder Enumnet::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Net>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::adoptBase(
    ::capnp::Orphan< ::Net>&& value) {
  ::capnp::_::PointerHelpers< ::Net>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Net> Enumnet::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Net>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Net::Reader Integernet::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Net>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Net::Builder Integernet::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Net>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Net::Pipeline Integernet::Pipeline::getBase() {
  return  ::Net::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Integernet::Builder::setBase( ::Net::Reader value) {
  ::capnp::_::PointerHelpers< ::Net>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Net::Builder Integernet::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Net>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::adoptBase(
    ::capnp::Orphan< ::Net>&& value) {
  ::capnp::_::PointerHelpers< ::Net>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Net> Integernet::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Net>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Net::Reader Timenet::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Net>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Net::Builder Timenet::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Net>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Net::Pipeline Timenet::Pipeline::getBase() {
  return  ::Net::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Timenet::Builder::setBase( ::Net::Reader value) {
  ::capnp::_::PointerHelpers< ::Net>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Net::Builder Timenet::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Net>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::adoptBase(
    ::capnp::Orphan< ::Net>&& value) {
  ::capnp::_::PointerHelpers< ::Net>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Net> Timenet::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Net>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Net::Reader Logicnet::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Net>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Net::Builder Logicnet::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Net>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Net::Pipeline Logicnet::Pipeline::getBase() {
  return  ::Net::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Logicnet::Builder::setBase( ::Net::Reader value) {
  ::capnp::_::PointerHelpers< ::Net>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Net::Builder Logicnet::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Net>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::adoptBase(
    ::capnp::Orphan< ::Net>&& value) {
  ::capnp::_::PointerHelpers< ::Net>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Net> Logicnet::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Net>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicnet::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicnet::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicnet::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Logicnet::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicnet::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicnet::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicnet::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicnet::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicnet::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Logicnet::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicnet::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicnet::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Logicnet::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Logicnet::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Logicnet::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Logicnet::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Logicnet::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Nets::Reader Arraynet::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Nets>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Nets::Builder Arraynet::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Nets::Pipeline Arraynet::Pipeline::getBase() {
  return  ::Nets::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Arraynet::Builder::setBase( ::Nets::Reader value) {
  ::capnp::_::PointerHelpers< ::Nets>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Nets::Builder Arraynet::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::adoptBase(
    ::capnp::Orphan< ::Nets>&& value) {
  ::capnp::_::PointerHelpers< ::Nets>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Nets> Arraynet::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Nets>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Arraynet::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arraynet::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Arraynet::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arraynet::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Arraynet::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasNets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasNets() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Arraynet::Reader::getNets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Arraynet::Builder::getNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setNets( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Arraynet::Builder::initNets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptNets(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Arraynet::Builder::disownNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Arraynet::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arraynet::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Arraynet::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arraynet::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Arraynet::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Net::Reader Packedarraynet::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Net>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Net::Builder Packedarraynet::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Net>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Net::Pipeline Packedarraynet::Pipeline::getBase() {
  return  ::Net::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Packedarraynet::Builder::setBase( ::Net::Reader value) {
  ::capnp::_::PointerHelpers< ::Net>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Net::Builder Packedarraynet::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Net>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::adoptBase(
    ::capnp::Orphan< ::Net>&& value) {
  ::capnp::_::PointerHelpers< ::Net>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Net> Packedarraynet::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Net>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraynet::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraynet::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Packedarraynet::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraynet::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraynet::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraynet::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Packedarraynet::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraynet::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Packedarraynet::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Packedarraynet::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Packedarraynet::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Packedarraynet::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Packedarraynet::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasElements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasElements() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Packedarraynet::Reader::getElements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Packedarraynet::Builder::getElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setElements( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Packedarraynet::Builder::initElements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptElements(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Packedarraynet::Builder::disownElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Eventtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Eventtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Eventtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Eventtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Eventtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Eventtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Eventtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Eventtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Eventtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Namedevent::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Namedevent::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Namedevent::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Namedevent::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Namedevent::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Namedevent::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Namedevent::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Namedevent::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Namedevent::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Namedevent::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Namedevent::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedevent::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedevent::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Namedevent::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Namedevent::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Namedevent::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Namedevent::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Namedevent::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Namedevent::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Namedevent::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Namedevent::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Namedevent::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Namedevent::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Namedevent::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Namedevent::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Namedevent::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Namedevent::Reader::getEventtypespec() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getEventtypespec() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setEventtypespec( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Namedevent::Reader::hasThreads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Namedevent::Builder::hasThreads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Namedevent::Reader::getThreads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Namedevent::Builder::getThreads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Namedevent::Builder::setThreads( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Namedevent::Builder::setThreads(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Namedevent::Builder::initThreads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Namedevent::Builder::adoptThreads(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Namedevent::Builder::disownThreads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Namedevent::Reader::getVpiEndLabel() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getVpiEndLabel() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiEndLabel( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Namedeventarray::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Namedeventarray::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Namedeventarray::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Namedeventarray::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Namedeventarray::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Namedeventarray::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Namedeventarray::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Namedeventarray::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Namedeventarray::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Parameter::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Parameter::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Simpleexpr::Reader Parameter::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Simpleexpr::Builder Parameter::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Simpleexpr::Pipeline Parameter::Pipeline::getBase() {
  return  ::Simpleexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Parameter::Builder::setBase( ::Simpleexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Simpleexpr::Builder Parameter::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Parameter::Builder::adoptBase(
    ::capnp::Orphan< ::Simpleexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Simpleexpr> Parameter::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Parameter::Reader::getVpiConstType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Parameter::Builder::getVpiConstType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Parameter::Builder::setVpiConstType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Parameter::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Parameter::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Parameter::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Parameter::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Parameter::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Parameter::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Parameter::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Parameter::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Parameter::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Parameter::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Parameter::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Parameter::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Parameter::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Parameter::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Parameter::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Parameter::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Parameter::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Parameter::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Parameter::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Parameter::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Parameter::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Parameter::Reader::hasLeftrange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Parameter::Builder::hasLeftrange() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Parameter::Reader::getLeftrange() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Parameter::Builder::getLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Parameter::Pipeline::getLeftrange() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Parameter::Builder::setLeftrange( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Parameter::Builder::initLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Parameter::Builder::adoptLeftrange(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Parameter::Builder::disownLeftrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Parameter::Reader::hasRightrange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Parameter::Builder::hasRightrange() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Parameter::Reader::getRightrange() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Parameter::Builder::getRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Parameter::Pipeline::getRightrange() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Parameter::Builder::setRightrange( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Parameter::Builder::initRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Parameter::Builder::adoptRightrange(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Parameter::Builder::disownRightrange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Parameter::Reader::getVpiLocalParam() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool Parameter::Builder::getVpiLocalParam() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void Parameter::Builder::setVpiLocalParam(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Parameter::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Parameter::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Parameter::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Parameter::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Parameter::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Parameter::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Parameter::Reader::getVpiImported() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Parameter::Builder::getVpiImported() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Parameter::Builder::setVpiImported( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Defparam::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Defparam::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Defparam::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Defparam::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Defparam::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Defparam::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Defparam::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Defparam::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Defparam::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Defparam::Reader::hasRhs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Defparam::Builder::hasRhs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Defparam::Reader::getRhs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Defparam::Builder::getRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Defparam::Pipeline::getRhs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Defparam::Builder::setRhs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Defparam::Builder::initRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Defparam::Builder::adoptRhs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Defparam::Builder::disownRhs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Defparam::Reader::getLhs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getLhs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setLhs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Specparam::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Specparam::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Simpleexpr::Reader Specparam::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Simpleexpr::Builder Specparam::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Simpleexpr::Pipeline Specparam::Pipeline::getBase() {
  return  ::Simpleexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Specparam::Builder::setBase( ::Simpleexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Simpleexpr::Builder Specparam::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Specparam::Builder::adoptBase(
    ::capnp::Orphan< ::Simpleexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Simpleexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Simpleexpr> Specparam::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Simpleexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Specparam::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Specparam::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Specparam::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Specparam::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Specparam::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Specparam::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Specparam::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Specparam::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Specparam::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Classtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Classtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Classtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Classtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Classtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Classtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Classtypespec::Reader::getVpiClassType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Classtypespec::Builder::getVpiClassType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setVpiClassType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Classtypespec::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Classtypespec::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classtypespec::Reader::getExtends() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classtypespec::Builder::getExtends() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setExtends( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Classtypespec::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Classtypespec::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classtypespec::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setVariables( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classtypespec::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Classtypespec::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasTaskfuncs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasTaskfuncs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Classtypespec::Reader::getTaskfuncs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classtypespec::Builder::getTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classtypespec::Builder::initTaskfuncs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptTaskfuncs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Classtypespec::Builder::disownTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasConstraints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasConstraints() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classtypespec::Reader::getConstraints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::getConstraints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setConstraints( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setConstraints(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::initConstraints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptConstraints(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classtypespec::Builder::disownConstraints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Classtypespec::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classtypespec::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setParameters( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classtypespec::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Classtypespec::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasParamassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasParamassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classtypespec::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classtypespec::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classtypespec::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classtypespec::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classtypespec::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setNamedevents( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classtypespec::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classtypespec::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classtypespec::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classtypespec::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Classtypespec::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classtypespec::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setScopes( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classtypespec::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Classtypespec::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Classtypespec::Reader::getClassdefn() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classtypespec::Builder::getClassdefn() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setClassdefn( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Extends::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Extends::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Extends::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Extends::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Extends::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Extends::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Extends::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Extends::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Extends::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Extends::Reader::getClasstypespec() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Extends::Builder::getClasstypespec() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Extends::Builder::setClasstypespec( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Extends::Reader::hasArguments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Extends::Builder::hasArguments() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Extends::Reader::getArguments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Extends::Builder::getArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Extends::Builder::setArguments( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Extends::Builder::initArguments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Extends::Builder::adoptArguments(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Extends::Builder::disownArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Classdefn::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Classdefn::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Classdefn::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Classdefn::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Classdefn::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Classdefn::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::getVpiVirtual() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Classdefn::Builder::getVpiVirtual() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiVirtual(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Classdefn::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Classdefn::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getExtends() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getExtends() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setExtends( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Classdefn::Reader::hasTaskfuncs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasTaskfuncs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Classdefn::Reader::getTaskfuncs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classdefn::Builder::getTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classdefn::Builder::initTaskfuncs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptTaskfuncs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Classdefn::Builder::disownTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasConstraints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasConstraints() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classdefn::Reader::getConstraints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classdefn::Builder::getConstraints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setConstraints( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setConstraints(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classdefn::Builder::initConstraints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptConstraints(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classdefn::Builder::disownConstraints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasDeriveds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasDeriveds() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classdefn::Reader::getDeriveds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classdefn::Builder::getDeriveds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setDeriveds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setDeriveds(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classdefn::Builder::initDeriveds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptDeriveds(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classdefn::Builder::disownDeriveds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasClasstypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasClasstypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classdefn::Reader::getClasstypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classdefn::Builder::getClasstypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setClasstypespecs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setClasstypespecs(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classdefn::Builder::initClasstypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptClasstypespecs(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classdefn::Builder::disownClasstypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t Classdefn::Reader::getVpiEndLabel() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getVpiEndLabel() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiEndLabel( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Classobj::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Classobj::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Classobj::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Classobj::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Classobj::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Classobj::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Classobj::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Classobj::Reader::getVpiObjId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Classobj::Builder::getVpiObjId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Classobj::Builder::setVpiObjId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classobj::Reader::getClasstypespec() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classobj::Builder::getClasstypespec() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Classobj::Builder::setClasstypespec( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Classobj::Reader::hasThreads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasThreads() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classobj::Reader::getThreads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classobj::Builder::getThreads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setThreads( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setThreads(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classobj::Builder::initThreads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptThreads(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classobj::Builder::disownThreads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasMessages() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasMessages() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Classobj::Reader::getMessages() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classobj::Builder::getMessages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setMessages( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classobj::Builder::initMessages(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptMessages(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Classobj::Builder::disownMessages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasTaskfuncs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasTaskfuncs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Classobj::Reader::getTaskfuncs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classobj::Builder::getTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Classobj::Builder::initTaskfuncs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptTaskfuncs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Classobj::Builder::disownTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasConstraints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasConstraints() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Classobj::Reader::getConstraints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classobj::Builder::getConstraints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setConstraints( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setConstraints(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Classobj::Builder::initConstraints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptConstraints(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Classobj::Builder::disownConstraints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Variables::Reader Classvar::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Variables::Builder Classvar::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Variables::Pipeline Classvar::Pipeline::getBase() {
  return  ::Variables::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Classvar::Builder::setBase( ::Variables::Reader value) {
  ::capnp::_::PointerHelpers< ::Variables>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Variables::Builder Classvar::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::adoptBase(
    ::capnp::Orphan< ::Variables>&& value) {
  ::capnp::_::PointerHelpers< ::Variables>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Variables> Classvar::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Variables>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Classvar::Reader::getVpiObjId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Classvar::Builder::getVpiObjId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiObjId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classvar::Reader::getClassobj() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getClassobj() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setClassobj( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Instance::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Scope::Reader Instance::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Scope::Builder Instance::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Scope::Pipeline Instance::Pipeline::getBase() {
  return  ::Scope::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Instance::Builder::setBase( ::Scope::Reader value) {
  ::capnp::_::PointerHelpers< ::Scope>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Scope::Builder Instance::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Instance::Builder::adoptBase(
    ::capnp::Orphan< ::Scope>&& value) {
  ::capnp::_::PointerHelpers< ::Scope>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Scope> Instance::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Scope>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Instance::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instance::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Instance::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Instance::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Instance::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool Instance::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Instance::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Instance::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Instance::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instance::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Instance::Reader::getVpiDefLineNo() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Instance::Builder::getVpiDefLineNo() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiDefLineNo( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Instance::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Instance::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Instance::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool Instance::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Instance::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Instance::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Instance::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Instance::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Instance::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Instance::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Instance::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instance::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Instance::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instance::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Instance::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instance::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Instance::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool Instance::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool Instance::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool Instance::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline bool Instance::Reader::hasPrograms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasPrograms() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Instance::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Instance::Builder::setPrograms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Instance::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Instance::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Instance::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Instance::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasProgramarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Instance::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Instance::Builder::setProgramarrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Instance::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Instance::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Instance::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Instance::Reader::hasClassdefns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasClassdefns() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Instance::Reader::getClassdefns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::getClassdefns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Instance::Builder::setClassdefns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Instance::Builder::setClassdefns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::initClassdefns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Instance::Builder::adoptClassdefns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Instance::Builder::disownClassdefns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Instance::Reader::hasTaskfuncs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasTaskfuncs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Instance::Reader::getTaskfuncs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Instance::Builder::getTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Instance::Builder::setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Instance::Builder::initTaskfuncs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Instance::Builder::adoptTaskfuncs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Instance::Builder::disownTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Instance::Reader::hasNets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasNets() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Instance::Reader::getNets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Instance::Builder::getNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Instance::Builder::setNets( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Instance::Builder::initNets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Instance::Builder::adoptNets(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Instance::Builder::disownNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Instance::Reader::hasArraynets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasArraynets() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Instance::Reader::getArraynets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::getArraynets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Instance::Builder::setArraynets( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Instance::Builder::setArraynets(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::initArraynets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Instance::Builder::adoptArraynets(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Instance::Builder::disownArraynets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Instance::Reader::hasSpecparams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasSpecparams() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Instance::Reader::getSpecparams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::getSpecparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Instance::Builder::setSpecparams( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Instance::Builder::setSpecparams(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Instance::Builder::initSpecparams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Instance::Builder::adoptSpecparams(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Instance::Builder::disownSpecparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Instance::Reader::hasAssertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasAssertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Instance::Reader::getAssertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Instance::Builder::getAssertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Instance::Builder::setAssertions( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Instance::Builder::initAssertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Instance::Builder::adoptAssertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Instance::Builder::disownAssertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline  ::uint64_t Instance::Reader::getModuleinst() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instance::Builder::getModuleinst() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Instance::Builder::setModuleinst( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool Instance::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Instance::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Instance::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Instance::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Instance::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Instance::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Instance::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Instance::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Instance::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instance::Reader Interfaceinst::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instance::Builder Interfaceinst::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instance::Pipeline Interfaceinst::Pipeline::getBase() {
  return  ::Instance::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Interfaceinst::Builder::setBase( ::Instance::Reader value) {
  ::capnp::_::PointerHelpers< ::Instance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instance::Builder Interfaceinst::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::adoptBase(
    ::capnp::Orphan< ::Instance>&& value) {
  ::capnp::_::PointerHelpers< ::Instance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instance> Interfaceinst::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Interfaceinst::Reader::getVpiIndex() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Interfaceinst::Builder::getVpiIndex() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Interfaceinst::Builder::setVpiIndex( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Interfaceinst::Reader::hasInterfacetfdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasInterfacetfdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getInterfacetfdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getInterfacetfdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setInterfacetfdecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setInterfacetfdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initInterfacetfdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptInterfacetfdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownInterfacetfdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasModports() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasModports() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getModports() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getModports() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setModports( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setModports(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initModports(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptModports(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownModports() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interfaceinst::Reader::getGlobalclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfaceinst::Builder::getGlobalclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Interfaceinst::Builder::setGlobalclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfaceinst::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfaceinst::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Interfaceinst::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Interfaceinst::Reader::hasExprdist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasExprdist() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interfaceinst::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interfaceinst::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interfaceinst::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Interfaceinst::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interfaceinst::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interfaceinst::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasInstancearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasInstancearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interfaceinst::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interfaceinst::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interfaceinst::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Interfaceinst::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interfaceinst::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interfaceinst::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasModpaths() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasModpaths() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getModpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setModpaths( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setModpaths(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initModpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptModpaths(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasClockingblocks() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setClockingblocks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasInterfaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasInterfaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setInterfacearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Interfaceinst::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Interfaceinst::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Interfaceinst::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Interfaceinst::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasGenscopearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasGenscopearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfaceinst::Reader::getGenscopearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::getGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Interfaceinst::Builder::setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfaceinst::Builder::initGenscopearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptGenscopearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfaceinst::Builder::disownGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasElabtasks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasElabtasks() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Interfaceinst::Reader::getElabtasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Interfaceinst::Builder::getElabtasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setElabtasks( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Interfaceinst::Builder::initElabtasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptElabtasks(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Interfaceinst::Builder::disownElabtasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Interfaceinst::Reader::hasGenstmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Interfaceinst::Builder::hasGenstmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Interfaceinst::Reader::getGenstmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Interfaceinst::Builder::getGenstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Interfaceinst::Builder::setGenstmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Interfaceinst::Builder::initGenstmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Interfaceinst::Builder::adoptGenstmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Interfaceinst::Builder::disownGenstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interfaceinst::Reader::getVpiEndLabel() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfaceinst::Builder::getVpiEndLabel() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Interfaceinst::Builder::setVpiEndLabel( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instance::Reader Program::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instance::Builder Program::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instance::Pipeline Program::Pipeline::getBase() {
  return  ::Instance::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setBase( ::Instance::Reader value) {
  ::capnp::_::PointerHelpers< ::Instance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instance::Builder Program::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Program::Builder::adoptBase(
    ::capnp::Orphan< ::Instance>&& value) {
  ::capnp::_::PointerHelpers< ::Instance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instance> Program::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Program::Reader::getVpiIndex() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiIndex() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiIndex( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasInstancearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInstancearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Program::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Program::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Program::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Program::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Program::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Program::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasInterfaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInterfaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Program::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Program::Builder::setInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Program::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasExprdist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasExprdist() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Program::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Program::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Program::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Program::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Program::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Program::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Program::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Program::Builder::setInterfacearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Program::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Program::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Program::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Program::Builder::setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Program::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Program::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Program::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Program::Builder::setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Program::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasClockingblocks() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Program::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Program::Builder::setClockingblocks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Program::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Program::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Program::Builder::setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Program::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasGenscopearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasGenscopearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Program::Reader::getGenscopearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::getGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Program::Builder::setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Program::Builder::initGenscopearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptGenscopearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Program::Builder::disownGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getVpiEndLabel() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiEndLabel() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiEndLabel( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instance::Reader Package::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instance::Builder Package::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instance::Pipeline Package::Pipeline::getBase() {
  return  ::Instance::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Package::Builder::setBase( ::Instance::Reader value) {
  ::capnp::_::PointerHelpers< ::Instance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instance::Builder Package::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Package::Builder::adoptBase(
    ::capnp::Orphan< ::Instance>&& value) {
  ::capnp::_::PointerHelpers< ::Instance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instance> Package::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Package::Reader::getVpiUnit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiUnit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiUnit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiEndLabel() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiEndLabel() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiEndLabel( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Moduleinst::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instance::Reader Moduleinst::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instance::Builder Moduleinst::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instance::Pipeline Moduleinst::Pipeline::getBase() {
  return  ::Instance::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Moduleinst::Builder::setBase( ::Instance::Reader value) {
  ::capnp::_::PointerHelpers< ::Instance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instance::Builder Moduleinst::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::adoptBase(
    ::capnp::Orphan< ::Instance>&& value) {
  ::capnp::_::PointerHelpers< ::Instance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instance> Moduleinst::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Moduleinst::Reader::getVpiIndex() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Moduleinst::Builder::getVpiIndex() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Moduleinst::Builder::setVpiIndex( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Moduleinst::Reader::getVpiTopModule() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Moduleinst::Builder::getVpiTopModule() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Moduleinst::Builder::setVpiTopModule(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Moduleinst::Reader::getVpiDefDecayTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Moduleinst::Builder::getVpiDefDecayTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Moduleinst::Builder::setVpiDefDecayTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Moduleinst::Reader::getGlobalclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Moduleinst::Builder::getGlobalclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Moduleinst::Builder::setGlobalclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Moduleinst::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Moduleinst::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Moduleinst::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Moduleinst::Reader::hasExprdist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasExprdist() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Moduleinst::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Moduleinst::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Moduleinst::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Moduleinst::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Moduleinst::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Moduleinst::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Moduleinst::Reader::getModulearray() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Moduleinst::Builder::getModulearray() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Moduleinst::Builder::setModulearray( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Moduleinst::Reader::hasInstancearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasInstancearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Moduleinst::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Moduleinst::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Moduleinst::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Moduleinst::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Moduleinst::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Moduleinst::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasInterfaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasInterfaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setInterfacearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Moduleinst::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Moduleinst::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasModulearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasModulearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getModulearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setModulearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initModulearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptModulearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasGenscopearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasGenscopearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getGenscopearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setGenscopearrays( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setGenscopearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initGenscopearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptGenscopearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownGenscopearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasPrimitives() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasPrimitives() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Moduleinst::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setPrimitives( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Moduleinst::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasPrimitivearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasPrimitivearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Moduleinst::Reader::getPrimitivearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::getPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setPrimitivearrays( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::initPrimitivearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptPrimitivearrays(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Moduleinst::Builder::disownPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasModpaths() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasModpaths() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getModpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setModpaths( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setModpaths(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initModpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptModpaths(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasTchks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasTchks() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getTchks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getTchks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setTchks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setTchks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initTchks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptTchks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownTchks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasDefparams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasDefparams() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getDefparams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setDefparams( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setDefparams(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initDefparams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptDefparams(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasIodecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasIodecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setIodecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasAliasstmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasAliasstmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getAliasstmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setAliasstmts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initAliasstmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptAliasstmts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasClockingblocks() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setClockingblocks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasElabtasks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasElabtasks() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Moduleinst::Reader::getElabtasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::getElabtasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setElabtasks( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::initElabtasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptElabtasks(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Moduleinst::Builder::disownElabtasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasRefmodules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasRefmodules() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Moduleinst::Reader::getRefmodules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::getRefmodules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setRefmodules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline void Moduleinst::Builder::setRefmodules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Moduleinst::Builder::initRefmodules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptRefmodules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Moduleinst::Builder::disownRefmodules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool Moduleinst::Reader::hasGenstmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool Moduleinst::Builder::hasGenstmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Moduleinst::Reader::getGenstmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::getGenstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void Moduleinst::Builder::setGenstmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Moduleinst::Builder::initGenstmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), size);
}
inline void Moduleinst::Builder::adoptGenstmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Moduleinst::Builder::disownGenstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline  ::uint64_t Moduleinst::Reader::getVpiEndLabel() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Moduleinst::Builder::getVpiEndLabel() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Moduleinst::Builder::setVpiEndLabel( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Checkerdecl::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerdecl::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instance::Reader Checkerdecl::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instance::Builder Checkerdecl::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instance::Pipeline Checkerdecl::Pipeline::getBase() {
  return  ::Instance::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Checkerdecl::Builder::setBase( ::Instance::Reader value) {
  ::capnp::_::PointerHelpers< ::Instance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instance::Builder Checkerdecl::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Checkerdecl::Builder::adoptBase(
    ::capnp::Orphan< ::Instance>&& value) {
  ::capnp::_::PointerHelpers< ::Instance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instance> Checkerdecl::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Checkerdecl::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Checkerdecl::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Checkerdecl::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Checkerdecl::Reader::hasProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerdecl::Builder::hasProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Checkerdecl::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Checkerdecl::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Checkerdecl::Builder::setProcess( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Checkerdecl::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Checkerdecl::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Checkerdecl::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Checkerdecl::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerdecl::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Checkerdecl::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Checkerdecl::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Checkerdecl::Builder::setContassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Checkerdecl::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Checkerdecl::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Checkerdecl::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Checkerdecl::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Checkerdecl::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerdecl::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Checkerdecl::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Checkerdecl::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Checkerdecl::Builder::setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Checkerdecl::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Checkerdecl::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Checkerdecl::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Checkerdecl::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Checkerinst::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerinst::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Instance::Reader Checkerinst::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Instance::Builder Checkerinst::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Instance::Pipeline Checkerinst::Pipeline::getBase() {
  return  ::Instance::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Checkerinst::Builder::setBase( ::Instance::Reader value) {
  ::capnp::_::PointerHelpers< ::Instance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Instance::Builder Checkerinst::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Checkerinst::Builder::adoptBase(
    ::capnp::Orphan< ::Instance>&& value) {
  ::capnp::_::PointerHelpers< ::Instance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Instance> Checkerinst::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Instance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Checkerinst::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Checkerinst::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Checkerinst::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Checkerinst::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Checkerinst::Builder::setPorts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Checkerinst::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Checkerinst::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Checkerinst::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Checkerinst::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Shortrealtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Shortrealtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Shortrealtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Shortrealtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Shortrealtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Shortrealtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Shortrealtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Shortrealtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Shortrealtypespec::Reader::getResolutionfunc() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealtypespec::Builder::getResolutionfunc() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Shortrealtypespec::Builder::setResolutionfunc( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Realtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Realtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Realtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Realtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Realtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Realtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Realtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Realtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Realtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Realtypespec::Reader::getResolutionfunc() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realtypespec::Builder::getResolutionfunc() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Realtypespec::Builder::setResolutionfunc( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Bytetypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bytetypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Bytetypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Bytetypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Bytetypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Bytetypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Bytetypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bytetypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Bytetypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bytetypespec::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Bytetypespec::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bytetypespec::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Shortinttypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Shortinttypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Shortinttypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Shortinttypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Shortinttypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Shortinttypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Shortinttypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Shortinttypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Shortinttypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Shortinttypespec::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Shortinttypespec::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Shortinttypespec::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Inttypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Inttypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Inttypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Inttypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Inttypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Inttypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Inttypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Inttypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Inttypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Inttypespec::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Inttypespec::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Inttypespec::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Inttypespec::Reader::hasCasttoexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Inttypespec::Builder::hasCasttoexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Inttypespec::Reader::getCasttoexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Inttypespec::Builder::getCasttoexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Inttypespec::Pipeline::getCasttoexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Inttypespec::Builder::setCasttoexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Inttypespec::Builder::initCasttoexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Inttypespec::Builder::adoptCasttoexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Inttypespec::Builder::disownCasttoexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Inttypespec::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Inttypespec::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Inttypespec::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Inttypespec::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Inttypespec::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Inttypespec::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Inttypespec::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Inttypespec::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Inttypespec::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Inttypespec::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Inttypespec::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Inttypespec::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Longinttypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Longinttypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Longinttypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Longinttypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Longinttypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Longinttypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Longinttypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Longinttypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Longinttypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Longinttypespec::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Longinttypespec::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Longinttypespec::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Integertypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Integertypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Integertypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Integertypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Integertypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Integertypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Integertypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Integertypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Integertypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Integertypespec::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integertypespec::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Integertypespec::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Integertypespec::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Integertypespec::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Integertypespec::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Integertypespec::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Integertypespec::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Integertypespec::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Integertypespec::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Integertypespec::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Integertypespec::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Integertypespec::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Integertypespec::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Integertypespec::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Timetypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Timetypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Timetypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Timetypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Timetypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Timetypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Timetypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Timetypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Timetypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Timetypespec::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Timetypespec::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Timetypespec::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Enumtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Enumtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Enumtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Enumtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Enumtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Enumtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Enumtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Enumtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Enumtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Enumtypespec::Reader::hasBasetypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Enumtypespec::Builder::hasBasetypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumtypespec::Reader::getBasetypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumtypespec::Builder::getBasetypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumtypespec::Pipeline::getBasetypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Enumtypespec::Builder::setBasetypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumtypespec::Builder::initBasetypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Enumtypespec::Builder::adoptBasetypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumtypespec::Builder::disownBasetypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Enumtypespec::Reader::hasEnumconsts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Enumtypespec::Builder::hasEnumconsts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Enumtypespec::Reader::getEnumconsts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Enumtypespec::Builder::getEnumconsts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Enumtypespec::Builder::setEnumconsts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Enumtypespec::Builder::setEnumconsts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Enumtypespec::Builder::initEnumconsts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Enumtypespec::Builder::adoptEnumconsts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Enumtypespec::Builder::disownEnumconsts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Stringtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Stringtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Stringtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Stringtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Stringtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Stringtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Stringtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Stringtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Stringtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Chandletypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Chandletypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Chandletypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Chandletypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Chandletypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Chandletypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Chandletypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Chandletypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Chandletypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Moduletypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Moduletypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Moduletypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Moduletypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Moduletypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Moduletypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Moduletypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Moduletypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Moduletypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Structtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Structtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Structtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Structtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Structtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Structtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Structtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Structtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Structtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Structtypespec::Reader::getVpiPacked() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Structtypespec::Builder::getVpiPacked() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Structtypespec::Builder::setVpiPacked(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Structtypespec::Reader::hasMembers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Structtypespec::Builder::hasMembers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Structtypespec::Reader::getMembers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Structtypespec::Builder::getMembers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Structtypespec::Builder::setMembers( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Structtypespec::Builder::setMembers(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Structtypespec::Builder::initMembers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Structtypespec::Builder::adoptMembers(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Structtypespec::Builder::disownMembers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Structtypespec::Reader::getResolutionfunc() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structtypespec::Builder::getResolutionfunc() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Structtypespec::Builder::setResolutionfunc( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Uniontypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Uniontypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Uniontypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Uniontypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Uniontypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Uniontypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Uniontypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Uniontypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Uniontypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Uniontypespec::Reader::getVpiPacked() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Uniontypespec::Builder::getVpiPacked() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Uniontypespec::Builder::setVpiPacked(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Uniontypespec::Reader::getVpiTagged() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Uniontypespec::Builder::getVpiTagged() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Uniontypespec::Builder::setVpiTagged(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Uniontypespec::Reader::hasMembers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Uniontypespec::Builder::hasMembers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Uniontypespec::Reader::getMembers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Uniontypespec::Builder::getMembers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Uniontypespec::Builder::setMembers( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Uniontypespec::Builder::setMembers(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Uniontypespec::Builder::initMembers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Uniontypespec::Builder::adoptMembers(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Uniontypespec::Builder::disownMembers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Logictypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Logictypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Logictypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Logictypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Logictypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Logictypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Logictypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Logictypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Logictypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Logictypespec::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Logictypespec::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Logictypespec::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logictypespec::Reader::getElemtypespec() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logictypespec::Builder::getElemtypespec() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Logictypespec::Builder::setElemtypespec( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Logictypespec::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Logictypespec::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Logictypespec::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Logictypespec::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Logictypespec::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Logictypespec::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Logictypespec::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Logictypespec::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Logictypespec::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Logictypespec::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Logictypespec::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logictypespec::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logictypespec::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logictypespec::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Logictypespec::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logictypespec::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Logictypespec::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logictypespec::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Logictypespec::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Logictypespec::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logictypespec::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logictypespec::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logictypespec::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Logictypespec::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logictypespec::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Logictypespec::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logictypespec::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Logictypespec::Reader::hasIndextypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Logictypespec::Builder::hasIndextypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logictypespec::Reader::getIndextypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logictypespec::Builder::getIndextypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logictypespec::Pipeline::getIndextypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Logictypespec::Builder::setIndextypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logictypespec::Builder::initIndextypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Logictypespec::Builder::adoptIndextypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logictypespec::Builder::disownIndextypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Logictypespec::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Logictypespec::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Logictypespec::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logictypespec::Reader::getResolutionfunc() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logictypespec::Builder::getResolutionfunc() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Logictypespec::Builder::setResolutionfunc( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraytypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraytypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Packedarraytypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Packedarraytypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Packedarraytypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Packedarraytypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Packedarraytypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packedarraytypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Packedarraytypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packedarraytypespec::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Packedarraytypespec::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Packedarraytypespec::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraytypespec::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraytypespec::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Packedarraytypespec::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Packedarraytypespec::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Packedarraytypespec::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Packedarraytypespec::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Packedarraytypespec::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Packedarraytypespec::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Packedarraytypespec::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Packedarraytypespec::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraytypespec::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraytypespec::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraytypespec::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraytypespec::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Packedarraytypespec::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraytypespec::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Packedarraytypespec::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraytypespec::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Packedarraytypespec::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraytypespec::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraytypespec::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraytypespec::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraytypespec::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Packedarraytypespec::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraytypespec::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Packedarraytypespec::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraytypespec::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Packedarraytypespec::Reader::hasElemtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraytypespec::Builder::hasElemtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraytypespec::Reader::getElemtypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraytypespec::Builder::getElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraytypespec::Pipeline::getElemtypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Packedarraytypespec::Builder::setElemtypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraytypespec::Builder::initElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Packedarraytypespec::Builder::adoptElemtypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraytypespec::Builder::disownElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Packedarraytypespec::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraytypespec::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraytypespec::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraytypespec::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraytypespec::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Packedarraytypespec::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraytypespec::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Packedarraytypespec::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraytypespec::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t Packedarraytypespec::Reader::getResolutionfunc() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraytypespec::Builder::getResolutionfunc() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Packedarraytypespec::Builder::setResolutionfunc( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Arraytypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Arraytypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Arraytypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Arraytypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Arraytypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Arraytypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Arraytypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Arraytypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Arraytypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Arraytypespec::Reader::getVpiArrayType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arraytypespec::Builder::getVpiArrayType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Arraytypespec::Builder::setVpiArrayType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Arraytypespec::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Arraytypespec::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Arraytypespec::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arraytypespec::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Arraytypespec::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Arraytypespec::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Arraytypespec::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Arraytypespec::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Arraytypespec::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Arraytypespec::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Arraytypespec::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arraytypespec::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arraytypespec::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arraytypespec::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Arraytypespec::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arraytypespec::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Arraytypespec::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arraytypespec::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Arraytypespec::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Arraytypespec::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arraytypespec::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arraytypespec::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arraytypespec::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Arraytypespec::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arraytypespec::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Arraytypespec::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arraytypespec::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Arraytypespec::Reader::hasIndextypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Arraytypespec::Builder::hasIndextypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arraytypespec::Reader::getIndextypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arraytypespec::Builder::getIndextypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arraytypespec::Pipeline::getIndextypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Arraytypespec::Builder::setIndextypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arraytypespec::Builder::initIndextypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Arraytypespec::Builder::adoptIndextypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arraytypespec::Builder::disownIndextypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Arraytypespec::Reader::hasElemtypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Arraytypespec::Builder::hasElemtypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arraytypespec::Reader::getElemtypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arraytypespec::Builder::getElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arraytypespec::Pipeline::getElemtypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Arraytypespec::Builder::setElemtypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arraytypespec::Builder::initElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Arraytypespec::Builder::adoptElemtypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arraytypespec::Builder::disownElemtypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t Arraytypespec::Reader::getResolutionfunc() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraytypespec::Builder::getResolutionfunc() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Arraytypespec::Builder::setResolutionfunc( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Voidtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Voidtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Voidtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Voidtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Voidtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Voidtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Voidtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Voidtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Voidtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Unsupportedtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Unsupportedtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Unsupportedtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Unsupportedtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Unsupportedtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Unsupportedtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Unsupportedtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Unsupportedtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Unsupportedtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Unsupportedtypespec::Reader::getVpiPacked() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Unsupportedtypespec::Builder::getVpiPacked() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Unsupportedtypespec::Builder::setVpiPacked(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Unsupportedtypespec::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Unsupportedtypespec::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Unsupportedtypespec::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Unsupportedtypespec::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Unsupportedtypespec::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Unsupportedtypespec::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Unsupportedtypespec::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Unsupportedtypespec::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Unsupportedtypespec::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Sequencetypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Sequencetypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Sequencetypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Sequencetypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Sequencetypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Sequencetypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Sequencetypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Sequencetypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Sequencetypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Propertytypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Propertytypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Propertytypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Propertytypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Propertytypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Propertytypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Propertytypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Propertytypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Propertytypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Interfacetypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacetypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Interfacetypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Interfacetypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Interfacetypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Interfacetypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Interfacetypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Interfacetypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Interfacetypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interfacetypespec::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetypespec::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Interfacetypespec::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Interfacetypespec::Reader::getVpiIsModPort() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Interfacetypespec::Builder::getVpiIsModPort() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Interfacetypespec::Builder::setVpiIsModPort(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Interfacetypespec::Reader::hasParamassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacetypespec::Builder::hasParamassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Interfacetypespec::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfacetypespec::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Interfacetypespec::Builder::setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Interfacetypespec::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Interfacetypespec::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Interfacetypespec::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Interfacetypespec::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Typeparameter::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Typeparameter::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Typeparameter::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Typeparameter::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Typeparameter::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Typeparameter::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Typeparameter::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Typeparameter::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Typeparameter::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Typeparameter::Reader::getVpiLocalParam() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Typeparameter::Builder::getVpiLocalParam() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Typeparameter::Builder::setVpiLocalParam(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Typeparameter::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Typeparameter::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Typeparameter::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Typeparameter::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Typeparameter::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Typeparameter::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Typeparameter::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Typeparameter::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Typeparameter::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Typeparameter::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Typeparameter::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Typeparameter::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Typeparameter::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Typeparameter::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Typeparameter::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Typeparameter::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Typeparameter::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Typeparameter::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Typeparameter::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Typeparameter::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Typeparameter::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Typeparameter::Reader::getVpiImported() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Typeparameter::Builder::getVpiImported() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Typeparameter::Builder::setVpiImported( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Typespecmember::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Typespecmember::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Typespecmember::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Typespecmember::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Typespecmember::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Typespecmember::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Typespecmember::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Typespecmember::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Typespecmember::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Typespecmember::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Typespecmember::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Typespecmember::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Typespecmember::Reader::getVpiRandType() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Typespecmember::Builder::getVpiRandType() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Typespecmember::Builder::setVpiRandType(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Typespecmember::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Typespecmember::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Typespecmember::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Typespecmember::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Typespecmember::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Typespecmember::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Typespecmember::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Typespecmember::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Typespecmember::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Typespecmember::Reader::hasDefaultvalue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Typespecmember::Builder::hasDefaultvalue() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Typespecmember::Reader::getDefaultvalue() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Typespecmember::Builder::getDefaultvalue() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Typespecmember::Pipeline::getDefaultvalue() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Typespecmember::Builder::setDefaultvalue( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Typespecmember::Builder::initDefaultvalue() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Typespecmember::Builder::adoptDefaultvalue(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Typespecmember::Builder::disownDefaultvalue() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Typespecmember::Reader::getVpiRefFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Typespecmember::Builder::getVpiRefFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Typespecmember::Builder::setVpiRefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Typespecmember::Reader::getVpiRefLineNo() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Typespecmember::Builder::getVpiRefLineNo() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Typespecmember::Builder::setVpiRefLineNo( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Typespecmember::Reader::getVpiRefColumnNo() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Typespecmember::Builder::getVpiRefColumnNo() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Typespecmember::Builder::setVpiRefColumnNo( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Typespecmember::Reader::getVpiRefEndLineNo() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Typespecmember::Builder::getVpiRefEndLineNo() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Typespecmember::Builder::setVpiRefEndLineNo( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Typespecmember::Reader::getVpiRefEndColumnNo() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Typespecmember::Builder::getVpiRefEndColumnNo() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Typespecmember::Builder::setVpiRefEndColumnNo( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Enumconst::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Enumconst::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Enumconst::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Enumconst::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Enumconst::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Enumconst::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Enumconst::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Enumconst::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Enumconst::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Enumconst::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumconst::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Enumconst::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumconst::Reader::getVpiValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumconst::Builder::getVpiValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Enumconst::Builder::setVpiValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumconst::Reader::getVpiDecompile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumconst::Builder::getVpiDecompile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Enumconst::Builder::setVpiDecompile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumconst::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumconst::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Enumconst::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Bittypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bittypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Bittypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Bittypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Bittypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Bittypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Bittypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bittypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Bittypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bittypespec::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Bittypespec::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bittypespec::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bittypespec::Reader::getBittypespec() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bittypespec::Builder::getBittypespec() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bittypespec::Builder::setBittypespec( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Bittypespec::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Bittypespec::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Bittypespec::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Bittypespec::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Bittypespec::Builder::setRanges( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Bittypespec::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Bittypespec::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Bittypespec::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Bittypespec::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Bittypespec::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Bittypespec::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bittypespec::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bittypespec::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bittypespec::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Bittypespec::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bittypespec::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Bittypespec::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bittypespec::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Bittypespec::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Bittypespec::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bittypespec::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bittypespec::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bittypespec::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Bittypespec::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bittypespec::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Bittypespec::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bittypespec::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Bittypespec::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Bittypespec::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bittypespec::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bittypespec::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bittypespec::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Bittypespec::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bittypespec::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Bittypespec::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bittypespec::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Bittypespec::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Bittypespec::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bittypespec::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bittypespec::Reader::getResolutionfunc() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bittypespec::Builder::getResolutionfunc() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Bittypespec::Builder::setResolutionfunc( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Tfcall::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Tfcall::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Expr::Reader Tfcall::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Expr::Builder Tfcall::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Expr::Pipeline Tfcall::Pipeline::getBase() {
  return  ::Expr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Tfcall::Builder::setBase( ::Expr::Reader value) {
  ::capnp::_::PointerHelpers< ::Expr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Expr::Builder Tfcall::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Tfcall::Builder::adoptBase(
    ::capnp::Orphan< ::Expr>&& value) {
  ::capnp::_::PointerHelpers< ::Expr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Expr> Tfcall::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Expr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Tfcall::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Tfcall::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Tfcall::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Tfcall::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Tfcall::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Tfcall::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Tfcall::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tfcall::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Tfcall::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tfcall::Reader::hasTfcallargs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Tfcall::Builder::hasTfcallargs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Tfcall::Reader::getTfcallargs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Tfcall::Builder::getTfcallargs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tfcall::Builder::setTfcallargs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Tfcall::Builder::initTfcallargs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Tfcall::Builder::adoptTfcallargs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Tfcall::Builder::disownTfcallargs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Tfcall::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tfcall::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tfcall::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Usersystf::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Usersystf::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Usersystf::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Usersystf::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Usersystf::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Usersystf::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Usersystf::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Usersystf::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Usersystf::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Sysfunccall::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Sysfunccall::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Tfcall::Reader Sysfunccall::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Tfcall::Builder Sysfunccall::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Tfcall::Pipeline Sysfunccall::Pipeline::getBase() {
  return  ::Tfcall::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Sysfunccall::Builder::setBase( ::Tfcall::Reader value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Tfcall::Builder Sysfunccall::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Sysfunccall::Builder::adoptBase(
    ::capnp::Orphan< ::Tfcall>&& value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Tfcall> Sysfunccall::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Sysfunccall::Reader::getVpiFuncType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Sysfunccall::Builder::getVpiFuncType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Sysfunccall::Builder::setVpiFuncType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Sysfunccall::Reader::getVpiUserDefn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Sysfunccall::Builder::getVpiUserDefn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Sysfunccall::Builder::setVpiUserDefn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Sysfunccall::Reader::getUsersystf() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sysfunccall::Builder::getUsersystf() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Sysfunccall::Builder::setUsersystf( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Systaskcall::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Systaskcall::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Tfcall::Reader Systaskcall::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Tfcall::Builder Systaskcall::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Tfcall::Pipeline Systaskcall::Pipeline::getBase() {
  return  ::Tfcall::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Systaskcall::Builder::setBase( ::Tfcall::Reader value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Tfcall::Builder Systaskcall::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Systaskcall::Builder::adoptBase(
    ::capnp::Orphan< ::Tfcall>&& value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Tfcall> Systaskcall::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Systaskcall::Reader::getVpiUserDefn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Systaskcall::Builder::getVpiUserDefn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Systaskcall::Builder::setVpiUserDefn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Systaskcall::Reader::getUsersystf() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Systaskcall::Builder::getUsersystf() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Systaskcall::Builder::setUsersystf( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Methodfunccall::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Methodfunccall::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Tfcall::Reader Methodfunccall::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Tfcall::Builder Methodfunccall::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Tfcall::Pipeline Methodfunccall::Pipeline::getBase() {
  return  ::Tfcall::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Methodfunccall::Builder::setBase( ::Tfcall::Reader value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Tfcall::Builder Methodfunccall::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Methodfunccall::Builder::adoptBase(
    ::capnp::Orphan< ::Tfcall>&& value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Tfcall> Methodfunccall::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Methodfunccall::Reader::getVpiUserDefn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Methodfunccall::Builder::getVpiUserDefn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Methodfunccall::Builder::setVpiUserDefn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Methodfunccall::Reader::hasPrefix() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Methodfunccall::Builder::hasPrefix() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Methodfunccall::Reader::getPrefix() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Methodfunccall::Builder::getPrefix() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Methodfunccall::Pipeline::getPrefix() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Methodfunccall::Builder::setPrefix( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Methodfunccall::Builder::initPrefix() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Methodfunccall::Builder::adoptPrefix(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Methodfunccall::Builder::disownPrefix() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Methodfunccall::Reader::hasWith() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Methodfunccall::Builder::hasWith() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Methodfunccall::Reader::getWith() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Methodfunccall::Builder::getWith() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Methodfunccall::Pipeline::getWith() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Methodfunccall::Builder::setWith( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Methodfunccall::Builder::initWith() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Methodfunccall::Builder::adoptWith(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Methodfunccall::Builder::disownWith() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Methodfunccall::Reader::getFunction() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Methodfunccall::Builder::getFunction() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Methodfunccall::Builder::setFunction( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Methodtaskcall::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Methodtaskcall::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Tfcall::Reader Methodtaskcall::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Tfcall::Builder Methodtaskcall::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Tfcall::Pipeline Methodtaskcall::Pipeline::getBase() {
  return  ::Tfcall::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Methodtaskcall::Builder::setBase( ::Tfcall::Reader value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Tfcall::Builder Methodtaskcall::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Methodtaskcall::Builder::adoptBase(
    ::capnp::Orphan< ::Tfcall>&& value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Tfcall> Methodtaskcall::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Methodtaskcall::Reader::getVpiUserDefn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Methodtaskcall::Builder::getVpiUserDefn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Methodtaskcall::Builder::setVpiUserDefn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Methodtaskcall::Reader::hasPrefix() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Methodtaskcall::Builder::hasPrefix() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Methodtaskcall::Reader::getPrefix() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Methodtaskcall::Builder::getPrefix() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Methodtaskcall::Pipeline::getPrefix() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Methodtaskcall::Builder::setPrefix( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Methodtaskcall::Builder::initPrefix() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Methodtaskcall::Builder::adoptPrefix(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Methodtaskcall::Builder::disownPrefix() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Methodtaskcall::Reader::hasWith() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Methodtaskcall::Builder::hasWith() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Methodtaskcall::Reader::getWith() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Methodtaskcall::Builder::getWith() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Methodtaskcall::Pipeline::getWith() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Methodtaskcall::Builder::setWith( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Methodtaskcall::Builder::initWith() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Methodtaskcall::Builder::adoptWith(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Methodtaskcall::Builder::disownWith() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Methodtaskcall::Reader::getTask() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Methodtaskcall::Builder::getTask() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Methodtaskcall::Builder::setTask( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Funccall::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Funccall::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Tfcall::Reader Funccall::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Tfcall::Builder Funccall::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Tfcall::Pipeline Funccall::Pipeline::getBase() {
  return  ::Tfcall::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Funccall::Builder::setBase( ::Tfcall::Reader value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Tfcall::Builder Funccall::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Funccall::Builder::adoptBase(
    ::capnp::Orphan< ::Tfcall>&& value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Tfcall> Funccall::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Funccall::Reader::getVpiFuncType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Funccall::Builder::getVpiFuncType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Funccall::Builder::setVpiFuncType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Funccall::Reader::getFunction() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Funccall::Builder::getFunction() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Funccall::Builder::setFunction( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Taskcall::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Taskcall::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Tfcall::Reader Taskcall::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Tfcall::Builder Taskcall::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Tfcall::Pipeline Taskcall::Pipeline::getBase() {
  return  ::Tfcall::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Taskcall::Builder::setBase( ::Tfcall::Reader value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Tfcall::Builder Taskcall::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Taskcall::Builder::adoptBase(
    ::capnp::Orphan< ::Tfcall>&& value) {
  ::capnp::_::PointerHelpers< ::Tfcall>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Tfcall> Taskcall::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Tfcall>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Taskcall::Reader::getTask() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Taskcall::Builder::getTask() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Taskcall::Builder::setTask( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Constraintexpr::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Constraintexpr::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Constraintexpr::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Constraintexpr::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Constraintexpr::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Constraintexpr::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Constraintexpr::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Constraintexpr::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Constraintexpr::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Constraintordering::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Constraintordering::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Constraintordering::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Constraintordering::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Constraintordering::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Constraintordering::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Constraintordering::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Constraintordering::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Constraintordering::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Constraintordering::Reader::hasSolvebefores() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Constraintordering::Builder::hasSolvebefores() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Constraintordering::Reader::getSolvebefores() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constraintordering::Builder::getSolvebefores() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Constraintordering::Builder::setSolvebefores( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constraintordering::Builder::initSolvebefores(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Constraintordering::Builder::adoptSolvebefores(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Constraintordering::Builder::disownSolvebefores() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Constraintordering::Reader::hasSolveafters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Constraintordering::Builder::hasSolveafters() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Constraintordering::Reader::getSolveafters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constraintordering::Builder::getSolveafters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Constraintordering::Builder::setSolveafters( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constraintordering::Builder::initSolveafters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Constraintordering::Builder::adoptSolveafters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Constraintordering::Builder::disownSolveafters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Constraint::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Constraint::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Constraint::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Constraint::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Constraint::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Constraint::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Constraint::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Constraint::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Constraint::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Constraint::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Constraint::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Constraint::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Constraint::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Constraint::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Constraint::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Constraint::Reader::getVpiVirtual() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool Constraint::Builder::getVpiVirtual() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void Constraint::Builder::setVpiVirtual(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline bool Constraint::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}

inline bool Constraint::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}
inline void Constraint::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Constraint::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Constraint::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Constraint::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Constraint::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Constraint::Builder::getVpiAccessType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Constraint::Builder::setVpiAccessType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Constraint::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Constraint::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Constraint::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Constraint::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Constraint::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Constraint::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Constraint::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Constraint::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Constraint::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Constraint::Reader::getVpiIsConstraintEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS);
}

inline bool Constraint::Builder::getVpiIsConstraintEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS);
}
inline void Constraint::Builder::setVpiIsConstraintEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS, value);
}

inline bool Constraint::Reader::hasConstraintitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Constraint::Builder::hasConstraintitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Constraint::Reader::getConstraintitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constraint::Builder::getConstraintitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Constraint::Builder::setConstraintitems( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constraint::Builder::initConstraintitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Constraint::Builder::adoptConstraintitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Constraint::Builder::disownConstraintitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Importtypespec::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Importtypespec::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Typespec::Reader Importtypespec::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Typespec::Builder Importtypespec::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Typespec::Pipeline Importtypespec::Pipeline::getBase() {
  return  ::Typespec::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Importtypespec::Builder::setBase( ::Typespec::Reader value) {
  ::capnp::_::PointerHelpers< ::Typespec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Typespec::Builder Importtypespec::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Importtypespec::Builder::adoptBase(
    ::capnp::Orphan< ::Typespec>&& value) {
  ::capnp::_::PointerHelpers< ::Typespec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Typespec> Importtypespec::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Typespec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Importtypespec::Reader::getItem() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Importtypespec::Builder::getItem() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Importtypespec::Builder::setItem( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Distitem::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Distitem::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Distitem::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Distitem::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Distitem::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Distitem::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Distitem::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Distitem::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Distitem::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Distitem::Reader::getVpiDistType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Distitem::Builder::getVpiDistType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Distitem::Builder::setVpiDistType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Distitem::Reader::hasValuerange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Distitem::Builder::hasValuerange() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Distitem::Reader::getValuerange() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Distitem::Builder::getValuerange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Distitem::Pipeline::getValuerange() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Distitem::Builder::setValuerange( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Distitem::Builder::initValuerange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Distitem::Builder::adoptValuerange(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Distitem::Builder::disownValuerange() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Distitem::Reader::hasWeight() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Distitem::Builder::hasWeight() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Distitem::Reader::getWeight() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Distitem::Builder::getWeight() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Distitem::Pipeline::getWeight() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Distitem::Builder::setWeight( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Distitem::Builder::initWeight() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Distitem::Builder::adoptWeight(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Distitem::Builder::disownWeight() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Distribution::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Distribution::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Constraintexpr::Reader Distribution::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Constraintexpr::Builder Distribution::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Constraintexpr::Pipeline Distribution::Pipeline::getBase() {
  return  ::Constraintexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Distribution::Builder::setBase( ::Constraintexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Constraintexpr::Builder Distribution::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Distribution::Builder::adoptBase(
    ::capnp::Orphan< ::Constraintexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Constraintexpr> Distribution::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Distribution::Reader::getVpiSoft() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Distribution::Builder::getVpiSoft() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setVpiSoft(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Distribution::Reader::hasDistitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Distribution::Builder::hasDistitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Distribution::Reader::getDistitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Distribution::Builder::getDistitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Distribution::Builder::setDistitems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Distribution::Builder::setDistitems(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Distribution::Builder::initDistitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Distribution::Builder::adoptDistitems(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Distribution::Builder::disownDistitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Distribution::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Distribution::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Distribution::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Distribution::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Distribution::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Distribution::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Distribution::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Distribution::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Distribution::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Implication::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Implication::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Constraintexpr::Reader Implication::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Constraintexpr::Builder Implication::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Constraintexpr::Pipeline Implication::Pipeline::getBase() {
  return  ::Constraintexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Implication::Builder::setBase( ::Constraintexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Constraintexpr::Builder Implication::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Implication::Builder::adoptBase(
    ::capnp::Orphan< ::Constraintexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Constraintexpr> Implication::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Implication::Reader::hasCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Implication::Builder::hasCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Implication::Reader::getCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Implication::Builder::getCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Implication::Pipeline::getCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Implication::Builder::setCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Implication::Builder::initCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Implication::Builder::adoptCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Implication::Builder::disownCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Implication::Reader::hasConstraintexprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Implication::Builder::hasConstraintexprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Implication::Reader::getConstraintexprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Implication::Builder::getConstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Implication::Builder::setConstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Implication::Builder::initConstraintexprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Implication::Builder::adoptConstraintexprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Implication::Builder::disownConstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Constrif::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Constrif::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Constraintexpr::Reader Constrif::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Constraintexpr::Builder Constrif::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Constraintexpr::Pipeline Constrif::Pipeline::getBase() {
  return  ::Constraintexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Constrif::Builder::setBase( ::Constraintexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Constraintexpr::Builder Constrif::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Constrif::Builder::adoptBase(
    ::capnp::Orphan< ::Constraintexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Constraintexpr> Constrif::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Constrif::Reader::hasCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Constrif::Builder::hasCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Constrif::Reader::getCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Constrif::Builder::getCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Constrif::Pipeline::getCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Constrif::Builder::setCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Constrif::Builder::initCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Constrif::Builder::adoptCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Constrif::Builder::disownCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Constrif::Reader::hasConstraintexprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Constrif::Builder::hasConstraintexprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Constrif::Reader::getConstraintexprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrif::Builder::getConstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Constrif::Builder::setConstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrif::Builder::initConstraintexprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Constrif::Builder::adoptConstraintexprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Constrif::Builder::disownConstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Constrifelse::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Constrifelse::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Constraintexpr::Reader Constrifelse::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Constraintexpr::Builder Constrifelse::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Constraintexpr::Pipeline Constrifelse::Pipeline::getBase() {
  return  ::Constraintexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Constrifelse::Builder::setBase( ::Constraintexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Constraintexpr::Builder Constrifelse::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Constrifelse::Builder::adoptBase(
    ::capnp::Orphan< ::Constraintexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Constraintexpr> Constrifelse::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Constrifelse::Reader::hasCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Constrifelse::Builder::hasCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Constrifelse::Reader::getCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Constrifelse::Builder::getCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Constrifelse::Pipeline::getCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Constrifelse::Builder::setCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Constrifelse::Builder::initCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Constrifelse::Builder::adoptCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Constrifelse::Builder::disownCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Constrifelse::Reader::hasConstraintexprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Constrifelse::Builder::hasConstraintexprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Constrifelse::Reader::getConstraintexprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrifelse::Builder::getConstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Constrifelse::Builder::setConstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrifelse::Builder::initConstraintexprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Constrifelse::Builder::adoptConstraintexprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Constrifelse::Builder::disownConstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Constrifelse::Reader::hasElseconstraintexprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Constrifelse::Builder::hasElseconstraintexprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Constrifelse::Reader::getElseconstraintexprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrifelse::Builder::getElseconstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Constrifelse::Builder::setElseconstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrifelse::Builder::initElseconstraintexprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Constrifelse::Builder::adoptElseconstraintexprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Constrifelse::Builder::disownElseconstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Constrforeach::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Constrforeach::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Constraintexpr::Reader Constrforeach::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Constraintexpr::Builder Constrforeach::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Constraintexpr::Pipeline Constrforeach::Pipeline::getBase() {
  return  ::Constraintexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Constrforeach::Builder::setBase( ::Constraintexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Constraintexpr::Builder Constrforeach::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Constrforeach::Builder::adoptBase(
    ::capnp::Orphan< ::Constraintexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Constraintexpr> Constrforeach::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Constrforeach::Reader::hasVariable() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Constrforeach::Builder::hasVariable() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Constrforeach::Reader::getVariable() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Constrforeach::Builder::getVariable() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Constrforeach::Pipeline::getVariable() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Constrforeach::Builder::setVariable( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Constrforeach::Builder::initVariable() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Constrforeach::Builder::adoptVariable(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Constrforeach::Builder::disownVariable() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Constrforeach::Reader::hasVpiLoopVars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Constrforeach::Builder::hasVpiLoopVars() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Constrforeach::Reader::getVpiLoopVars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrforeach::Builder::getVpiLoopVars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Constrforeach::Builder::setVpiLoopVars( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrforeach::Builder::initVpiLoopVars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Constrforeach::Builder::adoptVpiLoopVars(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Constrforeach::Builder::disownVpiLoopVars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Constrforeach::Reader::hasConstraintexprs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Constrforeach::Builder::hasConstraintexprs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Constrforeach::Reader::getConstraintexprs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrforeach::Builder::getConstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Constrforeach::Builder::setConstraintexprs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Constrforeach::Builder::initConstraintexprs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Constrforeach::Builder::adoptConstraintexprs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Constrforeach::Builder::disownConstraintexprs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Softdisable::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Softdisable::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Constraintexpr::Reader Softdisable::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Constraintexpr::Builder Softdisable::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Constraintexpr::Pipeline Softdisable::Pipeline::getBase() {
  return  ::Constraintexpr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Softdisable::Builder::setBase( ::Constraintexpr::Reader value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Constraintexpr::Builder Softdisable::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Softdisable::Builder::adoptBase(
    ::capnp::Orphan< ::Constraintexpr>&& value) {
  ::capnp::_::PointerHelpers< ::Constraintexpr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Constraintexpr> Softdisable::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Constraintexpr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Softdisable::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Softdisable::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Softdisable::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Softdisable::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Softdisable::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Softdisable::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Softdisable::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Softdisable::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Softdisable::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genstmt::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genstmt::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Genstmt::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Genstmt::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Genstmt::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Genstmt::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Genstmt::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genstmt::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Genstmt::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Genstmt::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genstmt::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Genstmt::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Genstmt::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genstmt::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Genstmt::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genstmt::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genstmt::Builder::setAttributes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Genstmt::Builder::setAttributes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Genstmt::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Genstmt::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Genstmt::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genif::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genif::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Genstmt::Reader Genif::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Genstmt::Builder Genif::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Genstmt::Pipeline Genif::Pipeline::getBase() {
  return  ::Genstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Genif::Builder::setBase( ::Genstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Genstmt::Builder Genif::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genif::Builder::adoptBase(
    ::capnp::Orphan< ::Genstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Genstmt> Genif::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Genif::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genif::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genif::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genif::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genif::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Genif::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genif::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genif::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genif::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genif::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Genif::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genif::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genif::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genif::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Genif::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genif::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Genif::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genif::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Genifelse::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genifelse::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Genstmt::Reader Genifelse::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Genstmt::Builder Genifelse::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Genstmt::Pipeline Genifelse::Pipeline::getBase() {
  return  ::Genstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Genifelse::Builder::setBase( ::Genstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Genstmt::Builder Genifelse::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genifelse::Builder::adoptBase(
    ::capnp::Orphan< ::Genstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Genstmt> Genifelse::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Genifelse::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genifelse::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genifelse::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genifelse::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genifelse::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Genifelse::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genifelse::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genifelse::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genifelse::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genifelse::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Genifelse::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genifelse::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genifelse::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genifelse::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Genifelse::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genifelse::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Genifelse::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genifelse::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Genifelse::Reader::hasVpiElseStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Genifelse::Builder::hasVpiElseStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genifelse::Reader::getVpiElseStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genifelse::Builder::getVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genifelse::Pipeline::getVpiElseStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Genifelse::Builder::setVpiElseStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genifelse::Builder::initVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Genifelse::Builder::adoptVpiElseStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genifelse::Builder::disownVpiElseStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Genfor::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genfor::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Genstmt::Reader Genfor::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Genstmt::Builder Genfor::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Genstmt::Pipeline Genfor::Pipeline::getBase() {
  return  ::Genstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Genfor::Builder::setBase( ::Genstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Genstmt::Builder Genfor::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genfor::Builder::adoptBase(
    ::capnp::Orphan< ::Genstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Genstmt> Genfor::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t Genfor::Reader::getVpiLocalVarDecls() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Genfor::Builder::getVpiLocalVarDecls() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Genfor::Builder::setVpiLocalVarDecls( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Genfor::Reader::hasVpiForInitStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genfor::Builder::hasVpiForInitStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genfor::Reader::getVpiForInitStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genfor::Builder::getVpiForInitStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genfor::Builder::setVpiForInitStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genfor::Builder::initVpiForInitStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Genfor::Builder::adoptVpiForInitStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genfor::Builder::disownVpiForInitStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genfor::Reader::hasVpiForIncStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Genfor::Builder::hasVpiForIncStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Genfor::Reader::getVpiForIncStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genfor::Builder::getVpiForIncStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Genfor::Builder::setVpiForIncStmts( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Genfor::Builder::initVpiForIncStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Genfor::Builder::adoptVpiForIncStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Genfor::Builder::disownVpiForIncStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Genfor::Reader::hasVpiForInitStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Genfor::Builder::hasVpiForInitStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genfor::Reader::getVpiForInitStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genfor::Builder::getVpiForInitStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genfor::Pipeline::getVpiForInitStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Genfor::Builder::setVpiForInitStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genfor::Builder::initVpiForInitStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Genfor::Builder::adoptVpiForInitStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genfor::Builder::disownVpiForInitStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Genfor::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Genfor::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genfor::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genfor::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genfor::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Genfor::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genfor::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Genfor::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genfor::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Genfor::Reader::hasVpiForIncStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Genfor::Builder::hasVpiForIncStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genfor::Reader::getVpiForIncStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genfor::Builder::getVpiForIncStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genfor::Pipeline::getVpiForIncStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Genfor::Builder::setVpiForIncStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genfor::Builder::initVpiForIncStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Genfor::Builder::adoptVpiForIncStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genfor::Builder::disownVpiForIncStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Genfor::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Genfor::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genfor::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genfor::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genfor::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Genfor::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genfor::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Genfor::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genfor::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Gencase::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Gencase::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Genstmt::Reader Gencase::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Genstmt::Builder Gencase::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Genstmt::Pipeline Gencase::Pipeline::getBase() {
  return  ::Genstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Gencase::Builder::setBase( ::Genstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Genstmt::Builder Gencase::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Gencase::Builder::adoptBase(
    ::capnp::Orphan< ::Genstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Genstmt> Gencase::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Gencase::Reader::hasVpiCondition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Gencase::Builder::hasVpiCondition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gencase::Reader::getVpiCondition() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gencase::Builder::getVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gencase::Pipeline::getVpiCondition() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Gencase::Builder::setVpiCondition( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gencase::Builder::initVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Gencase::Builder::adoptVpiCondition(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gencase::Builder::disownVpiCondition() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Gencase::Reader::hasCaseitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Gencase::Builder::hasCaseitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Gencase::Reader::getCaseitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Gencase::Builder::getCaseitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Gencase::Builder::setCaseitems( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Gencase::Builder::setCaseitems(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Gencase::Builder::initCaseitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Gencase::Builder::adoptCaseitems(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Gencase::Builder::disownCaseitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Genregion::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genregion::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Genstmt::Reader Genregion::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Genstmt::Builder Genregion::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Genstmt::Pipeline Genregion::Pipeline::getBase() {
  return  ::Genstmt::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Genregion::Builder::setBase( ::Genstmt::Reader value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Genstmt::Builder Genregion::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genregion::Builder::adoptBase(
    ::capnp::Orphan< ::Genstmt>&& value) {
  ::capnp::_::PointerHelpers< ::Genstmt>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Genstmt> Genregion::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Genstmt>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Genregion::Reader::hasVpiStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genregion::Builder::hasVpiStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Genregion::Reader::getVpiStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Genregion::Builder::getVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Genregion::Pipeline::getVpiStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Genregion::Builder::setVpiStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Genregion::Builder::initVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genregion::Builder::adoptVpiStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Genregion::Builder::disownVpiStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasBase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasBase() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Any::Reader Design::Reader::getBase() const {
  return ::capnp::_::PointerHelpers< ::Any>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Any::Builder Design::Builder::getBase() {
  return ::capnp::_::PointerHelpers< ::Any>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Any::Pipeline Design::Pipeline::getBase() {
  return  ::Any::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Design::Builder::setBase( ::Any::Reader value) {
  ::capnp::_::PointerHelpers< ::Any>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Any::Builder Design::Builder::initBase() {
  return ::capnp::_::PointerHelpers< ::Any>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Design::Builder::adoptBase(
    ::capnp::Orphan< ::Any>&& value) {
  ::capnp::_::PointerHelpers< ::Any>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Any> Design::Builder::disownBase() {
  return ::capnp::_::PointerHelpers< ::Any>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Design::Reader::getVpiElaborated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Design::Builder::getVpiElaborated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiElaborated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Design::Reader::hasIncludefileinfos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasIncludefileinfos() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getIncludefileinfos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getIncludefileinfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Design::Builder::setIncludefileinfos( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setIncludefileinfos(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initIncludefileinfos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptIncludefileinfos(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownIncludefileinfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllPackages() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllPackages() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getAllPackages() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getAllPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllPackages( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllPackages(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initAllPackages(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllPackages(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownAllPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasTopPackages() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasTopPackages() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getTopPackages() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getTopPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Design::Builder::setTopPackages( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setTopPackages(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initTopPackages(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptTopPackages(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownTopPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllClasses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllClasses() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getAllClasses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getAllClasses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllClasses( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllClasses(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initAllClasses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllClasses(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownAllClasses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllInterfaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllInterfaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getAllInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getAllInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllInterfaces( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initAllInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownAllInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllUdps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllUdps() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getAllUdps() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getAllUdps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllUdps( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllUdps(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initAllUdps(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllUdps(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownAllUdps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllPrograms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllPrograms() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getAllPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getAllPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllPrograms( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initAllPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownAllPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getAllModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getAllModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initAllModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownAllModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Design::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Design::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Design::Builder::setTypespecs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Design::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Design::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Design::Builder::setLetdecls( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasTaskfuncs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasTaskfuncs() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Design::Reader::getTaskfuncs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Design::Builder::getTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Design::Builder::setTaskfuncs( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Design::Builder::initTaskfuncs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptTaskfuncs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Design::Builder::disownTaskfuncs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader Design::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Design::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Design::Builder::setParameters( ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>::Builder Design::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>> Design::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasParamassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasParamassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Design::Builder::setParamassigns( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasTopModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasTopModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Design::Reader::getTopModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::getTopModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Design::Builder::setTopModules( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setTopModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Design::Builder::initTopModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptTopModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Design::Builder::disownTopModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

