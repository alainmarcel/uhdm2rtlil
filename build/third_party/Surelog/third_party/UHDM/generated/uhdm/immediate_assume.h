/*
 Do not modify, auto-generated by classes.py

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   immediate_assume.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_IMMEDIATE_ASSUME_H
#define UHDM_IMMEDIATE_ASSUME_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/atomic_stmt.h>

#include "stmt.h"


namespace UHDM {
class clocking_block;
class expr;

class immediate_assume final : public atomic_stmt {
  UHDM_IMPLEMENT_RTTI(immediate_assume, atomic_stmt)
public:
  // Implicit constructor used to initialize all members,
  // comment: immediate_assume();
  virtual ~immediate_assume() final = default;

  int32_t VpiIsDeferred() const { return vpiIsDeferred_; }
  bool VpiIsDeferred(int32_t data) {
    vpiIsDeferred_ = data;
    return true;
  }

  int32_t VpiIsFinal() const { return vpiIsFinal_; }
  bool VpiIsFinal(int32_t data) {
    vpiIsFinal_ = data;
    return true;
  }

  expr* Expr()  { return expr_; }
  const expr* Expr() const { return expr_; }
  template <typename T>
  T* Expr() {
    return (expr_ == nullptr) ? nullptr : any_cast<T*>(expr_);
  }
  template <typename T>
  const T* Expr() const {
    return (expr_ == nullptr) ? nullptr : any_cast<const T*>(expr_);
  }
  bool Expr(expr* data) {
    expr_ = data;
    return true;
  }

  any* Stmt()  { return stmt_; }
  const any* Stmt() const { return stmt_; }
  template <typename T>
  T* Stmt() {
    return (stmt_ == nullptr) ? nullptr : any_cast<T*>(stmt_);
  }
  template <typename T>
  const T* Stmt() const {
    return (stmt_ == nullptr) ? nullptr : any_cast<const T*>(stmt_);
  }
  bool Stmt(any* data) {
    if (!stmtGroupCompliant(data)) return false;
    stmt_ = data;
    return true;
  }

  any* Else_stmt()  { return else_stmt_; }
  const any* Else_stmt() const { return else_stmt_; }
  template <typename T>
  T* Else_stmt() {
    return (else_stmt_ == nullptr) ? nullptr : any_cast<T*>(else_stmt_);
  }
  template <typename T>
  const T* Else_stmt() const {
    return (else_stmt_ == nullptr) ? nullptr : any_cast<const T*>(else_stmt_);
  }
  bool Else_stmt(any* data) {
    if (!stmtGroupCompliant(data)) return false;
    else_stmt_ = data;
    return true;
  }

  clocking_block* Clocking_block()  { return clocking_block_; }
  const clocking_block* Clocking_block() const { return clocking_block_; }
  template <typename T>
  T* Clocking_block() {
    return (clocking_block_ == nullptr) ? nullptr : any_cast<T*>(clocking_block_);
  }
  template <typename T>
  const T* Clocking_block() const {
    return (clocking_block_ == nullptr) ? nullptr : any_cast<const T*>(clocking_block_);
  }
  bool Clocking_block(clocking_block* data) {
    clocking_block_ = data;
    return true;
  }

  virtual uint32_t VpiType() const final { return vpiImmediateAssume; }

  virtual immediate_assume* DeepClone(BaseClass* parent, CloneContext* context) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int32_t type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int32_t property) const override;

  virtual int32_t Compare(const BaseClass* other, CompareContext* context) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return UHDM_OBJECT_TYPE::uhdmimmediate_assume; }

protected:
  void DeepCopy(immediate_assume* clone, BaseClass* parent, CloneContext* context) const;

private:
  int32_t vpiIsDeferred_ = 0;

  int32_t vpiIsFinal_ = 0;

  expr* expr_ = nullptr;

  any* stmt_ = nullptr;

  any* else_stmt_ = nullptr;

  clocking_block* clocking_block_ = nullptr;
};


typedef FactoryT<immediate_assume> immediate_assumeFactory;


typedef FactoryT<std::vector<immediate_assume *>> VectorOfimmediate_assumeFactory;

}  // namespace UHDM

#endif
