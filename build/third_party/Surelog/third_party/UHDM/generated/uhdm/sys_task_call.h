/*
 Do not modify, auto-generated by classes.py

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   sys_task_call.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_SYS_TASK_CALL_H
#define UHDM_SYS_TASK_CALL_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/tf_call.h>




namespace UHDM {
class user_systf;

class sys_task_call final : public tf_call {
  UHDM_IMPLEMENT_RTTI(sys_task_call, tf_call)
public:
  // Implicit constructor used to initialize all members,
  // comment: sys_task_call();
  virtual ~sys_task_call() final = default;

  bool VpiUserDefn() const { return vpiUserDefn_; }
  bool VpiUserDefn(bool data) {
    vpiUserDefn_ = data;
    return true;
  }

  user_systf* User_systf()  { return user_systf_; }
  const user_systf* User_systf() const { return user_systf_; }
  template <typename T>
  T* User_systf() {
    return (user_systf_ == nullptr) ? nullptr : any_cast<T*>(user_systf_);
  }
  template <typename T>
  const T* User_systf() const {
    return (user_systf_ == nullptr) ? nullptr : any_cast<const T*>(user_systf_);
  }
  bool User_systf(user_systf* data) {
    user_systf_ = data;
    return true;
  }

  virtual uint32_t VpiType() const final { return vpiSysTaskCall; }

  virtual tf_call* DeepClone(BaseClass* parent, CloneContext* context) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int32_t type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int32_t property) const override;

  virtual int32_t Compare(const BaseClass* other, CompareContext* context) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return UHDM_OBJECT_TYPE::uhdmsys_task_call; }

protected:
  void DeepCopy(sys_task_call* clone, BaseClass* parent, CloneContext* context) const;

private:
  bool vpiUserDefn_ = false;

  user_systf* user_systf_ = nullptr;
};


typedef FactoryT<sys_task_call> sys_task_callFactory;


typedef FactoryT<std::vector<sys_task_call *>> VectorOfsys_task_callFactory;

}  // namespace UHDM

#endif
