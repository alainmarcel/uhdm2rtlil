/*
 Do not modify, auto-generated by classes.py

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   fork_stmt.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_FORK_STMT_H
#define UHDM_FORK_STMT_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/scope.h>

#include "stmt.h"


namespace UHDM {


class fork_stmt final : public scope {
  UHDM_IMPLEMENT_RTTI(fork_stmt, scope)
public:
  // Implicit constructor used to initialize all members,
  // comment: fork_stmt();
  virtual ~fork_stmt() final = default;

  uint32_t VpiType() const final { return vpiFork; }

  int32_t VpiJoinType() const { return vpiJoinType_; }
  bool VpiJoinType(int32_t data) {
    vpiJoinType_ = data;
    return true;
  }

  VectorOfany* Stmts() const { return stmts_; }
  bool Stmts(VectorOfany* data) {
    if (!stmtGroupCompliant(data)) return false;
    stmts_ = data;
    return true;
  }

  virtual fork_stmt* DeepClone(BaseClass* parent, CloneContext* context) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int32_t type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int32_t property) const override;

  virtual int32_t Compare(const BaseClass* other, CompareContext* context) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return UHDM_OBJECT_TYPE::uhdmfork_stmt; }

protected:
  void DeepCopy(fork_stmt* clone, BaseClass* parent, CloneContext* context) const;

private:
  int32_t vpiJoinType_ = 0;

  VectorOfany* stmts_ = nullptr;
};


typedef FactoryT<fork_stmt> fork_stmtFactory;


typedef FactoryT<std::vector<fork_stmt *>> VectorOffork_stmtFactory;

}  // namespace UHDM

#endif
