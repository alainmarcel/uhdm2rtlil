/*
 Do not modify, auto-generated by classes.py

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   ref_var.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_REF_VAR_H
#define UHDM_REF_VAR_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/containers.h>
#include <uhdm/variables.h>

#include "actual_group.h"


namespace UHDM {
class task_func;

class ref_var final : public variables {
  UHDM_IMPLEMENT_RTTI(ref_var, variables)
public:
  // Implicit constructor used to initialize all members,
  // comment: ref_var();
  virtual ~ref_var() final = default;

  virtual bool VpiDefName(std::string_view data) final;
  virtual std::string_view VpiDefName() const final;

  bool VpiGeneric() const { return vpiGeneric_; }
  bool VpiGeneric(bool data) {
    vpiGeneric_ = data;
    return true;
  }

  any* Actual_group()  { return actual_group_; }
  const any* Actual_group() const { return actual_group_; }
  template <typename T>
  T* Actual_group() {
    return (actual_group_ == nullptr) ? nullptr : any_cast<T*>(actual_group_);
  }
  template <typename T>
  const T* Actual_group() const {
    return (actual_group_ == nullptr) ? nullptr : any_cast<const T*>(actual_group_);
  }
  bool Actual_group(any* data) {
    if (!actual_groupGroupCompliant(data)) return false;
    actual_group_ = data;
    return true;
  }

  task_func* Task_func()  { return task_func_; }
  const task_func* Task_func() const { return task_func_; }
  template <typename T>
  T* Task_func() {
    return (task_func_ == nullptr) ? nullptr : any_cast<T*>(task_func_);
  }
  template <typename T>
  const T* Task_func() const {
    return (task_func_ == nullptr) ? nullptr : any_cast<const T*>(task_func_);
  }
  bool Task_func(task_func* data) {
    task_func_ = data;
    return true;
  }

  bool VpiStructMember() const { return vpiStructMember_; }
  bool VpiStructMember(bool data) {
    vpiStructMember_ = data;
    return true;
  }

  virtual uint32_t VpiType() const final { return vpiRefVar; }

  virtual ref_var* DeepClone(BaseClass* parent, CloneContext* context) const override;

  virtual const BaseClass* GetByVpiName(std::string_view name) const override;

  virtual std::tuple<const BaseClass*, UHDM_OBJECT_TYPE, const std::vector<const BaseClass*>*> GetByVpiType(int32_t type) const override;

  virtual vpi_property_value_t GetVpiPropertyValue(int32_t property) const override;

  virtual int32_t Compare(const BaseClass* other, CompareContext* context) const override;

  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return UHDM_OBJECT_TYPE::uhdmref_var; }

protected:
  void DeepCopy(ref_var* clone, BaseClass* parent, CloneContext* context) const;

private:
  SymbolId vpiDefName_;

  bool vpiGeneric_ = false;

  any* actual_group_ = nullptr;

  task_func* task_func_ = nullptr;

  bool vpiStructMember_ = false;
};


typedef FactoryT<ref_var> ref_varFactory;


typedef FactoryT<std::vector<ref_var *>> VectorOfref_varFactory;

}  // namespace UHDM

#endif
