// This file is auto-generated by generate_parse_tree_listener.py
// DO NOT EDIT

/*
 Copyright 2019 Alain Dargelas
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 *
 * File:   ParseTreeListener.cpp
 * Author: hs
 *
 */

#include <vector>
#include <string>
#include <Surelog/Common/FileSystem.h>
#include <Surelog/Design/VObject.h>
#include <Surelog/SourceCompile/ParseTreeListener.h>
#include <Surelog/SourceCompile/SymbolTable.h>

#include <algorithm>

namespace SURELOG {
namespace {
struct VObjectComparer final {
  bool operator()(const VObject& lhs, const VObject& rhs) const {
    // Sort top to bottom, left to right, outer to inner.
    // The first two conditions apply primarily to the start line/column
    // The last, outer to inner, applies to the end line/column
    // i.e. if two tokens share the same start line/column sort the outer
    // token ahead of the inner one.
    if (lhs.m_line != rhs.m_line) {
      return lhs.m_line < rhs.m_line;
    }
    if (lhs.m_column != rhs.m_column) {
      return lhs.m_column < rhs.m_column;
    }
    if (lhs.m_endLine != rhs.m_endLine) {
      return lhs.m_endLine > rhs.m_endLine;
    }
    if (lhs.m_endColumn != rhs.m_endColumn) {
      return lhs.m_endColumn > rhs.m_endColumn;
    }
    return false;
  }

  bool operator()(const NodeId& lhs, const NodeId& rhs) const {
    if (lhs == rhs) return false;
    return operator()(m_objects[(RawNodeId)lhs], m_objects[(RawNodeId)rhs]);
  }

  const VObject* const m_objects = nullptr;
  explicit VObjectComparer(const VObject* const objects) : m_objects(objects) {}
};
}  // namespace

VObjectType ParseTreeListener::getNodeType(const ParseTreeNode& node) const {
  return node ? node.m_object->m_type : VObjectType::sl_INVALID_;
}

ParseTreeNode ParseTreeListener::getRootNode() const {
  int32_t index = static_cast<int32_t>(m_count);
  while (--index >= 0) {
    if (m_objects[index].m_type == VObjectType::paTop_level_rule) {
      return ParseTreeNode(NodeId(index), &m_objects[index]);
    }
  }
  return ParseTreeNode();
}

bool ParseTreeListener::getNodeText(const ParseTreeNode& node,
                                    std::string& text) const {
  if (node && node.m_object->m_name) {
    text = m_symbolTable->getSymbol(node.m_object->m_name);
    return true;
  }
  return false;
}

bool ParseTreeListener::getNodeFileId(const ParseTreeNode& node,
                                      PathId& fileId) const {
  if (node) {
    fileId = node.m_object->m_fileId;
    return true;
  }
  return false;
}

bool ParseTreeListener::getNodeLocation(const ParseTreeNode& node,
                                        int32_t& startLine,
                                        int32_t& startColumn, int32_t& endLine,
                                        int32_t& endColumn) const {
  if (node) {
    startLine = node.m_object->m_line;
    startColumn = node.m_object->m_column;
    endLine = node.m_object->m_endLine;
    endColumn = node.m_object->m_endColumn;
    return true;
  }
  return false;
}

bool ParseTreeListener::getNodeStartLocation(const ParseTreeNode& node,
                                             int32_t& line,
                                             int32_t& column) const {
  int32_t endLine = 0, endColumn = 0;
  return getNodeLocation(node, line, column, endLine, endColumn);
}

bool ParseTreeListener::getNodeEndLocation(const ParseTreeNode& node,
                                           int32_t& line,
                                           int32_t& column) const {
  int32_t startLine = 0, startColumn = 0;
  return getNodeLocation(node, startLine, startColumn, line, column);
}

ParseTreeNode ParseTreeListener::getNodeParent(
    const ParseTreeNode& node) const {
  if (node && node.m_object->m_parent) {
    return ParseTreeNode(node.m_object->m_parent,
                         &m_objects[(RawNodeId)node.m_object->m_parent]);
  }
  return ParseTreeNode();
}

bool ParseTreeListener::getNodeChildren(
    const ParseTreeNode& node, bool ordered,
    parsetreenode_vector_t& children) const {
  if (!node) return false;
  if (!node.m_object->m_child) return true;

  std::vector<NodeId> indexes;
  indexes.reserve(16);
  for (NodeId id = node.m_object->m_child; id;
       id = m_objects[(RawNodeId)id].m_sibling) {
    indexes.emplace_back(id);
  }

  if (ordered) {
    std::sort(indexes.begin(), indexes.end(), VObjectComparer(m_objects));
  }

  children.reserve(children.size() + indexes.size());
  for (const NodeId& index : indexes) {
    children.emplace_back(index, &m_objects[(RawNodeId)index]);
  }

  return true;
}

ParseTreeNode ParseTreeListener::getNodePrevSibling(
    const ParseTreeNode& node) const {
  if (const ParseTreeNode parent = getNodeParent(node)) {
    parsetreenode_vector_t children;
    if (getNodeChildren(parent, true, children)) {
      for (size_t i = 1, ni = children.size(); i < ni; ++i) {
        if (children[i].m_index == node.m_index) {
          return children[i - 1];
        }
      }
    }
  }
  return ParseTreeNode();
}

ParseTreeNode ParseTreeListener::getNodeNextSibling(
    const ParseTreeNode& node) const {
  if (const ParseTreeNode parent = getNodeParent(node)) {
    parsetreenode_vector_t children;
    if (getNodeChildren(parent, true, children)) {
      for (size_t i = 0, ni = children.size() - 1; i < ni; ++i) {
        if (children[i].m_index == node.m_index) {
          return children[i + 1];
        }
      }
    }
  }
  return ParseTreeNode();
}

bool ParseTreeListener::getNodeSiblings(
    const ParseTreeNode& node, bool ordered,
    parsetreenode_vector_t& siblings) const {
  if (!node) return false;
  if (!node.m_object->m_parent) return true;

  const VObject& parent = m_objects[(RawNodeId)node.m_object->m_parent];

  std::vector<NodeId> indexes;
  indexes.reserve(16);
  for (NodeId id = parent.m_child; id;
       id = m_objects[(RawNodeId)id].m_sibling) {
    if (id != node.m_index) indexes.emplace_back(id);
  }

  if (ordered) {
    std::sort(indexes.begin(), indexes.end(), VObjectComparer(m_objects));
  }

  siblings.reserve(siblings.size() + indexes.size());
  for (const NodeId& index : indexes) {
    siblings.emplace_back(index, &m_objects[(RawNodeId)index]);
  }

  return true;
}

void ParseTreeListener::listen(PathId fileId, const VObject* objects,
                               size_t count, const SymbolTable* symbolTable) {
  m_objects = objects;
  m_count = count;
  m_symbolTable = symbolTable;

  enterSourceFile(fileId);
  listen(getRootNode());
  leaveSourceFile(fileId);
}

void ParseTreeListener::listenChildren(const ParseTreeNode& node,
                                       bool ordered) {
  if (!node || !node.m_object->m_child) return;

  std::vector<NodeId> indexes;
  indexes.reserve(16);
  for (NodeId id = node.m_object->m_child; id;
       id = m_objects[(RawNodeId)id].m_sibling) {
    indexes.emplace_back(id);
  }

  if (ordered) {
    std::sort(indexes.begin(), indexes.end(), VObjectComparer(m_objects));
  }

  for (const NodeId& index : indexes) {
    const ParseTreeNode childNode(index, &m_objects[(RawNodeId)index]);
    listen(childNode);
  }
}

void ParseTreeListener::listenSiblings(const ParseTreeNode& node,
                                       bool ordered) {
  if (!node || !node.m_object->m_parent) return;

  const VObject& parent = m_objects[(RawNodeId)node.m_object->m_parent];

  std::vector<NodeId> indexes;
  indexes.reserve(16);
  for (NodeId id = parent.m_child; id;
       id = m_objects[(RawNodeId)id].m_sibling) {
    if (id != node.m_index) indexes.emplace_back(id);
  }

  if (ordered) {
    std::sort(indexes.begin(), indexes.end(), VObjectComparer(m_objects));
  }

  for (const NodeId& index : indexes) {
    const ParseTreeNode siblingNode(index, &m_objects[(RawNodeId)index]);
    listen(siblingNode);
  }
}

// clang-format off
void ParseTreeListener::listenPP_Accelerate_directive(const ParseTreeNode& node) {
  enterPP_Accelerate_directive(node);
  listenChildren(node, true);
  leavePP_Accelerate_directive(node);
}

void ParseTreeListener::listenPP_Autoexpand_vectornets_directive(const ParseTreeNode& node) {
  enterPP_Autoexpand_vectornets_directive(node);
  listenChildren(node, true);
  leavePP_Autoexpand_vectornets_directive(node);
}

void ParseTreeListener::listenPP_Begin_keywords_directive(const ParseTreeNode& node) {
  enterPP_Begin_keywords_directive(node);
  listenChildren(node, true);
  leavePP_Begin_keywords_directive(node);
}

void ParseTreeListener::listenPP_Celldefine_directive(const ParseTreeNode& node) {
  enterPP_Celldefine_directive(node);
  listenChildren(node, true);
  leavePP_Celldefine_directive(node);
}

void ParseTreeListener::listenPP_Checker(const ParseTreeNode& node) {
  enterPP_Checker(node);
  listenChildren(node, true);
  leavePP_Checker(node);
}

void ParseTreeListener::listenPP_Comment(const ParseTreeNode& node) {
  enterPP_Comment(node);
  listenChildren(node, true);
  leavePP_Comment(node);
}

void ParseTreeListener::listenPP_Config(const ParseTreeNode& node) {
  enterPP_Config(node);
  listenChildren(node, true);
  leavePP_Config(node);
}

void ParseTreeListener::listenPP_Default_decay_time_directive(const ParseTreeNode& node) {
  enterPP_Default_decay_time_directive(node);
  listenChildren(node, true);
  leavePP_Default_decay_time_directive(node);
}

void ParseTreeListener::listenPP_Default_nettype_directive(const ParseTreeNode& node) {
  enterPP_Default_nettype_directive(node);
  listenChildren(node, true);
  leavePP_Default_nettype_directive(node);
}

void ParseTreeListener::listenPP_Default_trireg_strength_directive(const ParseTreeNode& node) {
  enterPP_Default_trireg_strength_directive(node);
  listenChildren(node, true);
  leavePP_Default_trireg_strength_directive(node);
}

void ParseTreeListener::listenPP_Default_value(const ParseTreeNode& node) {
  enterPP_Default_value(node);
  listenChildren(node, true);
  leavePP_Default_value(node);
}

void ParseTreeListener::listenPP_Define_directive(const ParseTreeNode& node) {
  enterPP_Define_directive(node);
  listenChildren(node, true);
  leavePP_Define_directive(node);
}

void ParseTreeListener::listenPP_Delay_mode_distributed_directive(const ParseTreeNode& node) {
  enterPP_Delay_mode_distributed_directive(node);
  listenChildren(node, true);
  leavePP_Delay_mode_distributed_directive(node);
}

void ParseTreeListener::listenPP_Delay_mode_path_directive(const ParseTreeNode& node) {
  enterPP_Delay_mode_path_directive(node);
  listenChildren(node, true);
  leavePP_Delay_mode_path_directive(node);
}

void ParseTreeListener::listenPP_Delay_mode_unit_directive(const ParseTreeNode& node) {
  enterPP_Delay_mode_unit_directive(node);
  listenChildren(node, true);
  leavePP_Delay_mode_unit_directive(node);
}

void ParseTreeListener::listenPP_Delay_mode_zero_directive(const ParseTreeNode& node) {
  enterPP_Delay_mode_zero_directive(node);
  listenChildren(node, true);
  leavePP_Delay_mode_zero_directive(node);
}

void ParseTreeListener::listenPP_Description(const ParseTreeNode& node) {
  enterPP_Description(node);
  listenChildren(node, true);
  leavePP_Description(node);
}

void ParseTreeListener::listenPP_Directive_in_macro(const ParseTreeNode& node) {
  enterPP_Directive_in_macro(node);
  listenChildren(node, true);
  leavePP_Directive_in_macro(node);
}

void ParseTreeListener::listenPP_Disable_portfaults_directive(const ParseTreeNode& node) {
  enterPP_Disable_portfaults_directive(node);
  listenChildren(node, true);
  leavePP_Disable_portfaults_directive(node);
}

void ParseTreeListener::listenPP_Else_directive(const ParseTreeNode& node) {
  enterPP_Else_directive(node);
  listenChildren(node, true);
  leavePP_Else_directive(node);
}

void ParseTreeListener::listenPP_Elseif_directive(const ParseTreeNode& node) {
  enterPP_Elseif_directive(node);
  listenChildren(node, true);
  leavePP_Elseif_directive(node);
}

void ParseTreeListener::listenPP_Elseif_directive_in_macro_body(const ParseTreeNode& node) {
  enterPP_Elseif_directive_in_macro_body(node);
  listenChildren(node, true);
  leavePP_Elseif_directive_in_macro_body(node);
}

void ParseTreeListener::listenPP_Elsif_directive(const ParseTreeNode& node) {
  enterPP_Elsif_directive(node);
  listenChildren(node, true);
  leavePP_Elsif_directive(node);
}

void ParseTreeListener::listenPP_Elsif_directive_in_macro_body(const ParseTreeNode& node) {
  enterPP_Elsif_directive_in_macro_body(node);
  listenChildren(node, true);
  leavePP_Elsif_directive_in_macro_body(node);
}

void ParseTreeListener::listenPP_Enable_portfaults_directive(const ParseTreeNode& node) {
  enterPP_Enable_portfaults_directive(node);
  listenChildren(node, true);
  leavePP_Enable_portfaults_directive(node);
}

void ParseTreeListener::listenPP_End_keywords_directive(const ParseTreeNode& node) {
  enterPP_End_keywords_directive(node);
  listenChildren(node, true);
  leavePP_End_keywords_directive(node);
}

void ParseTreeListener::listenPP_Endcelldefine_directive(const ParseTreeNode& node) {
  enterPP_Endcelldefine_directive(node);
  listenChildren(node, true);
  leavePP_Endcelldefine_directive(node);
}

void ParseTreeListener::listenPP_Endchecker(const ParseTreeNode& node) {
  enterPP_Endchecker(node);
  listenChildren(node, true);
  leavePP_Endchecker(node);
}

void ParseTreeListener::listenPP_Endconfig(const ParseTreeNode& node) {
  enterPP_Endconfig(node);
  listenChildren(node, true);
  leavePP_Endconfig(node);
}

void ParseTreeListener::listenPP_Endif_directive(const ParseTreeNode& node) {
  enterPP_Endif_directive(node);
  listenChildren(node, true);
  leavePP_Endif_directive(node);
}

void ParseTreeListener::listenPP_Endinterface(const ParseTreeNode& node) {
  enterPP_Endinterface(node);
  listenChildren(node, true);
  leavePP_Endinterface(node);
}

void ParseTreeListener::listenPP_Endmodule(const ParseTreeNode& node) {
  enterPP_Endmodule(node);
  listenChildren(node, true);
  leavePP_Endmodule(node);
}

void ParseTreeListener::listenPP_Endpackage(const ParseTreeNode& node) {
  enterPP_Endpackage(node);
  listenChildren(node, true);
  leavePP_Endpackage(node);
}

void ParseTreeListener::listenPP_Endprimitive(const ParseTreeNode& node) {
  enterPP_Endprimitive(node);
  listenChildren(node, true);
  leavePP_Endprimitive(node);
}

void ParseTreeListener::listenPP_Endprogram(const ParseTreeNode& node) {
  enterPP_Endprogram(node);
  listenChildren(node, true);
  leavePP_Endprogram(node);
}

void ParseTreeListener::listenPP_Endprotect_directive(const ParseTreeNode& node) {
  enterPP_Endprotect_directive(node);
  listenChildren(node, true);
  leavePP_Endprotect_directive(node);
}

void ParseTreeListener::listenPP_Endprotected_directive(const ParseTreeNode& node) {
  enterPP_Endprotected_directive(node);
  listenChildren(node, true);
  leavePP_Endprotected_directive(node);
}

void ParseTreeListener::listenPP_Escaped_identifier(const ParseTreeNode& node) {
  enterPP_Escaped_identifier(node);
  listenChildren(node, true);
  leavePP_Escaped_identifier(node);
}

void ParseTreeListener::listenPP_Escaped_macro_definition_body(const ParseTreeNode& node) {
  enterPP_Escaped_macro_definition_body(node);
  listenChildren(node, true);
  leavePP_Escaped_macro_definition_body(node);
}

void ParseTreeListener::listenPP_Escaped_macro_definition_body_alt1(const ParseTreeNode& node) {
  enterPP_Escaped_macro_definition_body_alt1(node);
  listenChildren(node, true);
  leavePP_Escaped_macro_definition_body_alt1(node);
}

void ParseTreeListener::listenPP_Escaped_macro_definition_body_alt2(const ParseTreeNode& node) {
  enterPP_Escaped_macro_definition_body_alt2(node);
  listenChildren(node, true);
  leavePP_Escaped_macro_definition_body_alt2(node);
}

void ParseTreeListener::listenPP_Expand_vectornets_directive(const ParseTreeNode& node) {
  enterPP_Expand_vectornets_directive(node);
  listenChildren(node, true);
  leavePP_Expand_vectornets_directive(node);
}

void ParseTreeListener::listenPP_Identifier_in_macro_body(const ParseTreeNode& node) {
  enterPP_Identifier_in_macro_body(node);
  listenChildren(node, true);
  leavePP_Identifier_in_macro_body(node);
}

void ParseTreeListener::listenPP_Ifdef_directive(const ParseTreeNode& node) {
  enterPP_Ifdef_directive(node);
  listenChildren(node, true);
  leavePP_Ifdef_directive(node);
}

void ParseTreeListener::listenPP_Ifdef_directive_in_macro_body(const ParseTreeNode& node) {
  enterPP_Ifdef_directive_in_macro_body(node);
  listenChildren(node, true);
  leavePP_Ifdef_directive_in_macro_body(node);
}

void ParseTreeListener::listenPP_Ifndef_directive(const ParseTreeNode& node) {
  enterPP_Ifndef_directive(node);
  listenChildren(node, true);
  leavePP_Ifndef_directive(node);
}

void ParseTreeListener::listenPP_Ifndef_directive_in_macro_body(const ParseTreeNode& node) {
  enterPP_Ifndef_directive_in_macro_body(node);
  listenChildren(node, true);
  leavePP_Ifndef_directive_in_macro_body(node);
}

void ParseTreeListener::listenPP_Include_directive(const ParseTreeNode& node) {
  enterPP_Include_directive(node);
  listenChildren(node, true);
  leavePP_Include_directive(node);
}

void ParseTreeListener::listenPP_Integral_number(const ParseTreeNode& node) {
  enterPP_Integral_number(node);
  listenChildren(node, true);
  leavePP_Integral_number(node);
}

void ParseTreeListener::listenPP_Line_directive(const ParseTreeNode& node) {
  enterPP_Line_directive(node);
  listenChildren(node, true);
  leavePP_Line_directive(node);
}

void ParseTreeListener::listenPP_Macro_actual_args(const ParseTreeNode& node) {
  enterPP_Macro_actual_args(node);
  listenChildren(node, true);
  leavePP_Macro_actual_args(node);
}

void ParseTreeListener::listenPP_Macro_arg(const ParseTreeNode& node) {
  enterPP_Macro_arg(node);
  listenChildren(node, true);
  leavePP_Macro_arg(node);
}

void ParseTreeListener::listenPP_Macro_arguments(const ParseTreeNode& node) {
  enterPP_Macro_arguments(node);
  listenChildren(node, true);
  leavePP_Macro_arguments(node);
}

void ParseTreeListener::listenPP_Macro_definition(const ParseTreeNode& node) {
  enterPP_Macro_definition(node);
  listenChildren(node, true);
  leavePP_Macro_definition(node);
}

void ParseTreeListener::listenPP_Macro_instance(const ParseTreeNode& node) {
  enterPP_Macro_instance(node);
  listenChildren(node, true);
  leavePP_Macro_instance(node);
}

void ParseTreeListener::listenPP_Module(const ParseTreeNode& node) {
  enterPP_Module(node);
  listenChildren(node, true);
  leavePP_Module(node);
}

void ParseTreeListener::listenPP_Multiline_args_macro_definition(const ParseTreeNode& node) {
  enterPP_Multiline_args_macro_definition(node);
  listenChildren(node, true);
  leavePP_Multiline_args_macro_definition(node);
}

void ParseTreeListener::listenPP_Multiline_no_args_macro_definition(const ParseTreeNode& node) {
  enterPP_Multiline_no_args_macro_definition(node);
  listenChildren(node, true);
  leavePP_Multiline_no_args_macro_definition(node);
}

void ParseTreeListener::listenPP_Noaccelerate_directive(const ParseTreeNode& node) {
  enterPP_Noaccelerate_directive(node);
  listenChildren(node, true);
  leavePP_Noaccelerate_directive(node);
}

void ParseTreeListener::listenPP_Noexpand_vectornets_directive(const ParseTreeNode& node) {
  enterPP_Noexpand_vectornets_directive(node);
  listenChildren(node, true);
  leavePP_Noexpand_vectornets_directive(node);
}

void ParseTreeListener::listenPP_Noremove_gatenames_directive(const ParseTreeNode& node) {
  enterPP_Noremove_gatenames_directive(node);
  listenChildren(node, true);
  leavePP_Noremove_gatenames_directive(node);
}

void ParseTreeListener::listenPP_Noremove_netnames_directive(const ParseTreeNode& node) {
  enterPP_Noremove_netnames_directive(node);
  listenChildren(node, true);
  leavePP_Noremove_netnames_directive(node);
}

void ParseTreeListener::listenPP_Nosuppress_faults_directive(const ParseTreeNode& node) {
  enterPP_Nosuppress_faults_directive(node);
  listenChildren(node, true);
  leavePP_Nosuppress_faults_directive(node);
}

void ParseTreeListener::listenPP_Nounconnected_drive_directive(const ParseTreeNode& node) {
  enterPP_Nounconnected_drive_directive(node);
  listenChildren(node, true);
  leavePP_Nounconnected_drive_directive(node);
}

void ParseTreeListener::listenPP_Null_rule(const ParseTreeNode& node) {
  enterPP_Null_rule(node);
  listenChildren(node, true);
  leavePP_Null_rule(node);
}

void ParseTreeListener::listenPP_Paired_parens(const ParseTreeNode& node) {
  enterPP_Paired_parens(node);
  listenChildren(node, true);
  leavePP_Paired_parens(node);
}

void ParseTreeListener::listenPP_Pound_delay(const ParseTreeNode& node) {
  enterPP_Pound_delay(node);
  listenChildren(node, true);
  leavePP_Pound_delay(node);
}

void ParseTreeListener::listenPP_Pound_pound_delay(const ParseTreeNode& node) {
  enterPP_Pound_pound_delay(node);
  listenChildren(node, true);
  leavePP_Pound_pound_delay(node);
}

void ParseTreeListener::listenPP_Pragma_directive(const ParseTreeNode& node) {
  enterPP_Pragma_directive(node);
  listenChildren(node, true);
  leavePP_Pragma_directive(node);
}

void ParseTreeListener::listenPP_Pragma_expression(const ParseTreeNode& node) {
  enterPP_Pragma_expression(node);
  listenChildren(node, true);
  leavePP_Pragma_expression(node);
}

void ParseTreeListener::listenPP_Primitive(const ParseTreeNode& node) {
  enterPP_Primitive(node);
  listenChildren(node, true);
  leavePP_Primitive(node);
}

void ParseTreeListener::listenPP_Program(const ParseTreeNode& node) {
  enterPP_Program(node);
  listenChildren(node, true);
  leavePP_Program(node);
}

void ParseTreeListener::listenPP_Protect_directive(const ParseTreeNode& node) {
  enterPP_Protect_directive(node);
  listenChildren(node, true);
  leavePP_Protect_directive(node);
}

void ParseTreeListener::listenPP_Protected_directive(const ParseTreeNode& node) {
  enterPP_Protected_directive(node);
  listenChildren(node, true);
  leavePP_Protected_directive(node);
}

void ParseTreeListener::listenPP_Remove_gatename_directive(const ParseTreeNode& node) {
  enterPP_Remove_gatename_directive(node);
  listenChildren(node, true);
  leavePP_Remove_gatename_directive(node);
}

void ParseTreeListener::listenPP_Remove_netname_directive(const ParseTreeNode& node) {
  enterPP_Remove_netname_directive(node);
  listenChildren(node, true);
  leavePP_Remove_netname_directive(node);
}

void ParseTreeListener::listenPP_Resetall_directive(const ParseTreeNode& node) {
  enterPP_Resetall_directive(node);
  listenChildren(node, true);
  leavePP_Resetall_directive(node);
}

void ParseTreeListener::listenPP_Signed_directive(const ParseTreeNode& node) {
  enterPP_Signed_directive(node);
  listenChildren(node, true);
  leavePP_Signed_directive(node);
}

void ParseTreeListener::listenPP_Simple_args_macro_definition(const ParseTreeNode& node) {
  enterPP_Simple_args_macro_definition(node);
  listenChildren(node, true);
  leavePP_Simple_args_macro_definition(node);
}

void ParseTreeListener::listenPP_Simple_args_macro_definition_in_macro_body(const ParseTreeNode& node) {
  enterPP_Simple_args_macro_definition_in_macro_body(node);
  listenChildren(node, true);
  leavePP_Simple_args_macro_definition_in_macro_body(node);
}

void ParseTreeListener::listenPP_Simple_macro_definition_body(const ParseTreeNode& node) {
  enterPP_Simple_macro_definition_body(node);
  listenChildren(node, true);
  leavePP_Simple_macro_definition_body(node);
}

void ParseTreeListener::listenPP_Simple_macro_definition_body_in_macro_body(const ParseTreeNode& node) {
  enterPP_Simple_macro_definition_body_in_macro_body(node);
  listenChildren(node, true);
  leavePP_Simple_macro_definition_body_in_macro_body(node);
}

void ParseTreeListener::listenPP_Simple_no_args_macro_definition(const ParseTreeNode& node) {
  enterPP_Simple_no_args_macro_definition(node);
  listenChildren(node, true);
  leavePP_Simple_no_args_macro_definition(node);
}

void ParseTreeListener::listenPP_Simple_no_args_macro_definition_in_macro_body(const ParseTreeNode& node) {
  enterPP_Simple_no_args_macro_definition_in_macro_body(node);
  listenChildren(node, true);
  leavePP_Simple_no_args_macro_definition_in_macro_body(node);
}

void ParseTreeListener::listenPP_Source_text(const ParseTreeNode& node) {
  enterPP_Source_text(node);
  listenChildren(node, true);
  leavePP_Source_text(node);
}

void ParseTreeListener::listenPP_String(const ParseTreeNode& node) {
  enterPP_String(node);
  listenChildren(node, true);
  leavePP_String(node);
}

void ParseTreeListener::listenPP_String_blob(const ParseTreeNode& node) {
  enterPP_String_blob(node);
  listenChildren(node, true);
  leavePP_String_blob(node);
}

void ParseTreeListener::listenPP_Suppress_faults_directive(const ParseTreeNode& node) {
  enterPP_Suppress_faults_directive(node);
  listenChildren(node, true);
  leavePP_Suppress_faults_directive(node);
}

void ParseTreeListener::listenPP_Sv_file_directive(const ParseTreeNode& node) {
  enterPP_Sv_file_directive(node);
  listenChildren(node, true);
  leavePP_Sv_file_directive(node);
}

void ParseTreeListener::listenPP_Sv_interface(const ParseTreeNode& node) {
  enterPP_Sv_interface(node);
  listenChildren(node, true);
  leavePP_Sv_interface(node);
}

void ParseTreeListener::listenPP_Sv_line_directive(const ParseTreeNode& node) {
  enterPP_Sv_line_directive(node);
  listenChildren(node, true);
  leavePP_Sv_line_directive(node);
}

void ParseTreeListener::listenPP_Sv_package(const ParseTreeNode& node) {
  enterPP_Sv_package(node);
  listenChildren(node, true);
  leavePP_Sv_package(node);
}

void ParseTreeListener::listenPP_Text_blob(const ParseTreeNode& node) {
  enterPP_Text_blob(node);
  listenChildren(node, true);
  leavePP_Text_blob(node);
}

void ParseTreeListener::listenPP_Timescale_directive(const ParseTreeNode& node) {
  enterPP_Timescale_directive(node);
  listenChildren(node, true);
  leavePP_Timescale_directive(node);
}

void ParseTreeListener::listenPP_Top_level_rule(const ParseTreeNode& node) {
  enterPP_Top_level_rule(node);
  listenChildren(node, true);
  leavePP_Top_level_rule(node);
}

void ParseTreeListener::listenPP_Unconnected_drive_directive(const ParseTreeNode& node) {
  enterPP_Unconnected_drive_directive(node);
  listenChildren(node, true);
  leavePP_Unconnected_drive_directive(node);
}

void ParseTreeListener::listenPP_Undef_directive(const ParseTreeNode& node) {
  enterPP_Undef_directive(node);
  listenChildren(node, true);
  leavePP_Undef_directive(node);
}

void ParseTreeListener::listenPP_Undefineall_directive(const ParseTreeNode& node) {
  enterPP_Undefineall_directive(node);
  listenChildren(node, true);
  leavePP_Undefineall_directive(node);
}

void ParseTreeListener::listenPP_Unsigned_directive(const ParseTreeNode& node) {
  enterPP_Unsigned_directive(node);
  listenChildren(node, true);
  leavePP_Unsigned_directive(node);
}

void ParseTreeListener::listenPP_Unterminated_string(const ParseTreeNode& node) {
  enterPP_Unterminated_string(node);
  listenChildren(node, true);
  leavePP_Unterminated_string(node);
}

void ParseTreeListener::listenPP_Uselib_directive(const ParseTreeNode& node) {
  enterPP_Uselib_directive(node);
  listenChildren(node, true);
  leavePP_Uselib_directive(node);
}

void ParseTreeListener::listenPA_Accelerate_directive(const ParseTreeNode& node) {
  enterPA_Accelerate_directive(node);
  listenChildren(node, true);
  leavePA_Accelerate_directive(node);
}

void ParseTreeListener::listenPA_Action_block(const ParseTreeNode& node) {
  enterPA_Action_block(node);
  listenChildren(node, true);
  leavePA_Action_block(node);
}

void ParseTreeListener::listenPA_Actual_arg_expr(const ParseTreeNode& node) {
  enterPA_Actual_arg_expr(node);
  listenChildren(node, true);
  leavePA_Actual_arg_expr(node);
}

void ParseTreeListener::listenPA_Actual_arg_list(const ParseTreeNode& node) {
  enterPA_Actual_arg_list(node);
  listenChildren(node, true);
  leavePA_Actual_arg_list(node);
}

void ParseTreeListener::listenPA_Always_construct(const ParseTreeNode& node) {
  enterPA_Always_construct(node);
  listenChildren(node, true);
  leavePA_Always_construct(node);
}

void ParseTreeListener::listenPA_Always_keyword(const ParseTreeNode& node) {
  enterPA_Always_keyword(node);
  listenChildren(node, true);
  leavePA_Always_keyword(node);
}

void ParseTreeListener::listenPA_And_call(const ParseTreeNode& node) {
  enterPA_And_call(node);
  listenChildren(node, true);
  leavePA_And_call(node);
}

void ParseTreeListener::listenPA_Anonymous_program(const ParseTreeNode& node) {
  enterPA_Anonymous_program(node);
  listenChildren(node, true);
  leavePA_Anonymous_program(node);
}

void ParseTreeListener::listenPA_Anonymous_program_item(const ParseTreeNode& node) {
  enterPA_Anonymous_program_item(node);
  listenChildren(node, true);
  leavePA_Anonymous_program_item(node);
}

void ParseTreeListener::listenPA_Ansi_port_declaration(const ParseTreeNode& node) {
  enterPA_Ansi_port_declaration(node);
  listenChildren(node, true);
  leavePA_Ansi_port_declaration(node);
}

void ParseTreeListener::listenPA_Argument(const ParseTreeNode& node) {
  enterPA_Argument(node);
  listenChildren(node, true);
  leavePA_Argument(node);
}

void ParseTreeListener::listenPA_Array_manipulation_call(const ParseTreeNode& node) {
  enterPA_Array_manipulation_call(node);
  listenChildren(node, true);
  leavePA_Array_manipulation_call(node);
}

void ParseTreeListener::listenPA_Array_member_label(const ParseTreeNode& node) {
  enterPA_Array_member_label(node);
  listenChildren(node, true);
  leavePA_Array_member_label(node);
}

void ParseTreeListener::listenPA_Array_method_name(const ParseTreeNode& node) {
  enterPA_Array_method_name(node);
  listenChildren(node, true);
  leavePA_Array_method_name(node);
}

void ParseTreeListener::listenPA_Array_pattern_key(const ParseTreeNode& node) {
  enterPA_Array_pattern_key(node);
  listenChildren(node, true);
  leavePA_Array_pattern_key(node);
}

void ParseTreeListener::listenPA_Array_range_expression(const ParseTreeNode& node) {
  enterPA_Array_range_expression(node);
  listenChildren(node, true);
  leavePA_Array_range_expression(node);
}

void ParseTreeListener::listenPA_Assert_property_statement(const ParseTreeNode& node) {
  enterPA_Assert_property_statement(node);
  listenChildren(node, true);
  leavePA_Assert_property_statement(node);
}

void ParseTreeListener::listenPA_Assertion_item(const ParseTreeNode& node) {
  enterPA_Assertion_item(node);
  listenChildren(node, true);
  leavePA_Assertion_item(node);
}

void ParseTreeListener::listenPA_Assertion_item_declaration(const ParseTreeNode& node) {
  enterPA_Assertion_item_declaration(node);
  listenChildren(node, true);
  leavePA_Assertion_item_declaration(node);
}

void ParseTreeListener::listenPA_Assertion_variable_declaration(const ParseTreeNode& node) {
  enterPA_Assertion_variable_declaration(node);
  listenChildren(node, true);
  leavePA_Assertion_variable_declaration(node);
}

void ParseTreeListener::listenPA_Assignment_operator(const ParseTreeNode& node) {
  enterPA_Assignment_operator(node);
  listenChildren(node, true);
  leavePA_Assignment_operator(node);
}

void ParseTreeListener::listenPA_Assignment_pattern(const ParseTreeNode& node) {
  enterPA_Assignment_pattern(node);
  listenChildren(node, true);
  leavePA_Assignment_pattern(node);
}

void ParseTreeListener::listenPA_Assignment_pattern_expression(const ParseTreeNode& node) {
  enterPA_Assignment_pattern_expression(node);
  listenChildren(node, true);
  leavePA_Assignment_pattern_expression(node);
}

void ParseTreeListener::listenPA_Assignment_pattern_expression_type(const ParseTreeNode& node) {
  enterPA_Assignment_pattern_expression_type(node);
  listenChildren(node, true);
  leavePA_Assignment_pattern_expression_type(node);
}

void ParseTreeListener::listenPA_Assignment_pattern_key(const ParseTreeNode& node) {
  enterPA_Assignment_pattern_key(node);
  listenChildren(node, true);
  leavePA_Assignment_pattern_key(node);
}

void ParseTreeListener::listenPA_Assignment_pattern_net_lvalue(const ParseTreeNode& node) {
  enterPA_Assignment_pattern_net_lvalue(node);
  listenChildren(node, true);
  leavePA_Assignment_pattern_net_lvalue(node);
}

void ParseTreeListener::listenPA_Assignment_pattern_variable_lvalue(const ParseTreeNode& node) {
  enterPA_Assignment_pattern_variable_lvalue(node);
  listenChildren(node, true);
  leavePA_Assignment_pattern_variable_lvalue(node);
}

void ParseTreeListener::listenPA_Associative_dimension(const ParseTreeNode& node) {
  enterPA_Associative_dimension(node);
  listenChildren(node, true);
  leavePA_Associative_dimension(node);
}

void ParseTreeListener::listenPA_Assume_property_statement(const ParseTreeNode& node) {
  enterPA_Assume_property_statement(node);
  listenChildren(node, true);
  leavePA_Assume_property_statement(node);
}

void ParseTreeListener::listenPA_Attr_name(const ParseTreeNode& node) {
  enterPA_Attr_name(node);
  listenChildren(node, true);
  leavePA_Attr_name(node);
}

void ParseTreeListener::listenPA_Attr_spec(const ParseTreeNode& node) {
  enterPA_Attr_spec(node);
  listenChildren(node, true);
  leavePA_Attr_spec(node);
}

void ParseTreeListener::listenPA_Attribute_instance(const ParseTreeNode& node) {
  enterPA_Attribute_instance(node);
  listenChildren(node, true);
  leavePA_Attribute_instance(node);
}

void ParseTreeListener::listenPA_Autoexpand_vectornets_directive(const ParseTreeNode& node) {
  enterPA_Autoexpand_vectornets_directive(node);
  listenChildren(node, true);
  leavePA_Autoexpand_vectornets_directive(node);
}

void ParseTreeListener::listenPA_Begin_keywords_directive(const ParseTreeNode& node) {
  enterPA_Begin_keywords_directive(node);
  listenChildren(node, true);
  leavePA_Begin_keywords_directive(node);
}

void ParseTreeListener::listenPA_Binary_module_path_operator(const ParseTreeNode& node) {
  enterPA_Binary_module_path_operator(node);
  listenChildren(node, true);
  leavePA_Binary_module_path_operator(node);
}

void ParseTreeListener::listenPA_Bind_directive(const ParseTreeNode& node) {
  enterPA_Bind_directive(node);
  listenChildren(node, true);
  leavePA_Bind_directive(node);
}

void ParseTreeListener::listenPA_Bind_instantiation(const ParseTreeNode& node) {
  enterPA_Bind_instantiation(node);
  listenChildren(node, true);
  leavePA_Bind_instantiation(node);
}

void ParseTreeListener::listenPA_Bins_expression(const ParseTreeNode& node) {
  enterPA_Bins_expression(node);
  listenChildren(node, true);
  leavePA_Bins_expression(node);
}

void ParseTreeListener::listenPA_Bins_keyword(const ParseTreeNode& node) {
  enterPA_Bins_keyword(node);
  listenChildren(node, true);
  leavePA_Bins_keyword(node);
}

void ParseTreeListener::listenPA_Bins_or_empty(const ParseTreeNode& node) {
  enterPA_Bins_or_empty(node);
  listenChildren(node, true);
  leavePA_Bins_or_empty(node);
}

void ParseTreeListener::listenPA_Bins_or_options(const ParseTreeNode& node) {
  enterPA_Bins_or_options(node);
  listenChildren(node, true);
  leavePA_Bins_or_options(node);
}

void ParseTreeListener::listenPA_Bins_selection(const ParseTreeNode& node) {
  enterPA_Bins_selection(node);
  listenChildren(node, true);
  leavePA_Bins_selection(node);
}

void ParseTreeListener::listenPA_Bins_selection_or_option(const ParseTreeNode& node) {
  enterPA_Bins_selection_or_option(node);
  listenChildren(node, true);
  leavePA_Bins_selection_or_option(node);
}

void ParseTreeListener::listenPA_Bit_select(const ParseTreeNode& node) {
  enterPA_Bit_select(node);
  listenChildren(node, true);
  leavePA_Bit_select(node);
}

void ParseTreeListener::listenPA_Block_event_expression(const ParseTreeNode& node) {
  enterPA_Block_event_expression(node);
  listenChildren(node, true);
  leavePA_Block_event_expression(node);
}

void ParseTreeListener::listenPA_Block_item_declaration(const ParseTreeNode& node) {
  enterPA_Block_item_declaration(node);
  listenChildren(node, true);
  leavePA_Block_item_declaration(node);
}

void ParseTreeListener::listenPA_Blocking_assignment(const ParseTreeNode& node) {
  enterPA_Blocking_assignment(node);
  listenChildren(node, true);
  leavePA_Blocking_assignment(node);
}

void ParseTreeListener::listenPA_Boolean_abbrev(const ParseTreeNode& node) {
  enterPA_Boolean_abbrev(node);
  listenChildren(node, true);
  leavePA_Boolean_abbrev(node);
}

void ParseTreeListener::listenPA_Built_in_method_call(const ParseTreeNode& node) {
  enterPA_Built_in_method_call(node);
  listenChildren(node, true);
  leavePA_Built_in_method_call(node);
}

void ParseTreeListener::listenPA_Case_generate_construct(const ParseTreeNode& node) {
  enterPA_Case_generate_construct(node);
  listenChildren(node, true);
  leavePA_Case_generate_construct(node);
}

void ParseTreeListener::listenPA_Case_generate_item(const ParseTreeNode& node) {
  enterPA_Case_generate_item(node);
  listenChildren(node, true);
  leavePA_Case_generate_item(node);
}

void ParseTreeListener::listenPA_Case_inside_item(const ParseTreeNode& node) {
  enterPA_Case_inside_item(node);
  listenChildren(node, true);
  leavePA_Case_inside_item(node);
}

void ParseTreeListener::listenPA_Case_item(const ParseTreeNode& node) {
  enterPA_Case_item(node);
  listenChildren(node, true);
  leavePA_Case_item(node);
}

void ParseTreeListener::listenPA_Case_keyword(const ParseTreeNode& node) {
  enterPA_Case_keyword(node);
  listenChildren(node, true);
  leavePA_Case_keyword(node);
}

void ParseTreeListener::listenPA_Case_pattern_item(const ParseTreeNode& node) {
  enterPA_Case_pattern_item(node);
  listenChildren(node, true);
  leavePA_Case_pattern_item(node);
}

void ParseTreeListener::listenPA_Case_statement(const ParseTreeNode& node) {
  enterPA_Case_statement(node);
  listenChildren(node, true);
  leavePA_Case_statement(node);
}

void ParseTreeListener::listenPA_Cast(const ParseTreeNode& node) {
  enterPA_Cast(node);
  listenChildren(node, true);
  leavePA_Cast(node);
}

void ParseTreeListener::listenPA_Casting_type(const ParseTreeNode& node) {
  enterPA_Casting_type(node);
  listenChildren(node, true);
  leavePA_Casting_type(node);
}

void ParseTreeListener::listenPA_Cell_clause(const ParseTreeNode& node) {
  enterPA_Cell_clause(node);
  listenChildren(node, true);
  leavePA_Cell_clause(node);
}

void ParseTreeListener::listenPA_Celldefine_directive(const ParseTreeNode& node) {
  enterPA_Celldefine_directive(node);
  listenChildren(node, true);
  leavePA_Celldefine_directive(node);
}

void ParseTreeListener::listenPA_Chandle_type(const ParseTreeNode& node) {
  enterPA_Chandle_type(node);
  listenChildren(node, true);
  leavePA_Chandle_type(node);
}

void ParseTreeListener::listenPA_Charge_strength(const ParseTreeNode& node) {
  enterPA_Charge_strength(node);
  listenChildren(node, true);
  leavePA_Charge_strength(node);
}

void ParseTreeListener::listenPA_Checker_declaration(const ParseTreeNode& node) {
  enterPA_Checker_declaration(node);
  listenChildren(node, true);
  leavePA_Checker_declaration(node);
}

void ParseTreeListener::listenPA_Checker_generate_item(const ParseTreeNode& node) {
  enterPA_Checker_generate_item(node);
  listenChildren(node, true);
  leavePA_Checker_generate_item(node);
}

void ParseTreeListener::listenPA_Checker_instantiation(const ParseTreeNode& node) {
  enterPA_Checker_instantiation(node);
  listenChildren(node, true);
  leavePA_Checker_instantiation(node);
}

void ParseTreeListener::listenPA_Checker_or_generate_item(const ParseTreeNode& node) {
  enterPA_Checker_or_generate_item(node);
  listenChildren(node, true);
  leavePA_Checker_or_generate_item(node);
}

void ParseTreeListener::listenPA_Checker_or_generate_item_declaration(const ParseTreeNode& node) {
  enterPA_Checker_or_generate_item_declaration(node);
  listenChildren(node, true);
  leavePA_Checker_or_generate_item_declaration(node);
}

void ParseTreeListener::listenPA_Checker_port_item(const ParseTreeNode& node) {
  enterPA_Checker_port_item(node);
  listenChildren(node, true);
  leavePA_Checker_port_item(node);
}

void ParseTreeListener::listenPA_Checker_port_list(const ParseTreeNode& node) {
  enterPA_Checker_port_list(node);
  listenChildren(node, true);
  leavePA_Checker_port_list(node);
}

void ParseTreeListener::listenPA_Class_constraint(const ParseTreeNode& node) {
  enterPA_Class_constraint(node);
  listenChildren(node, true);
  leavePA_Class_constraint(node);
}

void ParseTreeListener::listenPA_Class_constructor_declaration(const ParseTreeNode& node) {
  enterPA_Class_constructor_declaration(node);
  listenChildren(node, true);
  leavePA_Class_constructor_declaration(node);
}

void ParseTreeListener::listenPA_Class_constructor_prototype(const ParseTreeNode& node) {
  enterPA_Class_constructor_prototype(node);
  listenChildren(node, true);
  leavePA_Class_constructor_prototype(node);
}

void ParseTreeListener::listenPA_Class_declaration(const ParseTreeNode& node) {
  enterPA_Class_declaration(node);
  listenChildren(node, true);
  leavePA_Class_declaration(node);
}

void ParseTreeListener::listenPA_Class_item(const ParseTreeNode& node) {
  enterPA_Class_item(node);
  listenChildren(node, true);
  leavePA_Class_item(node);
}

void ParseTreeListener::listenPA_Class_item_qualifier(const ParseTreeNode& node) {
  enterPA_Class_item_qualifier(node);
  listenChildren(node, true);
  leavePA_Class_item_qualifier(node);
}

void ParseTreeListener::listenPA_Class_keyword(const ParseTreeNode& node) {
  enterPA_Class_keyword(node);
  listenChildren(node, true);
  leavePA_Class_keyword(node);
}

void ParseTreeListener::listenPA_Class_method(const ParseTreeNode& node) {
  enterPA_Class_method(node);
  listenChildren(node, true);
  leavePA_Class_method(node);
}

void ParseTreeListener::listenPA_Class_new(const ParseTreeNode& node) {
  enterPA_Class_new(node);
  listenChildren(node, true);
  leavePA_Class_new(node);
}

void ParseTreeListener::listenPA_Class_property(const ParseTreeNode& node) {
  enterPA_Class_property(node);
  listenChildren(node, true);
  leavePA_Class_property(node);
}

void ParseTreeListener::listenPA_Class_scope(const ParseTreeNode& node) {
  enterPA_Class_scope(node);
  listenChildren(node, true);
  leavePA_Class_scope(node);
}

void ParseTreeListener::listenPA_Class_type(const ParseTreeNode& node) {
  enterPA_Class_type(node);
  listenChildren(node, true);
  leavePA_Class_type(node);
}

void ParseTreeListener::listenPA_Clocking_decl_assign(const ParseTreeNode& node) {
  enterPA_Clocking_decl_assign(node);
  listenChildren(node, true);
  leavePA_Clocking_decl_assign(node);
}

void ParseTreeListener::listenPA_Clocking_declaration(const ParseTreeNode& node) {
  enterPA_Clocking_declaration(node);
  listenChildren(node, true);
  leavePA_Clocking_declaration(node);
}

void ParseTreeListener::listenPA_Clocking_direction(const ParseTreeNode& node) {
  enterPA_Clocking_direction(node);
  listenChildren(node, true);
  leavePA_Clocking_direction(node);
}

void ParseTreeListener::listenPA_Clocking_drive(const ParseTreeNode& node) {
  enterPA_Clocking_drive(node);
  listenChildren(node, true);
  leavePA_Clocking_drive(node);
}

void ParseTreeListener::listenPA_Clocking_event(const ParseTreeNode& node) {
  enterPA_Clocking_event(node);
  listenChildren(node, true);
  leavePA_Clocking_event(node);
}

void ParseTreeListener::listenPA_Clocking_item(const ParseTreeNode& node) {
  enterPA_Clocking_item(node);
  listenChildren(node, true);
  leavePA_Clocking_item(node);
}

void ParseTreeListener::listenPA_Clocking_skew(const ParseTreeNode& node) {
  enterPA_Clocking_skew(node);
  listenChildren(node, true);
  leavePA_Clocking_skew(node);
}

void ParseTreeListener::listenPA_Clockvar(const ParseTreeNode& node) {
  enterPA_Clockvar(node);
  listenChildren(node, true);
  leavePA_Clockvar(node);
}

void ParseTreeListener::listenPA_Clockvar_expression(const ParseTreeNode& node) {
  enterPA_Clockvar_expression(node);
  listenChildren(node, true);
  leavePA_Clockvar_expression(node);
}

void ParseTreeListener::listenPA_Cmos_switch_instance(const ParseTreeNode& node) {
  enterPA_Cmos_switch_instance(node);
  listenChildren(node, true);
  leavePA_Cmos_switch_instance(node);
}

void ParseTreeListener::listenPA_Cmos_switchtype(const ParseTreeNode& node) {
  enterPA_Cmos_switchtype(node);
  listenChildren(node, true);
  leavePA_Cmos_switchtype(node);
}

void ParseTreeListener::listenPA_Combinational_body(const ParseTreeNode& node) {
  enterPA_Combinational_body(node);
  listenChildren(node, true);
  leavePA_Combinational_body(node);
}

void ParseTreeListener::listenPA_Combinational_entry(const ParseTreeNode& node) {
  enterPA_Combinational_entry(node);
  listenChildren(node, true);
  leavePA_Combinational_entry(node);
}

void ParseTreeListener::listenPA_Comma(const ParseTreeNode& node) {
  enterPA_Comma(node);
  listenChildren(node, true);
  leavePA_Comma(node);
}

void ParseTreeListener::listenPA_Comma_operator(const ParseTreeNode& node) {
  enterPA_Comma_operator(node);
  listenChildren(node, true);
  leavePA_Comma_operator(node);
}

void ParseTreeListener::listenPA_Complex_func_call(const ParseTreeNode& node) {
  enterPA_Complex_func_call(node);
  listenChildren(node, true);
  leavePA_Complex_func_call(node);
}

void ParseTreeListener::listenPA_Concatenation(const ParseTreeNode& node) {
  enterPA_Concatenation(node);
  listenChildren(node, true);
  leavePA_Concatenation(node);
}

void ParseTreeListener::listenPA_Concurrent_assertion_item(const ParseTreeNode& node) {
  enterPA_Concurrent_assertion_item(node);
  listenChildren(node, true);
  leavePA_Concurrent_assertion_item(node);
}

void ParseTreeListener::listenPA_Concurrent_assertion_item_declaration(const ParseTreeNode& node) {
  enterPA_Concurrent_assertion_item_declaration(node);
  listenChildren(node, true);
  leavePA_Concurrent_assertion_item_declaration(node);
}

void ParseTreeListener::listenPA_Concurrent_assertion_statement(const ParseTreeNode& node) {
  enterPA_Concurrent_assertion_statement(node);
  listenChildren(node, true);
  leavePA_Concurrent_assertion_statement(node);
}

void ParseTreeListener::listenPA_Cond_predicate(const ParseTreeNode& node) {
  enterPA_Cond_predicate(node);
  listenChildren(node, true);
  leavePA_Cond_predicate(node);
}

void ParseTreeListener::listenPA_Conditional_generate_construct(const ParseTreeNode& node) {
  enterPA_Conditional_generate_construct(node);
  listenChildren(node, true);
  leavePA_Conditional_generate_construct(node);
}

void ParseTreeListener::listenPA_Conditional_operator(const ParseTreeNode& node) {
  enterPA_Conditional_operator(node);
  listenChildren(node, true);
  leavePA_Conditional_operator(node);
}

void ParseTreeListener::listenPA_Conditional_statement(const ParseTreeNode& node) {
  enterPA_Conditional_statement(node);
  listenChildren(node, true);
  leavePA_Conditional_statement(node);
}

void ParseTreeListener::listenPA_Config_declaration(const ParseTreeNode& node) {
  enterPA_Config_declaration(node);
  listenChildren(node, true);
  leavePA_Config_declaration(node);
}

void ParseTreeListener::listenPA_Config_rule_statement(const ParseTreeNode& node) {
  enterPA_Config_rule_statement(node);
  listenChildren(node, true);
  leavePA_Config_rule_statement(node);
}

void ParseTreeListener::listenPA_Consecutive_repetition(const ParseTreeNode& node) {
  enterPA_Consecutive_repetition(node);
  listenChildren(node, true);
  leavePA_Consecutive_repetition(node);
}

void ParseTreeListener::listenPA_Const_or_range_expression(const ParseTreeNode& node) {
  enterPA_Const_or_range_expression(node);
  listenChildren(node, true);
  leavePA_Const_or_range_expression(node);
}

void ParseTreeListener::listenPA_Const_type(const ParseTreeNode& node) {
  enterPA_Const_type(node);
  listenChildren(node, true);
  leavePA_Const_type(node);
}

void ParseTreeListener::listenPA_Constant_assignment_pattern_expression(const ParseTreeNode& node) {
  enterPA_Constant_assignment_pattern_expression(node);
  listenChildren(node, true);
  leavePA_Constant_assignment_pattern_expression(node);
}

void ParseTreeListener::listenPA_Constant_bit_select(const ParseTreeNode& node) {
  enterPA_Constant_bit_select(node);
  listenChildren(node, true);
  leavePA_Constant_bit_select(node);
}

void ParseTreeListener::listenPA_Constant_cast(const ParseTreeNode& node) {
  enterPA_Constant_cast(node);
  listenChildren(node, true);
  leavePA_Constant_cast(node);
}

void ParseTreeListener::listenPA_Constant_concatenation(const ParseTreeNode& node) {
  enterPA_Constant_concatenation(node);
  listenChildren(node, true);
  leavePA_Constant_concatenation(node);
}

void ParseTreeListener::listenPA_Constant_expression(const ParseTreeNode& node) {
  enterPA_Constant_expression(node);
  listenChildren(node, true);
  leavePA_Constant_expression(node);
}

void ParseTreeListener::listenPA_Constant_indexed_range(const ParseTreeNode& node) {
  enterPA_Constant_indexed_range(node);
  listenChildren(node, true);
  leavePA_Constant_indexed_range(node);
}

void ParseTreeListener::listenPA_Constant_mintypmax_expression(const ParseTreeNode& node) {
  enterPA_Constant_mintypmax_expression(node);
  listenChildren(node, true);
  leavePA_Constant_mintypmax_expression(node);
}

void ParseTreeListener::listenPA_Constant_multiple_concatenation(const ParseTreeNode& node) {
  enterPA_Constant_multiple_concatenation(node);
  listenChildren(node, true);
  leavePA_Constant_multiple_concatenation(node);
}

void ParseTreeListener::listenPA_Constant_param_expression(const ParseTreeNode& node) {
  enterPA_Constant_param_expression(node);
  listenChildren(node, true);
  leavePA_Constant_param_expression(node);
}

void ParseTreeListener::listenPA_Constant_part_select_range(const ParseTreeNode& node) {
  enterPA_Constant_part_select_range(node);
  listenChildren(node, true);
  leavePA_Constant_part_select_range(node);
}

void ParseTreeListener::listenPA_Constant_primary(const ParseTreeNode& node) {
  enterPA_Constant_primary(node);
  listenChildren(node, true);
  leavePA_Constant_primary(node);
}

void ParseTreeListener::listenPA_Constant_range(const ParseTreeNode& node) {
  enterPA_Constant_range(node);
  listenChildren(node, true);
  leavePA_Constant_range(node);
}

void ParseTreeListener::listenPA_Constant_range_expression(const ParseTreeNode& node) {
  enterPA_Constant_range_expression(node);
  listenChildren(node, true);
  leavePA_Constant_range_expression(node);
}

void ParseTreeListener::listenPA_Constant_select(const ParseTreeNode& node) {
  enterPA_Constant_select(node);
  listenChildren(node, true);
  leavePA_Constant_select(node);
}

void ParseTreeListener::listenPA_Constraint_block(const ParseTreeNode& node) {
  enterPA_Constraint_block(node);
  listenChildren(node, true);
  leavePA_Constraint_block(node);
}

void ParseTreeListener::listenPA_Constraint_block_item(const ParseTreeNode& node) {
  enterPA_Constraint_block_item(node);
  listenChildren(node, true);
  leavePA_Constraint_block_item(node);
}

void ParseTreeListener::listenPA_Constraint_declaration(const ParseTreeNode& node) {
  enterPA_Constraint_declaration(node);
  listenChildren(node, true);
  leavePA_Constraint_declaration(node);
}

void ParseTreeListener::listenPA_Constraint_expression(const ParseTreeNode& node) {
  enterPA_Constraint_expression(node);
  listenChildren(node, true);
  leavePA_Constraint_expression(node);
}

void ParseTreeListener::listenPA_Constraint_primary(const ParseTreeNode& node) {
  enterPA_Constraint_primary(node);
  listenChildren(node, true);
  leavePA_Constraint_primary(node);
}

void ParseTreeListener::listenPA_Constraint_prototype(const ParseTreeNode& node) {
  enterPA_Constraint_prototype(node);
  listenChildren(node, true);
  leavePA_Constraint_prototype(node);
}

void ParseTreeListener::listenPA_Constraint_set(const ParseTreeNode& node) {
  enterPA_Constraint_set(node);
  listenChildren(node, true);
  leavePA_Constraint_set(node);
}

void ParseTreeListener::listenPA_Context_keyword(const ParseTreeNode& node) {
  enterPA_Context_keyword(node);
  listenChildren(node, true);
  leavePA_Context_keyword(node);
}

void ParseTreeListener::listenPA_Continuous_assign(const ParseTreeNode& node) {
  enterPA_Continuous_assign(node);
  listenChildren(node, true);
  leavePA_Continuous_assign(node);
}

void ParseTreeListener::listenPA_Controlled_timing_check_event(const ParseTreeNode& node) {
  enterPA_Controlled_timing_check_event(node);
  listenChildren(node, true);
  leavePA_Controlled_timing_check_event(node);
}

void ParseTreeListener::listenPA_Cover_cross(const ParseTreeNode& node) {
  enterPA_Cover_cross(node);
  listenChildren(node, true);
  leavePA_Cover_cross(node);
}

void ParseTreeListener::listenPA_Cover_point(const ParseTreeNode& node) {
  enterPA_Cover_point(node);
  listenChildren(node, true);
  leavePA_Cover_point(node);
}

void ParseTreeListener::listenPA_Cover_property_statement(const ParseTreeNode& node) {
  enterPA_Cover_property_statement(node);
  listenChildren(node, true);
  leavePA_Cover_property_statement(node);
}

void ParseTreeListener::listenPA_Cover_sequence_statement(const ParseTreeNode& node) {
  enterPA_Cover_sequence_statement(node);
  listenChildren(node, true);
  leavePA_Cover_sequence_statement(node);
}

void ParseTreeListener::listenPA_Coverage_event(const ParseTreeNode& node) {
  enterPA_Coverage_event(node);
  listenChildren(node, true);
  leavePA_Coverage_event(node);
}

void ParseTreeListener::listenPA_Coverage_option(const ParseTreeNode& node) {
  enterPA_Coverage_option(node);
  listenChildren(node, true);
  leavePA_Coverage_option(node);
}

void ParseTreeListener::listenPA_Coverage_spec(const ParseTreeNode& node) {
  enterPA_Coverage_spec(node);
  listenChildren(node, true);
  leavePA_Coverage_spec(node);
}

void ParseTreeListener::listenPA_Coverage_spec_or_option(const ParseTreeNode& node) {
  enterPA_Coverage_spec_or_option(node);
  listenChildren(node, true);
  leavePA_Coverage_spec_or_option(node);
}

void ParseTreeListener::listenPA_Covergroup_declaration(const ParseTreeNode& node) {
  enterPA_Covergroup_declaration(node);
  listenChildren(node, true);
  leavePA_Covergroup_declaration(node);
}

void ParseTreeListener::listenPA_Cross_body(const ParseTreeNode& node) {
  enterPA_Cross_body(node);
  listenChildren(node, true);
  leavePA_Cross_body(node);
}

void ParseTreeListener::listenPA_Cross_body_item(const ParseTreeNode& node) {
  enterPA_Cross_body_item(node);
  listenChildren(node, true);
  leavePA_Cross_body_item(node);
}

void ParseTreeListener::listenPA_Cross_item(const ParseTreeNode& node) {
  enterPA_Cross_item(node);
  listenChildren(node, true);
  leavePA_Cross_item(node);
}

void ParseTreeListener::listenPA_Cycle_delay(const ParseTreeNode& node) {
  enterPA_Cycle_delay(node);
  listenChildren(node, true);
  leavePA_Cycle_delay(node);
}

void ParseTreeListener::listenPA_Cycle_delay_const_range_expression(const ParseTreeNode& node) {
  enterPA_Cycle_delay_const_range_expression(node);
  listenChildren(node, true);
  leavePA_Cycle_delay_const_range_expression(node);
}

void ParseTreeListener::listenPA_Cycle_delay_range(const ParseTreeNode& node) {
  enterPA_Cycle_delay_range(node);
  listenChildren(node, true);
  leavePA_Cycle_delay_range(node);
}

void ParseTreeListener::listenPA_Data_declaration(const ParseTreeNode& node) {
  enterPA_Data_declaration(node);
  listenChildren(node, true);
  leavePA_Data_declaration(node);
}

void ParseTreeListener::listenPA_Data_type(const ParseTreeNode& node) {
  enterPA_Data_type(node);
  listenChildren(node, true);
  leavePA_Data_type(node);
}

void ParseTreeListener::listenPA_Data_type_or_implicit(const ParseTreeNode& node) {
  enterPA_Data_type_or_implicit(node);
  listenChildren(node, true);
  leavePA_Data_type_or_implicit(node);
}

void ParseTreeListener::listenPA_Data_type_or_void(const ParseTreeNode& node) {
  enterPA_Data_type_or_void(node);
  listenChildren(node, true);
  leavePA_Data_type_or_void(node);
}

void ParseTreeListener::listenPA_Default_clause(const ParseTreeNode& node) {
  enterPA_Default_clause(node);
  listenChildren(node, true);
  leavePA_Default_clause(node);
}

void ParseTreeListener::listenPA_Default_decay_time_directive(const ParseTreeNode& node) {
  enterPA_Default_decay_time_directive(node);
  listenChildren(node, true);
  leavePA_Default_decay_time_directive(node);
}

void ParseTreeListener::listenPA_Default_nettype_directive(const ParseTreeNode& node) {
  enterPA_Default_nettype_directive(node);
  listenChildren(node, true);
  leavePA_Default_nettype_directive(node);
}

void ParseTreeListener::listenPA_Default_skew(const ParseTreeNode& node) {
  enterPA_Default_skew(node);
  listenChildren(node, true);
  leavePA_Default_skew(node);
}

void ParseTreeListener::listenPA_Default_trireg_strenght_directive(const ParseTreeNode& node) {
  enterPA_Default_trireg_strenght_directive(node);
  listenChildren(node, true);
  leavePA_Default_trireg_strenght_directive(node);
}

void ParseTreeListener::listenPA_Deferred_immediate_assert_statement(const ParseTreeNode& node) {
  enterPA_Deferred_immediate_assert_statement(node);
  listenChildren(node, true);
  leavePA_Deferred_immediate_assert_statement(node);
}

void ParseTreeListener::listenPA_Deferred_immediate_assertion_item(const ParseTreeNode& node) {
  enterPA_Deferred_immediate_assertion_item(node);
  listenChildren(node, true);
  leavePA_Deferred_immediate_assertion_item(node);
}

void ParseTreeListener::listenPA_Deferred_immediate_assertion_statement(const ParseTreeNode& node) {
  enterPA_Deferred_immediate_assertion_statement(node);
  listenChildren(node, true);
  leavePA_Deferred_immediate_assertion_statement(node);
}

void ParseTreeListener::listenPA_Deferred_immediate_assume_statement(const ParseTreeNode& node) {
  enterPA_Deferred_immediate_assume_statement(node);
  listenChildren(node, true);
  leavePA_Deferred_immediate_assume_statement(node);
}

void ParseTreeListener::listenPA_Deferred_immediate_cover_statement(const ParseTreeNode& node) {
  enterPA_Deferred_immediate_cover_statement(node);
  listenChildren(node, true);
  leavePA_Deferred_immediate_cover_statement(node);
}

void ParseTreeListener::listenPA_Defparam_assignment(const ParseTreeNode& node) {
  enterPA_Defparam_assignment(node);
  listenChildren(node, true);
  leavePA_Defparam_assignment(node);
}

void ParseTreeListener::listenPA_Delay2(const ParseTreeNode& node) {
  enterPA_Delay2(node);
  listenChildren(node, true);
  leavePA_Delay2(node);
}

void ParseTreeListener::listenPA_Delay3(const ParseTreeNode& node) {
  enterPA_Delay3(node);
  listenChildren(node, true);
  leavePA_Delay3(node);
}

void ParseTreeListener::listenPA_Delay_control(const ParseTreeNode& node) {
  enterPA_Delay_control(node);
  listenChildren(node, true);
  leavePA_Delay_control(node);
}

void ParseTreeListener::listenPA_Delay_mode_distributed_directive(const ParseTreeNode& node) {
  enterPA_Delay_mode_distributed_directive(node);
  listenChildren(node, true);
  leavePA_Delay_mode_distributed_directive(node);
}

void ParseTreeListener::listenPA_Delay_mode_path_directive(const ParseTreeNode& node) {
  enterPA_Delay_mode_path_directive(node);
  listenChildren(node, true);
  leavePA_Delay_mode_path_directive(node);
}

void ParseTreeListener::listenPA_Delay_mode_unit_directive(const ParseTreeNode& node) {
  enterPA_Delay_mode_unit_directive(node);
  listenChildren(node, true);
  leavePA_Delay_mode_unit_directive(node);
}

void ParseTreeListener::listenPA_Delay_mode_zero_directive(const ParseTreeNode& node) {
  enterPA_Delay_mode_zero_directive(node);
  listenChildren(node, true);
  leavePA_Delay_mode_zero_directive(node);
}

void ParseTreeListener::listenPA_Delay_or_event_control(const ParseTreeNode& node) {
  enterPA_Delay_or_event_control(node);
  listenChildren(node, true);
  leavePA_Delay_or_event_control(node);
}

void ParseTreeListener::listenPA_Delay_value(const ParseTreeNode& node) {
  enterPA_Delay_value(node);
  listenChildren(node, true);
  leavePA_Delay_value(node);
}

void ParseTreeListener::listenPA_Delayed_data(const ParseTreeNode& node) {
  enterPA_Delayed_data(node);
  listenChildren(node, true);
  leavePA_Delayed_data(node);
}

void ParseTreeListener::listenPA_Delayed_reference(const ParseTreeNode& node) {
  enterPA_Delayed_reference(node);
  listenChildren(node, true);
  leavePA_Delayed_reference(node);
}

void ParseTreeListener::listenPA_Description(const ParseTreeNode& node) {
  enterPA_Description(node);
  listenChildren(node, true);
  leavePA_Description(node);
}

void ParseTreeListener::listenPA_Design_statement(const ParseTreeNode& node) {
  enterPA_Design_statement(node);
  listenChildren(node, true);
  leavePA_Design_statement(node);
}

void ParseTreeListener::listenPA_Disable_portfaults_directive(const ParseTreeNode& node) {
  enterPA_Disable_portfaults_directive(node);
  listenChildren(node, true);
  leavePA_Disable_portfaults_directive(node);
}

void ParseTreeListener::listenPA_Disable_statement(const ParseTreeNode& node) {
  enterPA_Disable_statement(node);
  listenChildren(node, true);
  leavePA_Disable_statement(node);
}

void ParseTreeListener::listenPA_Dist_item(const ParseTreeNode& node) {
  enterPA_Dist_item(node);
  listenChildren(node, true);
  leavePA_Dist_item(node);
}

void ParseTreeListener::listenPA_Dist_list(const ParseTreeNode& node) {
  enterPA_Dist_list(node);
  listenChildren(node, true);
  leavePA_Dist_list(node);
}

void ParseTreeListener::listenPA_Dist_weight(const ParseTreeNode& node) {
  enterPA_Dist_weight(node);
  listenChildren(node, true);
  leavePA_Dist_weight(node);
}

void ParseTreeListener::listenPA_Dollar_fullskew_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_fullskew_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_fullskew_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_hold_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_hold_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_hold_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_keyword(const ParseTreeNode& node) {
  enterPA_Dollar_keyword(node);
  listenChildren(node, true);
  leavePA_Dollar_keyword(node);
}

void ParseTreeListener::listenPA_Dollar_nochange_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_nochange_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_nochange_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_period_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_period_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_period_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_recovery_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_recovery_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_recovery_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_recrem_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_recrem_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_recrem_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_removal_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_removal_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_removal_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_root_keyword(const ParseTreeNode& node) {
  enterPA_Dollar_root_keyword(node);
  listenChildren(node, true);
  leavePA_Dollar_root_keyword(node);
}

void ParseTreeListener::listenPA_Dollar_setup_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_setup_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_setup_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_setuphold_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_setuphold_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_setuphold_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_skew_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_skew_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_skew_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_timeskew_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_timeskew_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_timeskew_timing_check(node);
}

void ParseTreeListener::listenPA_Dollar_width_timing_check(const ParseTreeNode& node) {
  enterPA_Dollar_width_timing_check(node);
  listenChildren(node, true);
  leavePA_Dollar_width_timing_check(node);
}

void ParseTreeListener::listenPA_Dpi_import_export(const ParseTreeNode& node) {
  enterPA_Dpi_import_export(node);
  listenChildren(node, true);
  leavePA_Dpi_import_export(node);
}

void ParseTreeListener::listenPA_Drive_strength(const ParseTreeNode& node) {
  enterPA_Drive_strength(node);
  listenChildren(node, true);
  leavePA_Drive_strength(node);
}

void ParseTreeListener::listenPA_Dynamic_array_new(const ParseTreeNode& node) {
  enterPA_Dynamic_array_new(node);
  listenChildren(node, true);
  leavePA_Dynamic_array_new(node);
}

void ParseTreeListener::listenPA_Edge_control_specifier(const ParseTreeNode& node) {
  enterPA_Edge_control_specifier(node);
  listenChildren(node, true);
  leavePA_Edge_control_specifier(node);
}

void ParseTreeListener::listenPA_Edge_descriptor(const ParseTreeNode& node) {
  enterPA_Edge_descriptor(node);
  listenChildren(node, true);
  leavePA_Edge_descriptor(node);
}

void ParseTreeListener::listenPA_Edge_identifier(const ParseTreeNode& node) {
  enterPA_Edge_identifier(node);
  listenChildren(node, true);
  leavePA_Edge_identifier(node);
}

void ParseTreeListener::listenPA_Edge_indicator(const ParseTreeNode& node) {
  enterPA_Edge_indicator(node);
  listenChildren(node, true);
  leavePA_Edge_indicator(node);
}

void ParseTreeListener::listenPA_Edge_input_list(const ParseTreeNode& node) {
  enterPA_Edge_input_list(node);
  listenChildren(node, true);
  leavePA_Edge_input_list(node);
}

void ParseTreeListener::listenPA_Edge_sensitive_path_declaration(const ParseTreeNode& node) {
  enterPA_Edge_sensitive_path_declaration(node);
  listenChildren(node, true);
  leavePA_Edge_sensitive_path_declaration(node);
}

void ParseTreeListener::listenPA_Edge_symbol(const ParseTreeNode& node) {
  enterPA_Edge_symbol(node);
  listenChildren(node, true);
  leavePA_Edge_symbol(node);
}

void ParseTreeListener::listenPA_Elaboration_system_task(const ParseTreeNode& node) {
  enterPA_Elaboration_system_task(node);
  listenChildren(node, true);
  leavePA_Elaboration_system_task(node);
}

void ParseTreeListener::listenPA_Empty_queue(const ParseTreeNode& node) {
  enterPA_Empty_queue(node);
  listenChildren(node, true);
  leavePA_Empty_queue(node);
}

void ParseTreeListener::listenPA_Enable_gate_instance(const ParseTreeNode& node) {
  enterPA_Enable_gate_instance(node);
  listenChildren(node, true);
  leavePA_Enable_gate_instance(node);
}

void ParseTreeListener::listenPA_Enable_gatetype(const ParseTreeNode& node) {
  enterPA_Enable_gatetype(node);
  listenChildren(node, true);
  leavePA_Enable_gatetype(node);
}

void ParseTreeListener::listenPA_Enable_portfaults_directive(const ParseTreeNode& node) {
  enterPA_Enable_portfaults_directive(node);
  listenChildren(node, true);
  leavePA_Enable_portfaults_directive(node);
}

void ParseTreeListener::listenPA_End_edge_offset(const ParseTreeNode& node) {
  enterPA_End_edge_offset(node);
  listenChildren(node, true);
  leavePA_End_edge_offset(node);
}

void ParseTreeListener::listenPA_End_keywords_directive(const ParseTreeNode& node) {
  enterPA_End_keywords_directive(node);
  listenChildren(node, true);
  leavePA_End_keywords_directive(node);
}

void ParseTreeListener::listenPA_Endcelldefine_directive(const ParseTreeNode& node) {
  enterPA_Endcelldefine_directive(node);
  listenChildren(node, true);
  leavePA_Endcelldefine_directive(node);
}

void ParseTreeListener::listenPA_Endprotect_directive(const ParseTreeNode& node) {
  enterPA_Endprotect_directive(node);
  listenChildren(node, true);
  leavePA_Endprotect_directive(node);
}

void ParseTreeListener::listenPA_Endprotected_directive(const ParseTreeNode& node) {
  enterPA_Endprotected_directive(node);
  listenChildren(node, true);
  leavePA_Endprotected_directive(node);
}

void ParseTreeListener::listenPA_Enum_base_type(const ParseTreeNode& node) {
  enterPA_Enum_base_type(node);
  listenChildren(node, true);
  leavePA_Enum_base_type(node);
}

void ParseTreeListener::listenPA_Enum_keyword(const ParseTreeNode& node) {
  enterPA_Enum_keyword(node);
  listenChildren(node, true);
  leavePA_Enum_keyword(node);
}

void ParseTreeListener::listenPA_Enum_name_declaration(const ParseTreeNode& node) {
  enterPA_Enum_name_declaration(node);
  listenChildren(node, true);
  leavePA_Enum_name_declaration(node);
}

void ParseTreeListener::listenPA_Event_based_flag(const ParseTreeNode& node) {
  enterPA_Event_based_flag(node);
  listenChildren(node, true);
  leavePA_Event_based_flag(node);
}

void ParseTreeListener::listenPA_Event_control(const ParseTreeNode& node) {
  enterPA_Event_control(node);
  listenChildren(node, true);
  leavePA_Event_control(node);
}

void ParseTreeListener::listenPA_Event_expression(const ParseTreeNode& node) {
  enterPA_Event_expression(node);
  listenChildren(node, true);
  leavePA_Event_expression(node);
}

void ParseTreeListener::listenPA_Event_trigger(const ParseTreeNode& node) {
  enterPA_Event_trigger(node);
  listenChildren(node, true);
  leavePA_Event_trigger(node);
}

void ParseTreeListener::listenPA_Event_type(const ParseTreeNode& node) {
  enterPA_Event_type(node);
  listenChildren(node, true);
  leavePA_Event_type(node);
}

void ParseTreeListener::listenPA_Expand_vectornets_directive(const ParseTreeNode& node) {
  enterPA_Expand_vectornets_directive(node);
  listenChildren(node, true);
  leavePA_Expand_vectornets_directive(node);
}

void ParseTreeListener::listenPA_Expect_property_statement(const ParseTreeNode& node) {
  enterPA_Expect_property_statement(node);
  listenChildren(node, true);
  leavePA_Expect_property_statement(node);
}

void ParseTreeListener::listenPA_Expression(const ParseTreeNode& node) {
  enterPA_Expression(node);
  listenChildren(node, true);
  leavePA_Expression(node);
}

void ParseTreeListener::listenPA_Expression_or_cond_pattern(const ParseTreeNode& node) {
  enterPA_Expression_or_cond_pattern(node);
  listenChildren(node, true);
  leavePA_Expression_or_cond_pattern(node);
}

void ParseTreeListener::listenPA_Expression_or_dist(const ParseTreeNode& node) {
  enterPA_Expression_or_dist(node);
  listenChildren(node, true);
  leavePA_Expression_or_dist(node);
}

void ParseTreeListener::listenPA_Extern_constraint_declaration(const ParseTreeNode& node) {
  enterPA_Extern_constraint_declaration(node);
  listenChildren(node, true);
  leavePA_Extern_constraint_declaration(node);
}

void ParseTreeListener::listenPA_Extern_qualifier(const ParseTreeNode& node) {
  enterPA_Extern_qualifier(node);
  listenChildren(node, true);
  leavePA_Extern_qualifier(node);
}

void ParseTreeListener::listenPA_Extern_tf_declaration(const ParseTreeNode& node) {
  enterPA_Extern_tf_declaration(node);
  listenChildren(node, true);
  leavePA_Extern_tf_declaration(node);
}

void ParseTreeListener::listenPA_File_path_spec(const ParseTreeNode& node) {
  enterPA_File_path_spec(node);
  listenChildren(node, true);
  leavePA_File_path_spec(node);
}

void ParseTreeListener::listenPA_Final_construct(const ParseTreeNode& node) {
  enterPA_Final_construct(node);
  listenChildren(node, true);
  leavePA_Final_construct(node);
}

void ParseTreeListener::listenPA_For_initialization(const ParseTreeNode& node) {
  enterPA_For_initialization(node);
  listenChildren(node, true);
  leavePA_For_initialization(node);
}

void ParseTreeListener::listenPA_For_step(const ParseTreeNode& node) {
  enterPA_For_step(node);
  listenChildren(node, true);
  leavePA_For_step(node);
}

void ParseTreeListener::listenPA_For_step_assignment(const ParseTreeNode& node) {
  enterPA_For_step_assignment(node);
  listenChildren(node, true);
  leavePA_For_step_assignment(node);
}

void ParseTreeListener::listenPA_For_variable_declaration(const ParseTreeNode& node) {
  enterPA_For_variable_declaration(node);
  listenChildren(node, true);
  leavePA_For_variable_declaration(node);
}

void ParseTreeListener::listenPA_Full_edge_sensitive_path_description(const ParseTreeNode& node) {
  enterPA_Full_edge_sensitive_path_description(node);
  listenChildren(node, true);
  leavePA_Full_edge_sensitive_path_description(node);
}

void ParseTreeListener::listenPA_Full_path_description(const ParseTreeNode& node) {
  enterPA_Full_path_description(node);
  listenChildren(node, true);
  leavePA_Full_path_description(node);
}

void ParseTreeListener::listenPA_Function_body_declaration(const ParseTreeNode& node) {
  enterPA_Function_body_declaration(node);
  listenChildren(node, true);
  leavePA_Function_body_declaration(node);
}

void ParseTreeListener::listenPA_Function_data_type(const ParseTreeNode& node) {
  enterPA_Function_data_type(node);
  listenChildren(node, true);
  leavePA_Function_data_type(node);
}

void ParseTreeListener::listenPA_Function_data_type_or_implicit(const ParseTreeNode& node) {
  enterPA_Function_data_type_or_implicit(node);
  listenChildren(node, true);
  leavePA_Function_data_type_or_implicit(node);
}

void ParseTreeListener::listenPA_Function_declaration(const ParseTreeNode& node) {
  enterPA_Function_declaration(node);
  listenChildren(node, true);
  leavePA_Function_declaration(node);
}

void ParseTreeListener::listenPA_Function_name_decl(const ParseTreeNode& node) {
  enterPA_Function_name_decl(node);
  listenChildren(node, true);
  leavePA_Function_name_decl(node);
}

void ParseTreeListener::listenPA_Function_prototype(const ParseTreeNode& node) {
  enterPA_Function_prototype(node);
  listenChildren(node, true);
  leavePA_Function_prototype(node);
}

void ParseTreeListener::listenPA_Function_statement_or_null(const ParseTreeNode& node) {
  enterPA_Function_statement_or_null(node);
  listenChildren(node, true);
  leavePA_Function_statement_or_null(node);
}

void ParseTreeListener::listenPA_Gate_instantiation(const ParseTreeNode& node) {
  enterPA_Gate_instantiation(node);
  listenChildren(node, true);
  leavePA_Gate_instantiation(node);
}

void ParseTreeListener::listenPA_Generate_begin_end_block(const ParseTreeNode& node) {
  enterPA_Generate_begin_end_block(node);
  listenChildren(node, true);
  leavePA_Generate_begin_end_block(node);
}

void ParseTreeListener::listenPA_Generate_interface_block(const ParseTreeNode& node) {
  enterPA_Generate_interface_block(node);
  listenChildren(node, true);
  leavePA_Generate_interface_block(node);
}

void ParseTreeListener::listenPA_Generate_interface_case_statement(const ParseTreeNode& node) {
  enterPA_Generate_interface_case_statement(node);
  listenChildren(node, true);
  leavePA_Generate_interface_case_statement(node);
}

void ParseTreeListener::listenPA_Generate_interface_conditional_statement(const ParseTreeNode& node) {
  enterPA_Generate_interface_conditional_statement(node);
  listenChildren(node, true);
  leavePA_Generate_interface_conditional_statement(node);
}

void ParseTreeListener::listenPA_Generate_interface_item(const ParseTreeNode& node) {
  enterPA_Generate_interface_item(node);
  listenChildren(node, true);
  leavePA_Generate_interface_item(node);
}

void ParseTreeListener::listenPA_Generate_interface_loop_statement(const ParseTreeNode& node) {
  enterPA_Generate_interface_loop_statement(node);
  listenChildren(node, true);
  leavePA_Generate_interface_loop_statement(node);
}

void ParseTreeListener::listenPA_Generate_interface_named_block(const ParseTreeNode& node) {
  enterPA_Generate_interface_named_block(node);
  listenChildren(node, true);
  leavePA_Generate_interface_named_block(node);
}

void ParseTreeListener::listenPA_Generate_item(const ParseTreeNode& node) {
  enterPA_Generate_item(node);
  listenChildren(node, true);
  leavePA_Generate_item(node);
}

void ParseTreeListener::listenPA_Generate_module_block(const ParseTreeNode& node) {
  enterPA_Generate_module_block(node);
  listenChildren(node, true);
  leavePA_Generate_module_block(node);
}

void ParseTreeListener::listenPA_Generate_module_case_statement(const ParseTreeNode& node) {
  enterPA_Generate_module_case_statement(node);
  listenChildren(node, true);
  leavePA_Generate_module_case_statement(node);
}

void ParseTreeListener::listenPA_Generate_module_conditional_statement(const ParseTreeNode& node) {
  enterPA_Generate_module_conditional_statement(node);
  listenChildren(node, true);
  leavePA_Generate_module_conditional_statement(node);
}

void ParseTreeListener::listenPA_Generate_module_item(const ParseTreeNode& node) {
  enterPA_Generate_module_item(node);
  listenChildren(node, true);
  leavePA_Generate_module_item(node);
}

void ParseTreeListener::listenPA_Generate_module_loop_statement(const ParseTreeNode& node) {
  enterPA_Generate_module_loop_statement(node);
  listenChildren(node, true);
  leavePA_Generate_module_loop_statement(node);
}

void ParseTreeListener::listenPA_Generate_module_named_block(const ParseTreeNode& node) {
  enterPA_Generate_module_named_block(node);
  listenChildren(node, true);
  leavePA_Generate_module_named_block(node);
}

void ParseTreeListener::listenPA_Generate_region(const ParseTreeNode& node) {
  enterPA_Generate_region(node);
  listenChildren(node, true);
  leavePA_Generate_region(node);
}

void ParseTreeListener::listenPA_Generated_interface_instantiation(const ParseTreeNode& node) {
  enterPA_Generated_interface_instantiation(node);
  listenChildren(node, true);
  leavePA_Generated_interface_instantiation(node);
}

void ParseTreeListener::listenPA_Generated_module_instantiation(const ParseTreeNode& node) {
  enterPA_Generated_module_instantiation(node);
  listenChildren(node, true);
  leavePA_Generated_module_instantiation(node);
}

void ParseTreeListener::listenPA_Genvar_assignment(const ParseTreeNode& node) {
  enterPA_Genvar_assignment(node);
  listenChildren(node, true);
  leavePA_Genvar_assignment(node);
}

void ParseTreeListener::listenPA_Genvar_decl_assignment(const ParseTreeNode& node) {
  enterPA_Genvar_decl_assignment(node);
  listenChildren(node, true);
  leavePA_Genvar_decl_assignment(node);
}

void ParseTreeListener::listenPA_Genvar_declaration(const ParseTreeNode& node) {
  enterPA_Genvar_declaration(node);
  listenChildren(node, true);
  leavePA_Genvar_declaration(node);
}

void ParseTreeListener::listenPA_Genvar_initialization(const ParseTreeNode& node) {
  enterPA_Genvar_initialization(node);
  listenChildren(node, true);
  leavePA_Genvar_initialization(node);
}

void ParseTreeListener::listenPA_Genvar_interface_case_item(const ParseTreeNode& node) {
  enterPA_Genvar_interface_case_item(node);
  listenChildren(node, true);
  leavePA_Genvar_interface_case_item(node);
}

void ParseTreeListener::listenPA_Genvar_iteration(const ParseTreeNode& node) {
  enterPA_Genvar_iteration(node);
  listenChildren(node, true);
  leavePA_Genvar_iteration(node);
}

void ParseTreeListener::listenPA_Genvar_module_case_item(const ParseTreeNode& node) {
  enterPA_Genvar_module_case_item(node);
  listenChildren(node, true);
  leavePA_Genvar_module_case_item(node);
}

void ParseTreeListener::listenPA_Goto_repetition(const ParseTreeNode& node) {
  enterPA_Goto_repetition(node);
  listenChildren(node, true);
  leavePA_Goto_repetition(node);
}

void ParseTreeListener::listenPA_Hierarchical_btf_identifier(const ParseTreeNode& node) {
  enterPA_Hierarchical_btf_identifier(node);
  listenChildren(node, true);
  leavePA_Hierarchical_btf_identifier(node);
}

void ParseTreeListener::listenPA_Hierarchical_identifier(const ParseTreeNode& node) {
  enterPA_Hierarchical_identifier(node);
  listenChildren(node, true);
  leavePA_Hierarchical_identifier(node);
}

void ParseTreeListener::listenPA_Hierarchical_instance(const ParseTreeNode& node) {
  enterPA_Hierarchical_instance(node);
  listenChildren(node, true);
  leavePA_Hierarchical_instance(node);
}

void ParseTreeListener::listenPA_Identifier(const ParseTreeNode& node) {
  enterPA_Identifier(node);
  listenChildren(node, true);
  leavePA_Identifier(node);
}

void ParseTreeListener::listenPA_Identifier_list(const ParseTreeNode& node) {
  enterPA_Identifier_list(node);
  listenChildren(node, true);
  leavePA_Identifier_list(node);
}

void ParseTreeListener::listenPA_If_generate_construct(const ParseTreeNode& node) {
  enterPA_If_generate_construct(node);
  listenChildren(node, true);
  leavePA_If_generate_construct(node);
}

void ParseTreeListener::listenPA_Immediate_assertion_statement(const ParseTreeNode& node) {
  enterPA_Immediate_assertion_statement(node);
  listenChildren(node, true);
  leavePA_Immediate_assertion_statement(node);
}

void ParseTreeListener::listenPA_Implicit_class_handle(const ParseTreeNode& node) {
  enterPA_Implicit_class_handle(node);
  listenChildren(node, true);
  leavePA_Implicit_class_handle(node);
}

void ParseTreeListener::listenPA_Implicit_data_type(const ParseTreeNode& node) {
  enterPA_Implicit_data_type(node);
  listenChildren(node, true);
  leavePA_Implicit_data_type(node);
}

void ParseTreeListener::listenPA_Inc_or_dec_expression(const ParseTreeNode& node) {
  enterPA_Inc_or_dec_expression(node);
  listenChildren(node, true);
  leavePA_Inc_or_dec_expression(node);
}

void ParseTreeListener::listenPA_Inc_or_dec_operator(const ParseTreeNode& node) {
  enterPA_Inc_or_dec_operator(node);
  listenChildren(node, true);
  leavePA_Inc_or_dec_operator(node);
}

void ParseTreeListener::listenPA_Include_statement(const ParseTreeNode& node) {
  enterPA_Include_statement(node);
  listenChildren(node, true);
  leavePA_Include_statement(node);
}

void ParseTreeListener::listenPA_Indexed_range(const ParseTreeNode& node) {
  enterPA_Indexed_range(node);
  listenChildren(node, true);
  leavePA_Indexed_range(node);
}

void ParseTreeListener::listenPA_Init_val(const ParseTreeNode& node) {
  enterPA_Init_val(node);
  listenChildren(node, true);
  leavePA_Init_val(node);
}

void ParseTreeListener::listenPA_Initial_construct(const ParseTreeNode& node) {
  enterPA_Initial_construct(node);
  listenChildren(node, true);
  leavePA_Initial_construct(node);
}

void ParseTreeListener::listenPA_Inout_declaration(const ParseTreeNode& node) {
  enterPA_Inout_declaration(node);
  listenChildren(node, true);
  leavePA_Inout_declaration(node);
}

void ParseTreeListener::listenPA_Input_declaration(const ParseTreeNode& node) {
  enterPA_Input_declaration(node);
  listenChildren(node, true);
  leavePA_Input_declaration(node);
}

void ParseTreeListener::listenPA_Inst_clause(const ParseTreeNode& node) {
  enterPA_Inst_clause(node);
  listenChildren(node, true);
  leavePA_Inst_clause(node);
}

void ParseTreeListener::listenPA_Inst_name(const ParseTreeNode& node) {
  enterPA_Inst_name(node);
  listenChildren(node, true);
  leavePA_Inst_name(node);
}

void ParseTreeListener::listenPA_Integer_atom_type(const ParseTreeNode& node) {
  enterPA_Integer_atom_type(node);
  listenChildren(node, true);
  leavePA_Integer_atom_type(node);
}

void ParseTreeListener::listenPA_Integer_type(const ParseTreeNode& node) {
  enterPA_Integer_type(node);
  listenChildren(node, true);
  leavePA_Integer_type(node);
}

void ParseTreeListener::listenPA_Integer_vector_type(const ParseTreeNode& node) {
  enterPA_Integer_vector_type(node);
  listenChildren(node, true);
  leavePA_Integer_vector_type(node);
}

void ParseTreeListener::listenPA_Interface_ansi_header(const ParseTreeNode& node) {
  enterPA_Interface_ansi_header(node);
  listenChildren(node, true);
  leavePA_Interface_ansi_header(node);
}

void ParseTreeListener::listenPA_Interface_class_declaration(const ParseTreeNode& node) {
  enterPA_Interface_class_declaration(node);
  listenChildren(node, true);
  leavePA_Interface_class_declaration(node);
}

void ParseTreeListener::listenPA_Interface_class_item(const ParseTreeNode& node) {
  enterPA_Interface_class_item(node);
  listenChildren(node, true);
  leavePA_Interface_class_item(node);
}

void ParseTreeListener::listenPA_Interface_class_keyword(const ParseTreeNode& node) {
  enterPA_Interface_class_keyword(node);
  listenChildren(node, true);
  leavePA_Interface_class_keyword(node);
}

void ParseTreeListener::listenPA_Interface_class_method(const ParseTreeNode& node) {
  enterPA_Interface_class_method(node);
  listenChildren(node, true);
  leavePA_Interface_class_method(node);
}

void ParseTreeListener::listenPA_Interface_class_type(const ParseTreeNode& node) {
  enterPA_Interface_class_type(node);
  listenChildren(node, true);
  leavePA_Interface_class_type(node);
}

void ParseTreeListener::listenPA_Interface_declaration(const ParseTreeNode& node) {
  enterPA_Interface_declaration(node);
  listenChildren(node, true);
  leavePA_Interface_declaration(node);
}

void ParseTreeListener::listenPA_Interface_identifier(const ParseTreeNode& node) {
  enterPA_Interface_identifier(node);
  listenChildren(node, true);
  leavePA_Interface_identifier(node);
}

void ParseTreeListener::listenPA_Interface_item(const ParseTreeNode& node) {
  enterPA_Interface_item(node);
  listenChildren(node, true);
  leavePA_Interface_item(node);
}

void ParseTreeListener::listenPA_Interface_nonansi_header(const ParseTreeNode& node) {
  enterPA_Interface_nonansi_header(node);
  listenChildren(node, true);
  leavePA_Interface_nonansi_header(node);
}

void ParseTreeListener::listenPA_Interface_or_generate_item(const ParseTreeNode& node) {
  enterPA_Interface_or_generate_item(node);
  listenChildren(node, true);
  leavePA_Interface_or_generate_item(node);
}

void ParseTreeListener::listenPA_Interface_port_declaration(const ParseTreeNode& node) {
  enterPA_Interface_port_declaration(node);
  listenChildren(node, true);
  leavePA_Interface_port_declaration(node);
}

void ParseTreeListener::listenPA_Interface_port_header(const ParseTreeNode& node) {
  enterPA_Interface_port_header(node);
  listenChildren(node, true);
  leavePA_Interface_port_header(node);
}

void ParseTreeListener::listenPA_Join_any_keyword(const ParseTreeNode& node) {
  enterPA_Join_any_keyword(node);
  listenChildren(node, true);
  leavePA_Join_any_keyword(node);
}

void ParseTreeListener::listenPA_Join_keyword(const ParseTreeNode& node) {
  enterPA_Join_keyword(node);
  listenChildren(node, true);
  leavePA_Join_keyword(node);
}

void ParseTreeListener::listenPA_Join_none_keyword(const ParseTreeNode& node) {
  enterPA_Join_none_keyword(node);
  listenChildren(node, true);
  leavePA_Join_none_keyword(node);
}

void ParseTreeListener::listenPA_Jump_statement(const ParseTreeNode& node) {
  enterPA_Jump_statement(node);
  listenChildren(node, true);
  leavePA_Jump_statement(node);
}

void ParseTreeListener::listenPA_Let_declaration(const ParseTreeNode& node) {
  enterPA_Let_declaration(node);
  listenChildren(node, true);
  leavePA_Let_declaration(node);
}

void ParseTreeListener::listenPA_Let_formal_type(const ParseTreeNode& node) {
  enterPA_Let_formal_type(node);
  listenChildren(node, true);
  leavePA_Let_formal_type(node);
}

void ParseTreeListener::listenPA_Let_port_item(const ParseTreeNode& node) {
  enterPA_Let_port_item(node);
  listenChildren(node, true);
  leavePA_Let_port_item(node);
}

void ParseTreeListener::listenPA_Let_port_list(const ParseTreeNode& node) {
  enterPA_Let_port_list(node);
  listenChildren(node, true);
  leavePA_Let_port_list(node);
}

void ParseTreeListener::listenPA_Level_input_list(const ParseTreeNode& node) {
  enterPA_Level_input_list(node);
  listenChildren(node, true);
  leavePA_Level_input_list(node);
}

void ParseTreeListener::listenPA_Level_symbol(const ParseTreeNode& node) {
  enterPA_Level_symbol(node);
  listenChildren(node, true);
  leavePA_Level_symbol(node);
}

void ParseTreeListener::listenPA_Liblist_clause(const ParseTreeNode& node) {
  enterPA_Liblist_clause(node);
  listenChildren(node, true);
  leavePA_Liblist_clause(node);
}

void ParseTreeListener::listenPA_Library_declaration(const ParseTreeNode& node) {
  enterPA_Library_declaration(node);
  listenChildren(node, true);
  leavePA_Library_declaration(node);
}

void ParseTreeListener::listenPA_Library_descriptions(const ParseTreeNode& node) {
  enterPA_Library_descriptions(node);
  listenChildren(node, true);
  leavePA_Library_descriptions(node);
}

void ParseTreeListener::listenPA_Library_text(const ParseTreeNode& node) {
  enterPA_Library_text(node);
  listenChildren(node, true);
  leavePA_Library_text(node);
}

void ParseTreeListener::listenPA_Lifetime(const ParseTreeNode& node) {
  enterPA_Lifetime(node);
  listenChildren(node, true);
  leavePA_Lifetime(node);
}

void ParseTreeListener::listenPA_List_of_arguments(const ParseTreeNode& node) {
  enterPA_List_of_arguments(node);
  listenChildren(node, true);
  leavePA_List_of_arguments(node);
}

void ParseTreeListener::listenPA_List_of_checker_port_connections(const ParseTreeNode& node) {
  enterPA_List_of_checker_port_connections(node);
  listenChildren(node, true);
  leavePA_List_of_checker_port_connections(node);
}

void ParseTreeListener::listenPA_List_of_clocking_decl_assign(const ParseTreeNode& node) {
  enterPA_List_of_clocking_decl_assign(node);
  listenChildren(node, true);
  leavePA_List_of_clocking_decl_assign(node);
}

void ParseTreeListener::listenPA_List_of_cross_items(const ParseTreeNode& node) {
  enterPA_List_of_cross_items(node);
  listenChildren(node, true);
  leavePA_List_of_cross_items(node);
}

void ParseTreeListener::listenPA_List_of_defparam_assignments(const ParseTreeNode& node) {
  enterPA_List_of_defparam_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_defparam_assignments(node);
}

void ParseTreeListener::listenPA_List_of_interface_identifiers(const ParseTreeNode& node) {
  enterPA_List_of_interface_identifiers(node);
  listenChildren(node, true);
  leavePA_List_of_interface_identifiers(node);
}

void ParseTreeListener::listenPA_List_of_net_assignments(const ParseTreeNode& node) {
  enterPA_List_of_net_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_net_assignments(node);
}

void ParseTreeListener::listenPA_List_of_net_decl_assignments(const ParseTreeNode& node) {
  enterPA_List_of_net_decl_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_net_decl_assignments(node);
}

void ParseTreeListener::listenPA_List_of_param_assignments(const ParseTreeNode& node) {
  enterPA_List_of_param_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_param_assignments(node);
}

void ParseTreeListener::listenPA_List_of_parameter_assignments(const ParseTreeNode& node) {
  enterPA_List_of_parameter_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_parameter_assignments(node);
}

void ParseTreeListener::listenPA_List_of_path_delay_expressions(const ParseTreeNode& node) {
  enterPA_List_of_path_delay_expressions(node);
  listenChildren(node, true);
  leavePA_List_of_path_delay_expressions(node);
}

void ParseTreeListener::listenPA_List_of_path_inputs(const ParseTreeNode& node) {
  enterPA_List_of_path_inputs(node);
  listenChildren(node, true);
  leavePA_List_of_path_inputs(node);
}

void ParseTreeListener::listenPA_List_of_path_outputs(const ParseTreeNode& node) {
  enterPA_List_of_path_outputs(node);
  listenChildren(node, true);
  leavePA_List_of_path_outputs(node);
}

void ParseTreeListener::listenPA_List_of_port_connections(const ParseTreeNode& node) {
  enterPA_List_of_port_connections(node);
  listenChildren(node, true);
  leavePA_List_of_port_connections(node);
}

void ParseTreeListener::listenPA_List_of_port_declarations(const ParseTreeNode& node) {
  enterPA_List_of_port_declarations(node);
  listenChildren(node, true);
  leavePA_List_of_port_declarations(node);
}

void ParseTreeListener::listenPA_List_of_port_identifiers(const ParseTreeNode& node) {
  enterPA_List_of_port_identifiers(node);
  listenChildren(node, true);
  leavePA_List_of_port_identifiers(node);
}

void ParseTreeListener::listenPA_List_of_ports(const ParseTreeNode& node) {
  enterPA_List_of_ports(node);
  listenChildren(node, true);
  leavePA_List_of_ports(node);
}

void ParseTreeListener::listenPA_List_of_specparam_assignments(const ParseTreeNode& node) {
  enterPA_List_of_specparam_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_specparam_assignments(node);
}

void ParseTreeListener::listenPA_List_of_tf_variable_identifiers(const ParseTreeNode& node) {
  enterPA_List_of_tf_variable_identifiers(node);
  listenChildren(node, true);
  leavePA_List_of_tf_variable_identifiers(node);
}

void ParseTreeListener::listenPA_List_of_type_assignments(const ParseTreeNode& node) {
  enterPA_List_of_type_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_type_assignments(node);
}

void ParseTreeListener::listenPA_List_of_variable_assignments(const ParseTreeNode& node) {
  enterPA_List_of_variable_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_variable_assignments(node);
}

void ParseTreeListener::listenPA_List_of_variable_decl_assignments(const ParseTreeNode& node) {
  enterPA_List_of_variable_decl_assignments(node);
  listenChildren(node, true);
  leavePA_List_of_variable_decl_assignments(node);
}

void ParseTreeListener::listenPA_List_of_variable_identifiers(const ParseTreeNode& node) {
  enterPA_List_of_variable_identifiers(node);
  listenChildren(node, true);
  leavePA_List_of_variable_identifiers(node);
}

void ParseTreeListener::listenPA_List_of_variable_port_identifiers(const ParseTreeNode& node) {
  enterPA_List_of_variable_port_identifiers(node);
  listenChildren(node, true);
  leavePA_List_of_variable_port_identifiers(node);
}

void ParseTreeListener::listenPA_List_of_virtual_interface_decl(const ParseTreeNode& node) {
  enterPA_List_of_virtual_interface_decl(node);
  listenChildren(node, true);
  leavePA_List_of_virtual_interface_decl(node);
}

void ParseTreeListener::listenPA_Local_parameter_declaration(const ParseTreeNode& node) {
  enterPA_Local_parameter_declaration(node);
  listenChildren(node, true);
  leavePA_Local_parameter_declaration(node);
}

void ParseTreeListener::listenPA_Loop_generate_construct(const ParseTreeNode& node) {
  enterPA_Loop_generate_construct(node);
  listenChildren(node, true);
  leavePA_Loop_generate_construct(node);
}

void ParseTreeListener::listenPA_Loop_statement(const ParseTreeNode& node) {
  enterPA_Loop_statement(node);
  listenChildren(node, true);
  leavePA_Loop_statement(node);
}

void ParseTreeListener::listenPA_Loop_variables(const ParseTreeNode& node) {
  enterPA_Loop_variables(node);
  listenChildren(node, true);
  leavePA_Loop_variables(node);
}

void ParseTreeListener::listenPA_Matches(const ParseTreeNode& node) {
  enterPA_Matches(node);
  listenChildren(node, true);
  leavePA_Matches(node);
}

void ParseTreeListener::listenPA_Method_call(const ParseTreeNode& node) {
  enterPA_Method_call(node);
  listenChildren(node, true);
  leavePA_Method_call(node);
}

void ParseTreeListener::listenPA_Method_call_body(const ParseTreeNode& node) {
  enterPA_Method_call_body(node);
  listenChildren(node, true);
  leavePA_Method_call_body(node);
}

void ParseTreeListener::listenPA_Method_call_root(const ParseTreeNode& node) {
  enterPA_Method_call_root(node);
  listenChildren(node, true);
  leavePA_Method_call_root(node);
}

void ParseTreeListener::listenPA_Method_prototype(const ParseTreeNode& node) {
  enterPA_Method_prototype(node);
  listenChildren(node, true);
  leavePA_Method_prototype(node);
}

void ParseTreeListener::listenPA_Method_qualifier(const ParseTreeNode& node) {
  enterPA_Method_qualifier(node);
  listenChildren(node, true);
  leavePA_Method_qualifier(node);
}

void ParseTreeListener::listenPA_Mintypmax_expression(const ParseTreeNode& node) {
  enterPA_Mintypmax_expression(node);
  listenChildren(node, true);
  leavePA_Mintypmax_expression(node);
}

void ParseTreeListener::listenPA_Modport_hierarchical_ports_declaration(const ParseTreeNode& node) {
  enterPA_Modport_hierarchical_ports_declaration(node);
  listenChildren(node, true);
  leavePA_Modport_hierarchical_ports_declaration(node);
}

void ParseTreeListener::listenPA_Modport_item(const ParseTreeNode& node) {
  enterPA_Modport_item(node);
  listenChildren(node, true);
  leavePA_Modport_item(node);
}

void ParseTreeListener::listenPA_Modport_ports_declaration(const ParseTreeNode& node) {
  enterPA_Modport_ports_declaration(node);
  listenChildren(node, true);
  leavePA_Modport_ports_declaration(node);
}

void ParseTreeListener::listenPA_Modport_simple_port(const ParseTreeNode& node) {
  enterPA_Modport_simple_port(node);
  listenChildren(node, true);
  leavePA_Modport_simple_port(node);
}

void ParseTreeListener::listenPA_Modport_simple_ports_declaration(const ParseTreeNode& node) {
  enterPA_Modport_simple_ports_declaration(node);
  listenChildren(node, true);
  leavePA_Modport_simple_ports_declaration(node);
}

void ParseTreeListener::listenPA_Modport_tf_port(const ParseTreeNode& node) {
  enterPA_Modport_tf_port(node);
  listenChildren(node, true);
  leavePA_Modport_tf_port(node);
}

void ParseTreeListener::listenPA_Modport_tf_ports_declaration(const ParseTreeNode& node) {
  enterPA_Modport_tf_ports_declaration(node);
  listenChildren(node, true);
  leavePA_Modport_tf_ports_declaration(node);
}

void ParseTreeListener::listenPA_Module_ansi_header(const ParseTreeNode& node) {
  enterPA_Module_ansi_header(node);
  listenChildren(node, true);
  leavePA_Module_ansi_header(node);
}

void ParseTreeListener::listenPA_Module_common_item(const ParseTreeNode& node) {
  enterPA_Module_common_item(node);
  listenChildren(node, true);
  leavePA_Module_common_item(node);
}

void ParseTreeListener::listenPA_Module_declaration(const ParseTreeNode& node) {
  enterPA_Module_declaration(node);
  listenChildren(node, true);
  leavePA_Module_declaration(node);
}

void ParseTreeListener::listenPA_Module_instantiation(const ParseTreeNode& node) {
  enterPA_Module_instantiation(node);
  listenChildren(node, true);
  leavePA_Module_instantiation(node);
}

void ParseTreeListener::listenPA_Module_item(const ParseTreeNode& node) {
  enterPA_Module_item(node);
  listenChildren(node, true);
  leavePA_Module_item(node);
}

void ParseTreeListener::listenPA_Module_keyword(const ParseTreeNode& node) {
  enterPA_Module_keyword(node);
  listenChildren(node, true);
  leavePA_Module_keyword(node);
}

void ParseTreeListener::listenPA_Module_nonansi_header(const ParseTreeNode& node) {
  enterPA_Module_nonansi_header(node);
  listenChildren(node, true);
  leavePA_Module_nonansi_header(node);
}

void ParseTreeListener::listenPA_Module_or_generate_item(const ParseTreeNode& node) {
  enterPA_Module_or_generate_item(node);
  listenChildren(node, true);
  leavePA_Module_or_generate_item(node);
}

void ParseTreeListener::listenPA_Module_or_generate_item_declaration(const ParseTreeNode& node) {
  enterPA_Module_or_generate_item_declaration(node);
  listenChildren(node, true);
  leavePA_Module_or_generate_item_declaration(node);
}

void ParseTreeListener::listenPA_Module_path_concatenation(const ParseTreeNode& node) {
  enterPA_Module_path_concatenation(node);
  listenChildren(node, true);
  leavePA_Module_path_concatenation(node);
}

void ParseTreeListener::listenPA_Module_path_expression(const ParseTreeNode& node) {
  enterPA_Module_path_expression(node);
  listenChildren(node, true);
  leavePA_Module_path_expression(node);
}

void ParseTreeListener::listenPA_Module_path_mintypmax_expression(const ParseTreeNode& node) {
  enterPA_Module_path_mintypmax_expression(node);
  listenChildren(node, true);
  leavePA_Module_path_mintypmax_expression(node);
}

void ParseTreeListener::listenPA_Module_path_multiple_concatenation(const ParseTreeNode& node) {
  enterPA_Module_path_multiple_concatenation(node);
  listenChildren(node, true);
  leavePA_Module_path_multiple_concatenation(node);
}

void ParseTreeListener::listenPA_Module_path_primary(const ParseTreeNode& node) {
  enterPA_Module_path_primary(node);
  listenChildren(node, true);
  leavePA_Module_path_primary(node);
}

void ParseTreeListener::listenPA_Mos_switch_instance(const ParseTreeNode& node) {
  enterPA_Mos_switch_instance(node);
  listenChildren(node, true);
  leavePA_Mos_switch_instance(node);
}

void ParseTreeListener::listenPA_Mos_switchtype(const ParseTreeNode& node) {
  enterPA_Mos_switchtype(node);
  listenChildren(node, true);
  leavePA_Mos_switchtype(node);
}

void ParseTreeListener::listenPA_Multiple_concatenation(const ParseTreeNode& node) {
  enterPA_Multiple_concatenation(node);
  listenChildren(node, true);
  leavePA_Multiple_concatenation(node);
}

void ParseTreeListener::listenPA_N_input_gate_instance(const ParseTreeNode& node) {
  enterPA_N_input_gate_instance(node);
  listenChildren(node, true);
  leavePA_N_input_gate_instance(node);
}

void ParseTreeListener::listenPA_N_input_gatetype(const ParseTreeNode& node) {
  enterPA_N_input_gatetype(node);
  listenChildren(node, true);
  leavePA_N_input_gatetype(node);
}

void ParseTreeListener::listenPA_N_output_gate_instance(const ParseTreeNode& node) {
  enterPA_N_output_gate_instance(node);
  listenChildren(node, true);
  leavePA_N_output_gate_instance(node);
}

void ParseTreeListener::listenPA_N_output_gatetype(const ParseTreeNode& node) {
  enterPA_N_output_gatetype(node);
  listenChildren(node, true);
  leavePA_N_output_gatetype(node);
}

void ParseTreeListener::listenPA_Name_of_instance(const ParseTreeNode& node) {
  enterPA_Name_of_instance(node);
  listenChildren(node, true);
  leavePA_Name_of_instance(node);
}

void ParseTreeListener::listenPA_Named_checker_port_connection(const ParseTreeNode& node) {
  enterPA_Named_checker_port_connection(node);
  listenChildren(node, true);
  leavePA_Named_checker_port_connection(node);
}

void ParseTreeListener::listenPA_Named_parameter_assignment(const ParseTreeNode& node) {
  enterPA_Named_parameter_assignment(node);
  listenChildren(node, true);
  leavePA_Named_parameter_assignment(node);
}

void ParseTreeListener::listenPA_Named_port_connection(const ParseTreeNode& node) {
  enterPA_Named_port_connection(node);
  listenChildren(node, true);
  leavePA_Named_port_connection(node);
}

void ParseTreeListener::listenPA_Net_alias(const ParseTreeNode& node) {
  enterPA_Net_alias(node);
  listenChildren(node, true);
  leavePA_Net_alias(node);
}

void ParseTreeListener::listenPA_Net_assignment(const ParseTreeNode& node) {
  enterPA_Net_assignment(node);
  listenChildren(node, true);
  leavePA_Net_assignment(node);
}

void ParseTreeListener::listenPA_Net_decl_assignment(const ParseTreeNode& node) {
  enterPA_Net_decl_assignment(node);
  listenChildren(node, true);
  leavePA_Net_decl_assignment(node);
}

void ParseTreeListener::listenPA_Net_declaration(const ParseTreeNode& node) {
  enterPA_Net_declaration(node);
  listenChildren(node, true);
  leavePA_Net_declaration(node);
}

void ParseTreeListener::listenPA_Net_lvalue(const ParseTreeNode& node) {
  enterPA_Net_lvalue(node);
  listenChildren(node, true);
  leavePA_Net_lvalue(node);
}

void ParseTreeListener::listenPA_Net_port_header(const ParseTreeNode& node) {
  enterPA_Net_port_header(node);
  listenChildren(node, true);
  leavePA_Net_port_header(node);
}

void ParseTreeListener::listenPA_Net_port_type(const ParseTreeNode& node) {
  enterPA_Net_port_type(node);
  listenChildren(node, true);
  leavePA_Net_port_type(node);
}

void ParseTreeListener::listenPA_Net_type(const ParseTreeNode& node) {
  enterPA_Net_type(node);
  listenChildren(node, true);
  leavePA_Net_type(node);
}

void ParseTreeListener::listenPA_Net_type_declaration(const ParseTreeNode& node) {
  enterPA_Net_type_declaration(node);
  listenChildren(node, true);
  leavePA_Net_type_declaration(node);
}

void ParseTreeListener::listenPA_Next_state(const ParseTreeNode& node) {
  enterPA_Next_state(node);
  listenChildren(node, true);
  leavePA_Next_state(node);
}

void ParseTreeListener::listenPA_Noaccelerate_directive(const ParseTreeNode& node) {
  enterPA_Noaccelerate_directive(node);
  listenChildren(node, true);
  leavePA_Noaccelerate_directive(node);
}

void ParseTreeListener::listenPA_Noexpand_vectornets_directive(const ParseTreeNode& node) {
  enterPA_Noexpand_vectornets_directive(node);
  listenChildren(node, true);
  leavePA_Noexpand_vectornets_directive(node);
}

void ParseTreeListener::listenPA_Non_consecutive_repetition(const ParseTreeNode& node) {
  enterPA_Non_consecutive_repetition(node);
  listenChildren(node, true);
  leavePA_Non_consecutive_repetition(node);
}

void ParseTreeListener::listenPA_Non_integer_type(const ParseTreeNode& node) {
  enterPA_Non_integer_type(node);
  listenChildren(node, true);
  leavePA_Non_integer_type(node);
}

void ParseTreeListener::listenPA_Non_port_interface_item(const ParseTreeNode& node) {
  enterPA_Non_port_interface_item(node);
  listenChildren(node, true);
  leavePA_Non_port_interface_item(node);
}

void ParseTreeListener::listenPA_Non_port_module_item(const ParseTreeNode& node) {
  enterPA_Non_port_module_item(node);
  listenChildren(node, true);
  leavePA_Non_port_module_item(node);
}

void ParseTreeListener::listenPA_Non_port_program_item(const ParseTreeNode& node) {
  enterPA_Non_port_program_item(node);
  listenChildren(node, true);
  leavePA_Non_port_program_item(node);
}

void ParseTreeListener::listenPA_Nonblocking_assignment(const ParseTreeNode& node) {
  enterPA_Nonblocking_assignment(node);
  listenChildren(node, true);
  leavePA_Nonblocking_assignment(node);
}

void ParseTreeListener::listenPA_Nonrange_select(const ParseTreeNode& node) {
  enterPA_Nonrange_select(node);
  listenChildren(node, true);
  leavePA_Nonrange_select(node);
}

void ParseTreeListener::listenPA_Nonrange_variable_lvalue(const ParseTreeNode& node) {
  enterPA_Nonrange_variable_lvalue(node);
  listenChildren(node, true);
  leavePA_Nonrange_variable_lvalue(node);
}

void ParseTreeListener::listenPA_Noremove_gatenames_directive(const ParseTreeNode& node) {
  enterPA_Noremove_gatenames_directive(node);
  listenChildren(node, true);
  leavePA_Noremove_gatenames_directive(node);
}

void ParseTreeListener::listenPA_Noremove_netnames_directive(const ParseTreeNode& node) {
  enterPA_Noremove_netnames_directive(node);
  listenChildren(node, true);
  leavePA_Noremove_netnames_directive(node);
}

void ParseTreeListener::listenPA_Nosuppress_faults_directive(const ParseTreeNode& node) {
  enterPA_Nosuppress_faults_directive(node);
  listenChildren(node, true);
  leavePA_Nosuppress_faults_directive(node);
}

void ParseTreeListener::listenPA_Notifier(const ParseTreeNode& node) {
  enterPA_Notifier(node);
  listenChildren(node, true);
  leavePA_Notifier(node);
}

void ParseTreeListener::listenPA_Nounconnected_drive_directive(const ParseTreeNode& node) {
  enterPA_Nounconnected_drive_directive(node);
  listenChildren(node, true);
  leavePA_Nounconnected_drive_directive(node);
}

void ParseTreeListener::listenPA_Null_keyword(const ParseTreeNode& node) {
  enterPA_Null_keyword(node);
  listenChildren(node, true);
  leavePA_Null_keyword(node);
}

void ParseTreeListener::listenPA_Null_rule(const ParseTreeNode& node) {
  enterPA_Null_rule(node);
  listenChildren(node, true);
  leavePA_Null_rule(node);
}

void ParseTreeListener::listenPA_Number(const ParseTreeNode& node) {
  enterPA_Number(node);
  listenChildren(node, true);
  leavePA_Number(node);
}

void ParseTreeListener::listenPA_Open_range_list(const ParseTreeNode& node) {
  enterPA_Open_range_list(node);
  listenChildren(node, true);
  leavePA_Open_range_list(node);
}

void ParseTreeListener::listenPA_Operator_assignment(const ParseTreeNode& node) {
  enterPA_Operator_assignment(node);
  listenChildren(node, true);
  leavePA_Operator_assignment(node);
}

void ParseTreeListener::listenPA_Or_call(const ParseTreeNode& node) {
  enterPA_Or_call(node);
  listenChildren(node, true);
  leavePA_Or_call(node);
}

void ParseTreeListener::listenPA_Or_operator(const ParseTreeNode& node) {
  enterPA_Or_operator(node);
  listenChildren(node, true);
  leavePA_Or_operator(node);
}

void ParseTreeListener::listenPA_Ordered_checker_port_connection(const ParseTreeNode& node) {
  enterPA_Ordered_checker_port_connection(node);
  listenChildren(node, true);
  leavePA_Ordered_checker_port_connection(node);
}

void ParseTreeListener::listenPA_Ordered_parameter_assignment(const ParseTreeNode& node) {
  enterPA_Ordered_parameter_assignment(node);
  listenChildren(node, true);
  leavePA_Ordered_parameter_assignment(node);
}

void ParseTreeListener::listenPA_Ordered_port_connection(const ParseTreeNode& node) {
  enterPA_Ordered_port_connection(node);
  listenChildren(node, true);
  leavePA_Ordered_port_connection(node);
}

void ParseTreeListener::listenPA_Output_declaration(const ParseTreeNode& node) {
  enterPA_Output_declaration(node);
  listenChildren(node, true);
  leavePA_Output_declaration(node);
}

void ParseTreeListener::listenPA_Output_symbol(const ParseTreeNode& node) {
  enterPA_Output_symbol(node);
  listenChildren(node, true);
  leavePA_Output_symbol(node);
}

void ParseTreeListener::listenPA_Overload_declaration(const ParseTreeNode& node) {
  enterPA_Overload_declaration(node);
  listenChildren(node, true);
  leavePA_Overload_declaration(node);
}

void ParseTreeListener::listenPA_Overload_operator(const ParseTreeNode& node) {
  enterPA_Overload_operator(node);
  listenChildren(node, true);
  leavePA_Overload_operator(node);
}

void ParseTreeListener::listenPA_Overload_proto_formals(const ParseTreeNode& node) {
  enterPA_Overload_proto_formals(node);
  listenChildren(node, true);
  leavePA_Overload_proto_formals(node);
}

void ParseTreeListener::listenPA_Package_declaration(const ParseTreeNode& node) {
  enterPA_Package_declaration(node);
  listenChildren(node, true);
  leavePA_Package_declaration(node);
}

void ParseTreeListener::listenPA_Package_export_declaration(const ParseTreeNode& node) {
  enterPA_Package_export_declaration(node);
  listenChildren(node, true);
  leavePA_Package_export_declaration(node);
}

void ParseTreeListener::listenPA_Package_import_declaration(const ParseTreeNode& node) {
  enterPA_Package_import_declaration(node);
  listenChildren(node, true);
  leavePA_Package_import_declaration(node);
}

void ParseTreeListener::listenPA_Package_import_item(const ParseTreeNode& node) {
  enterPA_Package_import_item(node);
  listenChildren(node, true);
  leavePA_Package_import_item(node);
}

void ParseTreeListener::listenPA_Package_item(const ParseTreeNode& node) {
  enterPA_Package_item(node);
  listenChildren(node, true);
  leavePA_Package_item(node);
}

void ParseTreeListener::listenPA_Package_or_generate_item_declaration(const ParseTreeNode& node) {
  enterPA_Package_or_generate_item_declaration(node);
  listenChildren(node, true);
  leavePA_Package_or_generate_item_declaration(node);
}

void ParseTreeListener::listenPA_Package_scope(const ParseTreeNode& node) {
  enterPA_Package_scope(node);
  listenChildren(node, true);
  leavePA_Package_scope(node);
}

void ParseTreeListener::listenPA_Packed_dimension(const ParseTreeNode& node) {
  enterPA_Packed_dimension(node);
  listenChildren(node, true);
  leavePA_Packed_dimension(node);
}

void ParseTreeListener::listenPA_Packed_keyword(const ParseTreeNode& node) {
  enterPA_Packed_keyword(node);
  listenChildren(node, true);
  leavePA_Packed_keyword(node);
}

void ParseTreeListener::listenPA_Par_block(const ParseTreeNode& node) {
  enterPA_Par_block(node);
  listenChildren(node, true);
  leavePA_Par_block(node);
}

void ParseTreeListener::listenPA_Parallel_edge_sensitive_path_description(const ParseTreeNode& node) {
  enterPA_Parallel_edge_sensitive_path_description(node);
  listenChildren(node, true);
  leavePA_Parallel_edge_sensitive_path_description(node);
}

void ParseTreeListener::listenPA_Parallel_path_description(const ParseTreeNode& node) {
  enterPA_Parallel_path_description(node);
  listenChildren(node, true);
  leavePA_Parallel_path_description(node);
}

void ParseTreeListener::listenPA_Param_assignment(const ParseTreeNode& node) {
  enterPA_Param_assignment(node);
  listenChildren(node, true);
  leavePA_Param_assignment(node);
}

void ParseTreeListener::listenPA_Param_expression(const ParseTreeNode& node) {
  enterPA_Param_expression(node);
  listenChildren(node, true);
  leavePA_Param_expression(node);
}

void ParseTreeListener::listenPA_Parameter_declaration(const ParseTreeNode& node) {
  enterPA_Parameter_declaration(node);
  listenChildren(node, true);
  leavePA_Parameter_declaration(node);
}

void ParseTreeListener::listenPA_Parameter_override(const ParseTreeNode& node) {
  enterPA_Parameter_override(node);
  listenChildren(node, true);
  leavePA_Parameter_override(node);
}

void ParseTreeListener::listenPA_Parameter_port_declaration(const ParseTreeNode& node) {
  enterPA_Parameter_port_declaration(node);
  listenChildren(node, true);
  leavePA_Parameter_port_declaration(node);
}

void ParseTreeListener::listenPA_Parameter_port_list(const ParseTreeNode& node) {
  enterPA_Parameter_port_list(node);
  listenChildren(node, true);
  leavePA_Parameter_port_list(node);
}

void ParseTreeListener::listenPA_Parameter_value_assignment(const ParseTreeNode& node) {
  enterPA_Parameter_value_assignment(node);
  listenChildren(node, true);
  leavePA_Parameter_value_assignment(node);
}

void ParseTreeListener::listenPA_Part_select_op(const ParseTreeNode& node) {
  enterPA_Part_select_op(node);
  listenChildren(node, true);
  leavePA_Part_select_op(node);
}

void ParseTreeListener::listenPA_Part_select_op_colon(const ParseTreeNode& node) {
  enterPA_Part_select_op_colon(node);
  listenChildren(node, true);
  leavePA_Part_select_op_colon(node);
}

void ParseTreeListener::listenPA_Part_select_range(const ParseTreeNode& node) {
  enterPA_Part_select_range(node);
  listenChildren(node, true);
  leavePA_Part_select_range(node);
}

void ParseTreeListener::listenPA_Pass_en_switchtype(const ParseTreeNode& node) {
  enterPA_Pass_en_switchtype(node);
  listenChildren(node, true);
  leavePA_Pass_en_switchtype(node);
}

void ParseTreeListener::listenPA_Pass_enable_switch_instance(const ParseTreeNode& node) {
  enterPA_Pass_enable_switch_instance(node);
  listenChildren(node, true);
  leavePA_Pass_enable_switch_instance(node);
}

void ParseTreeListener::listenPA_Pass_switch_instance(const ParseTreeNode& node) {
  enterPA_Pass_switch_instance(node);
  listenChildren(node, true);
  leavePA_Pass_switch_instance(node);
}

void ParseTreeListener::listenPA_Pass_switchtype(const ParseTreeNode& node) {
  enterPA_Pass_switchtype(node);
  listenChildren(node, true);
  leavePA_Pass_switchtype(node);
}

void ParseTreeListener::listenPA_Path_declaration(const ParseTreeNode& node) {
  enterPA_Path_declaration(node);
  listenChildren(node, true);
  leavePA_Path_declaration(node);
}

void ParseTreeListener::listenPA_Path_delay_expression(const ParseTreeNode& node) {
  enterPA_Path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Path_delay_expression(node);
}

void ParseTreeListener::listenPA_Path_delay_value(const ParseTreeNode& node) {
  enterPA_Path_delay_value(node);
  listenChildren(node, true);
  leavePA_Path_delay_value(node);
}

void ParseTreeListener::listenPA_Pattern(const ParseTreeNode& node) {
  enterPA_Pattern(node);
  listenChildren(node, true);
  leavePA_Pattern(node);
}

void ParseTreeListener::listenPA_Port(const ParseTreeNode& node) {
  enterPA_Port(node);
  listenChildren(node, true);
  leavePA_Port(node);
}

void ParseTreeListener::listenPA_Port_declaration(const ParseTreeNode& node) {
  enterPA_Port_declaration(node);
  listenChildren(node, true);
  leavePA_Port_declaration(node);
}

void ParseTreeListener::listenPA_Port_direction(const ParseTreeNode& node) {
  enterPA_Port_direction(node);
  listenChildren(node, true);
  leavePA_Port_direction(node);
}

void ParseTreeListener::listenPA_Port_expression(const ParseTreeNode& node) {
  enterPA_Port_expression(node);
  listenChildren(node, true);
  leavePA_Port_expression(node);
}

void ParseTreeListener::listenPA_Port_reference(const ParseTreeNode& node) {
  enterPA_Port_reference(node);
  listenChildren(node, true);
  leavePA_Port_reference(node);
}

void ParseTreeListener::listenPA_Pound_delay_value(const ParseTreeNode& node) {
  enterPA_Pound_delay_value(node);
  listenChildren(node, true);
  leavePA_Pound_delay_value(node);
}

void ParseTreeListener::listenPA_Pragma_directive(const ParseTreeNode& node) {
  enterPA_Pragma_directive(node);
  listenChildren(node, true);
  leavePA_Pragma_directive(node);
}

void ParseTreeListener::listenPA_Pragma_expression(const ParseTreeNode& node) {
  enterPA_Pragma_expression(node);
  listenChildren(node, true);
  leavePA_Pragma_expression(node);
}

void ParseTreeListener::listenPA_Pragma_value(const ParseTreeNode& node) {
  enterPA_Pragma_value(node);
  listenChildren(node, true);
  leavePA_Pragma_value(node);
}

void ParseTreeListener::listenPA_Primary(const ParseTreeNode& node) {
  enterPA_Primary(node);
  listenChildren(node, true);
  leavePA_Primary(node);
}

void ParseTreeListener::listenPA_Primary_literal(const ParseTreeNode& node) {
  enterPA_Primary_literal(node);
  listenChildren(node, true);
  leavePA_Primary_literal(node);
}

void ParseTreeListener::listenPA_Procedural_assertion_statement(const ParseTreeNode& node) {
  enterPA_Procedural_assertion_statement(node);
  listenChildren(node, true);
  leavePA_Procedural_assertion_statement(node);
}

void ParseTreeListener::listenPA_Procedural_continuous_assignment(const ParseTreeNode& node) {
  enterPA_Procedural_continuous_assignment(node);
  listenChildren(node, true);
  leavePA_Procedural_continuous_assignment(node);
}

void ParseTreeListener::listenPA_Procedural_timing_control(const ParseTreeNode& node) {
  enterPA_Procedural_timing_control(node);
  listenChildren(node, true);
  leavePA_Procedural_timing_control(node);
}

void ParseTreeListener::listenPA_Procedural_timing_control_statement(const ParseTreeNode& node) {
  enterPA_Procedural_timing_control_statement(node);
  listenChildren(node, true);
  leavePA_Procedural_timing_control_statement(node);
}

void ParseTreeListener::listenPA_Production(const ParseTreeNode& node) {
  enterPA_Production(node);
  listenChildren(node, true);
  leavePA_Production(node);
}

void ParseTreeListener::listenPA_Production_item(const ParseTreeNode& node) {
  enterPA_Production_item(node);
  listenChildren(node, true);
  leavePA_Production_item(node);
}

void ParseTreeListener::listenPA_Program_ansi_header(const ParseTreeNode& node) {
  enterPA_Program_ansi_header(node);
  listenChildren(node, true);
  leavePA_Program_ansi_header(node);
}

void ParseTreeListener::listenPA_Program_declaration(const ParseTreeNode& node) {
  enterPA_Program_declaration(node);
  listenChildren(node, true);
  leavePA_Program_declaration(node);
}

void ParseTreeListener::listenPA_Program_generate_item(const ParseTreeNode& node) {
  enterPA_Program_generate_item(node);
  listenChildren(node, true);
  leavePA_Program_generate_item(node);
}

void ParseTreeListener::listenPA_Program_item(const ParseTreeNode& node) {
  enterPA_Program_item(node);
  listenChildren(node, true);
  leavePA_Program_item(node);
}

void ParseTreeListener::listenPA_Program_nonansi_header(const ParseTreeNode& node) {
  enterPA_Program_nonansi_header(node);
  listenChildren(node, true);
  leavePA_Program_nonansi_header(node);
}

void ParseTreeListener::listenPA_Property_actual_arg(const ParseTreeNode& node) {
  enterPA_Property_actual_arg(node);
  listenChildren(node, true);
  leavePA_Property_actual_arg(node);
}

void ParseTreeListener::listenPA_Property_case_item(const ParseTreeNode& node) {
  enterPA_Property_case_item(node);
  listenChildren(node, true);
  leavePA_Property_case_item(node);
}

void ParseTreeListener::listenPA_Property_declaration(const ParseTreeNode& node) {
  enterPA_Property_declaration(node);
  listenChildren(node, true);
  leavePA_Property_declaration(node);
}

void ParseTreeListener::listenPA_Property_expr(const ParseTreeNode& node) {
  enterPA_Property_expr(node);
  listenChildren(node, true);
  leavePA_Property_expr(node);
}

void ParseTreeListener::listenPA_Property_formal_type(const ParseTreeNode& node) {
  enterPA_Property_formal_type(node);
  listenChildren(node, true);
  leavePA_Property_formal_type(node);
}

void ParseTreeListener::listenPA_Property_instance(const ParseTreeNode& node) {
  enterPA_Property_instance(node);
  listenChildren(node, true);
  leavePA_Property_instance(node);
}

void ParseTreeListener::listenPA_Property_lvar_port_direction(const ParseTreeNode& node) {
  enterPA_Property_lvar_port_direction(node);
  listenChildren(node, true);
  leavePA_Property_lvar_port_direction(node);
}

void ParseTreeListener::listenPA_Property_port_item(const ParseTreeNode& node) {
  enterPA_Property_port_item(node);
  listenChildren(node, true);
  leavePA_Property_port_item(node);
}

void ParseTreeListener::listenPA_Property_port_list(const ParseTreeNode& node) {
  enterPA_Property_port_list(node);
  listenChildren(node, true);
  leavePA_Property_port_list(node);
}

void ParseTreeListener::listenPA_Property_qualifier(const ParseTreeNode& node) {
  enterPA_Property_qualifier(node);
  listenChildren(node, true);
  leavePA_Property_qualifier(node);
}

void ParseTreeListener::listenPA_Property_spec(const ParseTreeNode& node) {
  enterPA_Property_spec(node);
  listenChildren(node, true);
  leavePA_Property_spec(node);
}

void ParseTreeListener::listenPA_Protect_directive(const ParseTreeNode& node) {
  enterPA_Protect_directive(node);
  listenChildren(node, true);
  leavePA_Protect_directive(node);
}

void ParseTreeListener::listenPA_Protected_directive(const ParseTreeNode& node) {
  enterPA_Protected_directive(node);
  listenChildren(node, true);
  leavePA_Protected_directive(node);
}

void ParseTreeListener::listenPA_Ps_identifier(const ParseTreeNode& node) {
  enterPA_Ps_identifier(node);
  listenChildren(node, true);
  leavePA_Ps_identifier(node);
}

void ParseTreeListener::listenPA_Ps_or_hierarchical_array_identifier(const ParseTreeNode& node) {
  enterPA_Ps_or_hierarchical_array_identifier(node);
  listenChildren(node, true);
  leavePA_Ps_or_hierarchical_array_identifier(node);
}

void ParseTreeListener::listenPA_Ps_or_hierarchical_identifier(const ParseTreeNode& node) {
  enterPA_Ps_or_hierarchical_identifier(node);
  listenChildren(node, true);
  leavePA_Ps_or_hierarchical_identifier(node);
}

void ParseTreeListener::listenPA_Ps_or_hierarchical_sequence_identifier(const ParseTreeNode& node) {
  enterPA_Ps_or_hierarchical_sequence_identifier(node);
  listenChildren(node, true);
  leavePA_Ps_or_hierarchical_sequence_identifier(node);
}

void ParseTreeListener::listenPA_Ps_type_identifier(const ParseTreeNode& node) {
  enterPA_Ps_type_identifier(node);
  listenChildren(node, true);
  leavePA_Ps_type_identifier(node);
}

void ParseTreeListener::listenPA_Pull_gate_instance(const ParseTreeNode& node) {
  enterPA_Pull_gate_instance(node);
  listenChildren(node, true);
  leavePA_Pull_gate_instance(node);
}

void ParseTreeListener::listenPA_Pulldown_strength(const ParseTreeNode& node) {
  enterPA_Pulldown_strength(node);
  listenChildren(node, true);
  leavePA_Pulldown_strength(node);
}

void ParseTreeListener::listenPA_Pullup_strength(const ParseTreeNode& node) {
  enterPA_Pullup_strength(node);
  listenChildren(node, true);
  leavePA_Pullup_strength(node);
}

void ParseTreeListener::listenPA_Pulse_control_specparam(const ParseTreeNode& node) {
  enterPA_Pulse_control_specparam(node);
  listenChildren(node, true);
  leavePA_Pulse_control_specparam(node);
}

void ParseTreeListener::listenPA_Pulsestyle_declaration(const ParseTreeNode& node) {
  enterPA_Pulsestyle_declaration(node);
  listenChildren(node, true);
  leavePA_Pulsestyle_declaration(node);
}

void ParseTreeListener::listenPA_Pure_keyword(const ParseTreeNode& node) {
  enterPA_Pure_keyword(node);
  listenChildren(node, true);
  leavePA_Pure_keyword(node);
}

void ParseTreeListener::listenPA_Pure_virtual_qualifier(const ParseTreeNode& node) {
  enterPA_Pure_virtual_qualifier(node);
  listenChildren(node, true);
  leavePA_Pure_virtual_qualifier(node);
}

void ParseTreeListener::listenPA_Queue_dimension(const ParseTreeNode& node) {
  enterPA_Queue_dimension(node);
  listenChildren(node, true);
  leavePA_Queue_dimension(node);
}

void ParseTreeListener::listenPA_Randcase_item(const ParseTreeNode& node) {
  enterPA_Randcase_item(node);
  listenChildren(node, true);
  leavePA_Randcase_item(node);
}

void ParseTreeListener::listenPA_Randcase_statement(const ParseTreeNode& node) {
  enterPA_Randcase_statement(node);
  listenChildren(node, true);
  leavePA_Randcase_statement(node);
}

void ParseTreeListener::listenPA_Random_qualifier(const ParseTreeNode& node) {
  enterPA_Random_qualifier(node);
  listenChildren(node, true);
  leavePA_Random_qualifier(node);
}

void ParseTreeListener::listenPA_Randomize_call(const ParseTreeNode& node) {
  enterPA_Randomize_call(node);
  listenChildren(node, true);
  leavePA_Randomize_call(node);
}

void ParseTreeListener::listenPA_Randsequence_statement(const ParseTreeNode& node) {
  enterPA_Randsequence_statement(node);
  listenChildren(node, true);
  leavePA_Randsequence_statement(node);
}

void ParseTreeListener::listenPA_Range_expression(const ParseTreeNode& node) {
  enterPA_Range_expression(node);
  listenChildren(node, true);
  leavePA_Range_expression(node);
}

void ParseTreeListener::listenPA_Range_list(const ParseTreeNode& node) {
  enterPA_Range_list(node);
  listenChildren(node, true);
  leavePA_Range_list(node);
}

void ParseTreeListener::listenPA_Ref_declaration(const ParseTreeNode& node) {
  enterPA_Ref_declaration(node);
  listenChildren(node, true);
  leavePA_Ref_declaration(node);
}

void ParseTreeListener::listenPA_Reference_event(const ParseTreeNode& node) {
  enterPA_Reference_event(node);
  listenChildren(node, true);
  leavePA_Reference_event(node);
}

void ParseTreeListener::listenPA_Remain_active_flag(const ParseTreeNode& node) {
  enterPA_Remain_active_flag(node);
  listenChildren(node, true);
  leavePA_Remain_active_flag(node);
}

void ParseTreeListener::listenPA_Remove_gatename_directive(const ParseTreeNode& node) {
  enterPA_Remove_gatename_directive(node);
  listenChildren(node, true);
  leavePA_Remove_gatename_directive(node);
}

void ParseTreeListener::listenPA_Remove_netname_directive(const ParseTreeNode& node) {
  enterPA_Remove_netname_directive(node);
  listenChildren(node, true);
  leavePA_Remove_netname_directive(node);
}

void ParseTreeListener::listenPA_Repeat_range(const ParseTreeNode& node) {
  enterPA_Repeat_range(node);
  listenChildren(node, true);
  leavePA_Repeat_range(node);
}

void ParseTreeListener::listenPA_Restrict_property_statement(const ParseTreeNode& node) {
  enterPA_Restrict_property_statement(node);
  listenChildren(node, true);
  leavePA_Restrict_property_statement(node);
}

void ParseTreeListener::listenPA_Rs_case(const ParseTreeNode& node) {
  enterPA_Rs_case(node);
  listenChildren(node, true);
  leavePA_Rs_case(node);
}

void ParseTreeListener::listenPA_Rs_case_item(const ParseTreeNode& node) {
  enterPA_Rs_case_item(node);
  listenChildren(node, true);
  leavePA_Rs_case_item(node);
}

void ParseTreeListener::listenPA_Rs_code_block(const ParseTreeNode& node) {
  enterPA_Rs_code_block(node);
  listenChildren(node, true);
  leavePA_Rs_code_block(node);
}

void ParseTreeListener::listenPA_Rs_if_else(const ParseTreeNode& node) {
  enterPA_Rs_if_else(node);
  listenChildren(node, true);
  leavePA_Rs_if_else(node);
}

void ParseTreeListener::listenPA_Rs_prod(const ParseTreeNode& node) {
  enterPA_Rs_prod(node);
  listenChildren(node, true);
  leavePA_Rs_prod(node);
}

void ParseTreeListener::listenPA_Rs_production_list(const ParseTreeNode& node) {
  enterPA_Rs_production_list(node);
  listenChildren(node, true);
  leavePA_Rs_production_list(node);
}

void ParseTreeListener::listenPA_Rs_repeat(const ParseTreeNode& node) {
  enterPA_Rs_repeat(node);
  listenChildren(node, true);
  leavePA_Rs_repeat(node);
}

void ParseTreeListener::listenPA_Rs_rule(const ParseTreeNode& node) {
  enterPA_Rs_rule(node);
  listenChildren(node, true);
  leavePA_Rs_rule(node);
}

void ParseTreeListener::listenPA_Scalar_constant(const ParseTreeNode& node) {
  enterPA_Scalar_constant(node);
  listenChildren(node, true);
  leavePA_Scalar_constant(node);
}

void ParseTreeListener::listenPA_Scalar_timing_check_condition(const ParseTreeNode& node) {
  enterPA_Scalar_timing_check_condition(node);
  listenChildren(node, true);
  leavePA_Scalar_timing_check_condition(node);
}

void ParseTreeListener::listenPA_Select(const ParseTreeNode& node) {
  enterPA_Select(node);
  listenChildren(node, true);
  leavePA_Select(node);
}

void ParseTreeListener::listenPA_Select_condition(const ParseTreeNode& node) {
  enterPA_Select_condition(node);
  listenChildren(node, true);
  leavePA_Select_condition(node);
}

void ParseTreeListener::listenPA_Select_expression(const ParseTreeNode& node) {
  enterPA_Select_expression(node);
  listenChildren(node, true);
  leavePA_Select_expression(node);
}

void ParseTreeListener::listenPA_Seq_block(const ParseTreeNode& node) {
  enterPA_Seq_block(node);
  listenChildren(node, true);
  leavePA_Seq_block(node);
}

void ParseTreeListener::listenPA_Seq_input_list(const ParseTreeNode& node) {
  enterPA_Seq_input_list(node);
  listenChildren(node, true);
  leavePA_Seq_input_list(node);
}

void ParseTreeListener::listenPA_Sequence_actual_arg(const ParseTreeNode& node) {
  enterPA_Sequence_actual_arg(node);
  listenChildren(node, true);
  leavePA_Sequence_actual_arg(node);
}

void ParseTreeListener::listenPA_Sequence_arg(const ParseTreeNode& node) {
  enterPA_Sequence_arg(node);
  listenChildren(node, true);
  leavePA_Sequence_arg(node);
}

void ParseTreeListener::listenPA_Sequence_declaration(const ParseTreeNode& node) {
  enterPA_Sequence_declaration(node);
  listenChildren(node, true);
  leavePA_Sequence_declaration(node);
}

void ParseTreeListener::listenPA_Sequence_expr(const ParseTreeNode& node) {
  enterPA_Sequence_expr(node);
  listenChildren(node, true);
  leavePA_Sequence_expr(node);
}

void ParseTreeListener::listenPA_Sequence_formal_type(const ParseTreeNode& node) {
  enterPA_Sequence_formal_type(node);
  listenChildren(node, true);
  leavePA_Sequence_formal_type(node);
}

void ParseTreeListener::listenPA_Sequence_instance(const ParseTreeNode& node) {
  enterPA_Sequence_instance(node);
  listenChildren(node, true);
  leavePA_Sequence_instance(node);
}

void ParseTreeListener::listenPA_Sequence_list_of_arguments(const ParseTreeNode& node) {
  enterPA_Sequence_list_of_arguments(node);
  listenChildren(node, true);
  leavePA_Sequence_list_of_arguments(node);
}

void ParseTreeListener::listenPA_Sequence_lvar_port_direction(const ParseTreeNode& node) {
  enterPA_Sequence_lvar_port_direction(node);
  listenChildren(node, true);
  leavePA_Sequence_lvar_port_direction(node);
}

void ParseTreeListener::listenPA_Sequence_match_item(const ParseTreeNode& node) {
  enterPA_Sequence_match_item(node);
  listenChildren(node, true);
  leavePA_Sequence_match_item(node);
}

void ParseTreeListener::listenPA_Sequence_method_call(const ParseTreeNode& node) {
  enterPA_Sequence_method_call(node);
  listenChildren(node, true);
  leavePA_Sequence_method_call(node);
}

void ParseTreeListener::listenPA_Sequence_port_item(const ParseTreeNode& node) {
  enterPA_Sequence_port_item(node);
  listenChildren(node, true);
  leavePA_Sequence_port_item(node);
}

void ParseTreeListener::listenPA_Sequence_port_list(const ParseTreeNode& node) {
  enterPA_Sequence_port_list(node);
  listenChildren(node, true);
  leavePA_Sequence_port_list(node);
}

void ParseTreeListener::listenPA_Sequential_body(const ParseTreeNode& node) {
  enterPA_Sequential_body(node);
  listenChildren(node, true);
  leavePA_Sequential_body(node);
}

void ParseTreeListener::listenPA_Sequential_entry(const ParseTreeNode& node) {
  enterPA_Sequential_entry(node);
  listenChildren(node, true);
  leavePA_Sequential_entry(node);
}

void ParseTreeListener::listenPA_Showcancelled_declaration(const ParseTreeNode& node) {
  enterPA_Showcancelled_declaration(node);
  listenChildren(node, true);
  leavePA_Showcancelled_declaration(node);
}

void ParseTreeListener::listenPA_Signed_directive(const ParseTreeNode& node) {
  enterPA_Signed_directive(node);
  listenChildren(node, true);
  leavePA_Signed_directive(node);
}

void ParseTreeListener::listenPA_Signing(const ParseTreeNode& node) {
  enterPA_Signing(node);
  listenChildren(node, true);
  leavePA_Signing(node);
}

void ParseTreeListener::listenPA_Simple_immediate_assert_statement(const ParseTreeNode& node) {
  enterPA_Simple_immediate_assert_statement(node);
  listenChildren(node, true);
  leavePA_Simple_immediate_assert_statement(node);
}

void ParseTreeListener::listenPA_Simple_immediate_assertion_statement(const ParseTreeNode& node) {
  enterPA_Simple_immediate_assertion_statement(node);
  listenChildren(node, true);
  leavePA_Simple_immediate_assertion_statement(node);
}

void ParseTreeListener::listenPA_Simple_immediate_assume_statement(const ParseTreeNode& node) {
  enterPA_Simple_immediate_assume_statement(node);
  listenChildren(node, true);
  leavePA_Simple_immediate_assume_statement(node);
}

void ParseTreeListener::listenPA_Simple_immediate_cover_statement(const ParseTreeNode& node) {
  enterPA_Simple_immediate_cover_statement(node);
  listenChildren(node, true);
  leavePA_Simple_immediate_cover_statement(node);
}

void ParseTreeListener::listenPA_Simple_path_declaration(const ParseTreeNode& node) {
  enterPA_Simple_path_declaration(node);
  listenChildren(node, true);
  leavePA_Simple_path_declaration(node);
}

void ParseTreeListener::listenPA_Simple_type(const ParseTreeNode& node) {
  enterPA_Simple_type(node);
  listenChildren(node, true);
  leavePA_Simple_type(node);
}

void ParseTreeListener::listenPA_Slice_size(const ParseTreeNode& node) {
  enterPA_Slice_size(node);
  listenChildren(node, true);
  leavePA_Slice_size(node);
}

void ParseTreeListener::listenPA_Slline(const ParseTreeNode& node) {
  enterPA_Slline(node);
  listenChildren(node, true);
  leavePA_Slline(node);
}

void ParseTreeListener::listenPA_Solve_before_list(const ParseTreeNode& node) {
  enterPA_Solve_before_list(node);
  listenChildren(node, true);
  leavePA_Solve_before_list(node);
}

void ParseTreeListener::listenPA_Source_text(const ParseTreeNode& node) {
  enterPA_Source_text(node);
  listenChildren(node, true);
  leavePA_Source_text(node);
}

void ParseTreeListener::listenPA_Specify_block(const ParseTreeNode& node) {
  enterPA_Specify_block(node);
  listenChildren(node, true);
  leavePA_Specify_block(node);
}

void ParseTreeListener::listenPA_Specify_input_terminal_descriptor(const ParseTreeNode& node) {
  enterPA_Specify_input_terminal_descriptor(node);
  listenChildren(node, true);
  leavePA_Specify_input_terminal_descriptor(node);
}

void ParseTreeListener::listenPA_Specify_item(const ParseTreeNode& node) {
  enterPA_Specify_item(node);
  listenChildren(node, true);
  leavePA_Specify_item(node);
}

void ParseTreeListener::listenPA_Specify_output_terminal_descriptor(const ParseTreeNode& node) {
  enterPA_Specify_output_terminal_descriptor(node);
  listenChildren(node, true);
  leavePA_Specify_output_terminal_descriptor(node);
}

void ParseTreeListener::listenPA_Specify_terminal_descriptor(const ParseTreeNode& node) {
  enterPA_Specify_terminal_descriptor(node);
  listenChildren(node, true);
  leavePA_Specify_terminal_descriptor(node);
}

void ParseTreeListener::listenPA_Specparam_assignment(const ParseTreeNode& node) {
  enterPA_Specparam_assignment(node);
  listenChildren(node, true);
  leavePA_Specparam_assignment(node);
}

void ParseTreeListener::listenPA_Specparam_declaration(const ParseTreeNode& node) {
  enterPA_Specparam_declaration(node);
  listenChildren(node, true);
  leavePA_Specparam_declaration(node);
}

void ParseTreeListener::listenPA_Stamptime_condition(const ParseTreeNode& node) {
  enterPA_Stamptime_condition(node);
  listenChildren(node, true);
  leavePA_Stamptime_condition(node);
}

void ParseTreeListener::listenPA_Start_edge_offset(const ParseTreeNode& node) {
  enterPA_Start_edge_offset(node);
  listenChildren(node, true);
  leavePA_Start_edge_offset(node);
}

void ParseTreeListener::listenPA_State_dependent_path_declaration(const ParseTreeNode& node) {
  enterPA_State_dependent_path_declaration(node);
  listenChildren(node, true);
  leavePA_State_dependent_path_declaration(node);
}

void ParseTreeListener::listenPA_Statement(const ParseTreeNode& node) {
  enterPA_Statement(node);
  listenChildren(node, true);
  leavePA_Statement(node);
}

void ParseTreeListener::listenPA_Statement_item(const ParseTreeNode& node) {
  enterPA_Statement_item(node);
  listenChildren(node, true);
  leavePA_Statement_item(node);
}

void ParseTreeListener::listenPA_Statement_or_null(const ParseTreeNode& node) {
  enterPA_Statement_or_null(node);
  listenChildren(node, true);
  leavePA_Statement_or_null(node);
}

void ParseTreeListener::listenPA_Stream_concatenation(const ParseTreeNode& node) {
  enterPA_Stream_concatenation(node);
  listenChildren(node, true);
  leavePA_Stream_concatenation(node);
}

void ParseTreeListener::listenPA_Stream_expression(const ParseTreeNode& node) {
  enterPA_Stream_expression(node);
  listenChildren(node, true);
  leavePA_Stream_expression(node);
}

void ParseTreeListener::listenPA_Stream_operator(const ParseTreeNode& node) {
  enterPA_Stream_operator(node);
  listenChildren(node, true);
  leavePA_Stream_operator(node);
}

void ParseTreeListener::listenPA_Streaming_concatenation(const ParseTreeNode& node) {
  enterPA_Streaming_concatenation(node);
  listenChildren(node, true);
  leavePA_Streaming_concatenation(node);
}

void ParseTreeListener::listenPA_Strength0(const ParseTreeNode& node) {
  enterPA_Strength0(node);
  listenChildren(node, true);
  leavePA_Strength0(node);
}

void ParseTreeListener::listenPA_Strength1(const ParseTreeNode& node) {
  enterPA_Strength1(node);
  listenChildren(node, true);
  leavePA_Strength1(node);
}

void ParseTreeListener::listenPA_String_type(const ParseTreeNode& node) {
  enterPA_String_type(node);
  listenChildren(node, true);
  leavePA_String_type(node);
}

void ParseTreeListener::listenPA_String_value(const ParseTreeNode& node) {
  enterPA_String_value(node);
  listenChildren(node, true);
  leavePA_String_value(node);
}

void ParseTreeListener::listenPA_Struct_keyword(const ParseTreeNode& node) {
  enterPA_Struct_keyword(node);
  listenChildren(node, true);
  leavePA_Struct_keyword(node);
}

void ParseTreeListener::listenPA_Struct_union(const ParseTreeNode& node) {
  enterPA_Struct_union(node);
  listenChildren(node, true);
  leavePA_Struct_union(node);
}

void ParseTreeListener::listenPA_Struct_union_member(const ParseTreeNode& node) {
  enterPA_Struct_union_member(node);
  listenChildren(node, true);
  leavePA_Struct_union_member(node);
}

void ParseTreeListener::listenPA_Structure_pattern_key(const ParseTreeNode& node) {
  enterPA_Structure_pattern_key(node);
  listenChildren(node, true);
  leavePA_Structure_pattern_key(node);
}

void ParseTreeListener::listenPA_Subroutine_call(const ParseTreeNode& node) {
  enterPA_Subroutine_call(node);
  listenChildren(node, true);
  leavePA_Subroutine_call(node);
}

void ParseTreeListener::listenPA_Subroutine_call_statement(const ParseTreeNode& node) {
  enterPA_Subroutine_call_statement(node);
  listenChildren(node, true);
  leavePA_Subroutine_call_statement(node);
}

void ParseTreeListener::listenPA_Super_dot_new(const ParseTreeNode& node) {
  enterPA_Super_dot_new(node);
  listenChildren(node, true);
  leavePA_Super_dot_new(node);
}

void ParseTreeListener::listenPA_Super_keyword(const ParseTreeNode& node) {
  enterPA_Super_keyword(node);
  listenChildren(node, true);
  leavePA_Super_keyword(node);
}

void ParseTreeListener::listenPA_Suppress_faults_directive(const ParseTreeNode& node) {
  enterPA_Suppress_faults_directive(node);
  listenChildren(node, true);
  leavePA_Suppress_faults_directive(node);
}

void ParseTreeListener::listenPA_Surelog_macro_not_defined(const ParseTreeNode& node) {
  enterPA_Surelog_macro_not_defined(node);
  listenChildren(node, true);
  leavePA_Surelog_macro_not_defined(node);
}

void ParseTreeListener::listenPA_System_task(const ParseTreeNode& node) {
  enterPA_System_task(node);
  listenChildren(node, true);
  leavePA_System_task(node);
}

void ParseTreeListener::listenPA_System_task_names(const ParseTreeNode& node) {
  enterPA_System_task_names(node);
  listenChildren(node, true);
  leavePA_System_task_names(node);
}

void ParseTreeListener::listenPA_System_timing_check(const ParseTreeNode& node) {
  enterPA_System_timing_check(node);
  listenChildren(node, true);
  leavePA_System_timing_check(node);
}

void ParseTreeListener::listenPA_T01_path_delay_expression(const ParseTreeNode& node) {
  enterPA_T01_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_T01_path_delay_expression(node);
}

void ParseTreeListener::listenPA_T0x_path_delay_expression(const ParseTreeNode& node) {
  enterPA_T0x_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_T0x_path_delay_expression(node);
}

void ParseTreeListener::listenPA_T0z_path_delay_expression(const ParseTreeNode& node) {
  enterPA_T0z_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_T0z_path_delay_expression(node);
}

void ParseTreeListener::listenPA_T10_path_delay_expression(const ParseTreeNode& node) {
  enterPA_T10_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_T10_path_delay_expression(node);
}

void ParseTreeListener::listenPA_T1x_path_delay_expression(const ParseTreeNode& node) {
  enterPA_T1x_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_T1x_path_delay_expression(node);
}

void ParseTreeListener::listenPA_T1z_path_delay_expression(const ParseTreeNode& node) {
  enterPA_T1z_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_T1z_path_delay_expression(node);
}

void ParseTreeListener::listenPA_T_path_delay_expression(const ParseTreeNode& node) {
  enterPA_T_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_T_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Tagged_keyword(const ParseTreeNode& node) {
  enterPA_Tagged_keyword(node);
  listenChildren(node, true);
  leavePA_Tagged_keyword(node);
}

void ParseTreeListener::listenPA_Task_body_declaration(const ParseTreeNode& node) {
  enterPA_Task_body_declaration(node);
  listenChildren(node, true);
  leavePA_Task_body_declaration(node);
}

void ParseTreeListener::listenPA_Task_declaration(const ParseTreeNode& node) {
  enterPA_Task_declaration(node);
  listenChildren(node, true);
  leavePA_Task_declaration(node);
}

void ParseTreeListener::listenPA_Task_name_decl(const ParseTreeNode& node) {
  enterPA_Task_name_decl(node);
  listenChildren(node, true);
  leavePA_Task_name_decl(node);
}

void ParseTreeListener::listenPA_Task_prototype(const ParseTreeNode& node) {
  enterPA_Task_prototype(node);
  listenChildren(node, true);
  leavePA_Task_prototype(node);
}

void ParseTreeListener::listenPA_Tf_item_declaration(const ParseTreeNode& node) {
  enterPA_Tf_item_declaration(node);
  listenChildren(node, true);
  leavePA_Tf_item_declaration(node);
}

void ParseTreeListener::listenPA_Tf_port_declaration(const ParseTreeNode& node) {
  enterPA_Tf_port_declaration(node);
  listenChildren(node, true);
  leavePA_Tf_port_declaration(node);
}

void ParseTreeListener::listenPA_Tf_port_direction(const ParseTreeNode& node) {
  enterPA_Tf_port_direction(node);
  listenChildren(node, true);
  leavePA_Tf_port_direction(node);
}

void ParseTreeListener::listenPA_Tf_port_item(const ParseTreeNode& node) {
  enterPA_Tf_port_item(node);
  listenChildren(node, true);
  leavePA_Tf_port_item(node);
}

void ParseTreeListener::listenPA_Tf_port_list(const ParseTreeNode& node) {
  enterPA_Tf_port_list(node);
  listenChildren(node, true);
  leavePA_Tf_port_list(node);
}

void ParseTreeListener::listenPA_Tfall_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Tfall_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Tfall_path_delay_expression(node);
}

void ParseTreeListener::listenPA_This_dot_super(const ParseTreeNode& node) {
  enterPA_This_dot_super(node);
  listenChildren(node, true);
  leavePA_This_dot_super(node);
}

void ParseTreeListener::listenPA_This_keyword(const ParseTreeNode& node) {
  enterPA_This_keyword(node);
  listenChildren(node, true);
  leavePA_This_keyword(node);
}

void ParseTreeListener::listenPA_Threshold(const ParseTreeNode& node) {
  enterPA_Threshold(node);
  listenChildren(node, true);
  leavePA_Threshold(node);
}

void ParseTreeListener::listenPA_Time_literal(const ParseTreeNode& node) {
  enterPA_Time_literal(node);
  listenChildren(node, true);
  leavePA_Time_literal(node);
}

void ParseTreeListener::listenPA_Time_unit(const ParseTreeNode& node) {
  enterPA_Time_unit(node);
  listenChildren(node, true);
  leavePA_Time_unit(node);
}

void ParseTreeListener::listenPA_Timescale_directive(const ParseTreeNode& node) {
  enterPA_Timescale_directive(node);
  listenChildren(node, true);
  leavePA_Timescale_directive(node);
}

void ParseTreeListener::listenPA_Timeunits_declaration(const ParseTreeNode& node) {
  enterPA_Timeunits_declaration(node);
  listenChildren(node, true);
  leavePA_Timeunits_declaration(node);
}

void ParseTreeListener::listenPA_Timing_check_condition(const ParseTreeNode& node) {
  enterPA_Timing_check_condition(node);
  listenChildren(node, true);
  leavePA_Timing_check_condition(node);
}

void ParseTreeListener::listenPA_Timing_check_event(const ParseTreeNode& node) {
  enterPA_Timing_check_event(node);
  listenChildren(node, true);
  leavePA_Timing_check_event(node);
}

void ParseTreeListener::listenPA_Timing_check_event_control(const ParseTreeNode& node) {
  enterPA_Timing_check_event_control(node);
  listenChildren(node, true);
  leavePA_Timing_check_event_control(node);
}

void ParseTreeListener::listenPA_Timing_check_limit(const ParseTreeNode& node) {
  enterPA_Timing_check_limit(node);
  listenChildren(node, true);
  leavePA_Timing_check_limit(node);
}

void ParseTreeListener::listenPA_Top_directives(const ParseTreeNode& node) {
  enterPA_Top_directives(node);
  listenChildren(node, true);
  leavePA_Top_directives(node);
}

void ParseTreeListener::listenPA_Top_level_library_rule(const ParseTreeNode& node) {
  enterPA_Top_level_library_rule(node);
  listenChildren(node, true);
  leavePA_Top_level_library_rule(node);
}

void ParseTreeListener::listenPA_Top_level_rule(const ParseTreeNode& node) {
  enterPA_Top_level_rule(node);
  listenChildren(node, true);
  leavePA_Top_level_rule(node);
}

void ParseTreeListener::listenPA_Trans_list(const ParseTreeNode& node) {
  enterPA_Trans_list(node);
  listenChildren(node, true);
  leavePA_Trans_list(node);
}

void ParseTreeListener::listenPA_Trans_range_list(const ParseTreeNode& node) {
  enterPA_Trans_range_list(node);
  listenChildren(node, true);
  leavePA_Trans_range_list(node);
}

void ParseTreeListener::listenPA_Trans_set(const ParseTreeNode& node) {
  enterPA_Trans_set(node);
  listenChildren(node, true);
  leavePA_Trans_set(node);
}

void ParseTreeListener::listenPA_Trise_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Trise_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Trise_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Tx0_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Tx0_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Tx0_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Tx1_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Tx1_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Tx1_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Txz_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Txz_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Txz_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Type_declaration(const ParseTreeNode& node) {
  enterPA_Type_declaration(node);
  listenChildren(node, true);
  leavePA_Type_declaration(node);
}

void ParseTreeListener::listenPA_Type_reference(const ParseTreeNode& node) {
  enterPA_Type_reference(node);
  listenChildren(node, true);
  leavePA_Type_reference(node);
}

void ParseTreeListener::listenPA_Tz0_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Tz0_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Tz0_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Tz1_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Tz1_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Tz1_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Tz_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Tz_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Tz_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Tzx_path_delay_expression(const ParseTreeNode& node) {
  enterPA_Tzx_path_delay_expression(node);
  listenChildren(node, true);
  leavePA_Tzx_path_delay_expression(node);
}

void ParseTreeListener::listenPA_Udp_ansi_declaration(const ParseTreeNode& node) {
  enterPA_Udp_ansi_declaration(node);
  listenChildren(node, true);
  leavePA_Udp_ansi_declaration(node);
}

void ParseTreeListener::listenPA_Udp_body(const ParseTreeNode& node) {
  enterPA_Udp_body(node);
  listenChildren(node, true);
  leavePA_Udp_body(node);
}

void ParseTreeListener::listenPA_Udp_declaration(const ParseTreeNode& node) {
  enterPA_Udp_declaration(node);
  listenChildren(node, true);
  leavePA_Udp_declaration(node);
}

void ParseTreeListener::listenPA_Udp_declaration_port_list(const ParseTreeNode& node) {
  enterPA_Udp_declaration_port_list(node);
  listenChildren(node, true);
  leavePA_Udp_declaration_port_list(node);
}

void ParseTreeListener::listenPA_Udp_initial_statement(const ParseTreeNode& node) {
  enterPA_Udp_initial_statement(node);
  listenChildren(node, true);
  leavePA_Udp_initial_statement(node);
}

void ParseTreeListener::listenPA_Udp_input_declaration(const ParseTreeNode& node) {
  enterPA_Udp_input_declaration(node);
  listenChildren(node, true);
  leavePA_Udp_input_declaration(node);
}

void ParseTreeListener::listenPA_Udp_instance(const ParseTreeNode& node) {
  enterPA_Udp_instance(node);
  listenChildren(node, true);
  leavePA_Udp_instance(node);
}

void ParseTreeListener::listenPA_Udp_instantiation(const ParseTreeNode& node) {
  enterPA_Udp_instantiation(node);
  listenChildren(node, true);
  leavePA_Udp_instantiation(node);
}

void ParseTreeListener::listenPA_Udp_nonansi_declaration(const ParseTreeNode& node) {
  enterPA_Udp_nonansi_declaration(node);
  listenChildren(node, true);
  leavePA_Udp_nonansi_declaration(node);
}

void ParseTreeListener::listenPA_Udp_output_declaration(const ParseTreeNode& node) {
  enterPA_Udp_output_declaration(node);
  listenChildren(node, true);
  leavePA_Udp_output_declaration(node);
}

void ParseTreeListener::listenPA_Udp_port_declaration(const ParseTreeNode& node) {
  enterPA_Udp_port_declaration(node);
  listenChildren(node, true);
  leavePA_Udp_port_declaration(node);
}

void ParseTreeListener::listenPA_Udp_port_list(const ParseTreeNode& node) {
  enterPA_Udp_port_list(node);
  listenChildren(node, true);
  leavePA_Udp_port_list(node);
}

void ParseTreeListener::listenPA_Udp_reg_declaration(const ParseTreeNode& node) {
  enterPA_Udp_reg_declaration(node);
  listenChildren(node, true);
  leavePA_Udp_reg_declaration(node);
}

void ParseTreeListener::listenPA_Unary_module_path_operator(const ParseTreeNode& node) {
  enterPA_Unary_module_path_operator(node);
  listenChildren(node, true);
  leavePA_Unary_module_path_operator(node);
}

void ParseTreeListener::listenPA_Unbased_unsized_literal(const ParseTreeNode& node) {
  enterPA_Unbased_unsized_literal(node);
  listenChildren(node, true);
  leavePA_Unbased_unsized_literal(node);
}

void ParseTreeListener::listenPA_Unconnected_drive_directive(const ParseTreeNode& node) {
  enterPA_Unconnected_drive_directive(node);
  listenChildren(node, true);
  leavePA_Unconnected_drive_directive(node);
}

void ParseTreeListener::listenPA_Union_keyword(const ParseTreeNode& node) {
  enterPA_Union_keyword(node);
  listenChildren(node, true);
  leavePA_Union_keyword(node);
}

void ParseTreeListener::listenPA_Unique_call(const ParseTreeNode& node) {
  enterPA_Unique_call(node);
  listenChildren(node, true);
  leavePA_Unique_call(node);
}

void ParseTreeListener::listenPA_Unique_priority(const ParseTreeNode& node) {
  enterPA_Unique_priority(node);
  listenChildren(node, true);
  leavePA_Unique_priority(node);
}

void ParseTreeListener::listenPA_Uniqueness_constraint(const ParseTreeNode& node) {
  enterPA_Uniqueness_constraint(node);
  listenChildren(node, true);
  leavePA_Uniqueness_constraint(node);
}

void ParseTreeListener::listenPA_Unpacked_dimension(const ParseTreeNode& node) {
  enterPA_Unpacked_dimension(node);
  listenChildren(node, true);
  leavePA_Unpacked_dimension(node);
}

void ParseTreeListener::listenPA_Unsigned_directive(const ParseTreeNode& node) {
  enterPA_Unsigned_directive(node);
  listenChildren(node, true);
  leavePA_Unsigned_directive(node);
}

void ParseTreeListener::listenPA_Unsized_dimension(const ParseTreeNode& node) {
  enterPA_Unsized_dimension(node);
  listenChildren(node, true);
  leavePA_Unsized_dimension(node);
}

void ParseTreeListener::listenPA_Use_clause(const ParseTreeNode& node) {
  enterPA_Use_clause(node);
  listenChildren(node, true);
  leavePA_Use_clause(node);
}

void ParseTreeListener::listenPA_Use_clause_config(const ParseTreeNode& node) {
  enterPA_Use_clause_config(node);
  listenChildren(node, true);
  leavePA_Use_clause_config(node);
}

void ParseTreeListener::listenPA_Uselib_directive(const ParseTreeNode& node) {
  enterPA_Uselib_directive(node);
  listenChildren(node, true);
  leavePA_Uselib_directive(node);
}

void ParseTreeListener::listenPA_Value_range(const ParseTreeNode& node) {
  enterPA_Value_range(node);
  listenChildren(node, true);
  leavePA_Value_range(node);
}

void ParseTreeListener::listenPA_Var_data_type(const ParseTreeNode& node) {
  enterPA_Var_data_type(node);
  listenChildren(node, true);
  leavePA_Var_data_type(node);
}

void ParseTreeListener::listenPA_Var_type(const ParseTreeNode& node) {
  enterPA_Var_type(node);
  listenChildren(node, true);
  leavePA_Var_type(node);
}

void ParseTreeListener::listenPA_Variable_assignment(const ParseTreeNode& node) {
  enterPA_Variable_assignment(node);
  listenChildren(node, true);
  leavePA_Variable_assignment(node);
}

void ParseTreeListener::listenPA_Variable_decl_assignment(const ParseTreeNode& node) {
  enterPA_Variable_decl_assignment(node);
  listenChildren(node, true);
  leavePA_Variable_decl_assignment(node);
}

void ParseTreeListener::listenPA_Variable_declaration(const ParseTreeNode& node) {
  enterPA_Variable_declaration(node);
  listenChildren(node, true);
  leavePA_Variable_declaration(node);
}

void ParseTreeListener::listenPA_Variable_dimension(const ParseTreeNode& node) {
  enterPA_Variable_dimension(node);
  listenChildren(node, true);
  leavePA_Variable_dimension(node);
}

void ParseTreeListener::listenPA_Variable_impl_declaration(const ParseTreeNode& node) {
  enterPA_Variable_impl_declaration(node);
  listenChildren(node, true);
  leavePA_Variable_impl_declaration(node);
}

void ParseTreeListener::listenPA_Variable_lvalue(const ParseTreeNode& node) {
  enterPA_Variable_lvalue(node);
  listenChildren(node, true);
  leavePA_Variable_lvalue(node);
}

void ParseTreeListener::listenPA_Variable_port_header(const ParseTreeNode& node) {
  enterPA_Variable_port_header(node);
  listenChildren(node, true);
  leavePA_Variable_port_header(node);
}

void ParseTreeListener::listenPA_Variable_port_type(const ParseTreeNode& node) {
  enterPA_Variable_port_type(node);
  listenChildren(node, true);
  leavePA_Variable_port_type(node);
}

void ParseTreeListener::listenPA_Virtual_interface_declaration(const ParseTreeNode& node) {
  enterPA_Virtual_interface_declaration(node);
  listenChildren(node, true);
  leavePA_Virtual_interface_declaration(node);
}

void ParseTreeListener::listenPA_Wait_statement(const ParseTreeNode& node) {
  enterPA_Wait_statement(node);
  listenChildren(node, true);
  leavePA_Wait_statement(node);
}

void ParseTreeListener::listenPA_Xor_call(const ParseTreeNode& node) {
  enterPA_Xor_call(node);
  listenChildren(node, true);
  leavePA_Xor_call(node);
}
// clang-format on

void ParseTreeListener::listen(const ParseTreeNode& node) {
  if (!m_visited.insert(node).second) {
    return;
  }

  m_callstack.emplace_back(node);

  // clang-format off
  switch (node.m_object->m_type) {
    case VObjectType::ppAccelerate_directive: enter(node); listenPP_Accelerate_directive(node); leave(node); break;
    case VObjectType::ppAutoexpand_vectornets_directive: enter(node); listenPP_Autoexpand_vectornets_directive(node); leave(node); break;
    case VObjectType::ppBegin_keywords_directive: enter(node); listenPP_Begin_keywords_directive(node); leave(node); break;
    case VObjectType::ppCelldefine_directive: enter(node); listenPP_Celldefine_directive(node); leave(node); break;
    case VObjectType::ppChecker: enter(node); listenPP_Checker(node); leave(node); break;
    case VObjectType::ppComment: enter(node); listenPP_Comment(node); leave(node); break;
    case VObjectType::ppConfig: enter(node); listenPP_Config(node); leave(node); break;
    case VObjectType::ppDefault_decay_time_directive: enter(node); listenPP_Default_decay_time_directive(node); leave(node); break;
    case VObjectType::ppDefault_nettype_directive: enter(node); listenPP_Default_nettype_directive(node); leave(node); break;
    case VObjectType::ppDefault_trireg_strength_directive: enter(node); listenPP_Default_trireg_strength_directive(node); leave(node); break;
    case VObjectType::ppDefault_value: enter(node); listenPP_Default_value(node); leave(node); break;
    case VObjectType::ppDefine_directive: enter(node); listenPP_Define_directive(node); leave(node); break;
    case VObjectType::ppDelay_mode_distributed_directive: enter(node); listenPP_Delay_mode_distributed_directive(node); leave(node); break;
    case VObjectType::ppDelay_mode_path_directive: enter(node); listenPP_Delay_mode_path_directive(node); leave(node); break;
    case VObjectType::ppDelay_mode_unit_directive: enter(node); listenPP_Delay_mode_unit_directive(node); leave(node); break;
    case VObjectType::ppDelay_mode_zero_directive: enter(node); listenPP_Delay_mode_zero_directive(node); leave(node); break;
    case VObjectType::ppDescription: enter(node); listenPP_Description(node); leave(node); break;
    case VObjectType::ppDirective_in_macro: enter(node); listenPP_Directive_in_macro(node); leave(node); break;
    case VObjectType::ppDisable_portfaults_directive: enter(node); listenPP_Disable_portfaults_directive(node); leave(node); break;
    case VObjectType::ppElse_directive: enter(node); listenPP_Else_directive(node); leave(node); break;
    case VObjectType::ppElseif_directive: enter(node); listenPP_Elseif_directive(node); leave(node); break;
    case VObjectType::ppElseif_directive_in_macro_body: enter(node); listenPP_Elseif_directive_in_macro_body(node); leave(node); break;
    case VObjectType::ppElsif_directive: enter(node); listenPP_Elsif_directive(node); leave(node); break;
    case VObjectType::ppElsif_directive_in_macro_body: enter(node); listenPP_Elsif_directive_in_macro_body(node); leave(node); break;
    case VObjectType::ppEnable_portfaults_directive: enter(node); listenPP_Enable_portfaults_directive(node); leave(node); break;
    case VObjectType::ppEnd_keywords_directive: enter(node); listenPP_End_keywords_directive(node); leave(node); break;
    case VObjectType::ppEndcelldefine_directive: enter(node); listenPP_Endcelldefine_directive(node); leave(node); break;
    case VObjectType::ppEndchecker: enter(node); listenPP_Endchecker(node); leave(node); break;
    case VObjectType::ppEndconfig: enter(node); listenPP_Endconfig(node); leave(node); break;
    case VObjectType::ppEndif_directive: enter(node); listenPP_Endif_directive(node); leave(node); break;
    case VObjectType::ppEndinterface: enter(node); listenPP_Endinterface(node); leave(node); break;
    case VObjectType::ppEndmodule: enter(node); listenPP_Endmodule(node); leave(node); break;
    case VObjectType::ppEndpackage: enter(node); listenPP_Endpackage(node); leave(node); break;
    case VObjectType::ppEndprimitive: enter(node); listenPP_Endprimitive(node); leave(node); break;
    case VObjectType::ppEndprogram: enter(node); listenPP_Endprogram(node); leave(node); break;
    case VObjectType::ppEndprotect_directive: enter(node); listenPP_Endprotect_directive(node); leave(node); break;
    case VObjectType::ppEndprotected_directive: enter(node); listenPP_Endprotected_directive(node); leave(node); break;
    case VObjectType::ppEscaped_identifier: enter(node); listenPP_Escaped_identifier(node); leave(node); break;
    case VObjectType::ppEscaped_macro_definition_body: enter(node); listenPP_Escaped_macro_definition_body(node); leave(node); break;
    case VObjectType::ppEscaped_macro_definition_body_alt1: enter(node); listenPP_Escaped_macro_definition_body_alt1(node); leave(node); break;
    case VObjectType::ppEscaped_macro_definition_body_alt2: enter(node); listenPP_Escaped_macro_definition_body_alt2(node); leave(node); break;
    case VObjectType::ppExpand_vectornets_directive: enter(node); listenPP_Expand_vectornets_directive(node); leave(node); break;
    case VObjectType::ppIdentifier_in_macro_body: enter(node); listenPP_Identifier_in_macro_body(node); leave(node); break;
    case VObjectType::ppIfdef_directive: enter(node); listenPP_Ifdef_directive(node); leave(node); break;
    case VObjectType::ppIfdef_directive_in_macro_body: enter(node); listenPP_Ifdef_directive_in_macro_body(node); leave(node); break;
    case VObjectType::ppIfndef_directive: enter(node); listenPP_Ifndef_directive(node); leave(node); break;
    case VObjectType::ppIfndef_directive_in_macro_body: enter(node); listenPP_Ifndef_directive_in_macro_body(node); leave(node); break;
    case VObjectType::ppInclude_directive: enter(node); listenPP_Include_directive(node); leave(node); break;
    case VObjectType::ppIntegral_number: enter(node); listenPP_Integral_number(node); leave(node); break;
    case VObjectType::ppLine_directive: enter(node); listenPP_Line_directive(node); leave(node); break;
    case VObjectType::ppMacro_actual_args: enter(node); listenPP_Macro_actual_args(node); leave(node); break;
    case VObjectType::ppMacro_arg: enter(node); listenPP_Macro_arg(node); leave(node); break;
    case VObjectType::ppMacro_arguments: enter(node); listenPP_Macro_arguments(node); leave(node); break;
    case VObjectType::ppMacro_definition: enter(node); listenPP_Macro_definition(node); leave(node); break;
    case VObjectType::ppMacro_instance: enter(node); listenPP_Macro_instance(node); leave(node); break;
    case VObjectType::ppModule: enter(node); listenPP_Module(node); leave(node); break;
    case VObjectType::ppMultiline_args_macro_definition: enter(node); listenPP_Multiline_args_macro_definition(node); leave(node); break;
    case VObjectType::ppMultiline_no_args_macro_definition: enter(node); listenPP_Multiline_no_args_macro_definition(node); leave(node); break;
    case VObjectType::ppNoaccelerate_directive: enter(node); listenPP_Noaccelerate_directive(node); leave(node); break;
    case VObjectType::ppNoexpand_vectornets_directive: enter(node); listenPP_Noexpand_vectornets_directive(node); leave(node); break;
    case VObjectType::ppNoremove_gatenames_directive: enter(node); listenPP_Noremove_gatenames_directive(node); leave(node); break;
    case VObjectType::ppNoremove_netnames_directive: enter(node); listenPP_Noremove_netnames_directive(node); leave(node); break;
    case VObjectType::ppNosuppress_faults_directive: enter(node); listenPP_Nosuppress_faults_directive(node); leave(node); break;
    case VObjectType::ppNounconnected_drive_directive: enter(node); listenPP_Nounconnected_drive_directive(node); leave(node); break;
    case VObjectType::ppNull_rule: enter(node); listenPP_Null_rule(node); leave(node); break;
    case VObjectType::ppPaired_parens: enter(node); listenPP_Paired_parens(node); leave(node); break;
    case VObjectType::ppPound_delay: enter(node); listenPP_Pound_delay(node); leave(node); break;
    case VObjectType::ppPound_pound_delay: enter(node); listenPP_Pound_pound_delay(node); leave(node); break;
    case VObjectType::ppPragma_directive: enter(node); listenPP_Pragma_directive(node); leave(node); break;
    case VObjectType::ppPragma_expression: enter(node); listenPP_Pragma_expression(node); leave(node); break;
    case VObjectType::ppPrimitive: enter(node); listenPP_Primitive(node); leave(node); break;
    case VObjectType::ppProgram: enter(node); listenPP_Program(node); leave(node); break;
    case VObjectType::ppProtect_directive: enter(node); listenPP_Protect_directive(node); leave(node); break;
    case VObjectType::ppProtected_directive: enter(node); listenPP_Protected_directive(node); leave(node); break;
    case VObjectType::ppRemove_gatename_directive: enter(node); listenPP_Remove_gatename_directive(node); leave(node); break;
    case VObjectType::ppRemove_netname_directive: enter(node); listenPP_Remove_netname_directive(node); leave(node); break;
    case VObjectType::ppResetall_directive: enter(node); listenPP_Resetall_directive(node); leave(node); break;
    case VObjectType::ppSigned_directive: enter(node); listenPP_Signed_directive(node); leave(node); break;
    case VObjectType::ppSimple_args_macro_definition: enter(node); listenPP_Simple_args_macro_definition(node); leave(node); break;
    case VObjectType::ppSimple_args_macro_definition_in_macro_body: enter(node); listenPP_Simple_args_macro_definition_in_macro_body(node); leave(node); break;
    case VObjectType::ppSimple_macro_definition_body: enter(node); listenPP_Simple_macro_definition_body(node); leave(node); break;
    case VObjectType::ppSimple_macro_definition_body_in_macro_body: enter(node); listenPP_Simple_macro_definition_body_in_macro_body(node); leave(node); break;
    case VObjectType::ppSimple_no_args_macro_definition: enter(node); listenPP_Simple_no_args_macro_definition(node); leave(node); break;
    case VObjectType::ppSimple_no_args_macro_definition_in_macro_body: enter(node); listenPP_Simple_no_args_macro_definition_in_macro_body(node); leave(node); break;
    case VObjectType::ppSource_text: enter(node); listenPP_Source_text(node); leave(node); break;
    case VObjectType::ppString: enter(node); listenPP_String(node); leave(node); break;
    case VObjectType::ppString_blob: enter(node); listenPP_String_blob(node); leave(node); break;
    case VObjectType::ppSuppress_faults_directive: enter(node); listenPP_Suppress_faults_directive(node); leave(node); break;
    case VObjectType::ppSv_file_directive: enter(node); listenPP_Sv_file_directive(node); leave(node); break;
    case VObjectType::ppSv_interface: enter(node); listenPP_Sv_interface(node); leave(node); break;
    case VObjectType::ppSv_line_directive: enter(node); listenPP_Sv_line_directive(node); leave(node); break;
    case VObjectType::ppSv_package: enter(node); listenPP_Sv_package(node); leave(node); break;
    case VObjectType::ppText_blob: enter(node); listenPP_Text_blob(node); leave(node); break;
    case VObjectType::ppTimescale_directive: enter(node); listenPP_Timescale_directive(node); leave(node); break;
    case VObjectType::ppTop_level_rule: enter(node); listenPP_Top_level_rule(node); leave(node); break;
    case VObjectType::ppUnconnected_drive_directive: enter(node); listenPP_Unconnected_drive_directive(node); leave(node); break;
    case VObjectType::ppUndef_directive: enter(node); listenPP_Undef_directive(node); leave(node); break;
    case VObjectType::ppUndefineall_directive: enter(node); listenPP_Undefineall_directive(node); leave(node); break;
    case VObjectType::ppUnsigned_directive: enter(node); listenPP_Unsigned_directive(node); leave(node); break;
    case VObjectType::ppUnterminated_string: enter(node); listenPP_Unterminated_string(node); leave(node); break;
    case VObjectType::ppUselib_directive: enter(node); listenPP_Uselib_directive(node); leave(node); break;

    case VObjectType::paAccelerate_directive: enter(node); listenPA_Accelerate_directive(node); leave(node); break;
    case VObjectType::paAction_block: enter(node); listenPA_Action_block(node); leave(node); break;
    case VObjectType::paActual_arg_expr: enter(node); listenPA_Actual_arg_expr(node); leave(node); break;
    case VObjectType::paActual_arg_list: enter(node); listenPA_Actual_arg_list(node); leave(node); break;
    case VObjectType::paAlways_construct: enter(node); listenPA_Always_construct(node); leave(node); break;
    case VObjectType::paAlways_keyword: enter(node); listenPA_Always_keyword(node); leave(node); break;
    case VObjectType::paAnd_call: enter(node); listenPA_And_call(node); leave(node); break;
    case VObjectType::paAnonymous_program: enter(node); listenPA_Anonymous_program(node); leave(node); break;
    case VObjectType::paAnonymous_program_item: enter(node); listenPA_Anonymous_program_item(node); leave(node); break;
    case VObjectType::paAnsi_port_declaration: enter(node); listenPA_Ansi_port_declaration(node); leave(node); break;
    case VObjectType::paArgument: enter(node); listenPA_Argument(node); leave(node); break;
    case VObjectType::paArray_manipulation_call: enter(node); listenPA_Array_manipulation_call(node); leave(node); break;
    case VObjectType::paArray_member_label: enter(node); listenPA_Array_member_label(node); leave(node); break;
    case VObjectType::paArray_method_name: enter(node); listenPA_Array_method_name(node); leave(node); break;
    case VObjectType::paArray_pattern_key: enter(node); listenPA_Array_pattern_key(node); leave(node); break;
    case VObjectType::paArray_range_expression: enter(node); listenPA_Array_range_expression(node); leave(node); break;
    case VObjectType::paAssert_property_statement: enter(node); listenPA_Assert_property_statement(node); leave(node); break;
    case VObjectType::paAssertion_item: enter(node); listenPA_Assertion_item(node); leave(node); break;
    case VObjectType::paAssertion_item_declaration: enter(node); listenPA_Assertion_item_declaration(node); leave(node); break;
    case VObjectType::paAssertion_variable_declaration: enter(node); listenPA_Assertion_variable_declaration(node); leave(node); break;
    case VObjectType::paAssignment_operator: enter(node); listenPA_Assignment_operator(node); leave(node); break;
    case VObjectType::paAssignment_pattern: enter(node); listenPA_Assignment_pattern(node); leave(node); break;
    case VObjectType::paAssignment_pattern_expression: enter(node); listenPA_Assignment_pattern_expression(node); leave(node); break;
    case VObjectType::paAssignment_pattern_expression_type: enter(node); listenPA_Assignment_pattern_expression_type(node); leave(node); break;
    case VObjectType::paAssignment_pattern_key: enter(node); listenPA_Assignment_pattern_key(node); leave(node); break;
    case VObjectType::paAssignment_pattern_net_lvalue: enter(node); listenPA_Assignment_pattern_net_lvalue(node); leave(node); break;
    case VObjectType::paAssignment_pattern_variable_lvalue: enter(node); listenPA_Assignment_pattern_variable_lvalue(node); leave(node); break;
    case VObjectType::paAssociative_dimension: enter(node); listenPA_Associative_dimension(node); leave(node); break;
    case VObjectType::paAssume_property_statement: enter(node); listenPA_Assume_property_statement(node); leave(node); break;
    case VObjectType::paAttr_name: enter(node); listenPA_Attr_name(node); leave(node); break;
    case VObjectType::paAttr_spec: enter(node); listenPA_Attr_spec(node); leave(node); break;
    case VObjectType::paAttribute_instance: enter(node); listenPA_Attribute_instance(node); leave(node); break;
    case VObjectType::paAutoexpand_vectornets_directive: enter(node); listenPA_Autoexpand_vectornets_directive(node); leave(node); break;
    case VObjectType::paBegin_keywords_directive: enter(node); listenPA_Begin_keywords_directive(node); leave(node); break;
    case VObjectType::paBinary_module_path_operator: enter(node); listenPA_Binary_module_path_operator(node); leave(node); break;
    case VObjectType::paBind_directive: enter(node); listenPA_Bind_directive(node); leave(node); break;
    case VObjectType::paBind_instantiation: enter(node); listenPA_Bind_instantiation(node); leave(node); break;
    case VObjectType::paBins_expression: enter(node); listenPA_Bins_expression(node); leave(node); break;
    case VObjectType::paBins_keyword: enter(node); listenPA_Bins_keyword(node); leave(node); break;
    case VObjectType::paBins_or_empty: enter(node); listenPA_Bins_or_empty(node); leave(node); break;
    case VObjectType::paBins_or_options: enter(node); listenPA_Bins_or_options(node); leave(node); break;
    case VObjectType::paBins_selection: enter(node); listenPA_Bins_selection(node); leave(node); break;
    case VObjectType::paBins_selection_or_option: enter(node); listenPA_Bins_selection_or_option(node); leave(node); break;
    case VObjectType::paBit_select: enter(node); listenPA_Bit_select(node); leave(node); break;
    case VObjectType::paBlock_event_expression: enter(node); listenPA_Block_event_expression(node); leave(node); break;
    case VObjectType::paBlock_item_declaration: enter(node); listenPA_Block_item_declaration(node); leave(node); break;
    case VObjectType::paBlocking_assignment: enter(node); listenPA_Blocking_assignment(node); leave(node); break;
    case VObjectType::paBoolean_abbrev: enter(node); listenPA_Boolean_abbrev(node); leave(node); break;
    case VObjectType::paBuilt_in_method_call: enter(node); listenPA_Built_in_method_call(node); leave(node); break;
    case VObjectType::paCase_generate_construct: enter(node); listenPA_Case_generate_construct(node); leave(node); break;
    case VObjectType::paCase_generate_item: enter(node); listenPA_Case_generate_item(node); leave(node); break;
    case VObjectType::paCase_inside_item: enter(node); listenPA_Case_inside_item(node); leave(node); break;
    case VObjectType::paCase_item: enter(node); listenPA_Case_item(node); leave(node); break;
    case VObjectType::paCase_keyword: enter(node); listenPA_Case_keyword(node); leave(node); break;
    case VObjectType::paCase_pattern_item: enter(node); listenPA_Case_pattern_item(node); leave(node); break;
    case VObjectType::paCase_statement: enter(node); listenPA_Case_statement(node); leave(node); break;
    case VObjectType::paCast: enter(node); listenPA_Cast(node); leave(node); break;
    case VObjectType::paCasting_type: enter(node); listenPA_Casting_type(node); leave(node); break;
    case VObjectType::paCell_clause: enter(node); listenPA_Cell_clause(node); leave(node); break;
    case VObjectType::paCelldefine_directive: enter(node); listenPA_Celldefine_directive(node); leave(node); break;
    case VObjectType::paChandle_type: enter(node); listenPA_Chandle_type(node); leave(node); break;
    case VObjectType::paCharge_strength: enter(node); listenPA_Charge_strength(node); leave(node); break;
    case VObjectType::paChecker_declaration: enter(node); listenPA_Checker_declaration(node); leave(node); break;
    case VObjectType::paChecker_generate_item: enter(node); listenPA_Checker_generate_item(node); leave(node); break;
    case VObjectType::paChecker_instantiation: enter(node); listenPA_Checker_instantiation(node); leave(node); break;
    case VObjectType::paChecker_or_generate_item: enter(node); listenPA_Checker_or_generate_item(node); leave(node); break;
    case VObjectType::paChecker_or_generate_item_declaration: enter(node); listenPA_Checker_or_generate_item_declaration(node); leave(node); break;
    case VObjectType::paChecker_port_item: enter(node); listenPA_Checker_port_item(node); leave(node); break;
    case VObjectType::paChecker_port_list: enter(node); listenPA_Checker_port_list(node); leave(node); break;
    case VObjectType::paClass_constraint: enter(node); listenPA_Class_constraint(node); leave(node); break;
    case VObjectType::paClass_constructor_declaration: enter(node); listenPA_Class_constructor_declaration(node); leave(node); break;
    case VObjectType::paClass_constructor_prototype: enter(node); listenPA_Class_constructor_prototype(node); leave(node); break;
    case VObjectType::paClass_declaration: enter(node); listenPA_Class_declaration(node); leave(node); break;
    case VObjectType::paClass_item: enter(node); listenPA_Class_item(node); leave(node); break;
    case VObjectType::paClass_item_qualifier: enter(node); listenPA_Class_item_qualifier(node); leave(node); break;
    case VObjectType::paClass_keyword: enter(node); listenPA_Class_keyword(node); leave(node); break;
    case VObjectType::paClass_method: enter(node); listenPA_Class_method(node); leave(node); break;
    case VObjectType::paClass_new: enter(node); listenPA_Class_new(node); leave(node); break;
    case VObjectType::paClass_property: enter(node); listenPA_Class_property(node); leave(node); break;
    case VObjectType::paClass_scope: enter(node); listenPA_Class_scope(node); leave(node); break;
    case VObjectType::paClass_type: enter(node); listenPA_Class_type(node); leave(node); break;
    case VObjectType::paClocking_decl_assign: enter(node); listenPA_Clocking_decl_assign(node); leave(node); break;
    case VObjectType::paClocking_declaration: enter(node); listenPA_Clocking_declaration(node); leave(node); break;
    case VObjectType::paClocking_direction: enter(node); listenPA_Clocking_direction(node); leave(node); break;
    case VObjectType::paClocking_drive: enter(node); listenPA_Clocking_drive(node); leave(node); break;
    case VObjectType::paClocking_event: enter(node); listenPA_Clocking_event(node); leave(node); break;
    case VObjectType::paClocking_item: enter(node); listenPA_Clocking_item(node); leave(node); break;
    case VObjectType::paClocking_skew: enter(node); listenPA_Clocking_skew(node); leave(node); break;
    case VObjectType::paClockvar: enter(node); listenPA_Clockvar(node); leave(node); break;
    case VObjectType::paClockvar_expression: enter(node); listenPA_Clockvar_expression(node); leave(node); break;
    case VObjectType::paCmos_switch_instance: enter(node); listenPA_Cmos_switch_instance(node); leave(node); break;
    case VObjectType::paCmos_switchtype: enter(node); listenPA_Cmos_switchtype(node); leave(node); break;
    case VObjectType::paCombinational_body: enter(node); listenPA_Combinational_body(node); leave(node); break;
    case VObjectType::paCombinational_entry: enter(node); listenPA_Combinational_entry(node); leave(node); break;
    case VObjectType::paComma: enter(node); listenPA_Comma(node); leave(node); break;
    case VObjectType::paComma_operator: enter(node); listenPA_Comma_operator(node); leave(node); break;
    case VObjectType::paComplex_func_call: enter(node); listenPA_Complex_func_call(node); leave(node); break;
    case VObjectType::paConcatenation: enter(node); listenPA_Concatenation(node); leave(node); break;
    case VObjectType::paConcurrent_assertion_item: enter(node); listenPA_Concurrent_assertion_item(node); leave(node); break;
    case VObjectType::paConcurrent_assertion_item_declaration: enter(node); listenPA_Concurrent_assertion_item_declaration(node); leave(node); break;
    case VObjectType::paConcurrent_assertion_statement: enter(node); listenPA_Concurrent_assertion_statement(node); leave(node); break;
    case VObjectType::paCond_predicate: enter(node); listenPA_Cond_predicate(node); leave(node); break;
    case VObjectType::paConditional_generate_construct: enter(node); listenPA_Conditional_generate_construct(node); leave(node); break;
    case VObjectType::paConditional_operator: enter(node); listenPA_Conditional_operator(node); leave(node); break;
    case VObjectType::paConditional_statement: enter(node); listenPA_Conditional_statement(node); leave(node); break;
    case VObjectType::paConfig_declaration: enter(node); listenPA_Config_declaration(node); leave(node); break;
    case VObjectType::paConfig_rule_statement: enter(node); listenPA_Config_rule_statement(node); leave(node); break;
    case VObjectType::paConsecutive_repetition: enter(node); listenPA_Consecutive_repetition(node); leave(node); break;
    case VObjectType::paConst_or_range_expression: enter(node); listenPA_Const_or_range_expression(node); leave(node); break;
    case VObjectType::paConst_type: enter(node); listenPA_Const_type(node); leave(node); break;
    case VObjectType::paConstant_assignment_pattern_expression: enter(node); listenPA_Constant_assignment_pattern_expression(node); leave(node); break;
    case VObjectType::paConstant_bit_select: enter(node); listenPA_Constant_bit_select(node); leave(node); break;
    case VObjectType::paConstant_cast: enter(node); listenPA_Constant_cast(node); leave(node); break;
    case VObjectType::paConstant_concatenation: enter(node); listenPA_Constant_concatenation(node); leave(node); break;
    case VObjectType::paConstant_expression: enter(node); listenPA_Constant_expression(node); leave(node); break;
    case VObjectType::paConstant_indexed_range: enter(node); listenPA_Constant_indexed_range(node); leave(node); break;
    case VObjectType::paConstant_mintypmax_expression: enter(node); listenPA_Constant_mintypmax_expression(node); leave(node); break;
    case VObjectType::paConstant_multiple_concatenation: enter(node); listenPA_Constant_multiple_concatenation(node); leave(node); break;
    case VObjectType::paConstant_param_expression: enter(node); listenPA_Constant_param_expression(node); leave(node); break;
    case VObjectType::paConstant_part_select_range: enter(node); listenPA_Constant_part_select_range(node); leave(node); break;
    case VObjectType::paConstant_primary: enter(node); listenPA_Constant_primary(node); leave(node); break;
    case VObjectType::paConstant_range: enter(node); listenPA_Constant_range(node); leave(node); break;
    case VObjectType::paConstant_range_expression: enter(node); listenPA_Constant_range_expression(node); leave(node); break;
    case VObjectType::paConstant_select: enter(node); listenPA_Constant_select(node); leave(node); break;
    case VObjectType::paConstraint_block: enter(node); listenPA_Constraint_block(node); leave(node); break;
    case VObjectType::paConstraint_block_item: enter(node); listenPA_Constraint_block_item(node); leave(node); break;
    case VObjectType::paConstraint_declaration: enter(node); listenPA_Constraint_declaration(node); leave(node); break;
    case VObjectType::paConstraint_expression: enter(node); listenPA_Constraint_expression(node); leave(node); break;
    case VObjectType::paConstraint_primary: enter(node); listenPA_Constraint_primary(node); leave(node); break;
    case VObjectType::paConstraint_prototype: enter(node); listenPA_Constraint_prototype(node); leave(node); break;
    case VObjectType::paConstraint_set: enter(node); listenPA_Constraint_set(node); leave(node); break;
    case VObjectType::paContext_keyword: enter(node); listenPA_Context_keyword(node); leave(node); break;
    case VObjectType::paContinuous_assign: enter(node); listenPA_Continuous_assign(node); leave(node); break;
    case VObjectType::paControlled_timing_check_event: enter(node); listenPA_Controlled_timing_check_event(node); leave(node); break;
    case VObjectType::paCover_cross: enter(node); listenPA_Cover_cross(node); leave(node); break;
    case VObjectType::paCover_point: enter(node); listenPA_Cover_point(node); leave(node); break;
    case VObjectType::paCover_property_statement: enter(node); listenPA_Cover_property_statement(node); leave(node); break;
    case VObjectType::paCover_sequence_statement: enter(node); listenPA_Cover_sequence_statement(node); leave(node); break;
    case VObjectType::paCoverage_event: enter(node); listenPA_Coverage_event(node); leave(node); break;
    case VObjectType::paCoverage_option: enter(node); listenPA_Coverage_option(node); leave(node); break;
    case VObjectType::paCoverage_spec: enter(node); listenPA_Coverage_spec(node); leave(node); break;
    case VObjectType::paCoverage_spec_or_option: enter(node); listenPA_Coverage_spec_or_option(node); leave(node); break;
    case VObjectType::paCovergroup_declaration: enter(node); listenPA_Covergroup_declaration(node); leave(node); break;
    case VObjectType::paCross_body: enter(node); listenPA_Cross_body(node); leave(node); break;
    case VObjectType::paCross_body_item: enter(node); listenPA_Cross_body_item(node); leave(node); break;
    case VObjectType::paCross_item: enter(node); listenPA_Cross_item(node); leave(node); break;
    case VObjectType::paCycle_delay: enter(node); listenPA_Cycle_delay(node); leave(node); break;
    case VObjectType::paCycle_delay_const_range_expression: enter(node); listenPA_Cycle_delay_const_range_expression(node); leave(node); break;
    case VObjectType::paCycle_delay_range: enter(node); listenPA_Cycle_delay_range(node); leave(node); break;
    case VObjectType::paData_declaration: enter(node); listenPA_Data_declaration(node); leave(node); break;
    case VObjectType::paData_type: enter(node); listenPA_Data_type(node); leave(node); break;
    case VObjectType::paData_type_or_implicit: enter(node); listenPA_Data_type_or_implicit(node); leave(node); break;
    case VObjectType::paData_type_or_void: enter(node); listenPA_Data_type_or_void(node); leave(node); break;
    case VObjectType::paDefault_clause: enter(node); listenPA_Default_clause(node); leave(node); break;
    case VObjectType::paDefault_decay_time_directive: enter(node); listenPA_Default_decay_time_directive(node); leave(node); break;
    case VObjectType::paDefault_nettype_directive: enter(node); listenPA_Default_nettype_directive(node); leave(node); break;
    case VObjectType::paDefault_skew: enter(node); listenPA_Default_skew(node); leave(node); break;
    case VObjectType::paDefault_trireg_strenght_directive: enter(node); listenPA_Default_trireg_strenght_directive(node); leave(node); break;
    case VObjectType::paDeferred_immediate_assert_statement: enter(node); listenPA_Deferred_immediate_assert_statement(node); leave(node); break;
    case VObjectType::paDeferred_immediate_assertion_item: enter(node); listenPA_Deferred_immediate_assertion_item(node); leave(node); break;
    case VObjectType::paDeferred_immediate_assertion_statement: enter(node); listenPA_Deferred_immediate_assertion_statement(node); leave(node); break;
    case VObjectType::paDeferred_immediate_assume_statement: enter(node); listenPA_Deferred_immediate_assume_statement(node); leave(node); break;
    case VObjectType::paDeferred_immediate_cover_statement: enter(node); listenPA_Deferred_immediate_cover_statement(node); leave(node); break;
    case VObjectType::paDefparam_assignment: enter(node); listenPA_Defparam_assignment(node); leave(node); break;
    case VObjectType::paDelay2: enter(node); listenPA_Delay2(node); leave(node); break;
    case VObjectType::paDelay3: enter(node); listenPA_Delay3(node); leave(node); break;
    case VObjectType::paDelay_control: enter(node); listenPA_Delay_control(node); leave(node); break;
    case VObjectType::paDelay_mode_distributed_directive: enter(node); listenPA_Delay_mode_distributed_directive(node); leave(node); break;
    case VObjectType::paDelay_mode_path_directive: enter(node); listenPA_Delay_mode_path_directive(node); leave(node); break;
    case VObjectType::paDelay_mode_unit_directive: enter(node); listenPA_Delay_mode_unit_directive(node); leave(node); break;
    case VObjectType::paDelay_mode_zero_directive: enter(node); listenPA_Delay_mode_zero_directive(node); leave(node); break;
    case VObjectType::paDelay_or_event_control: enter(node); listenPA_Delay_or_event_control(node); leave(node); break;
    case VObjectType::paDelay_value: enter(node); listenPA_Delay_value(node); leave(node); break;
    case VObjectType::paDelayed_data: enter(node); listenPA_Delayed_data(node); leave(node); break;
    case VObjectType::paDelayed_reference: enter(node); listenPA_Delayed_reference(node); leave(node); break;
    case VObjectType::paDescription: enter(node); listenPA_Description(node); leave(node); break;
    case VObjectType::paDesign_statement: enter(node); listenPA_Design_statement(node); leave(node); break;
    case VObjectType::paDisable_portfaults_directive: enter(node); listenPA_Disable_portfaults_directive(node); leave(node); break;
    case VObjectType::paDisable_statement: enter(node); listenPA_Disable_statement(node); leave(node); break;
    case VObjectType::paDist_item: enter(node); listenPA_Dist_item(node); leave(node); break;
    case VObjectType::paDist_list: enter(node); listenPA_Dist_list(node); leave(node); break;
    case VObjectType::paDist_weight: enter(node); listenPA_Dist_weight(node); leave(node); break;
    case VObjectType::paDollar_fullskew_timing_check: enter(node); listenPA_Dollar_fullskew_timing_check(node); leave(node); break;
    case VObjectType::paDollar_hold_timing_check: enter(node); listenPA_Dollar_hold_timing_check(node); leave(node); break;
    case VObjectType::paDollar_keyword: enter(node); listenPA_Dollar_keyword(node); leave(node); break;
    case VObjectType::paDollar_nochange_timing_check: enter(node); listenPA_Dollar_nochange_timing_check(node); leave(node); break;
    case VObjectType::paDollar_period_timing_check: enter(node); listenPA_Dollar_period_timing_check(node); leave(node); break;
    case VObjectType::paDollar_recovery_timing_check: enter(node); listenPA_Dollar_recovery_timing_check(node); leave(node); break;
    case VObjectType::paDollar_recrem_timing_check: enter(node); listenPA_Dollar_recrem_timing_check(node); leave(node); break;
    case VObjectType::paDollar_removal_timing_check: enter(node); listenPA_Dollar_removal_timing_check(node); leave(node); break;
    case VObjectType::paDollar_root_keyword: enter(node); listenPA_Dollar_root_keyword(node); leave(node); break;
    case VObjectType::paDollar_setup_timing_check: enter(node); listenPA_Dollar_setup_timing_check(node); leave(node); break;
    case VObjectType::paDollar_setuphold_timing_check: enter(node); listenPA_Dollar_setuphold_timing_check(node); leave(node); break;
    case VObjectType::paDollar_skew_timing_check: enter(node); listenPA_Dollar_skew_timing_check(node); leave(node); break;
    case VObjectType::paDollar_timeskew_timing_check: enter(node); listenPA_Dollar_timeskew_timing_check(node); leave(node); break;
    case VObjectType::paDollar_width_timing_check: enter(node); listenPA_Dollar_width_timing_check(node); leave(node); break;
    case VObjectType::paDpi_import_export: enter(node); listenPA_Dpi_import_export(node); leave(node); break;
    case VObjectType::paDrive_strength: enter(node); listenPA_Drive_strength(node); leave(node); break;
    case VObjectType::paDynamic_array_new: enter(node); listenPA_Dynamic_array_new(node); leave(node); break;
    case VObjectType::paEdge_control_specifier: enter(node); listenPA_Edge_control_specifier(node); leave(node); break;
    case VObjectType::paEdge_descriptor: enter(node); listenPA_Edge_descriptor(node); leave(node); break;
    case VObjectType::paEdge_identifier: enter(node); listenPA_Edge_identifier(node); leave(node); break;
    case VObjectType::paEdge_indicator: enter(node); listenPA_Edge_indicator(node); leave(node); break;
    case VObjectType::paEdge_input_list: enter(node); listenPA_Edge_input_list(node); leave(node); break;
    case VObjectType::paEdge_sensitive_path_declaration: enter(node); listenPA_Edge_sensitive_path_declaration(node); leave(node); break;
    case VObjectType::paEdge_symbol: enter(node); listenPA_Edge_symbol(node); leave(node); break;
    case VObjectType::paElaboration_system_task: enter(node); listenPA_Elaboration_system_task(node); leave(node); break;
    case VObjectType::paEmpty_queue: enter(node); listenPA_Empty_queue(node); leave(node); break;
    case VObjectType::paEnable_gate_instance: enter(node); listenPA_Enable_gate_instance(node); leave(node); break;
    case VObjectType::paEnable_gatetype: enter(node); listenPA_Enable_gatetype(node); leave(node); break;
    case VObjectType::paEnable_portfaults_directive: enter(node); listenPA_Enable_portfaults_directive(node); leave(node); break;
    case VObjectType::paEnd_edge_offset: enter(node); listenPA_End_edge_offset(node); leave(node); break;
    case VObjectType::paEnd_keywords_directive: enter(node); listenPA_End_keywords_directive(node); leave(node); break;
    case VObjectType::paEndcelldefine_directive: enter(node); listenPA_Endcelldefine_directive(node); leave(node); break;
    case VObjectType::paEndprotect_directive: enter(node); listenPA_Endprotect_directive(node); leave(node); break;
    case VObjectType::paEndprotected_directive: enter(node); listenPA_Endprotected_directive(node); leave(node); break;
    case VObjectType::paEnum_base_type: enter(node); listenPA_Enum_base_type(node); leave(node); break;
    case VObjectType::paEnum_keyword: enter(node); listenPA_Enum_keyword(node); leave(node); break;
    case VObjectType::paEnum_name_declaration: enter(node); listenPA_Enum_name_declaration(node); leave(node); break;
    case VObjectType::paEvent_based_flag: enter(node); listenPA_Event_based_flag(node); leave(node); break;
    case VObjectType::paEvent_control: enter(node); listenPA_Event_control(node); leave(node); break;
    case VObjectType::paEvent_expression: enter(node); listenPA_Event_expression(node); leave(node); break;
    case VObjectType::paEvent_trigger: enter(node); listenPA_Event_trigger(node); leave(node); break;
    case VObjectType::paEvent_type: enter(node); listenPA_Event_type(node); leave(node); break;
    case VObjectType::paExpand_vectornets_directive: enter(node); listenPA_Expand_vectornets_directive(node); leave(node); break;
    case VObjectType::paExpect_property_statement: enter(node); listenPA_Expect_property_statement(node); leave(node); break;
    case VObjectType::paExpression: enter(node); listenPA_Expression(node); leave(node); break;
    case VObjectType::paExpression_or_cond_pattern: enter(node); listenPA_Expression_or_cond_pattern(node); leave(node); break;
    case VObjectType::paExpression_or_dist: enter(node); listenPA_Expression_or_dist(node); leave(node); break;
    case VObjectType::paExtern_constraint_declaration: enter(node); listenPA_Extern_constraint_declaration(node); leave(node); break;
    case VObjectType::paExtern_qualifier: enter(node); listenPA_Extern_qualifier(node); leave(node); break;
    case VObjectType::paExtern_tf_declaration: enter(node); listenPA_Extern_tf_declaration(node); leave(node); break;
    case VObjectType::paFile_path_spec: enter(node); listenPA_File_path_spec(node); leave(node); break;
    case VObjectType::paFinal_construct: enter(node); listenPA_Final_construct(node); leave(node); break;
    case VObjectType::paFor_initialization: enter(node); listenPA_For_initialization(node); leave(node); break;
    case VObjectType::paFor_step: enter(node); listenPA_For_step(node); leave(node); break;
    case VObjectType::paFor_step_assignment: enter(node); listenPA_For_step_assignment(node); leave(node); break;
    case VObjectType::paFor_variable_declaration: enter(node); listenPA_For_variable_declaration(node); leave(node); break;
    case VObjectType::paFull_edge_sensitive_path_description: enter(node); listenPA_Full_edge_sensitive_path_description(node); leave(node); break;
    case VObjectType::paFull_path_description: enter(node); listenPA_Full_path_description(node); leave(node); break;
    case VObjectType::paFunction_body_declaration: enter(node); listenPA_Function_body_declaration(node); leave(node); break;
    case VObjectType::paFunction_data_type: enter(node); listenPA_Function_data_type(node); leave(node); break;
    case VObjectType::paFunction_data_type_or_implicit: enter(node); listenPA_Function_data_type_or_implicit(node); leave(node); break;
    case VObjectType::paFunction_declaration: enter(node); listenPA_Function_declaration(node); leave(node); break;
    case VObjectType::paFunction_name_decl: enter(node); listenPA_Function_name_decl(node); leave(node); break;
    case VObjectType::paFunction_prototype: enter(node); listenPA_Function_prototype(node); leave(node); break;
    case VObjectType::paFunction_statement_or_null: enter(node); listenPA_Function_statement_or_null(node); leave(node); break;
    case VObjectType::paGate_instantiation: enter(node); listenPA_Gate_instantiation(node); leave(node); break;
    case VObjectType::paGenerate_begin_end_block: enter(node); listenPA_Generate_begin_end_block(node); leave(node); break;
    case VObjectType::paGenerate_interface_block: enter(node); listenPA_Generate_interface_block(node); leave(node); break;
    case VObjectType::paGenerate_interface_case_statement: enter(node); listenPA_Generate_interface_case_statement(node); leave(node); break;
    case VObjectType::paGenerate_interface_conditional_statement: enter(node); listenPA_Generate_interface_conditional_statement(node); leave(node); break;
    case VObjectType::paGenerate_interface_item: enter(node); listenPA_Generate_interface_item(node); leave(node); break;
    case VObjectType::paGenerate_interface_loop_statement: enter(node); listenPA_Generate_interface_loop_statement(node); leave(node); break;
    case VObjectType::paGenerate_interface_named_block: enter(node); listenPA_Generate_interface_named_block(node); leave(node); break;
    case VObjectType::paGenerate_item: enter(node); listenPA_Generate_item(node); leave(node); break;
    case VObjectType::paGenerate_module_block: enter(node); listenPA_Generate_module_block(node); leave(node); break;
    case VObjectType::paGenerate_module_case_statement: enter(node); listenPA_Generate_module_case_statement(node); leave(node); break;
    case VObjectType::paGenerate_module_conditional_statement: enter(node); listenPA_Generate_module_conditional_statement(node); leave(node); break;
    case VObjectType::paGenerate_module_item: enter(node); listenPA_Generate_module_item(node); leave(node); break;
    case VObjectType::paGenerate_module_loop_statement: enter(node); listenPA_Generate_module_loop_statement(node); leave(node); break;
    case VObjectType::paGenerate_module_named_block: enter(node); listenPA_Generate_module_named_block(node); leave(node); break;
    case VObjectType::paGenerate_region: enter(node); listenPA_Generate_region(node); leave(node); break;
    case VObjectType::paGenerated_interface_instantiation: enter(node); listenPA_Generated_interface_instantiation(node); leave(node); break;
    case VObjectType::paGenerated_module_instantiation: enter(node); listenPA_Generated_module_instantiation(node); leave(node); break;
    case VObjectType::paGenvar_assignment: enter(node); listenPA_Genvar_assignment(node); leave(node); break;
    case VObjectType::paGenvar_decl_assignment: enter(node); listenPA_Genvar_decl_assignment(node); leave(node); break;
    case VObjectType::paGenvar_declaration: enter(node); listenPA_Genvar_declaration(node); leave(node); break;
    case VObjectType::paGenvar_initialization: enter(node); listenPA_Genvar_initialization(node); leave(node); break;
    case VObjectType::paGenvar_interface_case_item: enter(node); listenPA_Genvar_interface_case_item(node); leave(node); break;
    case VObjectType::paGenvar_iteration: enter(node); listenPA_Genvar_iteration(node); leave(node); break;
    case VObjectType::paGenvar_module_case_item: enter(node); listenPA_Genvar_module_case_item(node); leave(node); break;
    case VObjectType::paGoto_repetition: enter(node); listenPA_Goto_repetition(node); leave(node); break;
    case VObjectType::paHierarchical_btf_identifier: enter(node); listenPA_Hierarchical_btf_identifier(node); leave(node); break;
    case VObjectType::paHierarchical_identifier: enter(node); listenPA_Hierarchical_identifier(node); leave(node); break;
    case VObjectType::paHierarchical_instance: enter(node); listenPA_Hierarchical_instance(node); leave(node); break;
    case VObjectType::paIdentifier: enter(node); listenPA_Identifier(node); leave(node); break;
    case VObjectType::paIdentifier_list: enter(node); listenPA_Identifier_list(node); leave(node); break;
    case VObjectType::paIf_generate_construct: enter(node); listenPA_If_generate_construct(node); leave(node); break;
    case VObjectType::paImmediate_assertion_statement: enter(node); listenPA_Immediate_assertion_statement(node); leave(node); break;
    case VObjectType::paImplicit_class_handle: enter(node); listenPA_Implicit_class_handle(node); leave(node); break;
    case VObjectType::paImplicit_data_type: enter(node); listenPA_Implicit_data_type(node); leave(node); break;
    case VObjectType::paInc_or_dec_expression: enter(node); listenPA_Inc_or_dec_expression(node); leave(node); break;
    case VObjectType::paInc_or_dec_operator: enter(node); listenPA_Inc_or_dec_operator(node); leave(node); break;
    case VObjectType::paInclude_statement: enter(node); listenPA_Include_statement(node); leave(node); break;
    case VObjectType::paIndexed_range: enter(node); listenPA_Indexed_range(node); leave(node); break;
    case VObjectType::paInit_val: enter(node); listenPA_Init_val(node); leave(node); break;
    case VObjectType::paInitial_construct: enter(node); listenPA_Initial_construct(node); leave(node); break;
    case VObjectType::paInout_declaration: enter(node); listenPA_Inout_declaration(node); leave(node); break;
    case VObjectType::paInput_declaration: enter(node); listenPA_Input_declaration(node); leave(node); break;
    case VObjectType::paInst_clause: enter(node); listenPA_Inst_clause(node); leave(node); break;
    case VObjectType::paInst_name: enter(node); listenPA_Inst_name(node); leave(node); break;
    case VObjectType::paInteger_atom_type: enter(node); listenPA_Integer_atom_type(node); leave(node); break;
    case VObjectType::paInteger_type: enter(node); listenPA_Integer_type(node); leave(node); break;
    case VObjectType::paInteger_vector_type: enter(node); listenPA_Integer_vector_type(node); leave(node); break;
    case VObjectType::paInterface_ansi_header: enter(node); listenPA_Interface_ansi_header(node); leave(node); break;
    case VObjectType::paInterface_class_declaration: enter(node); listenPA_Interface_class_declaration(node); leave(node); break;
    case VObjectType::paInterface_class_item: enter(node); listenPA_Interface_class_item(node); leave(node); break;
    case VObjectType::paInterface_class_keyword: enter(node); listenPA_Interface_class_keyword(node); leave(node); break;
    case VObjectType::paInterface_class_method: enter(node); listenPA_Interface_class_method(node); leave(node); break;
    case VObjectType::paInterface_class_type: enter(node); listenPA_Interface_class_type(node); leave(node); break;
    case VObjectType::paInterface_declaration: enter(node); listenPA_Interface_declaration(node); leave(node); break;
    case VObjectType::paInterface_identifier: enter(node); listenPA_Interface_identifier(node); leave(node); break;
    case VObjectType::paInterface_item: enter(node); listenPA_Interface_item(node); leave(node); break;
    case VObjectType::paInterface_nonansi_header: enter(node); listenPA_Interface_nonansi_header(node); leave(node); break;
    case VObjectType::paInterface_or_generate_item: enter(node); listenPA_Interface_or_generate_item(node); leave(node); break;
    case VObjectType::paInterface_port_declaration: enter(node); listenPA_Interface_port_declaration(node); leave(node); break;
    case VObjectType::paInterface_port_header: enter(node); listenPA_Interface_port_header(node); leave(node); break;
    case VObjectType::paJoin_any_keyword: enter(node); listenPA_Join_any_keyword(node); leave(node); break;
    case VObjectType::paJoin_keyword: enter(node); listenPA_Join_keyword(node); leave(node); break;
    case VObjectType::paJoin_none_keyword: enter(node); listenPA_Join_none_keyword(node); leave(node); break;
    case VObjectType::paJump_statement: enter(node); listenPA_Jump_statement(node); leave(node); break;
    case VObjectType::paLet_declaration: enter(node); listenPA_Let_declaration(node); leave(node); break;
    case VObjectType::paLet_formal_type: enter(node); listenPA_Let_formal_type(node); leave(node); break;
    case VObjectType::paLet_port_item: enter(node); listenPA_Let_port_item(node); leave(node); break;
    case VObjectType::paLet_port_list: enter(node); listenPA_Let_port_list(node); leave(node); break;
    case VObjectType::paLevel_input_list: enter(node); listenPA_Level_input_list(node); leave(node); break;
    case VObjectType::paLevel_symbol: enter(node); listenPA_Level_symbol(node); leave(node); break;
    case VObjectType::paLiblist_clause: enter(node); listenPA_Liblist_clause(node); leave(node); break;
    case VObjectType::paLibrary_declaration: enter(node); listenPA_Library_declaration(node); leave(node); break;
    case VObjectType::paLibrary_descriptions: enter(node); listenPA_Library_descriptions(node); leave(node); break;
    case VObjectType::paLibrary_text: enter(node); listenPA_Library_text(node); leave(node); break;
    case VObjectType::paLifetime: enter(node); listenPA_Lifetime(node); leave(node); break;
    case VObjectType::paList_of_arguments: enter(node); listenPA_List_of_arguments(node); leave(node); break;
    case VObjectType::paList_of_checker_port_connections: enter(node); listenPA_List_of_checker_port_connections(node); leave(node); break;
    case VObjectType::paList_of_clocking_decl_assign: enter(node); listenPA_List_of_clocking_decl_assign(node); leave(node); break;
    case VObjectType::paList_of_cross_items: enter(node); listenPA_List_of_cross_items(node); leave(node); break;
    case VObjectType::paList_of_defparam_assignments: enter(node); listenPA_List_of_defparam_assignments(node); leave(node); break;
    case VObjectType::paList_of_interface_identifiers: enter(node); listenPA_List_of_interface_identifiers(node); leave(node); break;
    case VObjectType::paList_of_net_assignments: enter(node); listenPA_List_of_net_assignments(node); leave(node); break;
    case VObjectType::paList_of_net_decl_assignments: enter(node); listenPA_List_of_net_decl_assignments(node); leave(node); break;
    case VObjectType::paList_of_param_assignments: enter(node); listenPA_List_of_param_assignments(node); leave(node); break;
    case VObjectType::paList_of_parameter_assignments: enter(node); listenPA_List_of_parameter_assignments(node); leave(node); break;
    case VObjectType::paList_of_path_delay_expressions: enter(node); listenPA_List_of_path_delay_expressions(node); leave(node); break;
    case VObjectType::paList_of_path_inputs: enter(node); listenPA_List_of_path_inputs(node); leave(node); break;
    case VObjectType::paList_of_path_outputs: enter(node); listenPA_List_of_path_outputs(node); leave(node); break;
    case VObjectType::paList_of_port_connections: enter(node); listenPA_List_of_port_connections(node); leave(node); break;
    case VObjectType::paList_of_port_declarations: enter(node); listenPA_List_of_port_declarations(node); leave(node); break;
    case VObjectType::paList_of_port_identifiers: enter(node); listenPA_List_of_port_identifiers(node); leave(node); break;
    case VObjectType::paList_of_ports: enter(node); listenPA_List_of_ports(node); leave(node); break;
    case VObjectType::paList_of_specparam_assignments: enter(node); listenPA_List_of_specparam_assignments(node); leave(node); break;
    case VObjectType::paList_of_tf_variable_identifiers: enter(node); listenPA_List_of_tf_variable_identifiers(node); leave(node); break;
    case VObjectType::paList_of_type_assignments: enter(node); listenPA_List_of_type_assignments(node); leave(node); break;
    case VObjectType::paList_of_variable_assignments: enter(node); listenPA_List_of_variable_assignments(node); leave(node); break;
    case VObjectType::paList_of_variable_decl_assignments: enter(node); listenPA_List_of_variable_decl_assignments(node); leave(node); break;
    case VObjectType::paList_of_variable_identifiers: enter(node); listenPA_List_of_variable_identifiers(node); leave(node); break;
    case VObjectType::paList_of_variable_port_identifiers: enter(node); listenPA_List_of_variable_port_identifiers(node); leave(node); break;
    case VObjectType::paList_of_virtual_interface_decl: enter(node); listenPA_List_of_virtual_interface_decl(node); leave(node); break;
    case VObjectType::paLocal_parameter_declaration: enter(node); listenPA_Local_parameter_declaration(node); leave(node); break;
    case VObjectType::paLoop_generate_construct: enter(node); listenPA_Loop_generate_construct(node); leave(node); break;
    case VObjectType::paLoop_statement: enter(node); listenPA_Loop_statement(node); leave(node); break;
    case VObjectType::paLoop_variables: enter(node); listenPA_Loop_variables(node); leave(node); break;
    case VObjectType::paMatches: enter(node); listenPA_Matches(node); leave(node); break;
    case VObjectType::paMethod_call: enter(node); listenPA_Method_call(node); leave(node); break;
    case VObjectType::paMethod_call_body: enter(node); listenPA_Method_call_body(node); leave(node); break;
    case VObjectType::paMethod_call_root: enter(node); listenPA_Method_call_root(node); leave(node); break;
    case VObjectType::paMethod_prototype: enter(node); listenPA_Method_prototype(node); leave(node); break;
    case VObjectType::paMethod_qualifier: enter(node); listenPA_Method_qualifier(node); leave(node); break;
    case VObjectType::paMintypmax_expression: enter(node); listenPA_Mintypmax_expression(node); leave(node); break;
    case VObjectType::paModport_hierarchical_ports_declaration: enter(node); listenPA_Modport_hierarchical_ports_declaration(node); leave(node); break;
    case VObjectType::paModport_item: enter(node); listenPA_Modport_item(node); leave(node); break;
    case VObjectType::paModport_ports_declaration: enter(node); listenPA_Modport_ports_declaration(node); leave(node); break;
    case VObjectType::paModport_simple_port: enter(node); listenPA_Modport_simple_port(node); leave(node); break;
    case VObjectType::paModport_simple_ports_declaration: enter(node); listenPA_Modport_simple_ports_declaration(node); leave(node); break;
    case VObjectType::paModport_tf_port: enter(node); listenPA_Modport_tf_port(node); leave(node); break;
    case VObjectType::paModport_tf_ports_declaration: enter(node); listenPA_Modport_tf_ports_declaration(node); leave(node); break;
    case VObjectType::paModule_ansi_header: enter(node); listenPA_Module_ansi_header(node); leave(node); break;
    case VObjectType::paModule_common_item: enter(node); listenPA_Module_common_item(node); leave(node); break;
    case VObjectType::paModule_declaration: enter(node); listenPA_Module_declaration(node); leave(node); break;
    case VObjectType::paModule_instantiation: enter(node); listenPA_Module_instantiation(node); leave(node); break;
    case VObjectType::paModule_item: enter(node); listenPA_Module_item(node); leave(node); break;
    case VObjectType::paModule_keyword: enter(node); listenPA_Module_keyword(node); leave(node); break;
    case VObjectType::paModule_nonansi_header: enter(node); listenPA_Module_nonansi_header(node); leave(node); break;
    case VObjectType::paModule_or_generate_item: enter(node); listenPA_Module_or_generate_item(node); leave(node); break;
    case VObjectType::paModule_or_generate_item_declaration: enter(node); listenPA_Module_or_generate_item_declaration(node); leave(node); break;
    case VObjectType::paModule_path_concatenation: enter(node); listenPA_Module_path_concatenation(node); leave(node); break;
    case VObjectType::paModule_path_expression: enter(node); listenPA_Module_path_expression(node); leave(node); break;
    case VObjectType::paModule_path_mintypmax_expression: enter(node); listenPA_Module_path_mintypmax_expression(node); leave(node); break;
    case VObjectType::paModule_path_multiple_concatenation: enter(node); listenPA_Module_path_multiple_concatenation(node); leave(node); break;
    case VObjectType::paModule_path_primary: enter(node); listenPA_Module_path_primary(node); leave(node); break;
    case VObjectType::paMos_switch_instance: enter(node); listenPA_Mos_switch_instance(node); leave(node); break;
    case VObjectType::paMos_switchtype: enter(node); listenPA_Mos_switchtype(node); leave(node); break;
    case VObjectType::paMultiple_concatenation: enter(node); listenPA_Multiple_concatenation(node); leave(node); break;
    case VObjectType::paN_input_gate_instance: enter(node); listenPA_N_input_gate_instance(node); leave(node); break;
    case VObjectType::paN_input_gatetype: enter(node); listenPA_N_input_gatetype(node); leave(node); break;
    case VObjectType::paN_output_gate_instance: enter(node); listenPA_N_output_gate_instance(node); leave(node); break;
    case VObjectType::paN_output_gatetype: enter(node); listenPA_N_output_gatetype(node); leave(node); break;
    case VObjectType::paName_of_instance: enter(node); listenPA_Name_of_instance(node); leave(node); break;
    case VObjectType::paNamed_checker_port_connection: enter(node); listenPA_Named_checker_port_connection(node); leave(node); break;
    case VObjectType::paNamed_parameter_assignment: enter(node); listenPA_Named_parameter_assignment(node); leave(node); break;
    case VObjectType::paNamed_port_connection: enter(node); listenPA_Named_port_connection(node); leave(node); break;
    case VObjectType::paNet_alias: enter(node); listenPA_Net_alias(node); leave(node); break;
    case VObjectType::paNet_assignment: enter(node); listenPA_Net_assignment(node); leave(node); break;
    case VObjectType::paNet_decl_assignment: enter(node); listenPA_Net_decl_assignment(node); leave(node); break;
    case VObjectType::paNet_declaration: enter(node); listenPA_Net_declaration(node); leave(node); break;
    case VObjectType::paNet_lvalue: enter(node); listenPA_Net_lvalue(node); leave(node); break;
    case VObjectType::paNet_port_header: enter(node); listenPA_Net_port_header(node); leave(node); break;
    case VObjectType::paNet_port_type: enter(node); listenPA_Net_port_type(node); leave(node); break;
    case VObjectType::paNet_type: enter(node); listenPA_Net_type(node); leave(node); break;
    case VObjectType::paNet_type_declaration: enter(node); listenPA_Net_type_declaration(node); leave(node); break;
    case VObjectType::paNext_state: enter(node); listenPA_Next_state(node); leave(node); break;
    case VObjectType::paNoaccelerate_directive: enter(node); listenPA_Noaccelerate_directive(node); leave(node); break;
    case VObjectType::paNoexpand_vectornets_directive: enter(node); listenPA_Noexpand_vectornets_directive(node); leave(node); break;
    case VObjectType::paNon_consecutive_repetition: enter(node); listenPA_Non_consecutive_repetition(node); leave(node); break;
    case VObjectType::paNon_integer_type: enter(node); listenPA_Non_integer_type(node); leave(node); break;
    case VObjectType::paNon_port_interface_item: enter(node); listenPA_Non_port_interface_item(node); leave(node); break;
    case VObjectType::paNon_port_module_item: enter(node); listenPA_Non_port_module_item(node); leave(node); break;
    case VObjectType::paNon_port_program_item: enter(node); listenPA_Non_port_program_item(node); leave(node); break;
    case VObjectType::paNonblocking_assignment: enter(node); listenPA_Nonblocking_assignment(node); leave(node); break;
    case VObjectType::paNonrange_select: enter(node); listenPA_Nonrange_select(node); leave(node); break;
    case VObjectType::paNonrange_variable_lvalue: enter(node); listenPA_Nonrange_variable_lvalue(node); leave(node); break;
    case VObjectType::paNoremove_gatenames_directive: enter(node); listenPA_Noremove_gatenames_directive(node); leave(node); break;
    case VObjectType::paNoremove_netnames_directive: enter(node); listenPA_Noremove_netnames_directive(node); leave(node); break;
    case VObjectType::paNosuppress_faults_directive: enter(node); listenPA_Nosuppress_faults_directive(node); leave(node); break;
    case VObjectType::paNotifier: enter(node); listenPA_Notifier(node); leave(node); break;
    case VObjectType::paNounconnected_drive_directive: enter(node); listenPA_Nounconnected_drive_directive(node); leave(node); break;
    case VObjectType::paNull_keyword: enter(node); listenPA_Null_keyword(node); leave(node); break;
    case VObjectType::paNull_rule: enter(node); listenPA_Null_rule(node); leave(node); break;
    case VObjectType::paNumber: enter(node); listenPA_Number(node); leave(node); break;
    case VObjectType::paOpen_range_list: enter(node); listenPA_Open_range_list(node); leave(node); break;
    case VObjectType::paOperator_assignment: enter(node); listenPA_Operator_assignment(node); leave(node); break;
    case VObjectType::paOr_call: enter(node); listenPA_Or_call(node); leave(node); break;
    case VObjectType::paOr_operator: enter(node); listenPA_Or_operator(node); leave(node); break;
    case VObjectType::paOrdered_checker_port_connection: enter(node); listenPA_Ordered_checker_port_connection(node); leave(node); break;
    case VObjectType::paOrdered_parameter_assignment: enter(node); listenPA_Ordered_parameter_assignment(node); leave(node); break;
    case VObjectType::paOrdered_port_connection: enter(node); listenPA_Ordered_port_connection(node); leave(node); break;
    case VObjectType::paOutput_declaration: enter(node); listenPA_Output_declaration(node); leave(node); break;
    case VObjectType::paOutput_symbol: enter(node); listenPA_Output_symbol(node); leave(node); break;
    case VObjectType::paOverload_declaration: enter(node); listenPA_Overload_declaration(node); leave(node); break;
    case VObjectType::paOverload_operator: enter(node); listenPA_Overload_operator(node); leave(node); break;
    case VObjectType::paOverload_proto_formals: enter(node); listenPA_Overload_proto_formals(node); leave(node); break;
    case VObjectType::paPackage_declaration: enter(node); listenPA_Package_declaration(node); leave(node); break;
    case VObjectType::paPackage_export_declaration: enter(node); listenPA_Package_export_declaration(node); leave(node); break;
    case VObjectType::paPackage_import_declaration: enter(node); listenPA_Package_import_declaration(node); leave(node); break;
    case VObjectType::paPackage_import_item: enter(node); listenPA_Package_import_item(node); leave(node); break;
    case VObjectType::paPackage_item: enter(node); listenPA_Package_item(node); leave(node); break;
    case VObjectType::paPackage_or_generate_item_declaration: enter(node); listenPA_Package_or_generate_item_declaration(node); leave(node); break;
    case VObjectType::paPackage_scope: enter(node); listenPA_Package_scope(node); leave(node); break;
    case VObjectType::paPacked_dimension: enter(node); listenPA_Packed_dimension(node); leave(node); break;
    case VObjectType::paPacked_keyword: enter(node); listenPA_Packed_keyword(node); leave(node); break;
    case VObjectType::paPar_block: enter(node); listenPA_Par_block(node); leave(node); break;
    case VObjectType::paParallel_edge_sensitive_path_description: enter(node); listenPA_Parallel_edge_sensitive_path_description(node); leave(node); break;
    case VObjectType::paParallel_path_description: enter(node); listenPA_Parallel_path_description(node); leave(node); break;
    case VObjectType::paParam_assignment: enter(node); listenPA_Param_assignment(node); leave(node); break;
    case VObjectType::paParam_expression: enter(node); listenPA_Param_expression(node); leave(node); break;
    case VObjectType::paParameter_declaration: enter(node); listenPA_Parameter_declaration(node); leave(node); break;
    case VObjectType::paParameter_override: enter(node); listenPA_Parameter_override(node); leave(node); break;
    case VObjectType::paParameter_port_declaration: enter(node); listenPA_Parameter_port_declaration(node); leave(node); break;
    case VObjectType::paParameter_port_list: enter(node); listenPA_Parameter_port_list(node); leave(node); break;
    case VObjectType::paParameter_value_assignment: enter(node); listenPA_Parameter_value_assignment(node); leave(node); break;
    case VObjectType::paPart_select_op: enter(node); listenPA_Part_select_op(node); leave(node); break;
    case VObjectType::paPart_select_op_colon: enter(node); listenPA_Part_select_op_colon(node); leave(node); break;
    case VObjectType::paPart_select_range: enter(node); listenPA_Part_select_range(node); leave(node); break;
    case VObjectType::paPass_en_switchtype: enter(node); listenPA_Pass_en_switchtype(node); leave(node); break;
    case VObjectType::paPass_enable_switch_instance: enter(node); listenPA_Pass_enable_switch_instance(node); leave(node); break;
    case VObjectType::paPass_switch_instance: enter(node); listenPA_Pass_switch_instance(node); leave(node); break;
    case VObjectType::paPass_switchtype: enter(node); listenPA_Pass_switchtype(node); leave(node); break;
    case VObjectType::paPath_declaration: enter(node); listenPA_Path_declaration(node); leave(node); break;
    case VObjectType::paPath_delay_expression: enter(node); listenPA_Path_delay_expression(node); leave(node); break;
    case VObjectType::paPath_delay_value: enter(node); listenPA_Path_delay_value(node); leave(node); break;
    case VObjectType::paPattern: enter(node); listenPA_Pattern(node); leave(node); break;
    case VObjectType::paPort: enter(node); listenPA_Port(node); leave(node); break;
    case VObjectType::paPort_declaration: enter(node); listenPA_Port_declaration(node); leave(node); break;
    case VObjectType::paPort_direction: enter(node); listenPA_Port_direction(node); leave(node); break;
    case VObjectType::paPort_expression: enter(node); listenPA_Port_expression(node); leave(node); break;
    case VObjectType::paPort_reference: enter(node); listenPA_Port_reference(node); leave(node); break;
    case VObjectType::paPound_delay_value: enter(node); listenPA_Pound_delay_value(node); leave(node); break;
    case VObjectType::paPragma_directive: enter(node); listenPA_Pragma_directive(node); leave(node); break;
    case VObjectType::paPragma_expression: enter(node); listenPA_Pragma_expression(node); leave(node); break;
    case VObjectType::paPragma_value: enter(node); listenPA_Pragma_value(node); leave(node); break;
    case VObjectType::paPrimary: enter(node); listenPA_Primary(node); leave(node); break;
    case VObjectType::paPrimary_literal: enter(node); listenPA_Primary_literal(node); leave(node); break;
    case VObjectType::paProcedural_assertion_statement: enter(node); listenPA_Procedural_assertion_statement(node); leave(node); break;
    case VObjectType::paProcedural_continuous_assignment: enter(node); listenPA_Procedural_continuous_assignment(node); leave(node); break;
    case VObjectType::paProcedural_timing_control: enter(node); listenPA_Procedural_timing_control(node); leave(node); break;
    case VObjectType::paProcedural_timing_control_statement: enter(node); listenPA_Procedural_timing_control_statement(node); leave(node); break;
    case VObjectType::paProduction: enter(node); listenPA_Production(node); leave(node); break;
    case VObjectType::paProduction_item: enter(node); listenPA_Production_item(node); leave(node); break;
    case VObjectType::paProgram_ansi_header: enter(node); listenPA_Program_ansi_header(node); leave(node); break;
    case VObjectType::paProgram_declaration: enter(node); listenPA_Program_declaration(node); leave(node); break;
    case VObjectType::paProgram_generate_item: enter(node); listenPA_Program_generate_item(node); leave(node); break;
    case VObjectType::paProgram_item: enter(node); listenPA_Program_item(node); leave(node); break;
    case VObjectType::paProgram_nonansi_header: enter(node); listenPA_Program_nonansi_header(node); leave(node); break;
    case VObjectType::paProperty_actual_arg: enter(node); listenPA_Property_actual_arg(node); leave(node); break;
    case VObjectType::paProperty_case_item: enter(node); listenPA_Property_case_item(node); leave(node); break;
    case VObjectType::paProperty_declaration: enter(node); listenPA_Property_declaration(node); leave(node); break;
    case VObjectType::paProperty_expr: enter(node); listenPA_Property_expr(node); leave(node); break;
    case VObjectType::paProperty_formal_type: enter(node); listenPA_Property_formal_type(node); leave(node); break;
    case VObjectType::paProperty_instance: enter(node); listenPA_Property_instance(node); leave(node); break;
    case VObjectType::paProperty_lvar_port_direction: enter(node); listenPA_Property_lvar_port_direction(node); leave(node); break;
    case VObjectType::paProperty_port_item: enter(node); listenPA_Property_port_item(node); leave(node); break;
    case VObjectType::paProperty_port_list: enter(node); listenPA_Property_port_list(node); leave(node); break;
    case VObjectType::paProperty_qualifier: enter(node); listenPA_Property_qualifier(node); leave(node); break;
    case VObjectType::paProperty_spec: enter(node); listenPA_Property_spec(node); leave(node); break;
    case VObjectType::paProtect_directive: enter(node); listenPA_Protect_directive(node); leave(node); break;
    case VObjectType::paProtected_directive: enter(node); listenPA_Protected_directive(node); leave(node); break;
    case VObjectType::paPs_identifier: enter(node); listenPA_Ps_identifier(node); leave(node); break;
    case VObjectType::paPs_or_hierarchical_array_identifier: enter(node); listenPA_Ps_or_hierarchical_array_identifier(node); leave(node); break;
    case VObjectType::paPs_or_hierarchical_identifier: enter(node); listenPA_Ps_or_hierarchical_identifier(node); leave(node); break;
    case VObjectType::paPs_or_hierarchical_sequence_identifier: enter(node); listenPA_Ps_or_hierarchical_sequence_identifier(node); leave(node); break;
    case VObjectType::paPs_type_identifier: enter(node); listenPA_Ps_type_identifier(node); leave(node); break;
    case VObjectType::paPull_gate_instance: enter(node); listenPA_Pull_gate_instance(node); leave(node); break;
    case VObjectType::paPulldown_strength: enter(node); listenPA_Pulldown_strength(node); leave(node); break;
    case VObjectType::paPullup_strength: enter(node); listenPA_Pullup_strength(node); leave(node); break;
    case VObjectType::paPulse_control_specparam: enter(node); listenPA_Pulse_control_specparam(node); leave(node); break;
    case VObjectType::paPulsestyle_declaration: enter(node); listenPA_Pulsestyle_declaration(node); leave(node); break;
    case VObjectType::paPure_keyword: enter(node); listenPA_Pure_keyword(node); leave(node); break;
    case VObjectType::paPure_virtual_qualifier: enter(node); listenPA_Pure_virtual_qualifier(node); leave(node); break;
    case VObjectType::paQueue_dimension: enter(node); listenPA_Queue_dimension(node); leave(node); break;
    case VObjectType::paRandcase_item: enter(node); listenPA_Randcase_item(node); leave(node); break;
    case VObjectType::paRandcase_statement: enter(node); listenPA_Randcase_statement(node); leave(node); break;
    case VObjectType::paRandom_qualifier: enter(node); listenPA_Random_qualifier(node); leave(node); break;
    case VObjectType::paRandomize_call: enter(node); listenPA_Randomize_call(node); leave(node); break;
    case VObjectType::paRandsequence_statement: enter(node); listenPA_Randsequence_statement(node); leave(node); break;
    case VObjectType::paRange_expression: enter(node); listenPA_Range_expression(node); leave(node); break;
    case VObjectType::paRange_list: enter(node); listenPA_Range_list(node); leave(node); break;
    case VObjectType::paRef_declaration: enter(node); listenPA_Ref_declaration(node); leave(node); break;
    case VObjectType::paReference_event: enter(node); listenPA_Reference_event(node); leave(node); break;
    case VObjectType::paRemain_active_flag: enter(node); listenPA_Remain_active_flag(node); leave(node); break;
    case VObjectType::paRemove_gatename_directive: enter(node); listenPA_Remove_gatename_directive(node); leave(node); break;
    case VObjectType::paRemove_netname_directive: enter(node); listenPA_Remove_netname_directive(node); leave(node); break;
    case VObjectType::paRepeat_range: enter(node); listenPA_Repeat_range(node); leave(node); break;
    case VObjectType::paRestrict_property_statement: enter(node); listenPA_Restrict_property_statement(node); leave(node); break;
    case VObjectType::paRs_case: enter(node); listenPA_Rs_case(node); leave(node); break;
    case VObjectType::paRs_case_item: enter(node); listenPA_Rs_case_item(node); leave(node); break;
    case VObjectType::paRs_code_block: enter(node); listenPA_Rs_code_block(node); leave(node); break;
    case VObjectType::paRs_if_else: enter(node); listenPA_Rs_if_else(node); leave(node); break;
    case VObjectType::paRs_prod: enter(node); listenPA_Rs_prod(node); leave(node); break;
    case VObjectType::paRs_production_list: enter(node); listenPA_Rs_production_list(node); leave(node); break;
    case VObjectType::paRs_repeat: enter(node); listenPA_Rs_repeat(node); leave(node); break;
    case VObjectType::paRs_rule: enter(node); listenPA_Rs_rule(node); leave(node); break;
    case VObjectType::paScalar_constant: enter(node); listenPA_Scalar_constant(node); leave(node); break;
    case VObjectType::paScalar_timing_check_condition: enter(node); listenPA_Scalar_timing_check_condition(node); leave(node); break;
    case VObjectType::paSelect: enter(node); listenPA_Select(node); leave(node); break;
    case VObjectType::paSelect_condition: enter(node); listenPA_Select_condition(node); leave(node); break;
    case VObjectType::paSelect_expression: enter(node); listenPA_Select_expression(node); leave(node); break;
    case VObjectType::paSeq_block: enter(node); listenPA_Seq_block(node); leave(node); break;
    case VObjectType::paSeq_input_list: enter(node); listenPA_Seq_input_list(node); leave(node); break;
    case VObjectType::paSequence_actual_arg: enter(node); listenPA_Sequence_actual_arg(node); leave(node); break;
    case VObjectType::paSequence_arg: enter(node); listenPA_Sequence_arg(node); leave(node); break;
    case VObjectType::paSequence_declaration: enter(node); listenPA_Sequence_declaration(node); leave(node); break;
    case VObjectType::paSequence_expr: enter(node); listenPA_Sequence_expr(node); leave(node); break;
    case VObjectType::paSequence_formal_type: enter(node); listenPA_Sequence_formal_type(node); leave(node); break;
    case VObjectType::paSequence_instance: enter(node); listenPA_Sequence_instance(node); leave(node); break;
    case VObjectType::paSequence_list_of_arguments: enter(node); listenPA_Sequence_list_of_arguments(node); leave(node); break;
    case VObjectType::paSequence_lvar_port_direction: enter(node); listenPA_Sequence_lvar_port_direction(node); leave(node); break;
    case VObjectType::paSequence_match_item: enter(node); listenPA_Sequence_match_item(node); leave(node); break;
    case VObjectType::paSequence_method_call: enter(node); listenPA_Sequence_method_call(node); leave(node); break;
    case VObjectType::paSequence_port_item: enter(node); listenPA_Sequence_port_item(node); leave(node); break;
    case VObjectType::paSequence_port_list: enter(node); listenPA_Sequence_port_list(node); leave(node); break;
    case VObjectType::paSequential_body: enter(node); listenPA_Sequential_body(node); leave(node); break;
    case VObjectType::paSequential_entry: enter(node); listenPA_Sequential_entry(node); leave(node); break;
    case VObjectType::paShowcancelled_declaration: enter(node); listenPA_Showcancelled_declaration(node); leave(node); break;
    case VObjectType::paSigned_directive: enter(node); listenPA_Signed_directive(node); leave(node); break;
    case VObjectType::paSigning: enter(node); listenPA_Signing(node); leave(node); break;
    case VObjectType::paSimple_immediate_assert_statement: enter(node); listenPA_Simple_immediate_assert_statement(node); leave(node); break;
    case VObjectType::paSimple_immediate_assertion_statement: enter(node); listenPA_Simple_immediate_assertion_statement(node); leave(node); break;
    case VObjectType::paSimple_immediate_assume_statement: enter(node); listenPA_Simple_immediate_assume_statement(node); leave(node); break;
    case VObjectType::paSimple_immediate_cover_statement: enter(node); listenPA_Simple_immediate_cover_statement(node); leave(node); break;
    case VObjectType::paSimple_path_declaration: enter(node); listenPA_Simple_path_declaration(node); leave(node); break;
    case VObjectType::paSimple_type: enter(node); listenPA_Simple_type(node); leave(node); break;
    case VObjectType::paSlice_size: enter(node); listenPA_Slice_size(node); leave(node); break;
    case VObjectType::paSlline: enter(node); listenPA_Slline(node); leave(node); break;
    case VObjectType::paSolve_before_list: enter(node); listenPA_Solve_before_list(node); leave(node); break;
    case VObjectType::paSource_text: enter(node); listenPA_Source_text(node); leave(node); break;
    case VObjectType::paSpecify_block: enter(node); listenPA_Specify_block(node); leave(node); break;
    case VObjectType::paSpecify_input_terminal_descriptor: enter(node); listenPA_Specify_input_terminal_descriptor(node); leave(node); break;
    case VObjectType::paSpecify_item: enter(node); listenPA_Specify_item(node); leave(node); break;
    case VObjectType::paSpecify_output_terminal_descriptor: enter(node); listenPA_Specify_output_terminal_descriptor(node); leave(node); break;
    case VObjectType::paSpecify_terminal_descriptor: enter(node); listenPA_Specify_terminal_descriptor(node); leave(node); break;
    case VObjectType::paSpecparam_assignment: enter(node); listenPA_Specparam_assignment(node); leave(node); break;
    case VObjectType::paSpecparam_declaration: enter(node); listenPA_Specparam_declaration(node); leave(node); break;
    case VObjectType::paStamptime_condition: enter(node); listenPA_Stamptime_condition(node); leave(node); break;
    case VObjectType::paStart_edge_offset: enter(node); listenPA_Start_edge_offset(node); leave(node); break;
    case VObjectType::paState_dependent_path_declaration: enter(node); listenPA_State_dependent_path_declaration(node); leave(node); break;
    case VObjectType::paStatement: enter(node); listenPA_Statement(node); leave(node); break;
    case VObjectType::paStatement_item: enter(node); listenPA_Statement_item(node); leave(node); break;
    case VObjectType::paStatement_or_null: enter(node); listenPA_Statement_or_null(node); leave(node); break;
    case VObjectType::paStream_concatenation: enter(node); listenPA_Stream_concatenation(node); leave(node); break;
    case VObjectType::paStream_expression: enter(node); listenPA_Stream_expression(node); leave(node); break;
    case VObjectType::paStream_operator: enter(node); listenPA_Stream_operator(node); leave(node); break;
    case VObjectType::paStreaming_concatenation: enter(node); listenPA_Streaming_concatenation(node); leave(node); break;
    case VObjectType::paStrength0: enter(node); listenPA_Strength0(node); leave(node); break;
    case VObjectType::paStrength1: enter(node); listenPA_Strength1(node); leave(node); break;
    case VObjectType::paString_type: enter(node); listenPA_String_type(node); leave(node); break;
    case VObjectType::paString_value: enter(node); listenPA_String_value(node); leave(node); break;
    case VObjectType::paStruct_keyword: enter(node); listenPA_Struct_keyword(node); leave(node); break;
    case VObjectType::paStruct_union: enter(node); listenPA_Struct_union(node); leave(node); break;
    case VObjectType::paStruct_union_member: enter(node); listenPA_Struct_union_member(node); leave(node); break;
    case VObjectType::paStructure_pattern_key: enter(node); listenPA_Structure_pattern_key(node); leave(node); break;
    case VObjectType::paSubroutine_call: enter(node); listenPA_Subroutine_call(node); leave(node); break;
    case VObjectType::paSubroutine_call_statement: enter(node); listenPA_Subroutine_call_statement(node); leave(node); break;
    case VObjectType::paSuper_dot_new: enter(node); listenPA_Super_dot_new(node); leave(node); break;
    case VObjectType::paSuper_keyword: enter(node); listenPA_Super_keyword(node); leave(node); break;
    case VObjectType::paSuppress_faults_directive: enter(node); listenPA_Suppress_faults_directive(node); leave(node); break;
    case VObjectType::paSurelog_macro_not_defined: enter(node); listenPA_Surelog_macro_not_defined(node); leave(node); break;
    case VObjectType::paSystem_task: enter(node); listenPA_System_task(node); leave(node); break;
    case VObjectType::paSystem_task_names: enter(node); listenPA_System_task_names(node); leave(node); break;
    case VObjectType::paSystem_timing_check: enter(node); listenPA_System_timing_check(node); leave(node); break;
    case VObjectType::paT01_path_delay_expression: enter(node); listenPA_T01_path_delay_expression(node); leave(node); break;
    case VObjectType::paT0x_path_delay_expression: enter(node); listenPA_T0x_path_delay_expression(node); leave(node); break;
    case VObjectType::paT0z_path_delay_expression: enter(node); listenPA_T0z_path_delay_expression(node); leave(node); break;
    case VObjectType::paT10_path_delay_expression: enter(node); listenPA_T10_path_delay_expression(node); leave(node); break;
    case VObjectType::paT1x_path_delay_expression: enter(node); listenPA_T1x_path_delay_expression(node); leave(node); break;
    case VObjectType::paT1z_path_delay_expression: enter(node); listenPA_T1z_path_delay_expression(node); leave(node); break;
    case VObjectType::paT_path_delay_expression: enter(node); listenPA_T_path_delay_expression(node); leave(node); break;
    case VObjectType::paTagged_keyword: enter(node); listenPA_Tagged_keyword(node); leave(node); break;
    case VObjectType::paTask_body_declaration: enter(node); listenPA_Task_body_declaration(node); leave(node); break;
    case VObjectType::paTask_declaration: enter(node); listenPA_Task_declaration(node); leave(node); break;
    case VObjectType::paTask_name_decl: enter(node); listenPA_Task_name_decl(node); leave(node); break;
    case VObjectType::paTask_prototype: enter(node); listenPA_Task_prototype(node); leave(node); break;
    case VObjectType::paTf_item_declaration: enter(node); listenPA_Tf_item_declaration(node); leave(node); break;
    case VObjectType::paTf_port_declaration: enter(node); listenPA_Tf_port_declaration(node); leave(node); break;
    case VObjectType::paTf_port_direction: enter(node); listenPA_Tf_port_direction(node); leave(node); break;
    case VObjectType::paTf_port_item: enter(node); listenPA_Tf_port_item(node); leave(node); break;
    case VObjectType::paTf_port_list: enter(node); listenPA_Tf_port_list(node); leave(node); break;
    case VObjectType::paTfall_path_delay_expression: enter(node); listenPA_Tfall_path_delay_expression(node); leave(node); break;
    case VObjectType::paThis_dot_super: enter(node); listenPA_This_dot_super(node); leave(node); break;
    case VObjectType::paThis_keyword: enter(node); listenPA_This_keyword(node); leave(node); break;
    case VObjectType::paThreshold: enter(node); listenPA_Threshold(node); leave(node); break;
    case VObjectType::paTime_literal: enter(node); listenPA_Time_literal(node); leave(node); break;
    case VObjectType::paTime_unit: enter(node); listenPA_Time_unit(node); leave(node); break;
    case VObjectType::paTimescale_directive: enter(node); listenPA_Timescale_directive(node); leave(node); break;
    case VObjectType::paTimeunits_declaration: enter(node); listenPA_Timeunits_declaration(node); leave(node); break;
    case VObjectType::paTiming_check_condition: enter(node); listenPA_Timing_check_condition(node); leave(node); break;
    case VObjectType::paTiming_check_event: enter(node); listenPA_Timing_check_event(node); leave(node); break;
    case VObjectType::paTiming_check_event_control: enter(node); listenPA_Timing_check_event_control(node); leave(node); break;
    case VObjectType::paTiming_check_limit: enter(node); listenPA_Timing_check_limit(node); leave(node); break;
    case VObjectType::paTop_directives: enter(node); listenPA_Top_directives(node); leave(node); break;
    case VObjectType::paTop_level_library_rule: enter(node); listenPA_Top_level_library_rule(node); leave(node); break;
    case VObjectType::paTop_level_rule: enter(node); listenPA_Top_level_rule(node); leave(node); break;
    case VObjectType::paTrans_list: enter(node); listenPA_Trans_list(node); leave(node); break;
    case VObjectType::paTrans_range_list: enter(node); listenPA_Trans_range_list(node); leave(node); break;
    case VObjectType::paTrans_set: enter(node); listenPA_Trans_set(node); leave(node); break;
    case VObjectType::paTrise_path_delay_expression: enter(node); listenPA_Trise_path_delay_expression(node); leave(node); break;
    case VObjectType::paTx0_path_delay_expression: enter(node); listenPA_Tx0_path_delay_expression(node); leave(node); break;
    case VObjectType::paTx1_path_delay_expression: enter(node); listenPA_Tx1_path_delay_expression(node); leave(node); break;
    case VObjectType::paTxz_path_delay_expression: enter(node); listenPA_Txz_path_delay_expression(node); leave(node); break;
    case VObjectType::paType_declaration: enter(node); listenPA_Type_declaration(node); leave(node); break;
    case VObjectType::paType_reference: enter(node); listenPA_Type_reference(node); leave(node); break;
    case VObjectType::paTz0_path_delay_expression: enter(node); listenPA_Tz0_path_delay_expression(node); leave(node); break;
    case VObjectType::paTz1_path_delay_expression: enter(node); listenPA_Tz1_path_delay_expression(node); leave(node); break;
    case VObjectType::paTz_path_delay_expression: enter(node); listenPA_Tz_path_delay_expression(node); leave(node); break;
    case VObjectType::paTzx_path_delay_expression: enter(node); listenPA_Tzx_path_delay_expression(node); leave(node); break;
    case VObjectType::paUdp_ansi_declaration: enter(node); listenPA_Udp_ansi_declaration(node); leave(node); break;
    case VObjectType::paUdp_body: enter(node); listenPA_Udp_body(node); leave(node); break;
    case VObjectType::paUdp_declaration: enter(node); listenPA_Udp_declaration(node); leave(node); break;
    case VObjectType::paUdp_declaration_port_list: enter(node); listenPA_Udp_declaration_port_list(node); leave(node); break;
    case VObjectType::paUdp_initial_statement: enter(node); listenPA_Udp_initial_statement(node); leave(node); break;
    case VObjectType::paUdp_input_declaration: enter(node); listenPA_Udp_input_declaration(node); leave(node); break;
    case VObjectType::paUdp_instance: enter(node); listenPA_Udp_instance(node); leave(node); break;
    case VObjectType::paUdp_instantiation: enter(node); listenPA_Udp_instantiation(node); leave(node); break;
    case VObjectType::paUdp_nonansi_declaration: enter(node); listenPA_Udp_nonansi_declaration(node); leave(node); break;
    case VObjectType::paUdp_output_declaration: enter(node); listenPA_Udp_output_declaration(node); leave(node); break;
    case VObjectType::paUdp_port_declaration: enter(node); listenPA_Udp_port_declaration(node); leave(node); break;
    case VObjectType::paUdp_port_list: enter(node); listenPA_Udp_port_list(node); leave(node); break;
    case VObjectType::paUdp_reg_declaration: enter(node); listenPA_Udp_reg_declaration(node); leave(node); break;
    case VObjectType::paUnary_module_path_operator: enter(node); listenPA_Unary_module_path_operator(node); leave(node); break;
    case VObjectType::paUnbased_unsized_literal: enter(node); listenPA_Unbased_unsized_literal(node); leave(node); break;
    case VObjectType::paUnconnected_drive_directive: enter(node); listenPA_Unconnected_drive_directive(node); leave(node); break;
    case VObjectType::paUnion_keyword: enter(node); listenPA_Union_keyword(node); leave(node); break;
    case VObjectType::paUnique_call: enter(node); listenPA_Unique_call(node); leave(node); break;
    case VObjectType::paUnique_priority: enter(node); listenPA_Unique_priority(node); leave(node); break;
    case VObjectType::paUniqueness_constraint: enter(node); listenPA_Uniqueness_constraint(node); leave(node); break;
    case VObjectType::paUnpacked_dimension: enter(node); listenPA_Unpacked_dimension(node); leave(node); break;
    case VObjectType::paUnsigned_directive: enter(node); listenPA_Unsigned_directive(node); leave(node); break;
    case VObjectType::paUnsized_dimension: enter(node); listenPA_Unsized_dimension(node); leave(node); break;
    case VObjectType::paUse_clause: enter(node); listenPA_Use_clause(node); leave(node); break;
    case VObjectType::paUse_clause_config: enter(node); listenPA_Use_clause_config(node); leave(node); break;
    case VObjectType::paUselib_directive: enter(node); listenPA_Uselib_directive(node); leave(node); break;
    case VObjectType::paValue_range: enter(node); listenPA_Value_range(node); leave(node); break;
    case VObjectType::paVar_data_type: enter(node); listenPA_Var_data_type(node); leave(node); break;
    case VObjectType::paVar_type: enter(node); listenPA_Var_type(node); leave(node); break;
    case VObjectType::paVariable_assignment: enter(node); listenPA_Variable_assignment(node); leave(node); break;
    case VObjectType::paVariable_decl_assignment: enter(node); listenPA_Variable_decl_assignment(node); leave(node); break;
    case VObjectType::paVariable_declaration: enter(node); listenPA_Variable_declaration(node); leave(node); break;
    case VObjectType::paVariable_dimension: enter(node); listenPA_Variable_dimension(node); leave(node); break;
    case VObjectType::paVariable_impl_declaration: enter(node); listenPA_Variable_impl_declaration(node); leave(node); break;
    case VObjectType::paVariable_lvalue: enter(node); listenPA_Variable_lvalue(node); leave(node); break;
    case VObjectType::paVariable_port_header: enter(node); listenPA_Variable_port_header(node); leave(node); break;
    case VObjectType::paVariable_port_type: enter(node); listenPA_Variable_port_type(node); leave(node); break;
    case VObjectType::paVirtual_interface_declaration: enter(node); listenPA_Virtual_interface_declaration(node); leave(node); break;
    case VObjectType::paWait_statement: enter(node); listenPA_Wait_statement(node); leave(node); break;
    case VObjectType::paXor_call: enter(node); listenPA_Xor_call(node); leave(node); break;

    case VObjectType::sl_INVALID_: visit(node); visitSL__INVALID_(node); break;
    case VObjectType::slNoType: visit(node); visitSL_NoType(node); break;
    case VObjectType::slNull: visit(node); visitSL_Null(node); break;
    case VObjectType::slIntConst: visit(node); visitSL_IntConst(node); break;
    case VObjectType::slRealConst: visit(node); visitSL_RealConst(node); break;
    case VObjectType::slStringConst: visit(node); visitSL_StringConst(node); break;
    case VObjectType::slStringLiteral: visit(node); visitSL_StringLiteral(node); break;
    case VObjectType::slUnparsable_Text: visit(node); visitSL_Unparsable_Text(node); break;

    case VObjectType::ppANY: visit(node); visitPP_ANY(node); break;
    case VObjectType::ppASSIGN_OP: visit(node); visitPP_ASSIGN_OP(node); break;
    case VObjectType::ppBlock_comment: visit(node); visitPP_Block_comment(node); break;
    case VObjectType::ppCHECKER: visit(node); visitPP_CHECKER(node); break;
    case VObjectType::ppCLOSE_BRACKET: visit(node); visitPP_CLOSE_BRACKET(node); break;
    case VObjectType::ppCLOSE_CURLY: visit(node); visitPP_CLOSE_CURLY(node); break;
    case VObjectType::ppCLOSE_PARENS: visit(node); visitPP_CLOSE_PARENS(node); break;
    case VObjectType::ppCOMMA: visit(node); visitPP_COMMA(node); break;
    case VObjectType::ppCONFIG: visit(node); visitPP_CONFIG(node); break;
    case VObjectType::ppCR: visit(node); visitPP_CR(node); break;
    case VObjectType::ppDOUBLE_QUOTE: visit(node); visitPP_DOUBLE_QUOTE(node); break;
    case VObjectType::ppENDCHECKER: visit(node); visitPP_ENDCHECKER(node); break;
    case VObjectType::ppENDCONFIG: visit(node); visitPP_ENDCONFIG(node); break;
    case VObjectType::ppENDINTERFACE: visit(node); visitPP_ENDINTERFACE(node); break;
    case VObjectType::ppENDMODULE: visit(node); visitPP_ENDMODULE(node); break;
    case VObjectType::ppENDPACKAGE: visit(node); visitPP_ENDPACKAGE(node); break;
    case VObjectType::ppENDPRIMITIVE: visit(node); visitPP_ENDPRIMITIVE(node); break;
    case VObjectType::ppENDPROGRAM: visit(node); visitPP_ENDPROGRAM(node); break;
    case VObjectType::ppESCAPED_CR: visit(node); visitPP_ESCAPED_CR(node); break;
    case VObjectType::ppESCAPED_IDENTIFIER: visit(node); visitPP_ESCAPED_IDENTIFIER(node); break;
    case VObjectType::ppFixed_point_number: visit(node); visitPP_Fixed_point_number(node); break;
    case VObjectType::ppINTEGRAL_NUMBER: visit(node); visitPP_INTEGRAL_NUMBER(node); break;
    case VObjectType::ppINTERFACE: visit(node); visitPP_INTERFACE(node); break;
    case VObjectType::ppMODULE: visit(node); visitPP_MODULE(node); break;
    case VObjectType::ppMacro_Escaped_identifier: visit(node); visitPP_Macro_Escaped_identifier(node); break;
    case VObjectType::ppMacro_identifier: visit(node); visitPP_Macro_identifier(node); break;
    case VObjectType::ppOPEN_BRACKET: visit(node); visitPP_OPEN_BRACKET(node); break;
    case VObjectType::ppOPEN_CURLY: visit(node); visitPP_OPEN_CURLY(node); break;
    case VObjectType::ppOPEN_PARENS: visit(node); visitPP_OPEN_PARENS(node); break;
    case VObjectType::ppOne_line_comment: visit(node); visitPP_One_line_comment(node); break;
    case VObjectType::ppPACKAGE: visit(node); visitPP_PACKAGE(node); break;
    case VObjectType::ppPOUND_DELAY: visit(node); visitPP_POUND_DELAY(node); break;
    case VObjectType::ppPRIMITIVE: visit(node); visitPP_PRIMITIVE(node); break;
    case VObjectType::ppPROGRAM: visit(node); visitPP_PROGRAM(node); break;
    case VObjectType::ppPound_Pound_delay: visit(node); visitPP_Pound_Pound_delay(node); break;
    case VObjectType::ppSTRING: visit(node); visitPP_STRING(node); break;
    case VObjectType::ppSimple_identifier: visit(node); visitPP_Simple_identifier(node); break;
    case VObjectType::ppSpaces: visit(node); visitPP_Spaces(node); break;
    case VObjectType::ppSpecial: visit(node); visitPP_Special(node); break;
    case VObjectType::ppTEXT_CR: visit(node); visitPP_TEXT_CR(node); break;
    case VObjectType::ppTICK_ACCELERATE: visit(node); visitPP_TICK_ACCELERATE(node); break;
    case VObjectType::ppTICK_AUTOEXPAND_VECTORNETS: visit(node); visitPP_TICK_AUTOEXPAND_VECTORNETS(node); break;
    case VObjectType::ppTICK_BACKSLASH_TICK_QUOTE: visit(node); visitPP_TICK_BACKSLASH_TICK_QUOTE(node); break;
    case VObjectType::ppTICK_BEGIN_KEYWORDS: visit(node); visitPP_TICK_BEGIN_KEYWORDS(node); break;
    case VObjectType::ppTICK_CELLDEFINE: visit(node); visitPP_TICK_CELLDEFINE(node); break;
    case VObjectType::ppTICK_DEFAULT_DECAY_TIME: visit(node); visitPP_TICK_DEFAULT_DECAY_TIME(node); break;
    case VObjectType::ppTICK_DEFAULT_NETTYPE: visit(node); visitPP_TICK_DEFAULT_NETTYPE(node); break;
    case VObjectType::ppTICK_DEFAULT_TRIREG_STRENGTH: visit(node); visitPP_TICK_DEFAULT_TRIREG_STRENGTH(node); break;
    case VObjectType::ppTICK_DEFINE: visit(node); visitPP_TICK_DEFINE(node); break;
    case VObjectType::ppTICK_DELAY_MODE_DISTRIBUTED: visit(node); visitPP_TICK_DELAY_MODE_DISTRIBUTED(node); break;
    case VObjectType::ppTICK_DELAY_MODE_PATH: visit(node); visitPP_TICK_DELAY_MODE_PATH(node); break;
    case VObjectType::ppTICK_DELAY_MODE_UNIT: visit(node); visitPP_TICK_DELAY_MODE_UNIT(node); break;
    case VObjectType::ppTICK_DELAY_MODE_ZERO: visit(node); visitPP_TICK_DELAY_MODE_ZERO(node); break;
    case VObjectType::ppTICK_DISABLE_PORTFAULTS: visit(node); visitPP_TICK_DISABLE_PORTFAULTS(node); break;
    case VObjectType::ppTICK_ELSE: visit(node); visitPP_TICK_ELSE(node); break;
    case VObjectType::ppTICK_ELSEIF: visit(node); visitPP_TICK_ELSEIF(node); break;
    case VObjectType::ppTICK_ELSIF: visit(node); visitPP_TICK_ELSIF(node); break;
    case VObjectType::ppTICK_ENABLE_PORTFAULTS: visit(node); visitPP_TICK_ENABLE_PORTFAULTS(node); break;
    case VObjectType::ppTICK_ENDCELLDEFINE: visit(node); visitPP_TICK_ENDCELLDEFINE(node); break;
    case VObjectType::ppTICK_ENDIF: visit(node); visitPP_TICK_ENDIF(node); break;
    case VObjectType::ppTICK_ENDPROTECT: visit(node); visitPP_TICK_ENDPROTECT(node); break;
    case VObjectType::ppTICK_ENDPROTECTED: visit(node); visitPP_TICK_ENDPROTECTED(node); break;
    case VObjectType::ppTICK_END_KEYWORDS: visit(node); visitPP_TICK_END_KEYWORDS(node); break;
    case VObjectType::ppTICK_EXPAND_VECTORNETS: visit(node); visitPP_TICK_EXPAND_VECTORNETS(node); break;
    case VObjectType::ppTICK_FILE__: visit(node); visitPP_TICK_FILE__(node); break;
    case VObjectType::ppTICK_IFDEF: visit(node); visitPP_TICK_IFDEF(node); break;
    case VObjectType::ppTICK_IFNDEF: visit(node); visitPP_TICK_IFNDEF(node); break;
    case VObjectType::ppTICK_INCLUDE: visit(node); visitPP_TICK_INCLUDE(node); break;
    case VObjectType::ppTICK_LINE: visit(node); visitPP_TICK_LINE(node); break;
    case VObjectType::ppTICK_LINE__: visit(node); visitPP_TICK_LINE__(node); break;
    case VObjectType::ppTICK_NOACCELERATE: visit(node); visitPP_TICK_NOACCELERATE(node); break;
    case VObjectType::ppTICK_NOEXPAND_VECTORNETS: visit(node); visitPP_TICK_NOEXPAND_VECTORNETS(node); break;
    case VObjectType::ppTICK_NOREMOVE_GATENAMES: visit(node); visitPP_TICK_NOREMOVE_GATENAMES(node); break;
    case VObjectType::ppTICK_NOREMOVE_NETNAMES: visit(node); visitPP_TICK_NOREMOVE_NETNAMES(node); break;
    case VObjectType::ppTICK_NOSUPPRESS_FAULTS: visit(node); visitPP_TICK_NOSUPPRESS_FAULTS(node); break;
    case VObjectType::ppTICK_NOUNCONNECTED_DRIVE: visit(node); visitPP_TICK_NOUNCONNECTED_DRIVE(node); break;
    case VObjectType::ppTICK_PRAGMA: visit(node); visitPP_TICK_PRAGMA(node); break;
    case VObjectType::ppTICK_PROTECT: visit(node); visitPP_TICK_PROTECT(node); break;
    case VObjectType::ppTICK_PROTECTED: visit(node); visitPP_TICK_PROTECTED(node); break;
    case VObjectType::ppTICK_QUOTE: visit(node); visitPP_TICK_QUOTE(node); break;
    case VObjectType::ppTICK_REMOVE_GATENAME: visit(node); visitPP_TICK_REMOVE_GATENAME(node); break;
    case VObjectType::ppTICK_REMOVE_NETNAME: visit(node); visitPP_TICK_REMOVE_NETNAME(node); break;
    case VObjectType::ppTICK_RESETALL: visit(node); visitPP_TICK_RESETALL(node); break;
    case VObjectType::ppTICK_SIGNED: visit(node); visitPP_TICK_SIGNED(node); break;
    case VObjectType::ppTICK_SUPPRESS_FAULTS: visit(node); visitPP_TICK_SUPPRESS_FAULTS(node); break;
    case VObjectType::ppTICK_TICK: visit(node); visitPP_TICK_TICK(node); break;
    case VObjectType::ppTICK_TIMESCALE: visit(node); visitPP_TICK_TIMESCALE(node); break;
    case VObjectType::ppTICK_UNCONNECTED_DRIVE: visit(node); visitPP_TICK_UNCONNECTED_DRIVE(node); break;
    case VObjectType::ppTICK_UNDEF: visit(node); visitPP_TICK_UNDEF(node); break;
    case VObjectType::ppTICK_UNDEFINEALL: visit(node); visitPP_TICK_UNDEFINEALL(node); break;
    case VObjectType::ppTICK_UNSIGNED: visit(node); visitPP_TICK_UNSIGNED(node); break;
    case VObjectType::ppTICK_USELIB: visit(node); visitPP_TICK_USELIB(node); break;
    case VObjectType::ppTICK_VARIABLE: visit(node); visitPP_TICK_VARIABLE(node); break;
    case VObjectType::ppTIMESCALE: visit(node); visitPP_TIMESCALE(node); break;

    case VObjectType::paACCEPT_ON: visit(node); visitPA_ACCEPT_ON(node); break;
    case VObjectType::paADD_ASSIGN: visit(node); visitPA_ADD_ASSIGN(node); break;
    case VObjectType::paALIAS: visit(node); visitPA_ALIAS(node); break;
    case VObjectType::paALWAYS: visit(node); visitPA_ALWAYS(node); break;
    case VObjectType::paALWAYS_COMB: visit(node); visitPA_ALWAYS_COMB(node); break;
    case VObjectType::paALWAYS_FF: visit(node); visitPA_ALWAYS_FF(node); break;
    case VObjectType::paALWAYS_LATCH: visit(node); visitPA_ALWAYS_LATCH(node); break;
    case VObjectType::paAND: visit(node); visitPA_AND(node); break;
    case VObjectType::paANY: visit(node); visitPA_ANY(node); break;
    case VObjectType::paARITH_SHIFT_LEFT: visit(node); visitPA_ARITH_SHIFT_LEFT(node); break;
    case VObjectType::paARITH_SHIFT_LEFT_ASSIGN: visit(node); visitPA_ARITH_SHIFT_LEFT_ASSIGN(node); break;
    case VObjectType::paARITH_SHIFT_RIGHT: visit(node); visitPA_ARITH_SHIFT_RIGHT(node); break;
    case VObjectType::paARITH_SHIFT_RIGHT_ASSIGN: visit(node); visitPA_ARITH_SHIFT_RIGHT_ASSIGN(node); break;
    case VObjectType::paASSERT: visit(node); visitPA_ASSERT(node); break;
    case VObjectType::paASSIGN: visit(node); visitPA_ASSIGN(node); break;
    case VObjectType::paASSIGN_OP: visit(node); visitPA_ASSIGN_OP(node); break;
    case VObjectType::paASSIGN_VALUE: visit(node); visitPA_ASSIGN_VALUE(node); break;
    case VObjectType::paASSOCIATIVE_UNSPECIFIED: visit(node); visitPA_ASSOCIATIVE_UNSPECIFIED(node); break;
    case VObjectType::paASSUME: visit(node); visitPA_ASSUME(node); break;
    case VObjectType::paAT: visit(node); visitPA_AT(node); break;
    case VObjectType::paATAT: visit(node); visitPA_ATAT(node); break;
    case VObjectType::paATSTAR: visit(node); visitPA_ATSTAR(node); break;
    case VObjectType::paAT_PARENS_STAR: visit(node); visitPA_AT_PARENS_STAR(node); break;
    case VObjectType::paAUTOMATIC: visit(node); visitPA_AUTOMATIC(node); break;
    case VObjectType::paBACK_TICK: visit(node); visitPA_BACK_TICK(node); break;
    case VObjectType::paBANG: visit(node); visitPA_BANG(node); break;
    case VObjectType::paBEFORE: visit(node); visitPA_BEFORE(node); break;
    case VObjectType::paBEGIN: visit(node); visitPA_BEGIN(node); break;
    case VObjectType::paBINARY_WILDCARD_EQUAL: visit(node); visitPA_BINARY_WILDCARD_EQUAL(node); break;
    case VObjectType::paBINARY_WILDCARD_NOTEQUAL: visit(node); visitPA_BINARY_WILDCARD_NOTEQUAL(node); break;
    case VObjectType::paBIND: visit(node); visitPA_BIND(node); break;
    case VObjectType::paBINS: visit(node); visitPA_BINS(node); break;
    case VObjectType::paBINSOF: visit(node); visitPA_BINSOF(node); break;
    case VObjectType::paBIT: visit(node); visitPA_BIT(node); break;
    case VObjectType::paBITW_AND: visit(node); visitPA_BITW_AND(node); break;
    case VObjectType::paBITW_AND_ASSIGN: visit(node); visitPA_BITW_AND_ASSIGN(node); break;
    case VObjectType::paBITW_LEFT_SHIFT_ASSIGN: visit(node); visitPA_BITW_LEFT_SHIFT_ASSIGN(node); break;
    case VObjectType::paBITW_OR: visit(node); visitPA_BITW_OR(node); break;
    case VObjectType::paBITW_OR_ASSIGN: visit(node); visitPA_BITW_OR_ASSIGN(node); break;
    case VObjectType::paBITW_RIGHT_SHIFT_ASSIGN: visit(node); visitPA_BITW_RIGHT_SHIFT_ASSIGN(node); break;
    case VObjectType::paBITW_XOR: visit(node); visitPA_BITW_XOR(node); break;
    case VObjectType::paBITW_XOR_ASSIGN: visit(node); visitPA_BITW_XOR_ASSIGN(node); break;
    case VObjectType::paBREAK: visit(node); visitPA_BREAK(node); break;
    case VObjectType::paBUF: visit(node); visitPA_BUF(node); break;
    case VObjectType::paBUFIF0: visit(node); visitPA_BUFIF0(node); break;
    case VObjectType::paBUFIF1: visit(node); visitPA_BUFIF1(node); break;
    case VObjectType::paBYTE: visit(node); visitPA_BYTE(node); break;
    case VObjectType::paBlock_comment: visit(node); visitPA_Block_comment(node); break;
    case VObjectType::paCASE: visit(node); visitPA_CASE(node); break;
    case VObjectType::paCASEX: visit(node); visitPA_CASEX(node); break;
    case VObjectType::paCASEZ: visit(node); visitPA_CASEZ(node); break;
    case VObjectType::paCELL: visit(node); visitPA_CELL(node); break;
    case VObjectType::paCHANDLE: visit(node); visitPA_CHANDLE(node); break;
    case VObjectType::paCHECKER: visit(node); visitPA_CHECKER(node); break;
    case VObjectType::paCLASS: visit(node); visitPA_CLASS(node); break;
    case VObjectType::paCLOCKING: visit(node); visitPA_CLOCKING(node); break;
    case VObjectType::paCLOSE_BRACKET: visit(node); visitPA_CLOSE_BRACKET(node); break;
    case VObjectType::paCLOSE_CURLY: visit(node); visitPA_CLOSE_CURLY(node); break;
    case VObjectType::paCLOSE_PARENS: visit(node); visitPA_CLOSE_PARENS(node); break;
    case VObjectType::paCMOS: visit(node); visitPA_CMOS(node); break;
    case VObjectType::paCOLON: visit(node); visitPA_COLON(node); break;
    case VObjectType::paCOLONCOLON: visit(node); visitPA_COLONCOLON(node); break;
    case VObjectType::paCOMMA: visit(node); visitPA_COMMA(node); break;
    case VObjectType::paCOND_PRED_OP: visit(node); visitPA_COND_PRED_OP(node); break;
    case VObjectType::paCONFIG: visit(node); visitPA_CONFIG(node); break;
    case VObjectType::paCONSECUTIVE_REP: visit(node); visitPA_CONSECUTIVE_REP(node); break;
    case VObjectType::paCONST: visit(node); visitPA_CONST(node); break;
    case VObjectType::paCONSTRAINT: visit(node); visitPA_CONSTRAINT(node); break;
    case VObjectType::paCONTEXT: visit(node); visitPA_CONTEXT(node); break;
    case VObjectType::paCONTINUE: visit(node); visitPA_CONTINUE(node); break;
    case VObjectType::paCOVER: visit(node); visitPA_COVER(node); break;
    case VObjectType::paCOVERGROUP: visit(node); visitPA_COVERGROUP(node); break;
    case VObjectType::paCOVERPOINT: visit(node); visitPA_COVERPOINT(node); break;
    case VObjectType::paCROSS: visit(node); visitPA_CROSS(node); break;
    case VObjectType::paDEASSIGN: visit(node); visitPA_DEASSIGN(node); break;
    case VObjectType::paDEC_PART_SELECT_OP: visit(node); visitPA_DEC_PART_SELECT_OP(node); break;
    case VObjectType::paDEFAULT: visit(node); visitPA_DEFAULT(node); break;
    case VObjectType::paDEFPARAM: visit(node); visitPA_DEFPARAM(node); break;
    case VObjectType::paDESIGN: visit(node); visitPA_DESIGN(node); break;
    case VObjectType::paDISABLE: visit(node); visitPA_DISABLE(node); break;
    case VObjectType::paDIST: visit(node); visitPA_DIST(node); break;
    case VObjectType::paDIV: visit(node); visitPA_DIV(node); break;
    case VObjectType::paDIV_ASSIGN: visit(node); visitPA_DIV_ASSIGN(node); break;
    case VObjectType::paDO: visit(node); visitPA_DO(node); break;
    case VObjectType::paDOLLAR: visit(node); visitPA_DOLLAR(node); break;
    case VObjectType::paDOLLAR_ROOT: visit(node); visitPA_DOLLAR_ROOT(node); break;
    case VObjectType::paDOLLAR_UNIT: visit(node); visitPA_DOLLAR_UNIT(node); break;
    case VObjectType::paDOT: visit(node); visitPA_DOT(node); break;
    case VObjectType::paDOTSTAR: visit(node); visitPA_DOTSTAR(node); break;
    case VObjectType::paEDGE: visit(node); visitPA_EDGE(node); break;
    case VObjectType::paELSE: visit(node); visitPA_ELSE(node); break;
    case VObjectType::paEND: visit(node); visitPA_END(node); break;
    case VObjectType::paENDCASE: visit(node); visitPA_ENDCASE(node); break;
    case VObjectType::paENDCHECKER: visit(node); visitPA_ENDCHECKER(node); break;
    case VObjectType::paENDCLASS: visit(node); visitPA_ENDCLASS(node); break;
    case VObjectType::paENDCLOCKING: visit(node); visitPA_ENDCLOCKING(node); break;
    case VObjectType::paENDCONFIG: visit(node); visitPA_ENDCONFIG(node); break;
    case VObjectType::paENDFUNCTION: visit(node); visitPA_ENDFUNCTION(node); break;
    case VObjectType::paENDGENERATE: visit(node); visitPA_ENDGENERATE(node); break;
    case VObjectType::paENDGROUP: visit(node); visitPA_ENDGROUP(node); break;
    case VObjectType::paENDINTERFACE: visit(node); visitPA_ENDINTERFACE(node); break;
    case VObjectType::paENDMODULE: visit(node); visitPA_ENDMODULE(node); break;
    case VObjectType::paENDPACKAGE: visit(node); visitPA_ENDPACKAGE(node); break;
    case VObjectType::paENDPRIMITIVE: visit(node); visitPA_ENDPRIMITIVE(node); break;
    case VObjectType::paENDPROGRAM: visit(node); visitPA_ENDPROGRAM(node); break;
    case VObjectType::paENDPROPERTY: visit(node); visitPA_ENDPROPERTY(node); break;
    case VObjectType::paENDSEQUENCE: visit(node); visitPA_ENDSEQUENCE(node); break;
    case VObjectType::paENDSPECIFY: visit(node); visitPA_ENDSPECIFY(node); break;
    case VObjectType::paENDTABLE: visit(node); visitPA_ENDTABLE(node); break;
    case VObjectType::paENDTASK: visit(node); visitPA_ENDTASK(node); break;
    case VObjectType::paENUM: visit(node); visitPA_ENUM(node); break;
    case VObjectType::paEQUIV: visit(node); visitPA_EQUIV(node); break;
    case VObjectType::paEQUIVALENCE: visit(node); visitPA_EQUIVALENCE(node); break;
    case VObjectType::paEVENT: visit(node); visitPA_EVENT(node); break;
    case VObjectType::paEVENTUALLY: visit(node); visitPA_EVENTUALLY(node); break;
    case VObjectType::paEXPECT: visit(node); visitPA_EXPECT(node); break;
    case VObjectType::paEXPORT: visit(node); visitPA_EXPORT(node); break;
    case VObjectType::paEXTENDS: visit(node); visitPA_EXTENDS(node); break;
    case VObjectType::paEXTERN: visit(node); visitPA_EXTERN(node); break;
    case VObjectType::paEscaped_identifier: visit(node); visitPA_Escaped_identifier(node); break;
    case VObjectType::paFINAL: visit(node); visitPA_FINAL(node); break;
    case VObjectType::paFIRST_MATCH: visit(node); visitPA_FIRST_MATCH(node); break;
    case VObjectType::paFOR: visit(node); visitPA_FOR(node); break;
    case VObjectType::paFORCE: visit(node); visitPA_FORCE(node); break;
    case VObjectType::paFOREACH: visit(node); visitPA_FOREACH(node); break;
    case VObjectType::paFOREVER: visit(node); visitPA_FOREVER(node); break;
    case VObjectType::paFORK: visit(node); visitPA_FORK(node); break;
    case VObjectType::paFORKJOIN: visit(node); visitPA_FORKJOIN(node); break;
    case VObjectType::paFOUR_STATE_LOGIC_EQUAL: visit(node); visitPA_FOUR_STATE_LOGIC_EQUAL(node); break;
    case VObjectType::paFOUR_STATE_LOGIC_NOTEQUAL: visit(node); visitPA_FOUR_STATE_LOGIC_NOTEQUAL(node); break;
    case VObjectType::paFULL_CONN_OP: visit(node); visitPA_FULL_CONN_OP(node); break;
    case VObjectType::paFUNCTION: visit(node); visitPA_FUNCTION(node); break;
    case VObjectType::paGENERATE: visit(node); visitPA_GENERATE(node); break;
    case VObjectType::paGENVAR: visit(node); visitPA_GENVAR(node); break;
    case VObjectType::paGLOBAL: visit(node); visitPA_GLOBAL(node); break;
    case VObjectType::paGOTO_REP: visit(node); visitPA_GOTO_REP(node); break;
    case VObjectType::paGREATER: visit(node); visitPA_GREATER(node); break;
    case VObjectType::paGREATER_EQUAL: visit(node); visitPA_GREATER_EQUAL(node); break;
    case VObjectType::paHIGHZ0: visit(node); visitPA_HIGHZ0(node); break;
    case VObjectType::paHIGHZ1: visit(node); visitPA_HIGHZ1(node); break;
    case VObjectType::paIF: visit(node); visitPA_IF(node); break;
    case VObjectType::paIFF: visit(node); visitPA_IFF(node); break;
    case VObjectType::paIFNONE: visit(node); visitPA_IFNONE(node); break;
    case VObjectType::paIGNORE_BINS: visit(node); visitPA_IGNORE_BINS(node); break;
    case VObjectType::paILLEGAL_BINS: visit(node); visitPA_ILLEGAL_BINS(node); break;
    case VObjectType::paIMPLEMENTS: visit(node); visitPA_IMPLEMENTS(node); break;
    case VObjectType::paIMPLIES: visit(node); visitPA_IMPLIES(node); break;
    case VObjectType::paIMPLY: visit(node); visitPA_IMPLY(node); break;
    case VObjectType::paIMPORT: visit(node); visitPA_IMPORT(node); break;
    case VObjectType::paINCDIR: visit(node); visitPA_INCDIR(node); break;
    case VObjectType::paINCLUDE: visit(node); visitPA_INCLUDE(node); break;
    case VObjectType::paINC_PART_SELECT_OP: visit(node); visitPA_INC_PART_SELECT_OP(node); break;
    case VObjectType::paINITIAL: visit(node); visitPA_INITIAL(node); break;
    case VObjectType::paINOUT: visit(node); visitPA_INOUT(node); break;
    case VObjectType::paINPUT: visit(node); visitPA_INPUT(node); break;
    case VObjectType::paINSIDE: visit(node); visitPA_INSIDE(node); break;
    case VObjectType::paINSTANCE: visit(node); visitPA_INSTANCE(node); break;
    case VObjectType::paINT: visit(node); visitPA_INT(node); break;
    case VObjectType::paINTEGER: visit(node); visitPA_INTEGER(node); break;
    case VObjectType::paINTERCONNECT: visit(node); visitPA_INTERCONNECT(node); break;
    case VObjectType::paINTERFACE: visit(node); visitPA_INTERFACE(node); break;
    case VObjectType::paINTERSECT: visit(node); visitPA_INTERSECT(node); break;
    case VObjectType::paIntegral_number: visit(node); visitPA_Integral_number(node); break;
    case VObjectType::paJOIN: visit(node); visitPA_JOIN(node); break;
    case VObjectType::paJOIN_ANY: visit(node); visitPA_JOIN_ANY(node); break;
    case VObjectType::paJOIN_NONE: visit(node); visitPA_JOIN_NONE(node); break;
    case VObjectType::paLARGE: visit(node); visitPA_LARGE(node); break;
    case VObjectType::paLESS: visit(node); visitPA_LESS(node); break;
    case VObjectType::paLESS_EQUAL: visit(node); visitPA_LESS_EQUAL(node); break;
    case VObjectType::paLET: visit(node); visitPA_LET(node); break;
    case VObjectType::paLIBLIST: visit(node); visitPA_LIBLIST(node); break;
    case VObjectType::paLIBRARY: visit(node); visitPA_LIBRARY(node); break;
    case VObjectType::paLOCAL: visit(node); visitPA_LOCAL(node); break;
    case VObjectType::paLOCALPARAM: visit(node); visitPA_LOCALPARAM(node); break;
    case VObjectType::paLOGIC: visit(node); visitPA_LOGIC(node); break;
    case VObjectType::paLOGICAL_AND: visit(node); visitPA_LOGICAL_AND(node); break;
    case VObjectType::paLOGICAL_OR: visit(node); visitPA_LOGICAL_OR(node); break;
    case VObjectType::paLONGINT: visit(node); visitPA_LONGINT(node); break;
    case VObjectType::paMACROMODULE: visit(node); visitPA_MACROMODULE(node); break;
    case VObjectType::paMATCHES: visit(node); visitPA_MATCHES(node); break;
    case VObjectType::paMEDIUM: visit(node); visitPA_MEDIUM(node); break;
    case VObjectType::paMINUS: visit(node); visitPA_MINUS(node); break;
    case VObjectType::paMINUSMINUS: visit(node); visitPA_MINUSMINUS(node); break;
    case VObjectType::paMODPORT: visit(node); visitPA_MODPORT(node); break;
    case VObjectType::paMODULE: visit(node); visitPA_MODULE(node); break;
    case VObjectType::paMODULO_ASSIGN: visit(node); visitPA_MODULO_ASSIGN(node); break;
    case VObjectType::paMULT_ASSIGN: visit(node); visitPA_MULT_ASSIGN(node); break;
    case VObjectType::paNAND: visit(node); visitPA_NAND(node); break;
    case VObjectType::paNEGEDGE: visit(node); visitPA_NEGEDGE(node); break;
    case VObjectType::paNETTYPE: visit(node); visitPA_NETTYPE(node); break;
    case VObjectType::paNEW: visit(node); visitPA_NEW(node); break;
    case VObjectType::paNEXTTIME: visit(node); visitPA_NEXTTIME(node); break;
    case VObjectType::paNMOS: visit(node); visitPA_NMOS(node); break;
    case VObjectType::paNONOVERLAPPED: visit(node); visitPA_NONOVERLAPPED(node); break;
    case VObjectType::paNON_BLOCKING_TRIGGER_EVENT_OP: visit(node); visitPA_NON_BLOCKING_TRIGGER_EVENT_OP(node); break;
    case VObjectType::paNON_CONSECUTIVE_REP: visit(node); visitPA_NON_CONSECUTIVE_REP(node); break;
    case VObjectType::paNON_OVERLAP_IMPLY: visit(node); visitPA_NON_OVERLAP_IMPLY(node); break;
    case VObjectType::paNOR: visit(node); visitPA_NOR(node); break;
    case VObjectType::paNOSHOWCANCELLED: visit(node); visitPA_NOSHOWCANCELLED(node); break;
    case VObjectType::paNOT: visit(node); visitPA_NOT(node); break;
    case VObjectType::paNOTEQUAL: visit(node); visitPA_NOTEQUAL(node); break;
    case VObjectType::paNOTIF0: visit(node); visitPA_NOTIF0(node); break;
    case VObjectType::paNOTIF1: visit(node); visitPA_NOTIF1(node); break;
    case VObjectType::paNULL_KEYWORD: visit(node); visitPA_NULL_KEYWORD(node); break;
    case VObjectType::paONESTEP: visit(node); visitPA_ONESTEP(node); break;
    case VObjectType::paONE_TICK_B0: visit(node); visitPA_ONE_TICK_B0(node); break;
    case VObjectType::paONE_TICK_B1: visit(node); visitPA_ONE_TICK_B1(node); break;
    case VObjectType::paONE_TICK_BX: visit(node); visitPA_ONE_TICK_BX(node); break;
    case VObjectType::paONE_TICK_Bx: visit(node); visitPA_ONE_TICK_Bx(node); break;
    case VObjectType::paONE_TICK_b0: visit(node); visitPA_ONE_TICK_b0(node); break;
    case VObjectType::paONE_TICK_b1: visit(node); visitPA_ONE_TICK_b1(node); break;
    case VObjectType::paONE_TICK_bX: visit(node); visitPA_ONE_TICK_bX(node); break;
    case VObjectType::paONE_TICK_bx: visit(node); visitPA_ONE_TICK_bx(node); break;
    case VObjectType::paOPEN_BRACKET: visit(node); visitPA_OPEN_BRACKET(node); break;
    case VObjectType::paOPEN_CURLY: visit(node); visitPA_OPEN_CURLY(node); break;
    case VObjectType::paOPEN_PARENS: visit(node); visitPA_OPEN_PARENS(node); break;
    case VObjectType::paOPEN_PARENS_STAR: visit(node); visitPA_OPEN_PARENS_STAR(node); break;
    case VObjectType::paOPTION_DOT: visit(node); visitPA_OPTION_DOT(node); break;
    case VObjectType::paOR: visit(node); visitPA_OR(node); break;
    case VObjectType::paOUTPUT: visit(node); visitPA_OUTPUT(node); break;
    case VObjectType::paOVERLAPPED: visit(node); visitPA_OVERLAPPED(node); break;
    case VObjectType::paOVERLAP_IMPLY: visit(node); visitPA_OVERLAP_IMPLY(node); break;
    case VObjectType::paOne_line_comment: visit(node); visitPA_One_line_comment(node); break;
    case VObjectType::paPACKAGE: visit(node); visitPA_PACKAGE(node); break;
    case VObjectType::paPACKED: visit(node); visitPA_PACKED(node); break;
    case VObjectType::paPARAMETER: visit(node); visitPA_PARAMETER(node); break;
    case VObjectType::paPATHPULSE: visit(node); visitPA_PATHPULSE(node); break;
    case VObjectType::paPERCENT: visit(node); visitPA_PERCENT(node); break;
    case VObjectType::paPLUS: visit(node); visitPA_PLUS(node); break;
    case VObjectType::paPLUSPLUS: visit(node); visitPA_PLUSPLUS(node); break;
    case VObjectType::paPMOS: visit(node); visitPA_PMOS(node); break;
    case VObjectType::paPOSEDGE: visit(node); visitPA_POSEDGE(node); break;
    case VObjectType::paPOUND: visit(node); visitPA_POUND(node); break;
    case VObjectType::paPOUNDPOUND: visit(node); visitPA_POUNDPOUND(node); break;
    case VObjectType::paPRIMITIVE: visit(node); visitPA_PRIMITIVE(node); break;
    case VObjectType::paPRIORITY: visit(node); visitPA_PRIORITY(node); break;
    case VObjectType::paPROGRAM: visit(node); visitPA_PROGRAM(node); break;
    case VObjectType::paPROPERTY: visit(node); visitPA_PROPERTY(node); break;
    case VObjectType::paPROTECTED: visit(node); visitPA_PROTECTED(node); break;
    case VObjectType::paPULL0: visit(node); visitPA_PULL0(node); break;
    case VObjectType::paPULL1: visit(node); visitPA_PULL1(node); break;
    case VObjectType::paPULLDOWN: visit(node); visitPA_PULLDOWN(node); break;
    case VObjectType::paPULLUP: visit(node); visitPA_PULLUP(node); break;
    case VObjectType::paPULSESTYLE_ONDETECT: visit(node); visitPA_PULSESTYLE_ONDETECT(node); break;
    case VObjectType::paPULSESTYLE_ONEVENT: visit(node); visitPA_PULSESTYLE_ONEVENT(node); break;
    case VObjectType::paPURE: visit(node); visitPA_PURE(node); break;
    case VObjectType::paPound_Pound_delay: visit(node); visitPA_Pound_Pound_delay(node); break;
    case VObjectType::paPound_delay: visit(node); visitPA_Pound_delay(node); break;
    case VObjectType::paQMARK: visit(node); visitPA_QMARK(node); break;
    case VObjectType::paRAND: visit(node); visitPA_RAND(node); break;
    case VObjectType::paRANDC: visit(node); visitPA_RANDC(node); break;
    case VObjectType::paRANDCASE: visit(node); visitPA_RANDCASE(node); break;
    case VObjectType::paRANDOMIZE: visit(node); visitPA_RANDOMIZE(node); break;
    case VObjectType::paRANDSEQUENCE: visit(node); visitPA_RANDSEQUENCE(node); break;
    case VObjectType::paRCMOS: visit(node); visitPA_RCMOS(node); break;
    case VObjectType::paREAL: visit(node); visitPA_REAL(node); break;
    case VObjectType::paREALTIME: visit(node); visitPA_REALTIME(node); break;
    case VObjectType::paREDUCTION_NAND: visit(node); visitPA_REDUCTION_NAND(node); break;
    case VObjectType::paREDUCTION_NOR: visit(node); visitPA_REDUCTION_NOR(node); break;
    case VObjectType::paREDUCTION_XNOR1: visit(node); visitPA_REDUCTION_XNOR1(node); break;
    case VObjectType::paREDUCTION_XNOR2: visit(node); visitPA_REDUCTION_XNOR2(node); break;
    case VObjectType::paREF: visit(node); visitPA_REF(node); break;
    case VObjectType::paREG: visit(node); visitPA_REG(node); break;
    case VObjectType::paREJECT_ON: visit(node); visitPA_REJECT_ON(node); break;
    case VObjectType::paRELEASE: visit(node); visitPA_RELEASE(node); break;
    case VObjectType::paREPEAT: visit(node); visitPA_REPEAT(node); break;
    case VObjectType::paRESTRICT: visit(node); visitPA_RESTRICT(node); break;
    case VObjectType::paRETURN: visit(node); visitPA_RETURN(node); break;
    case VObjectType::paRNMOS: visit(node); visitPA_RNMOS(node); break;
    case VObjectType::paRPMOS: visit(node); visitPA_RPMOS(node); break;
    case VObjectType::paRTRAN: visit(node); visitPA_RTRAN(node); break;
    case VObjectType::paRTRANIF0: visit(node); visitPA_RTRANIF0(node); break;
    case VObjectType::paRTRANIF1: visit(node); visitPA_RTRANIF1(node); break;
    case VObjectType::paReal_number: visit(node); visitPA_Real_number(node); break;
    case VObjectType::paSAMPLE: visit(node); visitPA_SAMPLE(node); break;
    case VObjectType::paSCALARED: visit(node); visitPA_SCALARED(node); break;
    case VObjectType::paSEMICOLON: visit(node); visitPA_SEMICOLON(node); break;
    case VObjectType::paSEQUENCE: visit(node); visitPA_SEQUENCE(node); break;
    case VObjectType::paSHIFT_LEFT: visit(node); visitPA_SHIFT_LEFT(node); break;
    case VObjectType::paSHIFT_RIGHT: visit(node); visitPA_SHIFT_RIGHT(node); break;
    case VObjectType::paSHORTINT: visit(node); visitPA_SHORTINT(node); break;
    case VObjectType::paSHORTREAL: visit(node); visitPA_SHORTREAL(node); break;
    case VObjectType::paSHOWCANCELLED: visit(node); visitPA_SHOWCANCELLED(node); break;
    case VObjectType::paSIGNED: visit(node); visitPA_SIGNED(node); break;
    case VObjectType::paSMALL: visit(node); visitPA_SMALL(node); break;
    case VObjectType::paSOFT: visit(node); visitPA_SOFT(node); break;
    case VObjectType::paSOLVE: visit(node); visitPA_SOLVE(node); break;
    case VObjectType::paSPECIFY: visit(node); visitPA_SPECIFY(node); break;
    case VObjectType::paSPECPARAM: visit(node); visitPA_SPECPARAM(node); break;
    case VObjectType::paSTAR: visit(node); visitPA_STAR(node); break;
    case VObjectType::paSTARCOLONCOLONSTAR: visit(node); visitPA_STARCOLONCOLONSTAR(node); break;
    case VObjectType::paSTARSTAR: visit(node); visitPA_STARSTAR(node); break;
    case VObjectType::paSTAR_CLOSE_PARENS: visit(node); visitPA_STAR_CLOSE_PARENS(node); break;
    case VObjectType::paSTATIC: visit(node); visitPA_STATIC(node); break;
    case VObjectType::paSTRING: visit(node); visitPA_STRING(node); break;
    case VObjectType::paSTRONG: visit(node); visitPA_STRONG(node); break;
    case VObjectType::paSTRONG0: visit(node); visitPA_STRONG0(node); break;
    case VObjectType::paSTRONG1: visit(node); visitPA_STRONG1(node); break;
    case VObjectType::paSTRUCT: visit(node); visitPA_STRUCT(node); break;
    case VObjectType::paSUB_ASSIGN: visit(node); visitPA_SUB_ASSIGN(node); break;
    case VObjectType::paSUPER: visit(node); visitPA_SUPER(node); break;
    case VObjectType::paSUPPLY0: visit(node); visitPA_SUPPLY0(node); break;
    case VObjectType::paSUPPLY1: visit(node); visitPA_SUPPLY1(node); break;
    case VObjectType::paSURELOG_MACRO_NOT_DEFINED: visit(node); visitPA_SURELOG_MACRO_NOT_DEFINED(node); break;
    case VObjectType::paSYNC_ACCEPT_ON: visit(node); visitPA_SYNC_ACCEPT_ON(node); break;
    case VObjectType::paSYNC_REJECT_ON: visit(node); visitPA_SYNC_REJECT_ON(node); break;
    case VObjectType::paS_ALWAYS: visit(node); visitPA_S_ALWAYS(node); break;
    case VObjectType::paS_EVENTUALLY: visit(node); visitPA_S_EVENTUALLY(node); break;
    case VObjectType::paS_NEXTTIME: visit(node); visitPA_S_NEXTTIME(node); break;
    case VObjectType::paS_UNTIL: visit(node); visitPA_S_UNTIL(node); break;
    case VObjectType::paS_UNTIL_WITH: visit(node); visitPA_S_UNTIL_WITH(node); break;
    case VObjectType::paSimple_identifier: visit(node); visitPA_Simple_identifier(node); break;
    case VObjectType::paString: visit(node); visitPA_String(node); break;
    case VObjectType::paTABLE: visit(node); visitPA_TABLE(node); break;
    case VObjectType::paTAGGED: visit(node); visitPA_TAGGED(node); break;
    case VObjectType::paTASK: visit(node); visitPA_TASK(node); break;
    case VObjectType::paTHIS: visit(node); visitPA_THIS(node); break;
    case VObjectType::paTHROUGHOUT: visit(node); visitPA_THROUGHOUT(node); break;
    case VObjectType::paTICK: visit(node); visitPA_TICK(node); break;
    case VObjectType::paTICK_0: visit(node); visitPA_TICK_0(node); break;
    case VObjectType::paTICK_1: visit(node); visitPA_TICK_1(node); break;
    case VObjectType::paTICK_ACCELERATE: visit(node); visitPA_TICK_ACCELERATE(node); break;
    case VObjectType::paTICK_AUTOEXPAND_VECTORNETS: visit(node); visitPA_TICK_AUTOEXPAND_VECTORNETS(node); break;
    case VObjectType::paTICK_B0: visit(node); visitPA_TICK_B0(node); break;
    case VObjectType::paTICK_B1: visit(node); visitPA_TICK_B1(node); break;
    case VObjectType::paTICK_BEGIN_KEYWORDS: visit(node); visitPA_TICK_BEGIN_KEYWORDS(node); break;
    case VObjectType::paTICK_CELLDEFINE: visit(node); visitPA_TICK_CELLDEFINE(node); break;
    case VObjectType::paTICK_DEFAULT_DECAY_TIME: visit(node); visitPA_TICK_DEFAULT_DECAY_TIME(node); break;
    case VObjectType::paTICK_DEFAULT_NETTYPE: visit(node); visitPA_TICK_DEFAULT_NETTYPE(node); break;
    case VObjectType::paTICK_DEFAULT_TRIREG_STRENGTH: visit(node); visitPA_TICK_DEFAULT_TRIREG_STRENGTH(node); break;
    case VObjectType::paTICK_DELAY_MODE_DISTRIBUTED: visit(node); visitPA_TICK_DELAY_MODE_DISTRIBUTED(node); break;
    case VObjectType::paTICK_DELAY_MODE_PATH: visit(node); visitPA_TICK_DELAY_MODE_PATH(node); break;
    case VObjectType::paTICK_DELAY_MODE_UNIT: visit(node); visitPA_TICK_DELAY_MODE_UNIT(node); break;
    case VObjectType::paTICK_DELAY_MODE_ZERO: visit(node); visitPA_TICK_DELAY_MODE_ZERO(node); break;
    case VObjectType::paTICK_DISABLE_PORTFAULTS: visit(node); visitPA_TICK_DISABLE_PORTFAULTS(node); break;
    case VObjectType::paTICK_ENABLE_PORTFAULTS: visit(node); visitPA_TICK_ENABLE_PORTFAULTS(node); break;
    case VObjectType::paTICK_ENDCELLDEFINE: visit(node); visitPA_TICK_ENDCELLDEFINE(node); break;
    case VObjectType::paTICK_ENDPROTECT: visit(node); visitPA_TICK_ENDPROTECT(node); break;
    case VObjectType::paTICK_ENDPROTECTED: visit(node); visitPA_TICK_ENDPROTECTED(node); break;
    case VObjectType::paTICK_END_KEYWORDS: visit(node); visitPA_TICK_END_KEYWORDS(node); break;
    case VObjectType::paTICK_EXPAND_VECTORNETS: visit(node); visitPA_TICK_EXPAND_VECTORNETS(node); break;
    case VObjectType::paTICK_LINE: visit(node); visitPA_TICK_LINE(node); break;
    case VObjectType::paTICK_NOACCELERATE: visit(node); visitPA_TICK_NOACCELERATE(node); break;
    case VObjectType::paTICK_NOEXPAND_VECTORNETS: visit(node); visitPA_TICK_NOEXPAND_VECTORNETS(node); break;
    case VObjectType::paTICK_NOREMOVE_GATENAMES: visit(node); visitPA_TICK_NOREMOVE_GATENAMES(node); break;
    case VObjectType::paTICK_NOREMOVE_NETNAMES: visit(node); visitPA_TICK_NOREMOVE_NETNAMES(node); break;
    case VObjectType::paTICK_NOSUPPRESS_FAULTS: visit(node); visitPA_TICK_NOSUPPRESS_FAULTS(node); break;
    case VObjectType::paTICK_NOUNCONNECTED_DRIVE: visit(node); visitPA_TICK_NOUNCONNECTED_DRIVE(node); break;
    case VObjectType::paTICK_PRAGMA: visit(node); visitPA_TICK_PRAGMA(node); break;
    case VObjectType::paTICK_PROTECT: visit(node); visitPA_TICK_PROTECT(node); break;
    case VObjectType::paTICK_PROTECTED: visit(node); visitPA_TICK_PROTECTED(node); break;
    case VObjectType::paTICK_REMOVE_GATENAME: visit(node); visitPA_TICK_REMOVE_GATENAME(node); break;
    case VObjectType::paTICK_REMOVE_NETNAME: visit(node); visitPA_TICK_REMOVE_NETNAME(node); break;
    case VObjectType::paTICK_SIGNED: visit(node); visitPA_TICK_SIGNED(node); break;
    case VObjectType::paTICK_SUPPRESS_FAULTS: visit(node); visitPA_TICK_SUPPRESS_FAULTS(node); break;
    case VObjectType::paTICK_TIMESCALE: visit(node); visitPA_TICK_TIMESCALE(node); break;
    case VObjectType::paTICK_UNCONNECTED_DRIVE: visit(node); visitPA_TICK_UNCONNECTED_DRIVE(node); break;
    case VObjectType::paTICK_UNSIGNED: visit(node); visitPA_TICK_UNSIGNED(node); break;
    case VObjectType::paTICK_USELIB: visit(node); visitPA_TICK_USELIB(node); break;
    case VObjectType::paTICK_b0: visit(node); visitPA_TICK_b0(node); break;
    case VObjectType::paTICK_b1: visit(node); visitPA_TICK_b1(node); break;
    case VObjectType::paTILDA: visit(node); visitPA_TILDA(node); break;
    case VObjectType::paTIME: visit(node); visitPA_TIME(node); break;
    case VObjectType::paTIMEPRECISION: visit(node); visitPA_TIMEPRECISION(node); break;
    case VObjectType::paTIMEUNIT: visit(node); visitPA_TIMEUNIT(node); break;
    case VObjectType::paTRAN: visit(node); visitPA_TRAN(node); break;
    case VObjectType::paTRANIF0: visit(node); visitPA_TRANIF0(node); break;
    case VObjectType::paTRANIF1: visit(node); visitPA_TRANIF1(node); break;
    case VObjectType::paTRANSITION_OP: visit(node); visitPA_TRANSITION_OP(node); break;
    case VObjectType::paTRI: visit(node); visitPA_TRI(node); break;
    case VObjectType::paTRI0: visit(node); visitPA_TRI0(node); break;
    case VObjectType::paTRI1: visit(node); visitPA_TRI1(node); break;
    case VObjectType::paTRIAND: visit(node); visitPA_TRIAND(node); break;
    case VObjectType::paTRIOR: visit(node); visitPA_TRIOR(node); break;
    case VObjectType::paTRIREG: visit(node); visitPA_TRIREG(node); break;
    case VObjectType::paTYPE: visit(node); visitPA_TYPE(node); break;
    case VObjectType::paTYPEDEF: visit(node); visitPA_TYPEDEF(node); break;
    case VObjectType::paTYPE_OPTION_DOT: visit(node); visitPA_TYPE_OPTION_DOT(node); break;
    case VObjectType::paUNION: visit(node); visitPA_UNION(node); break;
    case VObjectType::paUNIQUE: visit(node); visitPA_UNIQUE(node); break;
    case VObjectType::paUNIQUE0: visit(node); visitPA_UNIQUE0(node); break;
    case VObjectType::paUNSIGNED: visit(node); visitPA_UNSIGNED(node); break;
    case VObjectType::paUNTIL: visit(node); visitPA_UNTIL(node); break;
    case VObjectType::paUNTIL_WITH: visit(node); visitPA_UNTIL_WITH(node); break;
    case VObjectType::paUNTYPED: visit(node); visitPA_UNTYPED(node); break;
    case VObjectType::paUSE: visit(node); visitPA_USE(node); break;
    case VObjectType::paUWIRE: visit(node); visitPA_UWIRE(node); break;
    case VObjectType::paVAR: visit(node); visitPA_VAR(node); break;
    case VObjectType::paVECTORED: visit(node); visitPA_VECTORED(node); break;
    case VObjectType::paVIRTUAL: visit(node); visitPA_VIRTUAL(node); break;
    case VObjectType::paVOID: visit(node); visitPA_VOID(node); break;
    case VObjectType::paWAIT: visit(node); visitPA_WAIT(node); break;
    case VObjectType::paWAIT_ORDER: visit(node); visitPA_WAIT_ORDER(node); break;
    case VObjectType::paWAND: visit(node); visitPA_WAND(node); break;
    case VObjectType::paWEAK: visit(node); visitPA_WEAK(node); break;
    case VObjectType::paWEAK0: visit(node); visitPA_WEAK0(node); break;
    case VObjectType::paWEAK1: visit(node); visitPA_WEAK1(node); break;
    case VObjectType::paWHILE: visit(node); visitPA_WHILE(node); break;
    case VObjectType::paWILDCARD: visit(node); visitPA_WILDCARD(node); break;
    case VObjectType::paWILD_EQUAL_OP: visit(node); visitPA_WILD_EQUAL_OP(node); break;
    case VObjectType::paWILD_NOTEQUAL_OP: visit(node); visitPA_WILD_NOTEQUAL_OP(node); break;
    case VObjectType::paWIRE: visit(node); visitPA_WIRE(node); break;
    case VObjectType::paWITH: visit(node); visitPA_WITH(node); break;
    case VObjectType::paWITHIN: visit(node); visitPA_WITHIN(node); break;
    case VObjectType::paWOR: visit(node); visitPA_WOR(node); break;
    case VObjectType::paWhite_space: visit(node); visitPA_White_space(node); break;
    case VObjectType::paXNOR: visit(node); visitPA_XNOR(node); break;
    case VObjectType::paXOR: visit(node); visitPA_XOR(node); break;
    default: break;
  };
  // clang-format on

  m_callstack.pop_back();
}
}  // namespace SURELOG
