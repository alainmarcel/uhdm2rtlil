
// Generated from SV3_1aPpParser.g4 by ANTLR 4.13.2


#include "SV3_1aPpParserListener.h"

#include "SV3_1aPpParser.h"


using namespace antlrcpp;
using namespace SURELOG;

using namespace antlr4;

namespace {

struct SV3_1aPpParserStaticData final {
  SV3_1aPpParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SV3_1aPpParserStaticData(const SV3_1aPpParserStaticData&) = delete;
  SV3_1aPpParserStaticData(SV3_1aPpParserStaticData&&) = delete;
  SV3_1aPpParserStaticData& operator=(const SV3_1aPpParserStaticData&) = delete;
  SV3_1aPpParserStaticData& operator=(SV3_1aPpParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sv3_1appparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<SV3_1aPpParserStaticData> sv3_1appparserParserStaticData = nullptr;

void sv3_1appparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (sv3_1appparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(sv3_1appparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<SV3_1aPpParserStaticData>(
    std::vector<std::string>{
      "top_level_rule", "source_text", "null_rule", "description", "escaped_identifier", 
      "macro_instance", "unterminated_string", "macro_actual_args", "comment", 
      "integral_number", "pound_delay", "pound_pound_delay", "macro_definition", 
      "include_directive", "line_directive", "default_nettype_directive", 
      "sv_file_directive", "sv_line_directive", "timescale_directive", "undef_directive", 
      "ifdef_directive", "ifdef_directive_in_macro_body", "ifndef_directive", 
      "ifndef_directive_in_macro_body", "elsif_directive", "elsif_directive_in_macro_body", 
      "elseif_directive", "elseif_directive_in_macro_body", "else_directive", 
      "endif_directive", "resetall_directive", "begin_keywords_directive", 
      "end_keywords_directive", "pragma_directive", "celldefine_directive", 
      "endcelldefine_directive", "protect_directive", "endprotect_directive", 
      "protected_directive", "endprotected_directive", "expand_vectornets_directive", 
      "noexpand_vectornets_directive", "autoexpand_vectornets_directive", 
      "uselib_directive", "disable_portfaults_directive", "enable_portfaults_directive", 
      "nosuppress_faults_directive", "suppress_faults_directive", "signed_directive", 
      "unsigned_directive", "remove_gatename_directive", "noremove_gatenames_directive", 
      "remove_netname_directive", "noremove_netnames_directive", "accelerate_directive", 
      "noaccelerate_directive", "default_trireg_strength_directive", "default_decay_time_directive", 
      "unconnected_drive_directive", "nounconnected_drive_directive", "delay_mode_distributed_directive", 
      "delay_mode_path_directive", "delay_mode_unit_directive", "delay_mode_zero_directive", 
      "undefineall_directive", "module", "endmodule", "sv_interface", "endinterface", 
      "program", "endprogram", "primitive", "endprimitive", "sv_package", 
      "endpackage", "checker", "endchecker", "config", "endconfig", "define_directive", 
      "multiline_no_args_macro_definition", "multiline_args_macro_definition", 
      "simple_no_args_macro_definition", "simple_args_macro_definition", 
      "identifier_in_macro_body", "simple_no_args_macro_definition_in_macro_body", 
      "simple_args_macro_definition_in_macro_body", "directive_in_macro", 
      "macro_arguments", "escaped_macro_definition_body", "escaped_macro_definition_body_alt1", 
      "escaped_macro_definition_body_alt2", "simple_macro_definition_body", 
      "simple_macro_definition_body_in_macro_body", "pragma_expression", 
      "macro_arg", "paired_parens", "text_blob", "string", "default_value", 
      "string_blob"
    },
    std::vector<std::string>{
      "", "", "", "", "", "'`define'", "'`celldefine'", "'`endcelldefine'", 
      "'`default_nettype'", "'`undef'", "'`ifdef'", "'`ifndef'", "'`else'", 
      "'`elsif'", "'`elseif'", "'`endif'", "'`include'", "'`pragma'", "'`begin_keywords'", 
      "'`end_keywords'", "'`resetall'", "'`timescale'", "'`unconnected_drive'", 
      "'`nounconnected_drive'", "'`line'", "'`default_decay_time'", "'`default_trireg_strength'", 
      "'`delay_mode_distributed'", "'`delay_mode_path'", "'`delay_mode_unit'", 
      "'`delay_mode_zero'", "'`undefineall'", "'`accelerate'", "'`noaccelerate'", 
      "'`protect'", "'`uselib'", "'`disable_portfaults'", "'`enable_portfaults'", 
      "'`nosuppress_faults'", "'`suppress_faults'", "'`signed'", "'`unsigned'", 
      "'`endprotect'", "'`protected'", "'`endprotected'", "'`expand_vectornets'", 
      "'`noexpand_vectornets'", "'`autoexpand_vectornets'", "'`remove_gatename'", 
      "'`noremove_gatenames'", "'`remove_netname'", "'`noremove_netnames'", 
      "'`__FILE__'", "'`__LINE__'", "'module'", "'endmodule'", "'interface'", 
      "'endinterface'", "'program'", "'endprogram'", "'primivite'", "'endprimitive'", 
      "'package'", "'endpackage'", "'checker'", "'endchecker'", "'config'", 
      "'endconfig'", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "'`\"'", "'`\\`\"'", "'``'", "','", "'='", "'\"'", "'('", "')'", "'{'", 
      "'}'", "'['", "']'"
    },
    std::vector<std::string>{
      "", "ESCAPED_IDENTIFIER", "One_line_comment", "Block_comment", "TICK_VARIABLE", 
      "TICK_DEFINE", "TICK_CELLDEFINE", "TICK_ENDCELLDEFINE", "TICK_DEFAULT_NETTYPE", 
      "TICK_UNDEF", "TICK_IFDEF", "TICK_IFNDEF", "TICK_ELSE", "TICK_ELSIF", 
      "TICK_ELSEIF", "TICK_ENDIF", "TICK_INCLUDE", "TICK_PRAGMA", "TICK_BEGIN_KEYWORDS", 
      "TICK_END_KEYWORDS", "TICK_RESETALL", "TICK_TIMESCALE", "TICK_UNCONNECTED_DRIVE", 
      "TICK_NOUNCONNECTED_DRIVE", "TICK_LINE", "TICK_DEFAULT_DECAY_TIME", 
      "TICK_DEFAULT_TRIREG_STRENGTH", "TICK_DELAY_MODE_DISTRIBUTED", "TICK_DELAY_MODE_PATH", 
      "TICK_DELAY_MODE_UNIT", "TICK_DELAY_MODE_ZERO", "TICK_UNDEFINEALL", 
      "TICK_ACCELERATE", "TICK_NOACCELERATE", "TICK_PROTECT", "TICK_USELIB", 
      "TICK_DISABLE_PORTFAULTS", "TICK_ENABLE_PORTFAULTS", "TICK_NOSUPPRESS_FAULTS", 
      "TICK_SUPPRESS_FAULTS", "TICK_SIGNED", "TICK_UNSIGNED", "TICK_ENDPROTECT", 
      "TICK_PROTECTED", "TICK_ENDPROTECTED", "TICK_EXPAND_VECTORNETS", "TICK_NOEXPAND_VECTORNETS", 
      "TICK_AUTOEXPAND_VECTORNETS", "TICK_REMOVE_GATENAME", "TICK_NOREMOVE_GATENAMES", 
      "TICK_REMOVE_NETNAME", "TICK_NOREMOVE_NETNAMES", "TICK_FILE__", "TICK_LINE__", 
      "MODULE", "ENDMODULE", "INTERFACE", "ENDINTERFACE", "PROGRAM", "ENDPROGRAM", 
      "PRIMITIVE", "ENDPRIMITIVE", "PACKAGE", "ENDPACKAGE", "CHECKER", "ENDCHECKER", 
      "CONFIG", "ENDCONFIG", "Macro_identifier", "Macro_Escaped_identifier", 
      "STRING", "Simple_identifier", "Spaces", "Pound_Pound_delay", "POUND_DELAY", 
      "TIMESCALE", "INTEGRAL_NUMBER", "Fixed_point_number", "TEXT_CR", "ESCAPED_CR", 
      "CR", "TICK_QUOTE", "TICK_BACKSLASH_TICK_QUOTE", "TICK_TICK", "COMMA", 
      "ASSIGN_OP", "DOUBLE_QUOTE", "OPEN_PARENS", "CLOSE_PARENS", "OPEN_CURLY", 
      "CLOSE_CURLY", "OPEN_BRACKET", "CLOSE_BRACKET", "Special", "ANY"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,94,1207,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
  	84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
  	91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
  	98,2,99,7,99,2,100,7,100,1,0,1,0,1,0,1,0,1,1,5,1,208,8,1,10,1,12,1,211,
  	9,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,3,3,285,8,3,1,4,1,4,1,5,1,5,5,5,291,8,5,10,5,12,5,294,9,5,
  	1,5,1,5,1,5,1,5,1,5,3,5,301,8,5,1,6,1,6,5,6,305,8,6,10,6,12,6,308,9,6,
  	1,6,1,6,1,7,5,7,313,8,7,10,7,12,7,316,9,7,1,7,1,7,5,7,320,8,7,10,7,12,
  	7,323,9,7,5,7,325,8,7,10,7,12,7,328,9,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,12,3,12,343,8,12,1,13,1,13,1,13,1,13,1,13,
  	1,13,3,13,351,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,
  	376,8,19,1,20,1,20,1,20,1,20,1,20,3,20,383,8,20,1,21,1,21,1,21,1,21,1,
  	21,3,21,390,8,21,1,22,1,22,1,22,1,22,1,22,3,22,397,8,22,1,23,1,23,1,23,
  	1,23,1,23,3,23,404,8,23,1,24,1,24,1,24,1,24,1,24,3,24,411,8,24,1,25,1,
  	25,1,25,1,25,1,25,3,25,418,8,25,1,26,1,26,1,26,1,26,1,26,3,26,425,8,26,
  	1,27,1,27,1,27,1,27,1,27,3,27,432,8,27,1,28,1,28,1,29,1,29,5,29,438,8,
  	29,10,29,12,29,441,9,29,1,29,1,29,3,29,445,8,29,1,30,1,30,1,31,1,31,1,
  	31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,461,8,33,10,33,12,
  	33,464,9,33,5,33,466,8,33,10,33,12,33,469,9,33,1,34,1,34,5,34,473,8,34,
  	10,34,12,34,476,9,34,1,34,1,34,1,35,1,35,5,35,482,8,35,10,35,12,35,485,
  	9,35,1,35,1,35,1,36,1,36,5,36,491,8,36,10,36,12,36,494,9,36,1,36,1,36,
  	1,37,1,37,5,37,500,8,37,10,37,12,37,503,9,37,1,37,1,37,1,38,1,38,1,39,
  	1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,4,43,519,8,43,11,43,12,43,
  	520,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
  	1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,
  	1,56,1,57,1,57,1,57,1,57,1,57,3,57,556,8,57,1,58,1,58,1,58,1,58,1,59,
  	1,59,5,59,564,8,59,10,59,12,59,567,9,59,1,59,1,59,1,60,1,60,1,61,1,61,
  	1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,
  	1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,
  	1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,79,5,79,613,8,79,10,79,
  	12,79,616,9,79,1,79,1,79,1,80,1,80,1,80,1,80,5,80,624,8,80,10,80,12,80,
  	627,9,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,5,81,636,8,81,10,81,12,81,
  	639,9,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
  	1,82,5,82,654,8,82,10,82,12,82,657,9,82,1,82,3,82,660,8,82,1,83,1,83,
  	1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,5,83,675,8,83,
  	10,83,12,83,678,9,83,1,83,1,83,3,83,682,8,83,1,84,1,84,3,84,686,8,84,
  	5,84,688,8,84,10,84,12,84,691,9,84,1,85,1,85,1,85,1,85,3,85,697,8,85,
  	1,85,1,85,1,85,1,85,1,85,1,85,3,85,705,8,85,1,85,5,85,708,8,85,10,85,
  	12,85,711,9,85,1,85,1,85,1,85,1,85,3,85,717,8,85,1,85,1,85,3,85,721,8,
  	85,1,86,1,86,1,86,1,86,3,86,727,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
  	86,1,86,3,86,737,8,86,1,86,3,86,740,8,86,1,87,1,87,1,87,1,87,1,87,1,87,
  	1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
  	1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
  	1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
  	1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
  	1,87,3,87,805,8,87,1,88,1,88,5,88,809,8,88,10,88,12,88,812,9,88,1,88,
  	1,88,5,88,816,8,88,10,88,12,88,819,9,88,1,88,1,88,5,88,823,8,88,10,88,
  	12,88,826,9,88,5,88,828,8,88,10,88,12,88,831,9,88,1,88,1,88,5,88,835,
  	8,88,10,88,12,88,838,9,88,1,88,1,88,5,88,842,8,88,10,88,12,88,845,9,88,
  	1,88,1,88,5,88,849,8,88,10,88,12,88,852,9,88,5,88,854,8,88,10,88,12,88,
  	857,9,88,5,88,859,8,88,10,88,12,88,862,9,88,5,88,864,8,88,10,88,12,88,
  	867,9,88,1,88,1,88,1,89,1,89,3,89,873,8,89,1,90,1,90,1,90,1,90,1,90,1,
  	90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
  	90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,5,90,904,8,90,10,90,12,
  	90,907,9,90,1,90,1,90,5,90,911,8,90,10,90,12,90,914,9,90,1,90,1,90,1,
  	91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,
  	91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,
  	91,5,91,947,8,91,10,91,12,91,950,9,91,1,91,1,91,5,91,954,8,91,10,91,12,
  	91,957,9,91,1,91,3,91,960,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
  	1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
  	1,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,991,8,92,10,92,12,92,994,9,92,
  	1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,5,93,
  	1023,8,93,10,93,12,93,1026,9,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
  	94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1047,8,
  	94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
  	95,1,95,1,95,1,95,1,95,1,95,3,95,1068,8,95,1,96,1,96,1,96,1,96,1,96,1,
  	96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1087,8,
  	96,10,96,12,96,1090,9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1109,8,96,10,96,12,96,1112,
  	9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,1,96,1,96,1,96,5,96,1131,8,96,10,96,12,96,1134,9,96,1,96,3,96,1137,
  	8,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
  	1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1164,
  	8,97,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
  	1,99,1,99,1,99,3,99,1182,8,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,1,100,3,100,1205,8,100,1,100,4,905,948,992,1024,0,101,0,2,4,6,8,
  	10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
  	56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
  	102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
  	138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
  	174,176,178,180,182,184,186,188,190,192,194,196,198,200,0,5,1,0,68,69,
  	1,0,2,3,2,0,1,1,71,71,2,0,2,2,80,80,1,1,80,80,1567,0,202,1,0,0,0,2,209,
  	1,0,0,0,4,212,1,0,0,0,6,284,1,0,0,0,8,286,1,0,0,0,10,300,1,0,0,0,12,302,
  	1,0,0,0,14,314,1,0,0,0,16,329,1,0,0,0,18,331,1,0,0,0,20,333,1,0,0,0,22,
  	335,1,0,0,0,24,342,1,0,0,0,26,344,1,0,0,0,28,352,1,0,0,0,30,359,1,0,0,
  	0,32,363,1,0,0,0,34,365,1,0,0,0,36,367,1,0,0,0,38,370,1,0,0,0,40,377,
  	1,0,0,0,42,384,1,0,0,0,44,391,1,0,0,0,46,398,1,0,0,0,48,405,1,0,0,0,50,
  	412,1,0,0,0,52,419,1,0,0,0,54,426,1,0,0,0,56,433,1,0,0,0,58,444,1,0,0,
  	0,60,446,1,0,0,0,62,448,1,0,0,0,64,452,1,0,0,0,66,454,1,0,0,0,68,470,
  	1,0,0,0,70,479,1,0,0,0,72,488,1,0,0,0,74,497,1,0,0,0,76,506,1,0,0,0,78,
  	508,1,0,0,0,80,510,1,0,0,0,82,512,1,0,0,0,84,514,1,0,0,0,86,516,1,0,0,
  	0,88,522,1,0,0,0,90,524,1,0,0,0,92,526,1,0,0,0,94,528,1,0,0,0,96,530,
  	1,0,0,0,98,532,1,0,0,0,100,534,1,0,0,0,102,536,1,0,0,0,104,538,1,0,0,
  	0,106,540,1,0,0,0,108,542,1,0,0,0,110,544,1,0,0,0,112,546,1,0,0,0,114,
  	550,1,0,0,0,116,557,1,0,0,0,118,561,1,0,0,0,120,570,1,0,0,0,122,572,1,
  	0,0,0,124,574,1,0,0,0,126,576,1,0,0,0,128,578,1,0,0,0,130,580,1,0,0,0,
  	132,582,1,0,0,0,134,584,1,0,0,0,136,586,1,0,0,0,138,588,1,0,0,0,140,590,
  	1,0,0,0,142,592,1,0,0,0,144,594,1,0,0,0,146,596,1,0,0,0,148,598,1,0,0,
  	0,150,600,1,0,0,0,152,602,1,0,0,0,154,604,1,0,0,0,156,606,1,0,0,0,158,
  	608,1,0,0,0,160,619,1,0,0,0,162,630,1,0,0,0,164,659,1,0,0,0,166,681,1,
  	0,0,0,168,689,1,0,0,0,170,720,1,0,0,0,172,739,1,0,0,0,174,804,1,0,0,0,
  	176,806,1,0,0,0,178,872,1,0,0,0,180,905,1,0,0,0,182,948,1,0,0,0,184,992,
  	1,0,0,0,186,1024,1,0,0,0,188,1046,1,0,0,0,190,1067,1,0,0,0,192,1136,1,
  	0,0,0,194,1163,1,0,0,0,196,1165,1,0,0,0,198,1181,1,0,0,0,200,1204,1,0,
  	0,0,202,203,3,4,2,0,203,204,3,2,1,0,204,205,5,0,0,1,205,1,1,0,0,0,206,
  	208,3,6,3,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,
  	0,0,0,210,3,1,0,0,0,211,209,1,0,0,0,212,213,1,0,0,0,213,5,1,0,0,0,214,
  	285,3,8,4,0,215,285,3,12,6,0,216,285,3,196,98,0,217,285,3,18,9,0,218,
  	285,3,24,12,0,219,285,3,16,8,0,220,285,3,68,34,0,221,285,3,70,35,0,222,
  	285,3,30,15,0,223,285,3,38,19,0,224,285,3,40,20,0,225,285,3,44,22,0,226,
  	285,3,56,28,0,227,285,3,48,24,0,228,285,3,52,26,0,229,285,3,58,29,0,230,
  	285,3,26,13,0,231,285,3,60,30,0,232,285,3,62,31,0,233,285,3,64,32,0,234,
  	285,3,36,18,0,235,285,3,116,58,0,236,285,3,118,59,0,237,285,3,28,14,0,
  	238,285,3,114,57,0,239,285,3,112,56,0,240,285,3,120,60,0,241,285,3,122,
  	61,0,242,285,3,124,62,0,243,285,3,126,63,0,244,285,3,72,36,0,245,285,
  	3,74,37,0,246,285,3,76,38,0,247,285,3,78,39,0,248,285,3,80,40,0,249,285,
  	3,82,41,0,250,285,3,84,42,0,251,285,3,100,50,0,252,285,3,102,51,0,253,
  	285,3,104,52,0,254,285,3,106,53,0,255,285,3,108,54,0,256,285,3,110,55,
  	0,257,285,3,128,64,0,258,285,3,86,43,0,259,285,3,88,44,0,260,285,3,90,
  	45,0,261,285,3,92,46,0,262,285,3,94,47,0,263,285,3,96,48,0,264,285,3,
  	98,49,0,265,285,3,66,33,0,266,285,3,32,16,0,267,285,3,34,17,0,268,285,
  	3,10,5,0,269,285,3,130,65,0,270,285,3,132,66,0,271,285,3,134,67,0,272,
  	285,3,136,68,0,273,285,3,138,69,0,274,285,3,140,70,0,275,285,3,142,71,
  	0,276,285,3,144,72,0,277,285,3,146,73,0,278,285,3,148,74,0,279,285,3,
  	150,75,0,280,285,3,152,76,0,281,285,3,154,77,0,282,285,3,156,78,0,283,
  	285,3,194,97,0,284,214,1,0,0,0,284,215,1,0,0,0,284,216,1,0,0,0,284,217,
  	1,0,0,0,284,218,1,0,0,0,284,219,1,0,0,0,284,220,1,0,0,0,284,221,1,0,0,
  	0,284,222,1,0,0,0,284,223,1,0,0,0,284,224,1,0,0,0,284,225,1,0,0,0,284,
  	226,1,0,0,0,284,227,1,0,0,0,284,228,1,0,0,0,284,229,1,0,0,0,284,230,1,
  	0,0,0,284,231,1,0,0,0,284,232,1,0,0,0,284,233,1,0,0,0,284,234,1,0,0,0,
  	284,235,1,0,0,0,284,236,1,0,0,0,284,237,1,0,0,0,284,238,1,0,0,0,284,239,
  	1,0,0,0,284,240,1,0,0,0,284,241,1,0,0,0,284,242,1,0,0,0,284,243,1,0,0,
  	0,284,244,1,0,0,0,284,245,1,0,0,0,284,246,1,0,0,0,284,247,1,0,0,0,284,
  	248,1,0,0,0,284,249,1,0,0,0,284,250,1,0,0,0,284,251,1,0,0,0,284,252,1,
  	0,0,0,284,253,1,0,0,0,284,254,1,0,0,0,284,255,1,0,0,0,284,256,1,0,0,0,
  	284,257,1,0,0,0,284,258,1,0,0,0,284,259,1,0,0,0,284,260,1,0,0,0,284,261,
  	1,0,0,0,284,262,1,0,0,0,284,263,1,0,0,0,284,264,1,0,0,0,284,265,1,0,0,
  	0,284,266,1,0,0,0,284,267,1,0,0,0,284,268,1,0,0,0,284,269,1,0,0,0,284,
  	270,1,0,0,0,284,271,1,0,0,0,284,272,1,0,0,0,284,273,1,0,0,0,284,274,1,
  	0,0,0,284,275,1,0,0,0,284,276,1,0,0,0,284,277,1,0,0,0,284,278,1,0,0,0,
  	284,279,1,0,0,0,284,280,1,0,0,0,284,281,1,0,0,0,284,282,1,0,0,0,284,283,
  	1,0,0,0,285,7,1,0,0,0,286,287,5,1,0,0,287,9,1,0,0,0,288,292,7,0,0,0,289,
  	291,5,72,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,
  	1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,296,5,87,0,0,296,297,3,14,
  	7,0,297,298,5,88,0,0,298,301,1,0,0,0,299,301,7,0,0,0,300,288,1,0,0,0,
  	300,299,1,0,0,0,301,11,1,0,0,0,302,306,5,86,0,0,303,305,3,200,100,0,304,
  	303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,309,1,
  	0,0,0,308,306,1,0,0,0,309,310,5,80,0,0,310,13,1,0,0,0,311,313,3,190,95,
  	0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,
  	326,1,0,0,0,316,314,1,0,0,0,317,321,5,84,0,0,318,320,3,190,95,0,319,318,
  	1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,325,1,0,0,
  	0,323,321,1,0,0,0,324,317,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,
  	327,1,0,0,0,327,15,1,0,0,0,328,326,1,0,0,0,329,330,7,1,0,0,330,17,1,0,
  	0,0,331,332,5,76,0,0,332,19,1,0,0,0,333,334,5,74,0,0,334,21,1,0,0,0,335,
  	336,5,73,0,0,336,23,1,0,0,0,337,343,3,158,79,0,338,343,3,166,83,0,339,
  	343,3,162,81,0,340,343,3,164,82,0,341,343,3,160,80,0,342,337,1,0,0,0,
  	342,338,1,0,0,0,342,339,1,0,0,0,342,340,1,0,0,0,342,341,1,0,0,0,343,25,
  	1,0,0,0,344,345,5,16,0,0,345,350,5,72,0,0,346,351,5,70,0,0,347,351,5,
  	71,0,0,348,351,5,1,0,0,349,351,3,10,5,0,350,346,1,0,0,0,350,347,1,0,0,
  	0,350,348,1,0,0,0,350,349,1,0,0,0,351,27,1,0,0,0,352,353,5,24,0,0,353,
  	354,5,72,0,0,354,355,3,18,9,0,355,356,5,70,0,0,356,357,5,72,0,0,357,358,
  	3,18,9,0,358,29,1,0,0,0,359,360,5,8,0,0,360,361,5,72,0,0,361,362,5,71,
  	0,0,362,31,1,0,0,0,363,364,5,52,0,0,364,33,1,0,0,0,365,366,5,53,0,0,366,
  	35,1,0,0,0,367,368,5,21,0,0,368,369,5,75,0,0,369,37,1,0,0,0,370,371,5,
  	9,0,0,371,375,5,72,0,0,372,376,5,71,0,0,373,376,5,1,0,0,374,376,3,10,
  	5,0,375,372,1,0,0,0,375,373,1,0,0,0,375,374,1,0,0,0,376,39,1,0,0,0,377,
  	378,5,10,0,0,378,382,5,72,0,0,379,383,5,71,0,0,380,383,5,1,0,0,381,383,
  	3,10,5,0,382,379,1,0,0,0,382,380,1,0,0,0,382,381,1,0,0,0,383,41,1,0,0,
  	0,384,385,5,10,0,0,385,389,5,72,0,0,386,390,3,168,84,0,387,390,5,1,0,
  	0,388,390,3,10,5,0,389,386,1,0,0,0,389,387,1,0,0,0,389,388,1,0,0,0,390,
  	43,1,0,0,0,391,392,5,11,0,0,392,396,5,72,0,0,393,397,5,71,0,0,394,397,
  	5,1,0,0,395,397,3,10,5,0,396,393,1,0,0,0,396,394,1,0,0,0,396,395,1,0,
  	0,0,397,45,1,0,0,0,398,399,5,11,0,0,399,403,5,72,0,0,400,404,3,168,84,
  	0,401,404,5,1,0,0,402,404,3,10,5,0,403,400,1,0,0,0,403,401,1,0,0,0,403,
  	402,1,0,0,0,404,47,1,0,0,0,405,406,5,13,0,0,406,410,5,72,0,0,407,411,
  	5,71,0,0,408,411,5,1,0,0,409,411,3,10,5,0,410,407,1,0,0,0,410,408,1,0,
  	0,0,410,409,1,0,0,0,411,49,1,0,0,0,412,413,5,13,0,0,413,417,5,72,0,0,
  	414,418,3,168,84,0,415,418,5,1,0,0,416,418,3,10,5,0,417,414,1,0,0,0,417,
  	415,1,0,0,0,417,416,1,0,0,0,418,51,1,0,0,0,419,420,5,14,0,0,420,424,5,
  	72,0,0,421,425,5,71,0,0,422,425,5,1,0,0,423,425,3,10,5,0,424,421,1,0,
  	0,0,424,422,1,0,0,0,424,423,1,0,0,0,425,53,1,0,0,0,426,427,5,14,0,0,427,
  	431,5,72,0,0,428,432,3,168,84,0,429,432,5,1,0,0,430,432,3,10,5,0,431,
  	428,1,0,0,0,431,429,1,0,0,0,431,430,1,0,0,0,432,55,1,0,0,0,433,434,5,
  	12,0,0,434,57,1,0,0,0,435,439,5,15,0,0,436,438,5,72,0,0,437,436,1,0,0,
  	0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,
  	439,1,0,0,0,442,445,5,2,0,0,443,445,5,15,0,0,444,435,1,0,0,0,444,443,
  	1,0,0,0,445,59,1,0,0,0,446,447,5,20,0,0,447,61,1,0,0,0,448,449,5,18,0,
  	0,449,450,5,72,0,0,450,451,5,70,0,0,451,63,1,0,0,0,452,453,5,19,0,0,453,
  	65,1,0,0,0,454,455,5,17,0,0,455,456,5,72,0,0,456,467,5,71,0,0,457,462,
  	3,188,94,0,458,459,5,93,0,0,459,461,3,188,94,0,460,458,1,0,0,0,461,464,
  	1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,
  	0,465,457,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,
  	67,1,0,0,0,469,467,1,0,0,0,470,474,5,6,0,0,471,473,5,72,0,0,472,471,1,
  	0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,
  	476,474,1,0,0,0,477,478,5,80,0,0,478,69,1,0,0,0,479,483,5,7,0,0,480,482,
  	5,72,0,0,481,480,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,
  	0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,487,5,80,0,0,487,71,1,0,0,0,488,
  	492,5,34,0,0,489,491,5,72,0,0,490,489,1,0,0,0,491,494,1,0,0,0,492,490,
  	1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,492,1,0,0,0,495,496,5,80,
  	0,0,496,73,1,0,0,0,497,501,5,42,0,0,498,500,5,72,0,0,499,498,1,0,0,0,
  	500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,
  	1,0,0,0,504,505,5,80,0,0,505,75,1,0,0,0,506,507,5,43,0,0,507,77,1,0,0,
  	0,508,509,5,44,0,0,509,79,1,0,0,0,510,511,5,45,0,0,511,81,1,0,0,0,512,
  	513,5,46,0,0,513,83,1,0,0,0,514,515,5,47,0,0,515,85,1,0,0,0,516,518,5,
  	35,0,0,517,519,3,194,97,0,518,517,1,0,0,0,519,520,1,0,0,0,520,518,1,0,
  	0,0,520,521,1,0,0,0,521,87,1,0,0,0,522,523,5,36,0,0,523,89,1,0,0,0,524,
  	525,5,37,0,0,525,91,1,0,0,0,526,527,5,38,0,0,527,93,1,0,0,0,528,529,5,
  	39,0,0,529,95,1,0,0,0,530,531,5,40,0,0,531,97,1,0,0,0,532,533,5,41,0,
  	0,533,99,1,0,0,0,534,535,5,48,0,0,535,101,1,0,0,0,536,537,5,49,0,0,537,
  	103,1,0,0,0,538,539,5,50,0,0,539,105,1,0,0,0,540,541,5,51,0,0,541,107,
  	1,0,0,0,542,543,5,32,0,0,543,109,1,0,0,0,544,545,5,33,0,0,545,111,1,0,
  	0,0,546,547,5,26,0,0,547,548,5,72,0,0,548,549,3,18,9,0,549,113,1,0,0,
  	0,550,551,5,25,0,0,551,555,5,72,0,0,552,556,3,18,9,0,553,556,5,71,0,0,
  	554,556,5,77,0,0,555,552,1,0,0,0,555,553,1,0,0,0,555,554,1,0,0,0,556,
  	115,1,0,0,0,557,558,5,22,0,0,558,559,5,72,0,0,559,560,5,71,0,0,560,117,
  	1,0,0,0,561,565,5,23,0,0,562,564,5,72,0,0,563,562,1,0,0,0,564,567,1,0,
  	0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,565,1,0,0,0,568,
  	569,5,80,0,0,569,119,1,0,0,0,570,571,5,27,0,0,571,121,1,0,0,0,572,573,
  	5,28,0,0,573,123,1,0,0,0,574,575,5,29,0,0,575,125,1,0,0,0,576,577,5,30,
  	0,0,577,127,1,0,0,0,578,579,5,31,0,0,579,129,1,0,0,0,580,581,5,54,0,0,
  	581,131,1,0,0,0,582,583,5,55,0,0,583,133,1,0,0,0,584,585,5,56,0,0,585,
  	135,1,0,0,0,586,587,5,57,0,0,587,137,1,0,0,0,588,589,5,58,0,0,589,139,
  	1,0,0,0,590,591,5,59,0,0,591,141,1,0,0,0,592,593,5,60,0,0,593,143,1,0,
  	0,0,594,595,5,61,0,0,595,145,1,0,0,0,596,597,5,62,0,0,597,147,1,0,0,0,
  	598,599,5,63,0,0,599,149,1,0,0,0,600,601,5,64,0,0,601,151,1,0,0,0,602,
  	603,5,65,0,0,603,153,1,0,0,0,604,605,5,66,0,0,605,155,1,0,0,0,606,607,
  	5,67,0,0,607,157,1,0,0,0,608,609,5,5,0,0,609,610,5,72,0,0,610,614,7,2,
  	0,0,611,613,5,72,0,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,
  	614,615,1,0,0,0,615,617,1,0,0,0,616,614,1,0,0,0,617,618,5,80,0,0,618,
  	159,1,0,0,0,619,620,5,5,0,0,620,621,5,72,0,0,621,625,7,2,0,0,622,624,
  	5,72,0,0,623,622,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,
  	0,0,626,628,1,0,0,0,627,625,1,0,0,0,628,629,3,178,89,0,629,161,1,0,0,
  	0,630,631,5,5,0,0,631,632,5,72,0,0,632,633,7,2,0,0,633,637,3,176,88,0,
  	634,636,5,72,0,0,635,634,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,
  	638,1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,640,641,3,178,89,0,641,163,
  	1,0,0,0,642,643,5,5,0,0,643,644,5,72,0,0,644,645,7,2,0,0,645,646,5,72,
  	0,0,646,647,3,184,92,0,647,648,7,3,0,0,648,660,1,0,0,0,649,650,5,5,0,
  	0,650,651,5,72,0,0,651,655,7,2,0,0,652,654,5,72,0,0,653,652,1,0,0,0,654,
  	657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,655,1,
  	0,0,0,658,660,5,80,0,0,659,642,1,0,0,0,659,649,1,0,0,0,660,165,1,0,0,
  	0,661,662,5,5,0,0,662,663,5,72,0,0,663,664,7,2,0,0,664,665,3,176,88,0,
  	665,666,5,72,0,0,666,667,3,184,92,0,667,668,7,3,0,0,668,682,1,0,0,0,669,
  	670,5,5,0,0,670,671,5,72,0,0,671,672,7,2,0,0,672,676,3,176,88,0,673,675,
  	5,72,0,0,674,673,1,0,0,0,675,678,1,0,0,0,676,674,1,0,0,0,676,677,1,0,
  	0,0,677,679,1,0,0,0,678,676,1,0,0,0,679,680,5,80,0,0,680,682,1,0,0,0,
  	681,661,1,0,0,0,681,669,1,0,0,0,682,167,1,0,0,0,683,685,5,71,0,0,684,
  	686,5,83,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,683,
  	1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,169,1,0,0,
  	0,691,689,1,0,0,0,692,693,5,5,0,0,693,696,5,72,0,0,694,697,3,168,84,0,
  	695,697,5,1,0,0,696,694,1,0,0,0,696,695,1,0,0,0,697,698,1,0,0,0,698,699,
  	5,72,0,0,699,721,3,186,93,0,700,701,5,5,0,0,701,704,5,72,0,0,702,705,
  	3,168,84,0,703,705,5,1,0,0,704,702,1,0,0,0,704,703,1,0,0,0,705,709,1,
  	0,0,0,706,708,5,72,0,0,707,706,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,
  	0,709,710,1,0,0,0,710,721,1,0,0,0,711,709,1,0,0,0,712,713,5,5,0,0,713,
  	716,5,72,0,0,714,717,3,168,84,0,715,717,5,1,0,0,716,714,1,0,0,0,716,715,
  	1,0,0,0,717,718,1,0,0,0,718,719,5,4,0,0,719,721,3,186,93,0,720,692,1,
  	0,0,0,720,700,1,0,0,0,720,712,1,0,0,0,721,171,1,0,0,0,722,723,5,5,0,0,
  	723,726,5,72,0,0,724,727,3,168,84,0,725,727,5,1,0,0,726,724,1,0,0,0,726,
  	725,1,0,0,0,727,728,1,0,0,0,728,729,3,176,88,0,729,730,5,72,0,0,730,731,
  	3,186,93,0,731,740,1,0,0,0,732,733,5,5,0,0,733,736,5,72,0,0,734,737,3,
  	168,84,0,735,737,5,1,0,0,736,734,1,0,0,0,736,735,1,0,0,0,737,738,1,0,
  	0,0,738,740,3,176,88,0,739,722,1,0,0,0,739,732,1,0,0,0,740,173,1,0,0,
  	0,741,805,3,68,34,0,742,805,3,70,35,0,743,805,3,30,15,0,744,805,3,38,
  	19,0,745,805,3,40,20,0,746,805,3,44,22,0,747,805,3,56,28,0,748,805,3,
  	48,24,0,749,805,3,52,26,0,750,805,3,58,29,0,751,805,3,26,13,0,752,805,
  	3,60,30,0,753,805,3,36,18,0,754,805,3,116,58,0,755,805,3,118,59,0,756,
  	805,3,28,14,0,757,805,3,114,57,0,758,805,3,112,56,0,759,805,3,120,60,
  	0,760,805,3,122,61,0,761,805,3,124,62,0,762,805,3,126,63,0,763,805,3,
  	72,36,0,764,805,3,74,37,0,765,805,3,76,38,0,766,805,3,78,39,0,767,805,
  	3,80,40,0,768,805,3,82,41,0,769,805,3,84,42,0,770,805,3,100,50,0,771,
  	805,3,102,51,0,772,805,3,104,52,0,773,805,3,106,53,0,774,805,3,108,54,
  	0,775,805,3,110,55,0,776,805,3,128,64,0,777,805,3,86,43,0,778,805,3,88,
  	44,0,779,805,3,90,45,0,780,805,3,92,46,0,781,805,3,94,47,0,782,805,3,
  	96,48,0,783,805,3,98,49,0,784,805,3,32,16,0,785,805,3,34,17,0,786,805,
  	3,146,73,0,787,805,3,148,74,0,788,805,3,130,65,0,789,805,3,132,66,0,790,
  	805,3,134,67,0,791,805,3,136,68,0,792,805,3,138,69,0,793,805,3,140,70,
  	0,794,805,3,142,71,0,795,805,3,144,72,0,796,805,3,150,75,0,797,805,3,
  	152,76,0,798,805,3,154,77,0,799,805,3,156,78,0,800,805,3,172,86,0,801,
  	805,3,170,85,0,802,805,3,20,10,0,803,805,3,22,11,0,804,741,1,0,0,0,804,
  	742,1,0,0,0,804,743,1,0,0,0,804,744,1,0,0,0,804,745,1,0,0,0,804,746,1,
  	0,0,0,804,747,1,0,0,0,804,748,1,0,0,0,804,749,1,0,0,0,804,750,1,0,0,0,
  	804,751,1,0,0,0,804,752,1,0,0,0,804,753,1,0,0,0,804,754,1,0,0,0,804,755,
  	1,0,0,0,804,756,1,0,0,0,804,757,1,0,0,0,804,758,1,0,0,0,804,759,1,0,0,
  	0,804,760,1,0,0,0,804,761,1,0,0,0,804,762,1,0,0,0,804,763,1,0,0,0,804,
  	764,1,0,0,0,804,765,1,0,0,0,804,766,1,0,0,0,804,767,1,0,0,0,804,768,1,
  	0,0,0,804,769,1,0,0,0,804,770,1,0,0,0,804,771,1,0,0,0,804,772,1,0,0,0,
  	804,773,1,0,0,0,804,774,1,0,0,0,804,775,1,0,0,0,804,776,1,0,0,0,804,777,
  	1,0,0,0,804,778,1,0,0,0,804,779,1,0,0,0,804,780,1,0,0,0,804,781,1,0,0,
  	0,804,782,1,0,0,0,804,783,1,0,0,0,804,784,1,0,0,0,804,785,1,0,0,0,804,
  	786,1,0,0,0,804,787,1,0,0,0,804,788,1,0,0,0,804,789,1,0,0,0,804,790,1,
  	0,0,0,804,791,1,0,0,0,804,792,1,0,0,0,804,793,1,0,0,0,804,794,1,0,0,0,
  	804,795,1,0,0,0,804,796,1,0,0,0,804,797,1,0,0,0,804,798,1,0,0,0,804,799,
  	1,0,0,0,804,800,1,0,0,0,804,801,1,0,0,0,804,802,1,0,0,0,804,803,1,0,0,
  	0,805,175,1,0,0,0,806,865,5,87,0,0,807,809,5,72,0,0,808,807,1,0,0,0,809,
  	812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,813,1,0,0,0,812,810,1,
  	0,0,0,813,817,5,71,0,0,814,816,5,72,0,0,815,814,1,0,0,0,816,819,1,0,0,
  	0,817,815,1,0,0,0,817,818,1,0,0,0,818,829,1,0,0,0,819,817,1,0,0,0,820,
  	824,5,85,0,0,821,823,3,198,99,0,822,821,1,0,0,0,823,826,1,0,0,0,824,822,
  	1,0,0,0,824,825,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,827,820,1,0,0,
  	0,828,831,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,860,1,0,0,0,831,
  	829,1,0,0,0,832,836,5,84,0,0,833,835,5,72,0,0,834,833,1,0,0,0,835,838,
  	1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,839,1,0,0,0,838,836,1,0,0,
  	0,839,843,5,71,0,0,840,842,5,72,0,0,841,840,1,0,0,0,842,845,1,0,0,0,843,
  	841,1,0,0,0,843,844,1,0,0,0,844,855,1,0,0,0,845,843,1,0,0,0,846,850,5,
  	85,0,0,847,849,3,198,99,0,848,847,1,0,0,0,849,852,1,0,0,0,850,848,1,0,
  	0,0,850,851,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,853,846,1,0,0,0,854,
  	857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,859,1,0,0,0,857,855,1,
  	0,0,0,858,832,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,
  	861,864,1,0,0,0,862,860,1,0,0,0,863,810,1,0,0,0,864,867,1,0,0,0,865,863,
  	1,0,0,0,865,866,1,0,0,0,866,868,1,0,0,0,867,865,1,0,0,0,868,869,5,88,
  	0,0,869,177,1,0,0,0,870,873,3,180,90,0,871,873,3,182,91,0,872,870,1,0,
  	0,0,872,871,1,0,0,0,873,179,1,0,0,0,874,904,3,12,6,0,875,904,5,68,0,0,
  	876,904,5,69,0,0,877,904,3,8,4,0,878,904,5,71,0,0,879,904,3,18,9,0,880,
  	904,5,78,0,0,881,904,3,20,10,0,882,904,3,22,11,0,883,904,5,79,0,0,884,
  	904,5,87,0,0,885,904,5,88,0,0,886,904,5,84,0,0,887,904,5,85,0,0,888,904,
  	5,86,0,0,889,904,5,4,0,0,890,904,3,174,87,0,891,904,5,72,0,0,892,904,
  	5,77,0,0,893,904,5,70,0,0,894,904,3,16,8,0,895,904,5,81,0,0,896,904,5,
  	82,0,0,897,904,5,83,0,0,898,904,5,93,0,0,899,904,5,89,0,0,900,904,5,90,
  	0,0,901,904,5,91,0,0,902,904,5,92,0,0,903,874,1,0,0,0,903,875,1,0,0,0,
  	903,876,1,0,0,0,903,877,1,0,0,0,903,878,1,0,0,0,903,879,1,0,0,0,903,880,
  	1,0,0,0,903,881,1,0,0,0,903,882,1,0,0,0,903,883,1,0,0,0,903,884,1,0,0,
  	0,903,885,1,0,0,0,903,886,1,0,0,0,903,887,1,0,0,0,903,888,1,0,0,0,903,
  	889,1,0,0,0,903,890,1,0,0,0,903,891,1,0,0,0,903,892,1,0,0,0,903,893,1,
  	0,0,0,903,894,1,0,0,0,903,895,1,0,0,0,903,896,1,0,0,0,903,897,1,0,0,0,
  	903,898,1,0,0,0,903,899,1,0,0,0,903,900,1,0,0,0,903,901,1,0,0,0,903,902,
  	1,0,0,0,904,907,1,0,0,0,905,906,1,0,0,0,905,903,1,0,0,0,906,908,1,0,0,
  	0,907,905,1,0,0,0,908,912,5,79,0,0,909,911,5,72,0,0,910,909,1,0,0,0,911,
  	914,1,0,0,0,912,910,1,0,0,0,912,913,1,0,0,0,913,915,1,0,0,0,914,912,1,
  	0,0,0,915,916,7,4,0,0,916,181,1,0,0,0,917,947,3,12,6,0,918,947,5,68,0,
  	0,919,947,5,69,0,0,920,947,3,8,4,0,921,947,5,71,0,0,922,947,3,18,9,0,
  	923,947,5,78,0,0,924,947,3,20,10,0,925,947,3,22,11,0,926,947,5,79,0,0,
  	927,947,5,87,0,0,928,947,5,88,0,0,929,947,5,84,0,0,930,947,5,85,0,0,931,
  	947,5,86,0,0,932,947,5,4,0,0,933,947,3,174,87,0,934,947,5,72,0,0,935,
  	947,5,77,0,0,936,947,5,70,0,0,937,947,3,16,8,0,938,947,5,81,0,0,939,947,
  	5,82,0,0,940,947,5,83,0,0,941,947,5,93,0,0,942,947,5,89,0,0,943,947,5,
  	90,0,0,944,947,5,91,0,0,945,947,5,92,0,0,946,917,1,0,0,0,946,918,1,0,
  	0,0,946,919,1,0,0,0,946,920,1,0,0,0,946,921,1,0,0,0,946,922,1,0,0,0,946,
  	923,1,0,0,0,946,924,1,0,0,0,946,925,1,0,0,0,946,926,1,0,0,0,946,927,1,
  	0,0,0,946,928,1,0,0,0,946,929,1,0,0,0,946,930,1,0,0,0,946,931,1,0,0,0,
  	946,932,1,0,0,0,946,933,1,0,0,0,946,934,1,0,0,0,946,935,1,0,0,0,946,936,
  	1,0,0,0,946,937,1,0,0,0,946,938,1,0,0,0,946,939,1,0,0,0,946,940,1,0,0,
  	0,946,941,1,0,0,0,946,942,1,0,0,0,946,943,1,0,0,0,946,944,1,0,0,0,946,
  	945,1,0,0,0,947,950,1,0,0,0,948,949,1,0,0,0,948,946,1,0,0,0,949,959,1,
  	0,0,0,950,948,1,0,0,0,951,955,5,80,0,0,952,954,5,72,0,0,953,952,1,0,0,
  	0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,960,1,0,0,0,957,
  	955,1,0,0,0,958,960,5,0,0,1,959,951,1,0,0,0,959,958,1,0,0,0,960,183,1,
  	0,0,0,961,991,3,12,6,0,962,991,5,68,0,0,963,991,5,69,0,0,964,991,3,8,
  	4,0,965,991,5,71,0,0,966,991,3,18,9,0,967,991,3,20,10,0,968,991,3,22,
  	11,0,969,991,5,78,0,0,970,991,5,87,0,0,971,991,5,88,0,0,972,991,5,84,
  	0,0,973,991,5,85,0,0,974,991,5,86,0,0,975,991,5,4,0,0,976,991,5,72,0,
  	0,977,991,5,77,0,0,978,991,5,70,0,0,979,991,3,16,8,0,980,991,5,81,0,0,
  	981,991,5,82,0,0,982,991,5,83,0,0,983,991,5,93,0,0,984,991,5,89,0,0,985,
  	991,5,90,0,0,986,991,5,91,0,0,987,991,5,92,0,0,988,991,5,16,0,0,989,991,
  	3,174,87,0,990,961,1,0,0,0,990,962,1,0,0,0,990,963,1,0,0,0,990,964,1,
  	0,0,0,990,965,1,0,0,0,990,966,1,0,0,0,990,967,1,0,0,0,990,968,1,0,0,0,
  	990,969,1,0,0,0,990,970,1,0,0,0,990,971,1,0,0,0,990,972,1,0,0,0,990,973,
  	1,0,0,0,990,974,1,0,0,0,990,975,1,0,0,0,990,976,1,0,0,0,990,977,1,0,0,
  	0,990,978,1,0,0,0,990,979,1,0,0,0,990,980,1,0,0,0,990,981,1,0,0,0,990,
  	982,1,0,0,0,990,983,1,0,0,0,990,984,1,0,0,0,990,985,1,0,0,0,990,986,1,
  	0,0,0,990,987,1,0,0,0,990,988,1,0,0,0,990,989,1,0,0,0,991,994,1,0,0,0,
  	992,993,1,0,0,0,992,990,1,0,0,0,993,185,1,0,0,0,994,992,1,0,0,0,995,1023,
  	3,12,6,0,996,1023,5,68,0,0,997,1023,5,69,0,0,998,1023,3,8,4,0,999,1023,
  	5,71,0,0,1000,1023,3,18,9,0,1001,1023,3,20,10,0,1002,1023,3,22,11,0,1003,
  	1023,5,78,0,0,1004,1023,5,87,0,0,1005,1023,5,88,0,0,1006,1023,5,84,0,
  	0,1007,1023,5,85,0,0,1008,1023,5,86,0,0,1009,1023,5,4,0,0,1010,1023,5,
  	72,0,0,1011,1023,5,77,0,0,1012,1023,5,70,0,0,1013,1023,3,16,8,0,1014,
  	1023,5,81,0,0,1015,1023,5,82,0,0,1016,1023,5,83,0,0,1017,1023,5,93,0,
  	0,1018,1023,5,89,0,0,1019,1023,5,90,0,0,1020,1023,5,91,0,0,1021,1023,
  	5,92,0,0,1022,995,1,0,0,0,1022,996,1,0,0,0,1022,997,1,0,0,0,1022,998,
  	1,0,0,0,1022,999,1,0,0,0,1022,1000,1,0,0,0,1022,1001,1,0,0,0,1022,1002,
  	1,0,0,0,1022,1003,1,0,0,0,1022,1004,1,0,0,0,1022,1005,1,0,0,0,1022,1006,
  	1,0,0,0,1022,1007,1,0,0,0,1022,1008,1,0,0,0,1022,1009,1,0,0,0,1022,1010,
  	1,0,0,0,1022,1011,1,0,0,0,1022,1012,1,0,0,0,1022,1013,1,0,0,0,1022,1014,
  	1,0,0,0,1022,1015,1,0,0,0,1022,1016,1,0,0,0,1022,1017,1,0,0,0,1022,1018,
  	1,0,0,0,1022,1019,1,0,0,0,1022,1020,1,0,0,0,1022,1021,1,0,0,0,1023,1026,
  	1,0,0,0,1024,1025,1,0,0,0,1024,1022,1,0,0,0,1025,187,1,0,0,0,1026,1024,
  	1,0,0,0,1027,1047,5,71,0,0,1028,1047,3,18,9,0,1029,1047,5,72,0,0,1030,
  	1047,5,77,0,0,1031,1047,5,70,0,0,1032,1047,5,89,0,0,1033,1047,5,90,0,
  	0,1034,1047,5,91,0,0,1035,1047,5,92,0,0,1036,1047,5,87,0,0,1037,1047,
  	5,88,0,0,1038,1047,5,84,0,0,1039,1047,5,85,0,0,1040,1047,5,86,0,0,1041,
  	1047,3,8,4,0,1042,1047,3,20,10,0,1043,1047,3,22,11,0,1044,1047,5,93,0,
  	0,1045,1047,5,94,0,0,1046,1027,1,0,0,0,1046,1028,1,0,0,0,1046,1029,1,
  	0,0,0,1046,1030,1,0,0,0,1046,1031,1,0,0,0,1046,1032,1,0,0,0,1046,1033,
  	1,0,0,0,1046,1034,1,0,0,0,1046,1035,1,0,0,0,1046,1036,1,0,0,0,1046,1037,
  	1,0,0,0,1046,1038,1,0,0,0,1046,1039,1,0,0,0,1046,1040,1,0,0,0,1046,1041,
  	1,0,0,0,1046,1042,1,0,0,0,1046,1043,1,0,0,0,1046,1044,1,0,0,0,1046,1045,
  	1,0,0,0,1047,189,1,0,0,0,1048,1068,5,71,0,0,1049,1068,3,18,9,0,1050,1068,
  	5,72,0,0,1051,1068,5,77,0,0,1052,1068,5,70,0,0,1053,1068,3,192,96,0,1054,
  	1068,5,85,0,0,1055,1068,5,86,0,0,1056,1068,3,10,5,0,1057,1068,5,80,0,
  	0,1058,1068,5,78,0,0,1059,1068,3,8,4,0,1060,1068,3,172,86,0,1061,1068,
  	3,170,85,0,1062,1068,3,16,8,0,1063,1068,3,20,10,0,1064,1068,3,22,11,0,
  	1065,1068,5,93,0,0,1066,1068,5,94,0,0,1067,1048,1,0,0,0,1067,1049,1,0,
  	0,0,1067,1050,1,0,0,0,1067,1051,1,0,0,0,1067,1052,1,0,0,0,1067,1053,1,
  	0,0,0,1067,1054,1,0,0,0,1067,1055,1,0,0,0,1067,1056,1,0,0,0,1067,1057,
  	1,0,0,0,1067,1058,1,0,0,0,1067,1059,1,0,0,0,1067,1060,1,0,0,0,1067,1061,
  	1,0,0,0,1067,1062,1,0,0,0,1067,1063,1,0,0,0,1067,1064,1,0,0,0,1067,1065,
  	1,0,0,0,1067,1066,1,0,0,0,1068,191,1,0,0,0,1069,1088,5,87,0,0,1070,1087,
  	5,71,0,0,1071,1087,3,18,9,0,1072,1087,5,72,0,0,1073,1087,5,77,0,0,1074,
  	1087,5,70,0,0,1075,1087,5,84,0,0,1076,1087,5,85,0,0,1077,1087,5,86,0,
  	0,1078,1087,3,10,5,0,1079,1087,5,78,0,0,1080,1087,5,80,0,0,1081,1087,
  	3,192,96,0,1082,1087,3,8,4,0,1083,1087,3,16,8,0,1084,1087,5,93,0,0,1085,
  	1087,5,94,0,0,1086,1070,1,0,0,0,1086,1071,1,0,0,0,1086,1072,1,0,0,0,1086,
  	1073,1,0,0,0,1086,1074,1,0,0,0,1086,1075,1,0,0,0,1086,1076,1,0,0,0,1086,
  	1077,1,0,0,0,1086,1078,1,0,0,0,1086,1079,1,0,0,0,1086,1080,1,0,0,0,1086,
  	1081,1,0,0,0,1086,1082,1,0,0,0,1086,1083,1,0,0,0,1086,1084,1,0,0,0,1086,
  	1085,1,0,0,0,1087,1090,1,0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,
  	1091,1,0,0,0,1090,1088,1,0,0,0,1091,1137,5,88,0,0,1092,1110,5,89,0,0,
  	1093,1109,5,71,0,0,1094,1109,3,18,9,0,1095,1109,5,72,0,0,1096,1109,5,
  	77,0,0,1097,1109,5,70,0,0,1098,1109,5,84,0,0,1099,1109,5,85,0,0,1100,
  	1109,5,86,0,0,1101,1109,3,10,5,0,1102,1109,5,80,0,0,1103,1109,3,192,96,
  	0,1104,1109,3,8,4,0,1105,1109,3,16,8,0,1106,1109,5,93,0,0,1107,1109,5,
  	94,0,0,1108,1093,1,0,0,0,1108,1094,1,0,0,0,1108,1095,1,0,0,0,1108,1096,
  	1,0,0,0,1108,1097,1,0,0,0,1108,1098,1,0,0,0,1108,1099,1,0,0,0,1108,1100,
  	1,0,0,0,1108,1101,1,0,0,0,1108,1102,1,0,0,0,1108,1103,1,0,0,0,1108,1104,
  	1,0,0,0,1108,1105,1,0,0,0,1108,1106,1,0,0,0,1108,1107,1,0,0,0,1109,1112,
  	1,0,0,0,1110,1108,1,0,0,0,1110,1111,1,0,0,0,1111,1113,1,0,0,0,1112,1110,
  	1,0,0,0,1113,1137,5,90,0,0,1114,1132,5,91,0,0,1115,1131,5,71,0,0,1116,
  	1131,3,18,9,0,1117,1131,5,72,0,0,1118,1131,5,77,0,0,1119,1131,5,70,0,
  	0,1120,1131,5,84,0,0,1121,1131,5,85,0,0,1122,1131,5,86,0,0,1123,1131,
  	3,10,5,0,1124,1131,5,80,0,0,1125,1131,3,192,96,0,1126,1131,3,8,4,0,1127,
  	1131,3,16,8,0,1128,1131,5,93,0,0,1129,1131,5,94,0,0,1130,1115,1,0,0,0,
  	1130,1116,1,0,0,0,1130,1117,1,0,0,0,1130,1118,1,0,0,0,1130,1119,1,0,0,
  	0,1130,1120,1,0,0,0,1130,1121,1,0,0,0,1130,1122,1,0,0,0,1130,1123,1,0,
  	0,0,1130,1124,1,0,0,0,1130,1125,1,0,0,0,1130,1126,1,0,0,0,1130,1127,1,
  	0,0,0,1130,1128,1,0,0,0,1130,1129,1,0,0,0,1131,1134,1,0,0,0,1132,1130,
  	1,0,0,0,1132,1133,1,0,0,0,1133,1135,1,0,0,0,1134,1132,1,0,0,0,1135,1137,
  	5,92,0,0,1136,1069,1,0,0,0,1136,1092,1,0,0,0,1136,1114,1,0,0,0,1137,193,
  	1,0,0,0,1138,1164,5,71,0,0,1139,1164,5,80,0,0,1140,1164,5,72,0,0,1141,
  	1164,5,77,0,0,1142,1164,5,79,0,0,1143,1164,5,70,0,0,1144,1164,5,87,0,
  	0,1145,1164,5,88,0,0,1146,1164,5,84,0,0,1147,1164,5,85,0,0,1148,1164,
  	5,86,0,0,1149,1164,5,89,0,0,1150,1164,5,90,0,0,1151,1164,5,91,0,0,1152,
  	1164,5,92,0,0,1153,1164,5,83,0,0,1154,1164,5,4,0,0,1155,1164,5,75,0,0,
  	1156,1164,3,20,10,0,1157,1164,3,22,11,0,1158,1164,5,81,0,0,1159,1164,
  	5,82,0,0,1160,1164,5,78,0,0,1161,1164,5,93,0,0,1162,1164,5,94,0,0,1163,
  	1138,1,0,0,0,1163,1139,1,0,0,0,1163,1140,1,0,0,0,1163,1141,1,0,0,0,1163,
  	1142,1,0,0,0,1163,1143,1,0,0,0,1163,1144,1,0,0,0,1163,1145,1,0,0,0,1163,
  	1146,1,0,0,0,1163,1147,1,0,0,0,1163,1148,1,0,0,0,1163,1149,1,0,0,0,1163,
  	1150,1,0,0,0,1163,1151,1,0,0,0,1163,1152,1,0,0,0,1163,1153,1,0,0,0,1163,
  	1154,1,0,0,0,1163,1155,1,0,0,0,1163,1156,1,0,0,0,1163,1157,1,0,0,0,1163,
  	1158,1,0,0,0,1163,1159,1,0,0,0,1163,1160,1,0,0,0,1163,1161,1,0,0,0,1163,
  	1162,1,0,0,0,1164,195,1,0,0,0,1165,1166,5,70,0,0,1166,197,1,0,0,0,1167,
  	1182,5,71,0,0,1168,1182,3,18,9,0,1169,1182,5,72,0,0,1170,1182,5,77,0,
  	0,1171,1182,5,70,0,0,1172,1182,5,89,0,0,1173,1182,5,90,0,0,1174,1182,
  	5,91,0,0,1175,1182,5,92,0,0,1176,1182,3,192,96,0,1177,1182,3,8,4,0,1178,
  	1182,3,10,5,0,1179,1182,5,93,0,0,1180,1182,5,94,0,0,1181,1167,1,0,0,0,
  	1181,1168,1,0,0,0,1181,1169,1,0,0,0,1181,1170,1,0,0,0,1181,1171,1,0,0,
  	0,1181,1172,1,0,0,0,1181,1173,1,0,0,0,1181,1174,1,0,0,0,1181,1175,1,0,
  	0,0,1181,1176,1,0,0,0,1181,1177,1,0,0,0,1181,1178,1,0,0,0,1181,1179,1,
  	0,0,0,1181,1180,1,0,0,0,1182,199,1,0,0,0,1183,1205,5,71,0,0,1184,1205,
  	3,18,9,0,1185,1205,5,72,0,0,1186,1205,5,77,0,0,1187,1205,5,79,0,0,1188,
  	1205,5,87,0,0,1189,1205,5,88,0,0,1190,1205,5,84,0,0,1191,1205,5,85,0,
  	0,1192,1205,5,86,0,0,1193,1205,5,89,0,0,1194,1205,5,90,0,0,1195,1205,
  	5,91,0,0,1196,1205,5,92,0,0,1197,1205,3,8,4,0,1198,1205,5,75,0,0,1199,
  	1205,3,20,10,0,1200,1205,3,22,11,0,1201,1205,5,78,0,0,1202,1205,5,93,
  	0,0,1203,1205,5,94,0,0,1204,1183,1,0,0,0,1204,1184,1,0,0,0,1204,1185,
  	1,0,0,0,1204,1186,1,0,0,0,1204,1187,1,0,0,0,1204,1188,1,0,0,0,1204,1189,
  	1,0,0,0,1204,1190,1,0,0,0,1204,1191,1,0,0,0,1204,1192,1,0,0,0,1204,1193,
  	1,0,0,0,1204,1194,1,0,0,0,1204,1195,1,0,0,0,1204,1196,1,0,0,0,1204,1197,
  	1,0,0,0,1204,1198,1,0,0,0,1204,1199,1,0,0,0,1204,1200,1,0,0,0,1204,1201,
  	1,0,0,0,1204,1202,1,0,0,0,1204,1203,1,0,0,0,1205,201,1,0,0,0,82,209,284,
  	292,300,306,314,321,326,342,350,375,382,389,396,403,410,417,424,431,439,
  	444,462,467,474,483,492,501,520,555,565,614,625,637,655,659,676,681,685,
  	689,696,704,709,716,720,726,736,739,804,810,817,824,829,836,843,850,855,
  	860,865,872,903,905,912,946,948,955,959,990,992,1022,1024,1046,1067,1086,
  	1088,1108,1110,1130,1132,1136,1163,1181,1204
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sv3_1appparserParserStaticData = std::move(staticData);
}

}

SV3_1aPpParser::SV3_1aPpParser(TokenStream *input) : SV3_1aPpParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

SV3_1aPpParser::SV3_1aPpParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  SV3_1aPpParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *sv3_1appparserParserStaticData->atn, sv3_1appparserParserStaticData->decisionToDFA, sv3_1appparserParserStaticData->sharedContextCache, options);
}

SV3_1aPpParser::~SV3_1aPpParser() {
  delete _interpreter;
}

const atn::ATN& SV3_1aPpParser::getATN() const {
  return *sv3_1appparserParserStaticData->atn;
}

std::string SV3_1aPpParser::getGrammarFileName() const {
  return "SV3_1aPpParser.g4";
}

const std::vector<std::string>& SV3_1aPpParser::getRuleNames() const {
  return sv3_1appparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& SV3_1aPpParser::getVocabulary() const {
  return sv3_1appparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SV3_1aPpParser::getSerializedATN() const {
  return sv3_1appparserParserStaticData->serializedATN;
}


//----------------- Top_level_ruleContext ------------------------------------------------------------------

SV3_1aPpParser::Top_level_ruleContext::Top_level_ruleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SV3_1aPpParser::Null_ruleContext* SV3_1aPpParser::Top_level_ruleContext::null_rule() {
  return getRuleContext<SV3_1aPpParser::Null_ruleContext>(0);
}

SV3_1aPpParser::Source_textContext* SV3_1aPpParser::Top_level_ruleContext::source_text() {
  return getRuleContext<SV3_1aPpParser::Source_textContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Top_level_ruleContext::EOF() {
  return getToken(SV3_1aPpParser::EOF, 0);
}


size_t SV3_1aPpParser::Top_level_ruleContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleTop_level_rule;
}

void SV3_1aPpParser::Top_level_ruleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTop_level_rule(this);
}

void SV3_1aPpParser::Top_level_ruleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTop_level_rule(this);
}

SV3_1aPpParser::Top_level_ruleContext* SV3_1aPpParser::top_level_rule() {
  Top_level_ruleContext *_localctx = _tracker.createInstance<Top_level_ruleContext>(_ctx, getState());
  enterRule(_localctx, 0, SV3_1aPpParser::RuleTop_level_rule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(202);
    null_rule();
    setState(203);
    source_text();
    setState(204);
    match(SV3_1aPpParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Source_textContext ------------------------------------------------------------------

SV3_1aPpParser::Source_textContext::Source_textContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SV3_1aPpParser::DescriptionContext *> SV3_1aPpParser::Source_textContext::description() {
  return getRuleContexts<SV3_1aPpParser::DescriptionContext>();
}

SV3_1aPpParser::DescriptionContext* SV3_1aPpParser::Source_textContext::description(size_t i) {
  return getRuleContext<SV3_1aPpParser::DescriptionContext>(i);
}


size_t SV3_1aPpParser::Source_textContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSource_text;
}

void SV3_1aPpParser::Source_textContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSource_text(this);
}

void SV3_1aPpParser::Source_textContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSource_text(this);
}

SV3_1aPpParser::Source_textContext* SV3_1aPpParser::source_text() {
  Source_textContext *_localctx = _tracker.createInstance<Source_textContext>(_ctx, getState());
  enterRule(_localctx, 2, SV3_1aPpParser::RuleSource_text);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(209);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 2147483647) != 0)) {
      setState(206);
      description();
      setState(211);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_ruleContext ------------------------------------------------------------------

SV3_1aPpParser::Null_ruleContext::Null_ruleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SV3_1aPpParser::Null_ruleContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleNull_rule;
}

void SV3_1aPpParser::Null_ruleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_rule(this);
}

void SV3_1aPpParser::Null_ruleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_rule(this);
}

SV3_1aPpParser::Null_ruleContext* SV3_1aPpParser::null_rule() {
  Null_ruleContext *_localctx = _tracker.createInstance<Null_ruleContext>(_ctx, getState());
  enterRule(_localctx, 4, SV3_1aPpParser::RuleNull_rule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DescriptionContext ------------------------------------------------------------------

SV3_1aPpParser::DescriptionContext::DescriptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::DescriptionContext::escaped_identifier() {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(0);
}

SV3_1aPpParser::Unterminated_stringContext* SV3_1aPpParser::DescriptionContext::unterminated_string() {
  return getRuleContext<SV3_1aPpParser::Unterminated_stringContext>(0);
}

SV3_1aPpParser::StringContext* SV3_1aPpParser::DescriptionContext::string() {
  return getRuleContext<SV3_1aPpParser::StringContext>(0);
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::DescriptionContext::integral_number() {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(0);
}

SV3_1aPpParser::Macro_definitionContext* SV3_1aPpParser::DescriptionContext::macro_definition() {
  return getRuleContext<SV3_1aPpParser::Macro_definitionContext>(0);
}

SV3_1aPpParser::CommentContext* SV3_1aPpParser::DescriptionContext::comment() {
  return getRuleContext<SV3_1aPpParser::CommentContext>(0);
}

SV3_1aPpParser::Celldefine_directiveContext* SV3_1aPpParser::DescriptionContext::celldefine_directive() {
  return getRuleContext<SV3_1aPpParser::Celldefine_directiveContext>(0);
}

SV3_1aPpParser::Endcelldefine_directiveContext* SV3_1aPpParser::DescriptionContext::endcelldefine_directive() {
  return getRuleContext<SV3_1aPpParser::Endcelldefine_directiveContext>(0);
}

SV3_1aPpParser::Default_nettype_directiveContext* SV3_1aPpParser::DescriptionContext::default_nettype_directive() {
  return getRuleContext<SV3_1aPpParser::Default_nettype_directiveContext>(0);
}

SV3_1aPpParser::Undef_directiveContext* SV3_1aPpParser::DescriptionContext::undef_directive() {
  return getRuleContext<SV3_1aPpParser::Undef_directiveContext>(0);
}

SV3_1aPpParser::Ifdef_directiveContext* SV3_1aPpParser::DescriptionContext::ifdef_directive() {
  return getRuleContext<SV3_1aPpParser::Ifdef_directiveContext>(0);
}

SV3_1aPpParser::Ifndef_directiveContext* SV3_1aPpParser::DescriptionContext::ifndef_directive() {
  return getRuleContext<SV3_1aPpParser::Ifndef_directiveContext>(0);
}

SV3_1aPpParser::Else_directiveContext* SV3_1aPpParser::DescriptionContext::else_directive() {
  return getRuleContext<SV3_1aPpParser::Else_directiveContext>(0);
}

SV3_1aPpParser::Elsif_directiveContext* SV3_1aPpParser::DescriptionContext::elsif_directive() {
  return getRuleContext<SV3_1aPpParser::Elsif_directiveContext>(0);
}

SV3_1aPpParser::Elseif_directiveContext* SV3_1aPpParser::DescriptionContext::elseif_directive() {
  return getRuleContext<SV3_1aPpParser::Elseif_directiveContext>(0);
}

SV3_1aPpParser::Endif_directiveContext* SV3_1aPpParser::DescriptionContext::endif_directive() {
  return getRuleContext<SV3_1aPpParser::Endif_directiveContext>(0);
}

SV3_1aPpParser::Include_directiveContext* SV3_1aPpParser::DescriptionContext::include_directive() {
  return getRuleContext<SV3_1aPpParser::Include_directiveContext>(0);
}

SV3_1aPpParser::Resetall_directiveContext* SV3_1aPpParser::DescriptionContext::resetall_directive() {
  return getRuleContext<SV3_1aPpParser::Resetall_directiveContext>(0);
}

SV3_1aPpParser::Begin_keywords_directiveContext* SV3_1aPpParser::DescriptionContext::begin_keywords_directive() {
  return getRuleContext<SV3_1aPpParser::Begin_keywords_directiveContext>(0);
}

SV3_1aPpParser::End_keywords_directiveContext* SV3_1aPpParser::DescriptionContext::end_keywords_directive() {
  return getRuleContext<SV3_1aPpParser::End_keywords_directiveContext>(0);
}

SV3_1aPpParser::Timescale_directiveContext* SV3_1aPpParser::DescriptionContext::timescale_directive() {
  return getRuleContext<SV3_1aPpParser::Timescale_directiveContext>(0);
}

SV3_1aPpParser::Unconnected_drive_directiveContext* SV3_1aPpParser::DescriptionContext::unconnected_drive_directive() {
  return getRuleContext<SV3_1aPpParser::Unconnected_drive_directiveContext>(0);
}

SV3_1aPpParser::Nounconnected_drive_directiveContext* SV3_1aPpParser::DescriptionContext::nounconnected_drive_directive() {
  return getRuleContext<SV3_1aPpParser::Nounconnected_drive_directiveContext>(0);
}

SV3_1aPpParser::Line_directiveContext* SV3_1aPpParser::DescriptionContext::line_directive() {
  return getRuleContext<SV3_1aPpParser::Line_directiveContext>(0);
}

SV3_1aPpParser::Default_decay_time_directiveContext* SV3_1aPpParser::DescriptionContext::default_decay_time_directive() {
  return getRuleContext<SV3_1aPpParser::Default_decay_time_directiveContext>(0);
}

SV3_1aPpParser::Default_trireg_strength_directiveContext* SV3_1aPpParser::DescriptionContext::default_trireg_strength_directive() {
  return getRuleContext<SV3_1aPpParser::Default_trireg_strength_directiveContext>(0);
}

SV3_1aPpParser::Delay_mode_distributed_directiveContext* SV3_1aPpParser::DescriptionContext::delay_mode_distributed_directive() {
  return getRuleContext<SV3_1aPpParser::Delay_mode_distributed_directiveContext>(0);
}

SV3_1aPpParser::Delay_mode_path_directiveContext* SV3_1aPpParser::DescriptionContext::delay_mode_path_directive() {
  return getRuleContext<SV3_1aPpParser::Delay_mode_path_directiveContext>(0);
}

SV3_1aPpParser::Delay_mode_unit_directiveContext* SV3_1aPpParser::DescriptionContext::delay_mode_unit_directive() {
  return getRuleContext<SV3_1aPpParser::Delay_mode_unit_directiveContext>(0);
}

SV3_1aPpParser::Delay_mode_zero_directiveContext* SV3_1aPpParser::DescriptionContext::delay_mode_zero_directive() {
  return getRuleContext<SV3_1aPpParser::Delay_mode_zero_directiveContext>(0);
}

SV3_1aPpParser::Protect_directiveContext* SV3_1aPpParser::DescriptionContext::protect_directive() {
  return getRuleContext<SV3_1aPpParser::Protect_directiveContext>(0);
}

SV3_1aPpParser::Endprotect_directiveContext* SV3_1aPpParser::DescriptionContext::endprotect_directive() {
  return getRuleContext<SV3_1aPpParser::Endprotect_directiveContext>(0);
}

SV3_1aPpParser::Protected_directiveContext* SV3_1aPpParser::DescriptionContext::protected_directive() {
  return getRuleContext<SV3_1aPpParser::Protected_directiveContext>(0);
}

SV3_1aPpParser::Endprotected_directiveContext* SV3_1aPpParser::DescriptionContext::endprotected_directive() {
  return getRuleContext<SV3_1aPpParser::Endprotected_directiveContext>(0);
}

SV3_1aPpParser::Expand_vectornets_directiveContext* SV3_1aPpParser::DescriptionContext::expand_vectornets_directive() {
  return getRuleContext<SV3_1aPpParser::Expand_vectornets_directiveContext>(0);
}

SV3_1aPpParser::Noexpand_vectornets_directiveContext* SV3_1aPpParser::DescriptionContext::noexpand_vectornets_directive() {
  return getRuleContext<SV3_1aPpParser::Noexpand_vectornets_directiveContext>(0);
}

SV3_1aPpParser::Autoexpand_vectornets_directiveContext* SV3_1aPpParser::DescriptionContext::autoexpand_vectornets_directive() {
  return getRuleContext<SV3_1aPpParser::Autoexpand_vectornets_directiveContext>(0);
}

SV3_1aPpParser::Remove_gatename_directiveContext* SV3_1aPpParser::DescriptionContext::remove_gatename_directive() {
  return getRuleContext<SV3_1aPpParser::Remove_gatename_directiveContext>(0);
}

SV3_1aPpParser::Noremove_gatenames_directiveContext* SV3_1aPpParser::DescriptionContext::noremove_gatenames_directive() {
  return getRuleContext<SV3_1aPpParser::Noremove_gatenames_directiveContext>(0);
}

SV3_1aPpParser::Remove_netname_directiveContext* SV3_1aPpParser::DescriptionContext::remove_netname_directive() {
  return getRuleContext<SV3_1aPpParser::Remove_netname_directiveContext>(0);
}

SV3_1aPpParser::Noremove_netnames_directiveContext* SV3_1aPpParser::DescriptionContext::noremove_netnames_directive() {
  return getRuleContext<SV3_1aPpParser::Noremove_netnames_directiveContext>(0);
}

SV3_1aPpParser::Accelerate_directiveContext* SV3_1aPpParser::DescriptionContext::accelerate_directive() {
  return getRuleContext<SV3_1aPpParser::Accelerate_directiveContext>(0);
}

SV3_1aPpParser::Noaccelerate_directiveContext* SV3_1aPpParser::DescriptionContext::noaccelerate_directive() {
  return getRuleContext<SV3_1aPpParser::Noaccelerate_directiveContext>(0);
}

SV3_1aPpParser::Undefineall_directiveContext* SV3_1aPpParser::DescriptionContext::undefineall_directive() {
  return getRuleContext<SV3_1aPpParser::Undefineall_directiveContext>(0);
}

SV3_1aPpParser::Uselib_directiveContext* SV3_1aPpParser::DescriptionContext::uselib_directive() {
  return getRuleContext<SV3_1aPpParser::Uselib_directiveContext>(0);
}

SV3_1aPpParser::Disable_portfaults_directiveContext* SV3_1aPpParser::DescriptionContext::disable_portfaults_directive() {
  return getRuleContext<SV3_1aPpParser::Disable_portfaults_directiveContext>(0);
}

SV3_1aPpParser::Enable_portfaults_directiveContext* SV3_1aPpParser::DescriptionContext::enable_portfaults_directive() {
  return getRuleContext<SV3_1aPpParser::Enable_portfaults_directiveContext>(0);
}

SV3_1aPpParser::Nosuppress_faults_directiveContext* SV3_1aPpParser::DescriptionContext::nosuppress_faults_directive() {
  return getRuleContext<SV3_1aPpParser::Nosuppress_faults_directiveContext>(0);
}

SV3_1aPpParser::Suppress_faults_directiveContext* SV3_1aPpParser::DescriptionContext::suppress_faults_directive() {
  return getRuleContext<SV3_1aPpParser::Suppress_faults_directiveContext>(0);
}

SV3_1aPpParser::Signed_directiveContext* SV3_1aPpParser::DescriptionContext::signed_directive() {
  return getRuleContext<SV3_1aPpParser::Signed_directiveContext>(0);
}

SV3_1aPpParser::Unsigned_directiveContext* SV3_1aPpParser::DescriptionContext::unsigned_directive() {
  return getRuleContext<SV3_1aPpParser::Unsigned_directiveContext>(0);
}

SV3_1aPpParser::Pragma_directiveContext* SV3_1aPpParser::DescriptionContext::pragma_directive() {
  return getRuleContext<SV3_1aPpParser::Pragma_directiveContext>(0);
}

SV3_1aPpParser::Sv_file_directiveContext* SV3_1aPpParser::DescriptionContext::sv_file_directive() {
  return getRuleContext<SV3_1aPpParser::Sv_file_directiveContext>(0);
}

SV3_1aPpParser::Sv_line_directiveContext* SV3_1aPpParser::DescriptionContext::sv_line_directive() {
  return getRuleContext<SV3_1aPpParser::Sv_line_directiveContext>(0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::DescriptionContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}

SV3_1aPpParser::ModuleContext* SV3_1aPpParser::DescriptionContext::module() {
  return getRuleContext<SV3_1aPpParser::ModuleContext>(0);
}

SV3_1aPpParser::EndmoduleContext* SV3_1aPpParser::DescriptionContext::endmodule() {
  return getRuleContext<SV3_1aPpParser::EndmoduleContext>(0);
}

SV3_1aPpParser::Sv_interfaceContext* SV3_1aPpParser::DescriptionContext::sv_interface() {
  return getRuleContext<SV3_1aPpParser::Sv_interfaceContext>(0);
}

SV3_1aPpParser::EndinterfaceContext* SV3_1aPpParser::DescriptionContext::endinterface() {
  return getRuleContext<SV3_1aPpParser::EndinterfaceContext>(0);
}

SV3_1aPpParser::ProgramContext* SV3_1aPpParser::DescriptionContext::program() {
  return getRuleContext<SV3_1aPpParser::ProgramContext>(0);
}

SV3_1aPpParser::EndprogramContext* SV3_1aPpParser::DescriptionContext::endprogram() {
  return getRuleContext<SV3_1aPpParser::EndprogramContext>(0);
}

SV3_1aPpParser::PrimitiveContext* SV3_1aPpParser::DescriptionContext::primitive() {
  return getRuleContext<SV3_1aPpParser::PrimitiveContext>(0);
}

SV3_1aPpParser::EndprimitiveContext* SV3_1aPpParser::DescriptionContext::endprimitive() {
  return getRuleContext<SV3_1aPpParser::EndprimitiveContext>(0);
}

SV3_1aPpParser::Sv_packageContext* SV3_1aPpParser::DescriptionContext::sv_package() {
  return getRuleContext<SV3_1aPpParser::Sv_packageContext>(0);
}

SV3_1aPpParser::EndpackageContext* SV3_1aPpParser::DescriptionContext::endpackage() {
  return getRuleContext<SV3_1aPpParser::EndpackageContext>(0);
}

SV3_1aPpParser::CheckerContext* SV3_1aPpParser::DescriptionContext::checker() {
  return getRuleContext<SV3_1aPpParser::CheckerContext>(0);
}

SV3_1aPpParser::EndcheckerContext* SV3_1aPpParser::DescriptionContext::endchecker() {
  return getRuleContext<SV3_1aPpParser::EndcheckerContext>(0);
}

SV3_1aPpParser::ConfigContext* SV3_1aPpParser::DescriptionContext::config() {
  return getRuleContext<SV3_1aPpParser::ConfigContext>(0);
}

SV3_1aPpParser::EndconfigContext* SV3_1aPpParser::DescriptionContext::endconfig() {
  return getRuleContext<SV3_1aPpParser::EndconfigContext>(0);
}

SV3_1aPpParser::Text_blobContext* SV3_1aPpParser::DescriptionContext::text_blob() {
  return getRuleContext<SV3_1aPpParser::Text_blobContext>(0);
}


size_t SV3_1aPpParser::DescriptionContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDescription;
}

void SV3_1aPpParser::DescriptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDescription(this);
}

void SV3_1aPpParser::DescriptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDescription(this);
}

SV3_1aPpParser::DescriptionContext* SV3_1aPpParser::description() {
  DescriptionContext *_localctx = _tracker.createInstance<DescriptionContext>(_ctx, getState());
  enterRule(_localctx, 6, SV3_1aPpParser::RuleDescription);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(284);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(214);
      escaped_identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(215);
      unterminated_string();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(216);
      string();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(217);
      integral_number();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(218);
      macro_definition();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(219);
      comment();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(220);
      celldefine_directive();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(221);
      endcelldefine_directive();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(222);
      default_nettype_directive();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(223);
      undef_directive();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(224);
      ifdef_directive();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(225);
      ifndef_directive();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(226);
      else_directive();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(227);
      elsif_directive();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(228);
      elseif_directive();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(229);
      endif_directive();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(230);
      include_directive();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(231);
      resetall_directive();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(232);
      begin_keywords_directive();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(233);
      end_keywords_directive();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(234);
      timescale_directive();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(235);
      unconnected_drive_directive();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(236);
      nounconnected_drive_directive();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(237);
      line_directive();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(238);
      default_decay_time_directive();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(239);
      default_trireg_strength_directive();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(240);
      delay_mode_distributed_directive();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(241);
      delay_mode_path_directive();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(242);
      delay_mode_unit_directive();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(243);
      delay_mode_zero_directive();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(244);
      protect_directive();
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(245);
      endprotect_directive();
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(246);
      protected_directive();
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(247);
      endprotected_directive();
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(248);
      expand_vectornets_directive();
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(249);
      noexpand_vectornets_directive();
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(250);
      autoexpand_vectornets_directive();
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(251);
      remove_gatename_directive();
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(252);
      noremove_gatenames_directive();
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(253);
      remove_netname_directive();
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(254);
      noremove_netnames_directive();
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(255);
      accelerate_directive();
      break;
    }

    case 43: {
      enterOuterAlt(_localctx, 43);
      setState(256);
      noaccelerate_directive();
      break;
    }

    case 44: {
      enterOuterAlt(_localctx, 44);
      setState(257);
      undefineall_directive();
      break;
    }

    case 45: {
      enterOuterAlt(_localctx, 45);
      setState(258);
      uselib_directive();
      break;
    }

    case 46: {
      enterOuterAlt(_localctx, 46);
      setState(259);
      disable_portfaults_directive();
      break;
    }

    case 47: {
      enterOuterAlt(_localctx, 47);
      setState(260);
      enable_portfaults_directive();
      break;
    }

    case 48: {
      enterOuterAlt(_localctx, 48);
      setState(261);
      nosuppress_faults_directive();
      break;
    }

    case 49: {
      enterOuterAlt(_localctx, 49);
      setState(262);
      suppress_faults_directive();
      break;
    }

    case 50: {
      enterOuterAlt(_localctx, 50);
      setState(263);
      signed_directive();
      break;
    }

    case 51: {
      enterOuterAlt(_localctx, 51);
      setState(264);
      unsigned_directive();
      break;
    }

    case 52: {
      enterOuterAlt(_localctx, 52);
      setState(265);
      pragma_directive();
      break;
    }

    case 53: {
      enterOuterAlt(_localctx, 53);
      setState(266);
      sv_file_directive();
      break;
    }

    case 54: {
      enterOuterAlt(_localctx, 54);
      setState(267);
      sv_line_directive();
      break;
    }

    case 55: {
      enterOuterAlt(_localctx, 55);
      setState(268);
      macro_instance();
      break;
    }

    case 56: {
      enterOuterAlt(_localctx, 56);
      setState(269);
      module();
      break;
    }

    case 57: {
      enterOuterAlt(_localctx, 57);
      setState(270);
      endmodule();
      break;
    }

    case 58: {
      enterOuterAlt(_localctx, 58);
      setState(271);
      sv_interface();
      break;
    }

    case 59: {
      enterOuterAlt(_localctx, 59);
      setState(272);
      endinterface();
      break;
    }

    case 60: {
      enterOuterAlt(_localctx, 60);
      setState(273);
      program();
      break;
    }

    case 61: {
      enterOuterAlt(_localctx, 61);
      setState(274);
      endprogram();
      break;
    }

    case 62: {
      enterOuterAlt(_localctx, 62);
      setState(275);
      primitive();
      break;
    }

    case 63: {
      enterOuterAlt(_localctx, 63);
      setState(276);
      endprimitive();
      break;
    }

    case 64: {
      enterOuterAlt(_localctx, 64);
      setState(277);
      sv_package();
      break;
    }

    case 65: {
      enterOuterAlt(_localctx, 65);
      setState(278);
      endpackage();
      break;
    }

    case 66: {
      enterOuterAlt(_localctx, 66);
      setState(279);
      checker();
      break;
    }

    case 67: {
      enterOuterAlt(_localctx, 67);
      setState(280);
      endchecker();
      break;
    }

    case 68: {
      enterOuterAlt(_localctx, 68);
      setState(281);
      config();
      break;
    }

    case 69: {
      enterOuterAlt(_localctx, 69);
      setState(282);
      endconfig();
      break;
    }

    case 70: {
      enterOuterAlt(_localctx, 70);
      setState(283);
      text_blob();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Escaped_identifierContext ------------------------------------------------------------------

SV3_1aPpParser::Escaped_identifierContext::Escaped_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Escaped_identifierContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}


size_t SV3_1aPpParser::Escaped_identifierContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEscaped_identifier;
}

void SV3_1aPpParser::Escaped_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEscaped_identifier(this);
}

void SV3_1aPpParser::Escaped_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEscaped_identifier(this);
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::escaped_identifier() {
  Escaped_identifierContext *_localctx = _tracker.createInstance<Escaped_identifierContext>(_ctx, getState());
  enterRule(_localctx, 8, SV3_1aPpParser::RuleEscaped_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(286);
    match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Macro_instanceContext ------------------------------------------------------------------

SV3_1aPpParser::Macro_instanceContext::Macro_instanceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SV3_1aPpParser::Macro_instanceContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleMacro_instance;
}

void SV3_1aPpParser::Macro_instanceContext::copyFrom(Macro_instanceContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MacroInstanceWithArgsContext ------------------------------------------------------------------

tree::TerminalNode* SV3_1aPpParser::MacroInstanceWithArgsContext::OPEN_PARENS() {
  return getToken(SV3_1aPpParser::OPEN_PARENS, 0);
}

SV3_1aPpParser::Macro_actual_argsContext* SV3_1aPpParser::MacroInstanceWithArgsContext::macro_actual_args() {
  return getRuleContext<SV3_1aPpParser::Macro_actual_argsContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::MacroInstanceWithArgsContext::CLOSE_PARENS() {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::MacroInstanceWithArgsContext::Macro_identifier() {
  return getToken(SV3_1aPpParser::Macro_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::MacroInstanceWithArgsContext::Macro_Escaped_identifier() {
  return getToken(SV3_1aPpParser::Macro_Escaped_identifier, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::MacroInstanceWithArgsContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::MacroInstanceWithArgsContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

SV3_1aPpParser::MacroInstanceWithArgsContext::MacroInstanceWithArgsContext(Macro_instanceContext *ctx) { copyFrom(ctx); }

void SV3_1aPpParser::MacroInstanceWithArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacroInstanceWithArgs(this);
}
void SV3_1aPpParser::MacroInstanceWithArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacroInstanceWithArgs(this);
}
//----------------- MacroInstanceNoArgsContext ------------------------------------------------------------------

tree::TerminalNode* SV3_1aPpParser::MacroInstanceNoArgsContext::Macro_identifier() {
  return getToken(SV3_1aPpParser::Macro_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::MacroInstanceNoArgsContext::Macro_Escaped_identifier() {
  return getToken(SV3_1aPpParser::Macro_Escaped_identifier, 0);
}

SV3_1aPpParser::MacroInstanceNoArgsContext::MacroInstanceNoArgsContext(Macro_instanceContext *ctx) { copyFrom(ctx); }

void SV3_1aPpParser::MacroInstanceNoArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacroInstanceNoArgs(this);
}
void SV3_1aPpParser::MacroInstanceNoArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacroInstanceNoArgs(this);
}
SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::macro_instance() {
  Macro_instanceContext *_localctx = _tracker.createInstance<Macro_instanceContext>(_ctx, getState());
  enterRule(_localctx, 10, SV3_1aPpParser::RuleMacro_instance);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(300);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SV3_1aPpParser::MacroInstanceWithArgsContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(288);
      _la = _input->LA(1);
      if (!(_la == SV3_1aPpParser::Macro_identifier

      || _la == SV3_1aPpParser::Macro_Escaped_identifier)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(292);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SV3_1aPpParser::Spaces) {
        setState(289);
        match(SV3_1aPpParser::Spaces);
        setState(294);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(295);
      match(SV3_1aPpParser::OPEN_PARENS);
      setState(296);
      macro_actual_args();
      setState(297);
      match(SV3_1aPpParser::CLOSE_PARENS);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SV3_1aPpParser::MacroInstanceNoArgsContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(299);
      _la = _input->LA(1);
      if (!(_la == SV3_1aPpParser::Macro_identifier

      || _la == SV3_1aPpParser::Macro_Escaped_identifier)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unterminated_stringContext ------------------------------------------------------------------

SV3_1aPpParser::Unterminated_stringContext::Unterminated_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Unterminated_stringContext::DOUBLE_QUOTE() {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Unterminated_stringContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

std::vector<SV3_1aPpParser::String_blobContext *> SV3_1aPpParser::Unterminated_stringContext::string_blob() {
  return getRuleContexts<SV3_1aPpParser::String_blobContext>();
}

SV3_1aPpParser::String_blobContext* SV3_1aPpParser::Unterminated_stringContext::string_blob(size_t i) {
  return getRuleContext<SV3_1aPpParser::String_blobContext>(i);
}


size_t SV3_1aPpParser::Unterminated_stringContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleUnterminated_string;
}

void SV3_1aPpParser::Unterminated_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnterminated_string(this);
}

void SV3_1aPpParser::Unterminated_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnterminated_string(this);
}

SV3_1aPpParser::Unterminated_stringContext* SV3_1aPpParser::unterminated_string() {
  Unterminated_stringContext *_localctx = _tracker.createInstance<Unterminated_stringContext>(_ctx, getState());
  enterRule(_localctx, 12, SV3_1aPpParser::RuleUnterminated_string);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(302);
    match(SV3_1aPpParser::DOUBLE_QUOTE);
    setState(306);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::ESCAPED_IDENTIFIER || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 16769535) != 0)) {
      setState(303);
      string_blob();
      setState(308);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(309);
    match(SV3_1aPpParser::CR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Macro_actual_argsContext ------------------------------------------------------------------

SV3_1aPpParser::Macro_actual_argsContext::Macro_actual_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SV3_1aPpParser::Macro_argContext *> SV3_1aPpParser::Macro_actual_argsContext::macro_arg() {
  return getRuleContexts<SV3_1aPpParser::Macro_argContext>();
}

SV3_1aPpParser::Macro_argContext* SV3_1aPpParser::Macro_actual_argsContext::macro_arg(size_t i) {
  return getRuleContext<SV3_1aPpParser::Macro_argContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Macro_actual_argsContext::COMMA() {
  return getTokens(SV3_1aPpParser::COMMA);
}

tree::TerminalNode* SV3_1aPpParser::Macro_actual_argsContext::COMMA(size_t i) {
  return getToken(SV3_1aPpParser::COMMA, i);
}


size_t SV3_1aPpParser::Macro_actual_argsContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleMacro_actual_args;
}

void SV3_1aPpParser::Macro_actual_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacro_actual_args(this);
}

void SV3_1aPpParser::Macro_actual_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacro_actual_args(this);
}

SV3_1aPpParser::Macro_actual_argsContext* SV3_1aPpParser::macro_actual_args() {
  Macro_actual_argsContext *_localctx = _tracker.createInstance<Macro_actual_argsContext>(_ctx, getState());
  enterRule(_localctx, 14, SV3_1aPpParser::RuleMacro_actual_args);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(314);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 46) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 112072575) != 0)) {
      setState(311);
      macro_arg();
      setState(316);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(326);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::COMMA) {
      setState(317);
      match(SV3_1aPpParser::COMMA);
      setState(321);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 46) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 68)) & 112072575) != 0)) {
        setState(318);
        macro_arg();
        setState(323);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(328);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommentContext ------------------------------------------------------------------

SV3_1aPpParser::CommentContext::CommentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::CommentContext::One_line_comment() {
  return getToken(SV3_1aPpParser::One_line_comment, 0);
}

tree::TerminalNode* SV3_1aPpParser::CommentContext::Block_comment() {
  return getToken(SV3_1aPpParser::Block_comment, 0);
}


size_t SV3_1aPpParser::CommentContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleComment;
}

void SV3_1aPpParser::CommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComment(this);
}

void SV3_1aPpParser::CommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComment(this);
}

SV3_1aPpParser::CommentContext* SV3_1aPpParser::comment() {
  CommentContext *_localctx = _tracker.createInstance<CommentContext>(_ctx, getState());
  enterRule(_localctx, 16, SV3_1aPpParser::RuleComment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(329);
    _la = _input->LA(1);
    if (!(_la == SV3_1aPpParser::One_line_comment

    || _la == SV3_1aPpParser::Block_comment)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Integral_numberContext ------------------------------------------------------------------

SV3_1aPpParser::Integral_numberContext::Integral_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Integral_numberContext::INTEGRAL_NUMBER() {
  return getToken(SV3_1aPpParser::INTEGRAL_NUMBER, 0);
}


size_t SV3_1aPpParser::Integral_numberContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleIntegral_number;
}

void SV3_1aPpParser::Integral_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegral_number(this);
}

void SV3_1aPpParser::Integral_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegral_number(this);
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::integral_number() {
  Integral_numberContext *_localctx = _tracker.createInstance<Integral_numberContext>(_ctx, getState());
  enterRule(_localctx, 18, SV3_1aPpParser::RuleIntegral_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(331);
    match(SV3_1aPpParser::INTEGRAL_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pound_delayContext ------------------------------------------------------------------

SV3_1aPpParser::Pound_delayContext::Pound_delayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Pound_delayContext::POUND_DELAY() {
  return getToken(SV3_1aPpParser::POUND_DELAY, 0);
}


size_t SV3_1aPpParser::Pound_delayContext::getRuleIndex() const {
  return SV3_1aPpParser::RulePound_delay;
}

void SV3_1aPpParser::Pound_delayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPound_delay(this);
}

void SV3_1aPpParser::Pound_delayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPound_delay(this);
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::pound_delay() {
  Pound_delayContext *_localctx = _tracker.createInstance<Pound_delayContext>(_ctx, getState());
  enterRule(_localctx, 20, SV3_1aPpParser::RulePound_delay);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(333);
    match(SV3_1aPpParser::POUND_DELAY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pound_pound_delayContext ------------------------------------------------------------------

SV3_1aPpParser::Pound_pound_delayContext::Pound_pound_delayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Pound_pound_delayContext::Pound_Pound_delay() {
  return getToken(SV3_1aPpParser::Pound_Pound_delay, 0);
}


size_t SV3_1aPpParser::Pound_pound_delayContext::getRuleIndex() const {
  return SV3_1aPpParser::RulePound_pound_delay;
}

void SV3_1aPpParser::Pound_pound_delayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPound_pound_delay(this);
}

void SV3_1aPpParser::Pound_pound_delayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPound_pound_delay(this);
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::pound_pound_delay() {
  Pound_pound_delayContext *_localctx = _tracker.createInstance<Pound_pound_delayContext>(_ctx, getState());
  enterRule(_localctx, 22, SV3_1aPpParser::RulePound_pound_delay);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(335);
    match(SV3_1aPpParser::Pound_Pound_delay);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Macro_definitionContext ------------------------------------------------------------------

SV3_1aPpParser::Macro_definitionContext::Macro_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SV3_1aPpParser::Define_directiveContext* SV3_1aPpParser::Macro_definitionContext::define_directive() {
  return getRuleContext<SV3_1aPpParser::Define_directiveContext>(0);
}

SV3_1aPpParser::Simple_args_macro_definitionContext* SV3_1aPpParser::Macro_definitionContext::simple_args_macro_definition() {
  return getRuleContext<SV3_1aPpParser::Simple_args_macro_definitionContext>(0);
}

SV3_1aPpParser::Multiline_args_macro_definitionContext* SV3_1aPpParser::Macro_definitionContext::multiline_args_macro_definition() {
  return getRuleContext<SV3_1aPpParser::Multiline_args_macro_definitionContext>(0);
}

SV3_1aPpParser::Simple_no_args_macro_definitionContext* SV3_1aPpParser::Macro_definitionContext::simple_no_args_macro_definition() {
  return getRuleContext<SV3_1aPpParser::Simple_no_args_macro_definitionContext>(0);
}

SV3_1aPpParser::Multiline_no_args_macro_definitionContext* SV3_1aPpParser::Macro_definitionContext::multiline_no_args_macro_definition() {
  return getRuleContext<SV3_1aPpParser::Multiline_no_args_macro_definitionContext>(0);
}


size_t SV3_1aPpParser::Macro_definitionContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleMacro_definition;
}

void SV3_1aPpParser::Macro_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacro_definition(this);
}

void SV3_1aPpParser::Macro_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacro_definition(this);
}

SV3_1aPpParser::Macro_definitionContext* SV3_1aPpParser::macro_definition() {
  Macro_definitionContext *_localctx = _tracker.createInstance<Macro_definitionContext>(_ctx, getState());
  enterRule(_localctx, 24, SV3_1aPpParser::RuleMacro_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(342);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(337);
      define_directive();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(338);
      simple_args_macro_definition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(339);
      multiline_args_macro_definition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(340);
      simple_no_args_macro_definition();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(341);
      multiline_no_args_macro_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Include_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Include_directiveContext::Include_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Include_directiveContext::TICK_INCLUDE() {
  return getToken(SV3_1aPpParser::TICK_INCLUDE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Include_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Include_directiveContext::STRING() {
  return getToken(SV3_1aPpParser::STRING, 0);
}

tree::TerminalNode* SV3_1aPpParser::Include_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Include_directiveContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Include_directiveContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Include_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleInclude_directive;
}

void SV3_1aPpParser::Include_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclude_directive(this);
}

void SV3_1aPpParser::Include_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclude_directive(this);
}

SV3_1aPpParser::Include_directiveContext* SV3_1aPpParser::include_directive() {
  Include_directiveContext *_localctx = _tracker.createInstance<Include_directiveContext>(_ctx, getState());
  enterRule(_localctx, 26, SV3_1aPpParser::RuleInclude_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(344);
    match(SV3_1aPpParser::TICK_INCLUDE);
    setState(345);
    match(SV3_1aPpParser::Spaces);
    setState(350);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::STRING: {
        setState(346);
        match(SV3_1aPpParser::STRING);
        break;
      }

      case SV3_1aPpParser::Simple_identifier: {
        setState(347);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(348);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(349);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Line_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Line_directiveContext::Line_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Line_directiveContext::TICK_LINE() {
  return getToken(SV3_1aPpParser::TICK_LINE, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Line_directiveContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Line_directiveContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

std::vector<SV3_1aPpParser::Integral_numberContext *> SV3_1aPpParser::Line_directiveContext::integral_number() {
  return getRuleContexts<SV3_1aPpParser::Integral_numberContext>();
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Line_directiveContext::integral_number(size_t i) {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(i);
}

tree::TerminalNode* SV3_1aPpParser::Line_directiveContext::STRING() {
  return getToken(SV3_1aPpParser::STRING, 0);
}


size_t SV3_1aPpParser::Line_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleLine_directive;
}

void SV3_1aPpParser::Line_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLine_directive(this);
}

void SV3_1aPpParser::Line_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLine_directive(this);
}

SV3_1aPpParser::Line_directiveContext* SV3_1aPpParser::line_directive() {
  Line_directiveContext *_localctx = _tracker.createInstance<Line_directiveContext>(_ctx, getState());
  enterRule(_localctx, 28, SV3_1aPpParser::RuleLine_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(SV3_1aPpParser::TICK_LINE);
    setState(353);
    match(SV3_1aPpParser::Spaces);
    setState(354);
    integral_number();
    setState(355);
    match(SV3_1aPpParser::STRING);
    setState(356);
    match(SV3_1aPpParser::Spaces);
    setState(357);
    integral_number();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_nettype_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Default_nettype_directiveContext::Default_nettype_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Default_nettype_directiveContext::TICK_DEFAULT_NETTYPE() {
  return getToken(SV3_1aPpParser::TICK_DEFAULT_NETTYPE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_nettype_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_nettype_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}


size_t SV3_1aPpParser::Default_nettype_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDefault_nettype_directive;
}

void SV3_1aPpParser::Default_nettype_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_nettype_directive(this);
}

void SV3_1aPpParser::Default_nettype_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_nettype_directive(this);
}

SV3_1aPpParser::Default_nettype_directiveContext* SV3_1aPpParser::default_nettype_directive() {
  Default_nettype_directiveContext *_localctx = _tracker.createInstance<Default_nettype_directiveContext>(_ctx, getState());
  enterRule(_localctx, 30, SV3_1aPpParser::RuleDefault_nettype_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(359);
    match(SV3_1aPpParser::TICK_DEFAULT_NETTYPE);
    setState(360);
    match(SV3_1aPpParser::Spaces);
    setState(361);
    match(SV3_1aPpParser::Simple_identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sv_file_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Sv_file_directiveContext::Sv_file_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Sv_file_directiveContext::TICK_FILE__() {
  return getToken(SV3_1aPpParser::TICK_FILE__, 0);
}


size_t SV3_1aPpParser::Sv_file_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSv_file_directive;
}

void SV3_1aPpParser::Sv_file_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSv_file_directive(this);
}

void SV3_1aPpParser::Sv_file_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSv_file_directive(this);
}

SV3_1aPpParser::Sv_file_directiveContext* SV3_1aPpParser::sv_file_directive() {
  Sv_file_directiveContext *_localctx = _tracker.createInstance<Sv_file_directiveContext>(_ctx, getState());
  enterRule(_localctx, 32, SV3_1aPpParser::RuleSv_file_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(363);
    match(SV3_1aPpParser::TICK_FILE__);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sv_line_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Sv_line_directiveContext::Sv_line_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Sv_line_directiveContext::TICK_LINE__() {
  return getToken(SV3_1aPpParser::TICK_LINE__, 0);
}


size_t SV3_1aPpParser::Sv_line_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSv_line_directive;
}

void SV3_1aPpParser::Sv_line_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSv_line_directive(this);
}

void SV3_1aPpParser::Sv_line_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSv_line_directive(this);
}

SV3_1aPpParser::Sv_line_directiveContext* SV3_1aPpParser::sv_line_directive() {
  Sv_line_directiveContext *_localctx = _tracker.createInstance<Sv_line_directiveContext>(_ctx, getState());
  enterRule(_localctx, 34, SV3_1aPpParser::RuleSv_line_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(365);
    match(SV3_1aPpParser::TICK_LINE__);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Timescale_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Timescale_directiveContext::Timescale_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Timescale_directiveContext::TICK_TIMESCALE() {
  return getToken(SV3_1aPpParser::TICK_TIMESCALE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Timescale_directiveContext::TIMESCALE() {
  return getToken(SV3_1aPpParser::TIMESCALE, 0);
}


size_t SV3_1aPpParser::Timescale_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleTimescale_directive;
}

void SV3_1aPpParser::Timescale_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimescale_directive(this);
}

void SV3_1aPpParser::Timescale_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimescale_directive(this);
}

SV3_1aPpParser::Timescale_directiveContext* SV3_1aPpParser::timescale_directive() {
  Timescale_directiveContext *_localctx = _tracker.createInstance<Timescale_directiveContext>(_ctx, getState());
  enterRule(_localctx, 36, SV3_1aPpParser::RuleTimescale_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(367);
    match(SV3_1aPpParser::TICK_TIMESCALE);
    setState(368);
    match(SV3_1aPpParser::TIMESCALE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Undef_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Undef_directiveContext::Undef_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Undef_directiveContext::TICK_UNDEF() {
  return getToken(SV3_1aPpParser::TICK_UNDEF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Undef_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Undef_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Undef_directiveContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Undef_directiveContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Undef_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleUndef_directive;
}

void SV3_1aPpParser::Undef_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUndef_directive(this);
}

void SV3_1aPpParser::Undef_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUndef_directive(this);
}

SV3_1aPpParser::Undef_directiveContext* SV3_1aPpParser::undef_directive() {
  Undef_directiveContext *_localctx = _tracker.createInstance<Undef_directiveContext>(_ctx, getState());
  enterRule(_localctx, 38, SV3_1aPpParser::RuleUndef_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(370);
    match(SV3_1aPpParser::TICK_UNDEF);
    setState(371);
    match(SV3_1aPpParser::Spaces);
    setState(375);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::Simple_identifier: {
        setState(372);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(373);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(374);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ifdef_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Ifdef_directiveContext::Ifdef_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Ifdef_directiveContext::TICK_IFDEF() {
  return getToken(SV3_1aPpParser::TICK_IFDEF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Ifdef_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Ifdef_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Ifdef_directiveContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Ifdef_directiveContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Ifdef_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleIfdef_directive;
}

void SV3_1aPpParser::Ifdef_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfdef_directive(this);
}

void SV3_1aPpParser::Ifdef_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfdef_directive(this);
}

SV3_1aPpParser::Ifdef_directiveContext* SV3_1aPpParser::ifdef_directive() {
  Ifdef_directiveContext *_localctx = _tracker.createInstance<Ifdef_directiveContext>(_ctx, getState());
  enterRule(_localctx, 40, SV3_1aPpParser::RuleIfdef_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(377);
    match(SV3_1aPpParser::TICK_IFDEF);
    setState(378);
    match(SV3_1aPpParser::Spaces);
    setState(382);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::Simple_identifier: {
        setState(379);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(380);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(381);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ifdef_directive_in_macro_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::Ifdef_directive_in_macro_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::TICK_IFDEF() {
  return getToken(SV3_1aPpParser::TICK_IFDEF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

SV3_1aPpParser::Identifier_in_macro_bodyContext* SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::identifier_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Identifier_in_macro_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleIfdef_directive_in_macro_body;
}

void SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfdef_directive_in_macro_body(this);
}

void SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfdef_directive_in_macro_body(this);
}

SV3_1aPpParser::Ifdef_directive_in_macro_bodyContext* SV3_1aPpParser::ifdef_directive_in_macro_body() {
  Ifdef_directive_in_macro_bodyContext *_localctx = _tracker.createInstance<Ifdef_directive_in_macro_bodyContext>(_ctx, getState());
  enterRule(_localctx, 42, SV3_1aPpParser::RuleIfdef_directive_in_macro_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(384);
    match(SV3_1aPpParser::TICK_IFDEF);
    setState(385);
    match(SV3_1aPpParser::Spaces);
    setState(389);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::EOF:
      case SV3_1aPpParser::Simple_identifier: {
        setState(386);
        identifier_in_macro_body();
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(387);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(388);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ifndef_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Ifndef_directiveContext::Ifndef_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Ifndef_directiveContext::TICK_IFNDEF() {
  return getToken(SV3_1aPpParser::TICK_IFNDEF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Ifndef_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Ifndef_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Ifndef_directiveContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Ifndef_directiveContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Ifndef_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleIfndef_directive;
}

void SV3_1aPpParser::Ifndef_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfndef_directive(this);
}

void SV3_1aPpParser::Ifndef_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfndef_directive(this);
}

SV3_1aPpParser::Ifndef_directiveContext* SV3_1aPpParser::ifndef_directive() {
  Ifndef_directiveContext *_localctx = _tracker.createInstance<Ifndef_directiveContext>(_ctx, getState());
  enterRule(_localctx, 44, SV3_1aPpParser::RuleIfndef_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(391);
    match(SV3_1aPpParser::TICK_IFNDEF);
    setState(392);
    match(SV3_1aPpParser::Spaces);
    setState(396);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::Simple_identifier: {
        setState(393);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(394);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(395);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ifndef_directive_in_macro_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::Ifndef_directive_in_macro_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::TICK_IFNDEF() {
  return getToken(SV3_1aPpParser::TICK_IFNDEF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

SV3_1aPpParser::Identifier_in_macro_bodyContext* SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::identifier_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Identifier_in_macro_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleIfndef_directive_in_macro_body;
}

void SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfndef_directive_in_macro_body(this);
}

void SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfndef_directive_in_macro_body(this);
}

SV3_1aPpParser::Ifndef_directive_in_macro_bodyContext* SV3_1aPpParser::ifndef_directive_in_macro_body() {
  Ifndef_directive_in_macro_bodyContext *_localctx = _tracker.createInstance<Ifndef_directive_in_macro_bodyContext>(_ctx, getState());
  enterRule(_localctx, 46, SV3_1aPpParser::RuleIfndef_directive_in_macro_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(398);
    match(SV3_1aPpParser::TICK_IFNDEF);
    setState(399);
    match(SV3_1aPpParser::Spaces);
    setState(403);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::EOF:
      case SV3_1aPpParser::Simple_identifier: {
        setState(400);
        identifier_in_macro_body();
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(401);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(402);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elsif_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Elsif_directiveContext::Elsif_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Elsif_directiveContext::TICK_ELSIF() {
  return getToken(SV3_1aPpParser::TICK_ELSIF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Elsif_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Elsif_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Elsif_directiveContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Elsif_directiveContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Elsif_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleElsif_directive;
}

void SV3_1aPpParser::Elsif_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElsif_directive(this);
}

void SV3_1aPpParser::Elsif_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElsif_directive(this);
}

SV3_1aPpParser::Elsif_directiveContext* SV3_1aPpParser::elsif_directive() {
  Elsif_directiveContext *_localctx = _tracker.createInstance<Elsif_directiveContext>(_ctx, getState());
  enterRule(_localctx, 48, SV3_1aPpParser::RuleElsif_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(405);
    match(SV3_1aPpParser::TICK_ELSIF);
    setState(406);
    match(SV3_1aPpParser::Spaces);
    setState(410);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::Simple_identifier: {
        setState(407);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(408);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(409);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elsif_directive_in_macro_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::Elsif_directive_in_macro_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::TICK_ELSIF() {
  return getToken(SV3_1aPpParser::TICK_ELSIF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

SV3_1aPpParser::Identifier_in_macro_bodyContext* SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::identifier_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Identifier_in_macro_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleElsif_directive_in_macro_body;
}

void SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElsif_directive_in_macro_body(this);
}

void SV3_1aPpParser::Elsif_directive_in_macro_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElsif_directive_in_macro_body(this);
}

SV3_1aPpParser::Elsif_directive_in_macro_bodyContext* SV3_1aPpParser::elsif_directive_in_macro_body() {
  Elsif_directive_in_macro_bodyContext *_localctx = _tracker.createInstance<Elsif_directive_in_macro_bodyContext>(_ctx, getState());
  enterRule(_localctx, 50, SV3_1aPpParser::RuleElsif_directive_in_macro_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(412);
    match(SV3_1aPpParser::TICK_ELSIF);
    setState(413);
    match(SV3_1aPpParser::Spaces);
    setState(417);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::EOF:
      case SV3_1aPpParser::Simple_identifier: {
        setState(414);
        identifier_in_macro_body();
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(415);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(416);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elseif_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Elseif_directiveContext::Elseif_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Elseif_directiveContext::TICK_ELSEIF() {
  return getToken(SV3_1aPpParser::TICK_ELSEIF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Elseif_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Elseif_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Elseif_directiveContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Elseif_directiveContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Elseif_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleElseif_directive;
}

void SV3_1aPpParser::Elseif_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElseif_directive(this);
}

void SV3_1aPpParser::Elseif_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElseif_directive(this);
}

SV3_1aPpParser::Elseif_directiveContext* SV3_1aPpParser::elseif_directive() {
  Elseif_directiveContext *_localctx = _tracker.createInstance<Elseif_directiveContext>(_ctx, getState());
  enterRule(_localctx, 52, SV3_1aPpParser::RuleElseif_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(419);
    match(SV3_1aPpParser::TICK_ELSEIF);
    setState(420);
    match(SV3_1aPpParser::Spaces);
    setState(424);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::Simple_identifier: {
        setState(421);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(422);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(423);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elseif_directive_in_macro_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::Elseif_directive_in_macro_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::TICK_ELSEIF() {
  return getToken(SV3_1aPpParser::TICK_ELSEIF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

SV3_1aPpParser::Identifier_in_macro_bodyContext* SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::identifier_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Identifier_in_macro_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}


size_t SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleElseif_directive_in_macro_body;
}

void SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElseif_directive_in_macro_body(this);
}

void SV3_1aPpParser::Elseif_directive_in_macro_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElseif_directive_in_macro_body(this);
}

SV3_1aPpParser::Elseif_directive_in_macro_bodyContext* SV3_1aPpParser::elseif_directive_in_macro_body() {
  Elseif_directive_in_macro_bodyContext *_localctx = _tracker.createInstance<Elseif_directive_in_macro_bodyContext>(_ctx, getState());
  enterRule(_localctx, 54, SV3_1aPpParser::RuleElseif_directive_in_macro_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(426);
    match(SV3_1aPpParser::TICK_ELSEIF);
    setState(427);
    match(SV3_1aPpParser::Spaces);
    setState(431);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::EOF:
      case SV3_1aPpParser::Simple_identifier: {
        setState(428);
        identifier_in_macro_body();
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        setState(429);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      case SV3_1aPpParser::Macro_identifier:
      case SV3_1aPpParser::Macro_Escaped_identifier: {
        setState(430);
        macro_instance();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Else_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Else_directiveContext::Else_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Else_directiveContext::TICK_ELSE() {
  return getToken(SV3_1aPpParser::TICK_ELSE, 0);
}


size_t SV3_1aPpParser::Else_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleElse_directive;
}

void SV3_1aPpParser::Else_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElse_directive(this);
}

void SV3_1aPpParser::Else_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElse_directive(this);
}

SV3_1aPpParser::Else_directiveContext* SV3_1aPpParser::else_directive() {
  Else_directiveContext *_localctx = _tracker.createInstance<Else_directiveContext>(_ctx, getState());
  enterRule(_localctx, 56, SV3_1aPpParser::RuleElse_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(433);
    match(SV3_1aPpParser::TICK_ELSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Endif_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Endif_directiveContext::Endif_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Endif_directiveContext::TICK_ENDIF() {
  return getToken(SV3_1aPpParser::TICK_ENDIF, 0);
}

tree::TerminalNode* SV3_1aPpParser::Endif_directiveContext::One_line_comment() {
  return getToken(SV3_1aPpParser::One_line_comment, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Endif_directiveContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Endif_directiveContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}


size_t SV3_1aPpParser::Endif_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndif_directive;
}

void SV3_1aPpParser::Endif_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndif_directive(this);
}

void SV3_1aPpParser::Endif_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndif_directive(this);
}

SV3_1aPpParser::Endif_directiveContext* SV3_1aPpParser::endif_directive() {
  Endif_directiveContext *_localctx = _tracker.createInstance<Endif_directiveContext>(_ctx, getState());
  enterRule(_localctx, 58, SV3_1aPpParser::RuleEndif_directive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(444);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(435);
      match(SV3_1aPpParser::TICK_ENDIF);
      setState(439);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SV3_1aPpParser::Spaces) {
        setState(436);
        match(SV3_1aPpParser::Spaces);
        setState(441);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(442);
      match(SV3_1aPpParser::One_line_comment);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(443);
      match(SV3_1aPpParser::TICK_ENDIF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Resetall_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Resetall_directiveContext::Resetall_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Resetall_directiveContext::TICK_RESETALL() {
  return getToken(SV3_1aPpParser::TICK_RESETALL, 0);
}


size_t SV3_1aPpParser::Resetall_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleResetall_directive;
}

void SV3_1aPpParser::Resetall_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResetall_directive(this);
}

void SV3_1aPpParser::Resetall_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResetall_directive(this);
}

SV3_1aPpParser::Resetall_directiveContext* SV3_1aPpParser::resetall_directive() {
  Resetall_directiveContext *_localctx = _tracker.createInstance<Resetall_directiveContext>(_ctx, getState());
  enterRule(_localctx, 60, SV3_1aPpParser::RuleResetall_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(446);
    match(SV3_1aPpParser::TICK_RESETALL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Begin_keywords_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Begin_keywords_directiveContext::Begin_keywords_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Begin_keywords_directiveContext::TICK_BEGIN_KEYWORDS() {
  return getToken(SV3_1aPpParser::TICK_BEGIN_KEYWORDS, 0);
}

tree::TerminalNode* SV3_1aPpParser::Begin_keywords_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Begin_keywords_directiveContext::STRING() {
  return getToken(SV3_1aPpParser::STRING, 0);
}


size_t SV3_1aPpParser::Begin_keywords_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleBegin_keywords_directive;
}

void SV3_1aPpParser::Begin_keywords_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBegin_keywords_directive(this);
}

void SV3_1aPpParser::Begin_keywords_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBegin_keywords_directive(this);
}

SV3_1aPpParser::Begin_keywords_directiveContext* SV3_1aPpParser::begin_keywords_directive() {
  Begin_keywords_directiveContext *_localctx = _tracker.createInstance<Begin_keywords_directiveContext>(_ctx, getState());
  enterRule(_localctx, 62, SV3_1aPpParser::RuleBegin_keywords_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(448);
    match(SV3_1aPpParser::TICK_BEGIN_KEYWORDS);
    setState(449);
    match(SV3_1aPpParser::Spaces);
    setState(450);
    match(SV3_1aPpParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- End_keywords_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::End_keywords_directiveContext::End_keywords_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::End_keywords_directiveContext::TICK_END_KEYWORDS() {
  return getToken(SV3_1aPpParser::TICK_END_KEYWORDS, 0);
}


size_t SV3_1aPpParser::End_keywords_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEnd_keywords_directive;
}

void SV3_1aPpParser::End_keywords_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnd_keywords_directive(this);
}

void SV3_1aPpParser::End_keywords_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnd_keywords_directive(this);
}

SV3_1aPpParser::End_keywords_directiveContext* SV3_1aPpParser::end_keywords_directive() {
  End_keywords_directiveContext *_localctx = _tracker.createInstance<End_keywords_directiveContext>(_ctx, getState());
  enterRule(_localctx, 64, SV3_1aPpParser::RuleEnd_keywords_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(452);
    match(SV3_1aPpParser::TICK_END_KEYWORDS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pragma_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Pragma_directiveContext::Pragma_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Pragma_directiveContext::TICK_PRAGMA() {
  return getToken(SV3_1aPpParser::TICK_PRAGMA, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

std::vector<SV3_1aPpParser::Pragma_expressionContext *> SV3_1aPpParser::Pragma_directiveContext::pragma_expression() {
  return getRuleContexts<SV3_1aPpParser::Pragma_expressionContext>();
}

SV3_1aPpParser::Pragma_expressionContext* SV3_1aPpParser::Pragma_directiveContext::pragma_expression(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pragma_expressionContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Pragma_directiveContext::Special() {
  return getTokens(SV3_1aPpParser::Special);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_directiveContext::Special(size_t i) {
  return getToken(SV3_1aPpParser::Special, i);
}


size_t SV3_1aPpParser::Pragma_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RulePragma_directive;
}

void SV3_1aPpParser::Pragma_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPragma_directive(this);
}

void SV3_1aPpParser::Pragma_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPragma_directive(this);
}

SV3_1aPpParser::Pragma_directiveContext* SV3_1aPpParser::pragma_directive() {
  Pragma_directiveContext *_localctx = _tracker.createInstance<Pragma_directiveContext>(_ctx, getState());
  enterRule(_localctx, 66, SV3_1aPpParser::RulePragma_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(454);
    match(SV3_1aPpParser::TICK_PRAGMA);
    setState(455);
    match(SV3_1aPpParser::Spaces);
    setState(456);
    match(SV3_1aPpParser::Simple_identifier);
    setState(467);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(457);
        pragma_expression();
        setState(462);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(458);
            match(SV3_1aPpParser::Special);
            setState(459);
            pragma_expression(); 
          }
          setState(464);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
        } 
      }
      setState(469);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Celldefine_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Celldefine_directiveContext::Celldefine_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Celldefine_directiveContext::TICK_CELLDEFINE() {
  return getToken(SV3_1aPpParser::TICK_CELLDEFINE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Celldefine_directiveContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Celldefine_directiveContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Celldefine_directiveContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}


size_t SV3_1aPpParser::Celldefine_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleCelldefine_directive;
}

void SV3_1aPpParser::Celldefine_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCelldefine_directive(this);
}

void SV3_1aPpParser::Celldefine_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCelldefine_directive(this);
}

SV3_1aPpParser::Celldefine_directiveContext* SV3_1aPpParser::celldefine_directive() {
  Celldefine_directiveContext *_localctx = _tracker.createInstance<Celldefine_directiveContext>(_ctx, getState());
  enterRule(_localctx, 68, SV3_1aPpParser::RuleCelldefine_directive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(470);
    match(SV3_1aPpParser::TICK_CELLDEFINE);
    setState(474);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::Spaces) {
      setState(471);
      match(SV3_1aPpParser::Spaces);
      setState(476);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(477);
    match(SV3_1aPpParser::CR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Endcelldefine_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Endcelldefine_directiveContext::Endcelldefine_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Endcelldefine_directiveContext::TICK_ENDCELLDEFINE() {
  return getToken(SV3_1aPpParser::TICK_ENDCELLDEFINE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Endcelldefine_directiveContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Endcelldefine_directiveContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Endcelldefine_directiveContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}


size_t SV3_1aPpParser::Endcelldefine_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndcelldefine_directive;
}

void SV3_1aPpParser::Endcelldefine_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndcelldefine_directive(this);
}

void SV3_1aPpParser::Endcelldefine_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndcelldefine_directive(this);
}

SV3_1aPpParser::Endcelldefine_directiveContext* SV3_1aPpParser::endcelldefine_directive() {
  Endcelldefine_directiveContext *_localctx = _tracker.createInstance<Endcelldefine_directiveContext>(_ctx, getState());
  enterRule(_localctx, 70, SV3_1aPpParser::RuleEndcelldefine_directive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(479);
    match(SV3_1aPpParser::TICK_ENDCELLDEFINE);
    setState(483);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::Spaces) {
      setState(480);
      match(SV3_1aPpParser::Spaces);
      setState(485);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(486);
    match(SV3_1aPpParser::CR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protect_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Protect_directiveContext::Protect_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Protect_directiveContext::TICK_PROTECT() {
  return getToken(SV3_1aPpParser::TICK_PROTECT, 0);
}

tree::TerminalNode* SV3_1aPpParser::Protect_directiveContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Protect_directiveContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Protect_directiveContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}


size_t SV3_1aPpParser::Protect_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleProtect_directive;
}

void SV3_1aPpParser::Protect_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtect_directive(this);
}

void SV3_1aPpParser::Protect_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtect_directive(this);
}

SV3_1aPpParser::Protect_directiveContext* SV3_1aPpParser::protect_directive() {
  Protect_directiveContext *_localctx = _tracker.createInstance<Protect_directiveContext>(_ctx, getState());
  enterRule(_localctx, 72, SV3_1aPpParser::RuleProtect_directive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(488);
    match(SV3_1aPpParser::TICK_PROTECT);
    setState(492);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::Spaces) {
      setState(489);
      match(SV3_1aPpParser::Spaces);
      setState(494);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(495);
    match(SV3_1aPpParser::CR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Endprotect_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Endprotect_directiveContext::Endprotect_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Endprotect_directiveContext::TICK_ENDPROTECT() {
  return getToken(SV3_1aPpParser::TICK_ENDPROTECT, 0);
}

tree::TerminalNode* SV3_1aPpParser::Endprotect_directiveContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Endprotect_directiveContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Endprotect_directiveContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}


size_t SV3_1aPpParser::Endprotect_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndprotect_directive;
}

void SV3_1aPpParser::Endprotect_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndprotect_directive(this);
}

void SV3_1aPpParser::Endprotect_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndprotect_directive(this);
}

SV3_1aPpParser::Endprotect_directiveContext* SV3_1aPpParser::endprotect_directive() {
  Endprotect_directiveContext *_localctx = _tracker.createInstance<Endprotect_directiveContext>(_ctx, getState());
  enterRule(_localctx, 74, SV3_1aPpParser::RuleEndprotect_directive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    match(SV3_1aPpParser::TICK_ENDPROTECT);
    setState(501);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::Spaces) {
      setState(498);
      match(SV3_1aPpParser::Spaces);
      setState(503);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(504);
    match(SV3_1aPpParser::CR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Protected_directiveContext::Protected_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Protected_directiveContext::TICK_PROTECTED() {
  return getToken(SV3_1aPpParser::TICK_PROTECTED, 0);
}


size_t SV3_1aPpParser::Protected_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleProtected_directive;
}

void SV3_1aPpParser::Protected_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_directive(this);
}

void SV3_1aPpParser::Protected_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_directive(this);
}

SV3_1aPpParser::Protected_directiveContext* SV3_1aPpParser::protected_directive() {
  Protected_directiveContext *_localctx = _tracker.createInstance<Protected_directiveContext>(_ctx, getState());
  enterRule(_localctx, 76, SV3_1aPpParser::RuleProtected_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    match(SV3_1aPpParser::TICK_PROTECTED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Endprotected_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Endprotected_directiveContext::Endprotected_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Endprotected_directiveContext::TICK_ENDPROTECTED() {
  return getToken(SV3_1aPpParser::TICK_ENDPROTECTED, 0);
}


size_t SV3_1aPpParser::Endprotected_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndprotected_directive;
}

void SV3_1aPpParser::Endprotected_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndprotected_directive(this);
}

void SV3_1aPpParser::Endprotected_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndprotected_directive(this);
}

SV3_1aPpParser::Endprotected_directiveContext* SV3_1aPpParser::endprotected_directive() {
  Endprotected_directiveContext *_localctx = _tracker.createInstance<Endprotected_directiveContext>(_ctx, getState());
  enterRule(_localctx, 78, SV3_1aPpParser::RuleEndprotected_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(508);
    match(SV3_1aPpParser::TICK_ENDPROTECTED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expand_vectornets_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Expand_vectornets_directiveContext::Expand_vectornets_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Expand_vectornets_directiveContext::TICK_EXPAND_VECTORNETS() {
  return getToken(SV3_1aPpParser::TICK_EXPAND_VECTORNETS, 0);
}


size_t SV3_1aPpParser::Expand_vectornets_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleExpand_vectornets_directive;
}

void SV3_1aPpParser::Expand_vectornets_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpand_vectornets_directive(this);
}

void SV3_1aPpParser::Expand_vectornets_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpand_vectornets_directive(this);
}

SV3_1aPpParser::Expand_vectornets_directiveContext* SV3_1aPpParser::expand_vectornets_directive() {
  Expand_vectornets_directiveContext *_localctx = _tracker.createInstance<Expand_vectornets_directiveContext>(_ctx, getState());
  enterRule(_localctx, 80, SV3_1aPpParser::RuleExpand_vectornets_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(510);
    match(SV3_1aPpParser::TICK_EXPAND_VECTORNETS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Noexpand_vectornets_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Noexpand_vectornets_directiveContext::Noexpand_vectornets_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Noexpand_vectornets_directiveContext::TICK_NOEXPAND_VECTORNETS() {
  return getToken(SV3_1aPpParser::TICK_NOEXPAND_VECTORNETS, 0);
}


size_t SV3_1aPpParser::Noexpand_vectornets_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleNoexpand_vectornets_directive;
}

void SV3_1aPpParser::Noexpand_vectornets_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoexpand_vectornets_directive(this);
}

void SV3_1aPpParser::Noexpand_vectornets_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoexpand_vectornets_directive(this);
}

SV3_1aPpParser::Noexpand_vectornets_directiveContext* SV3_1aPpParser::noexpand_vectornets_directive() {
  Noexpand_vectornets_directiveContext *_localctx = _tracker.createInstance<Noexpand_vectornets_directiveContext>(_ctx, getState());
  enterRule(_localctx, 82, SV3_1aPpParser::RuleNoexpand_vectornets_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(512);
    match(SV3_1aPpParser::TICK_NOEXPAND_VECTORNETS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Autoexpand_vectornets_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Autoexpand_vectornets_directiveContext::Autoexpand_vectornets_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Autoexpand_vectornets_directiveContext::TICK_AUTOEXPAND_VECTORNETS() {
  return getToken(SV3_1aPpParser::TICK_AUTOEXPAND_VECTORNETS, 0);
}


size_t SV3_1aPpParser::Autoexpand_vectornets_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleAutoexpand_vectornets_directive;
}

void SV3_1aPpParser::Autoexpand_vectornets_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAutoexpand_vectornets_directive(this);
}

void SV3_1aPpParser::Autoexpand_vectornets_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAutoexpand_vectornets_directive(this);
}

SV3_1aPpParser::Autoexpand_vectornets_directiveContext* SV3_1aPpParser::autoexpand_vectornets_directive() {
  Autoexpand_vectornets_directiveContext *_localctx = _tracker.createInstance<Autoexpand_vectornets_directiveContext>(_ctx, getState());
  enterRule(_localctx, 84, SV3_1aPpParser::RuleAutoexpand_vectornets_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    match(SV3_1aPpParser::TICK_AUTOEXPAND_VECTORNETS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Uselib_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Uselib_directiveContext::Uselib_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Uselib_directiveContext::TICK_USELIB() {
  return getToken(SV3_1aPpParser::TICK_USELIB, 0);
}

std::vector<SV3_1aPpParser::Text_blobContext *> SV3_1aPpParser::Uselib_directiveContext::text_blob() {
  return getRuleContexts<SV3_1aPpParser::Text_blobContext>();
}

SV3_1aPpParser::Text_blobContext* SV3_1aPpParser::Uselib_directiveContext::text_blob(size_t i) {
  return getRuleContext<SV3_1aPpParser::Text_blobContext>(i);
}


size_t SV3_1aPpParser::Uselib_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleUselib_directive;
}

void SV3_1aPpParser::Uselib_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUselib_directive(this);
}

void SV3_1aPpParser::Uselib_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUselib_directive(this);
}

SV3_1aPpParser::Uselib_directiveContext* SV3_1aPpParser::uselib_directive() {
  Uselib_directiveContext *_localctx = _tracker.createInstance<Uselib_directiveContext>(_ctx, getState());
  enterRule(_localctx, 86, SV3_1aPpParser::RuleUselib_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(516);
    match(SV3_1aPpParser::TICK_USELIB);
    setState(518); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(517);
              text_blob();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(520); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Disable_portfaults_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Disable_portfaults_directiveContext::Disable_portfaults_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Disable_portfaults_directiveContext::TICK_DISABLE_PORTFAULTS() {
  return getToken(SV3_1aPpParser::TICK_DISABLE_PORTFAULTS, 0);
}


size_t SV3_1aPpParser::Disable_portfaults_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDisable_portfaults_directive;
}

void SV3_1aPpParser::Disable_portfaults_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisable_portfaults_directive(this);
}

void SV3_1aPpParser::Disable_portfaults_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisable_portfaults_directive(this);
}

SV3_1aPpParser::Disable_portfaults_directiveContext* SV3_1aPpParser::disable_portfaults_directive() {
  Disable_portfaults_directiveContext *_localctx = _tracker.createInstance<Disable_portfaults_directiveContext>(_ctx, getState());
  enterRule(_localctx, 88, SV3_1aPpParser::RuleDisable_portfaults_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(522);
    match(SV3_1aPpParser::TICK_DISABLE_PORTFAULTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enable_portfaults_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Enable_portfaults_directiveContext::Enable_portfaults_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Enable_portfaults_directiveContext::TICK_ENABLE_PORTFAULTS() {
  return getToken(SV3_1aPpParser::TICK_ENABLE_PORTFAULTS, 0);
}


size_t SV3_1aPpParser::Enable_portfaults_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEnable_portfaults_directive;
}

void SV3_1aPpParser::Enable_portfaults_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnable_portfaults_directive(this);
}

void SV3_1aPpParser::Enable_portfaults_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnable_portfaults_directive(this);
}

SV3_1aPpParser::Enable_portfaults_directiveContext* SV3_1aPpParser::enable_portfaults_directive() {
  Enable_portfaults_directiveContext *_localctx = _tracker.createInstance<Enable_portfaults_directiveContext>(_ctx, getState());
  enterRule(_localctx, 90, SV3_1aPpParser::RuleEnable_portfaults_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(524);
    match(SV3_1aPpParser::TICK_ENABLE_PORTFAULTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nosuppress_faults_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Nosuppress_faults_directiveContext::Nosuppress_faults_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Nosuppress_faults_directiveContext::TICK_NOSUPPRESS_FAULTS() {
  return getToken(SV3_1aPpParser::TICK_NOSUPPRESS_FAULTS, 0);
}


size_t SV3_1aPpParser::Nosuppress_faults_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleNosuppress_faults_directive;
}

void SV3_1aPpParser::Nosuppress_faults_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNosuppress_faults_directive(this);
}

void SV3_1aPpParser::Nosuppress_faults_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNosuppress_faults_directive(this);
}

SV3_1aPpParser::Nosuppress_faults_directiveContext* SV3_1aPpParser::nosuppress_faults_directive() {
  Nosuppress_faults_directiveContext *_localctx = _tracker.createInstance<Nosuppress_faults_directiveContext>(_ctx, getState());
  enterRule(_localctx, 92, SV3_1aPpParser::RuleNosuppress_faults_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(526);
    match(SV3_1aPpParser::TICK_NOSUPPRESS_FAULTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Suppress_faults_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Suppress_faults_directiveContext::Suppress_faults_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Suppress_faults_directiveContext::TICK_SUPPRESS_FAULTS() {
  return getToken(SV3_1aPpParser::TICK_SUPPRESS_FAULTS, 0);
}


size_t SV3_1aPpParser::Suppress_faults_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSuppress_faults_directive;
}

void SV3_1aPpParser::Suppress_faults_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuppress_faults_directive(this);
}

void SV3_1aPpParser::Suppress_faults_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuppress_faults_directive(this);
}

SV3_1aPpParser::Suppress_faults_directiveContext* SV3_1aPpParser::suppress_faults_directive() {
  Suppress_faults_directiveContext *_localctx = _tracker.createInstance<Suppress_faults_directiveContext>(_ctx, getState());
  enterRule(_localctx, 94, SV3_1aPpParser::RuleSuppress_faults_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(528);
    match(SV3_1aPpParser::TICK_SUPPRESS_FAULTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Signed_directiveContext::Signed_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Signed_directiveContext::TICK_SIGNED() {
  return getToken(SV3_1aPpParser::TICK_SIGNED, 0);
}


size_t SV3_1aPpParser::Signed_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSigned_directive;
}

void SV3_1aPpParser::Signed_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSigned_directive(this);
}

void SV3_1aPpParser::Signed_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSigned_directive(this);
}

SV3_1aPpParser::Signed_directiveContext* SV3_1aPpParser::signed_directive() {
  Signed_directiveContext *_localctx = _tracker.createInstance<Signed_directiveContext>(_ctx, getState());
  enterRule(_localctx, 96, SV3_1aPpParser::RuleSigned_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(530);
    match(SV3_1aPpParser::TICK_SIGNED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unsigned_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Unsigned_directiveContext::Unsigned_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Unsigned_directiveContext::TICK_UNSIGNED() {
  return getToken(SV3_1aPpParser::TICK_UNSIGNED, 0);
}


size_t SV3_1aPpParser::Unsigned_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleUnsigned_directive;
}

void SV3_1aPpParser::Unsigned_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnsigned_directive(this);
}

void SV3_1aPpParser::Unsigned_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnsigned_directive(this);
}

SV3_1aPpParser::Unsigned_directiveContext* SV3_1aPpParser::unsigned_directive() {
  Unsigned_directiveContext *_localctx = _tracker.createInstance<Unsigned_directiveContext>(_ctx, getState());
  enterRule(_localctx, 98, SV3_1aPpParser::RuleUnsigned_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(532);
    match(SV3_1aPpParser::TICK_UNSIGNED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Remove_gatename_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Remove_gatename_directiveContext::Remove_gatename_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Remove_gatename_directiveContext::TICK_REMOVE_GATENAME() {
  return getToken(SV3_1aPpParser::TICK_REMOVE_GATENAME, 0);
}


size_t SV3_1aPpParser::Remove_gatename_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleRemove_gatename_directive;
}

void SV3_1aPpParser::Remove_gatename_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRemove_gatename_directive(this);
}

void SV3_1aPpParser::Remove_gatename_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRemove_gatename_directive(this);
}

SV3_1aPpParser::Remove_gatename_directiveContext* SV3_1aPpParser::remove_gatename_directive() {
  Remove_gatename_directiveContext *_localctx = _tracker.createInstance<Remove_gatename_directiveContext>(_ctx, getState());
  enterRule(_localctx, 100, SV3_1aPpParser::RuleRemove_gatename_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(534);
    match(SV3_1aPpParser::TICK_REMOVE_GATENAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Noremove_gatenames_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Noremove_gatenames_directiveContext::Noremove_gatenames_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Noremove_gatenames_directiveContext::TICK_NOREMOVE_GATENAMES() {
  return getToken(SV3_1aPpParser::TICK_NOREMOVE_GATENAMES, 0);
}


size_t SV3_1aPpParser::Noremove_gatenames_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleNoremove_gatenames_directive;
}

void SV3_1aPpParser::Noremove_gatenames_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoremove_gatenames_directive(this);
}

void SV3_1aPpParser::Noremove_gatenames_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoremove_gatenames_directive(this);
}

SV3_1aPpParser::Noremove_gatenames_directiveContext* SV3_1aPpParser::noremove_gatenames_directive() {
  Noremove_gatenames_directiveContext *_localctx = _tracker.createInstance<Noremove_gatenames_directiveContext>(_ctx, getState());
  enterRule(_localctx, 102, SV3_1aPpParser::RuleNoremove_gatenames_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(536);
    match(SV3_1aPpParser::TICK_NOREMOVE_GATENAMES);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Remove_netname_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Remove_netname_directiveContext::Remove_netname_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Remove_netname_directiveContext::TICK_REMOVE_NETNAME() {
  return getToken(SV3_1aPpParser::TICK_REMOVE_NETNAME, 0);
}


size_t SV3_1aPpParser::Remove_netname_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleRemove_netname_directive;
}

void SV3_1aPpParser::Remove_netname_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRemove_netname_directive(this);
}

void SV3_1aPpParser::Remove_netname_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRemove_netname_directive(this);
}

SV3_1aPpParser::Remove_netname_directiveContext* SV3_1aPpParser::remove_netname_directive() {
  Remove_netname_directiveContext *_localctx = _tracker.createInstance<Remove_netname_directiveContext>(_ctx, getState());
  enterRule(_localctx, 104, SV3_1aPpParser::RuleRemove_netname_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(538);
    match(SV3_1aPpParser::TICK_REMOVE_NETNAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Noremove_netnames_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Noremove_netnames_directiveContext::Noremove_netnames_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Noremove_netnames_directiveContext::TICK_NOREMOVE_NETNAMES() {
  return getToken(SV3_1aPpParser::TICK_NOREMOVE_NETNAMES, 0);
}


size_t SV3_1aPpParser::Noremove_netnames_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleNoremove_netnames_directive;
}

void SV3_1aPpParser::Noremove_netnames_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoremove_netnames_directive(this);
}

void SV3_1aPpParser::Noremove_netnames_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoremove_netnames_directive(this);
}

SV3_1aPpParser::Noremove_netnames_directiveContext* SV3_1aPpParser::noremove_netnames_directive() {
  Noremove_netnames_directiveContext *_localctx = _tracker.createInstance<Noremove_netnames_directiveContext>(_ctx, getState());
  enterRule(_localctx, 106, SV3_1aPpParser::RuleNoremove_netnames_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(540);
    match(SV3_1aPpParser::TICK_NOREMOVE_NETNAMES);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accelerate_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Accelerate_directiveContext::Accelerate_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Accelerate_directiveContext::TICK_ACCELERATE() {
  return getToken(SV3_1aPpParser::TICK_ACCELERATE, 0);
}


size_t SV3_1aPpParser::Accelerate_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleAccelerate_directive;
}

void SV3_1aPpParser::Accelerate_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccelerate_directive(this);
}

void SV3_1aPpParser::Accelerate_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccelerate_directive(this);
}

SV3_1aPpParser::Accelerate_directiveContext* SV3_1aPpParser::accelerate_directive() {
  Accelerate_directiveContext *_localctx = _tracker.createInstance<Accelerate_directiveContext>(_ctx, getState());
  enterRule(_localctx, 108, SV3_1aPpParser::RuleAccelerate_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(542);
    match(SV3_1aPpParser::TICK_ACCELERATE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Noaccelerate_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Noaccelerate_directiveContext::Noaccelerate_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Noaccelerate_directiveContext::TICK_NOACCELERATE() {
  return getToken(SV3_1aPpParser::TICK_NOACCELERATE, 0);
}


size_t SV3_1aPpParser::Noaccelerate_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleNoaccelerate_directive;
}

void SV3_1aPpParser::Noaccelerate_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoaccelerate_directive(this);
}

void SV3_1aPpParser::Noaccelerate_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoaccelerate_directive(this);
}

SV3_1aPpParser::Noaccelerate_directiveContext* SV3_1aPpParser::noaccelerate_directive() {
  Noaccelerate_directiveContext *_localctx = _tracker.createInstance<Noaccelerate_directiveContext>(_ctx, getState());
  enterRule(_localctx, 110, SV3_1aPpParser::RuleNoaccelerate_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(544);
    match(SV3_1aPpParser::TICK_NOACCELERATE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_trireg_strength_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Default_trireg_strength_directiveContext::Default_trireg_strength_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Default_trireg_strength_directiveContext::TICK_DEFAULT_TRIREG_STRENGTH() {
  return getToken(SV3_1aPpParser::TICK_DEFAULT_TRIREG_STRENGTH, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_trireg_strength_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Default_trireg_strength_directiveContext::integral_number() {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(0);
}


size_t SV3_1aPpParser::Default_trireg_strength_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDefault_trireg_strength_directive;
}

void SV3_1aPpParser::Default_trireg_strength_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_trireg_strength_directive(this);
}

void SV3_1aPpParser::Default_trireg_strength_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_trireg_strength_directive(this);
}

SV3_1aPpParser::Default_trireg_strength_directiveContext* SV3_1aPpParser::default_trireg_strength_directive() {
  Default_trireg_strength_directiveContext *_localctx = _tracker.createInstance<Default_trireg_strength_directiveContext>(_ctx, getState());
  enterRule(_localctx, 112, SV3_1aPpParser::RuleDefault_trireg_strength_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    match(SV3_1aPpParser::TICK_DEFAULT_TRIREG_STRENGTH);
    setState(547);
    match(SV3_1aPpParser::Spaces);
    setState(548);
    integral_number();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_decay_time_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Default_decay_time_directiveContext::Default_decay_time_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Default_decay_time_directiveContext::TICK_DEFAULT_DECAY_TIME() {
  return getToken(SV3_1aPpParser::TICK_DEFAULT_DECAY_TIME, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_decay_time_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Default_decay_time_directiveContext::integral_number() {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Default_decay_time_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_decay_time_directiveContext::Fixed_point_number() {
  return getToken(SV3_1aPpParser::Fixed_point_number, 0);
}


size_t SV3_1aPpParser::Default_decay_time_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDefault_decay_time_directive;
}

void SV3_1aPpParser::Default_decay_time_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_decay_time_directive(this);
}

void SV3_1aPpParser::Default_decay_time_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_decay_time_directive(this);
}

SV3_1aPpParser::Default_decay_time_directiveContext* SV3_1aPpParser::default_decay_time_directive() {
  Default_decay_time_directiveContext *_localctx = _tracker.createInstance<Default_decay_time_directiveContext>(_ctx, getState());
  enterRule(_localctx, 114, SV3_1aPpParser::RuleDefault_decay_time_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(550);
    match(SV3_1aPpParser::TICK_DEFAULT_DECAY_TIME);
    setState(551);
    match(SV3_1aPpParser::Spaces);
    setState(555);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::INTEGRAL_NUMBER: {
        setState(552);
        integral_number();
        break;
      }

      case SV3_1aPpParser::Simple_identifier: {
        setState(553);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::Fixed_point_number: {
        setState(554);
        match(SV3_1aPpParser::Fixed_point_number);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unconnected_drive_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Unconnected_drive_directiveContext::Unconnected_drive_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Unconnected_drive_directiveContext::TICK_UNCONNECTED_DRIVE() {
  return getToken(SV3_1aPpParser::TICK_UNCONNECTED_DRIVE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Unconnected_drive_directiveContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Unconnected_drive_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}


size_t SV3_1aPpParser::Unconnected_drive_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleUnconnected_drive_directive;
}

void SV3_1aPpParser::Unconnected_drive_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnconnected_drive_directive(this);
}

void SV3_1aPpParser::Unconnected_drive_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnconnected_drive_directive(this);
}

SV3_1aPpParser::Unconnected_drive_directiveContext* SV3_1aPpParser::unconnected_drive_directive() {
  Unconnected_drive_directiveContext *_localctx = _tracker.createInstance<Unconnected_drive_directiveContext>(_ctx, getState());
  enterRule(_localctx, 116, SV3_1aPpParser::RuleUnconnected_drive_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    match(SV3_1aPpParser::TICK_UNCONNECTED_DRIVE);
    setState(558);
    match(SV3_1aPpParser::Spaces);
    setState(559);
    match(SV3_1aPpParser::Simple_identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nounconnected_drive_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Nounconnected_drive_directiveContext::Nounconnected_drive_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Nounconnected_drive_directiveContext::TICK_NOUNCONNECTED_DRIVE() {
  return getToken(SV3_1aPpParser::TICK_NOUNCONNECTED_DRIVE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Nounconnected_drive_directiveContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Nounconnected_drive_directiveContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Nounconnected_drive_directiveContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}


size_t SV3_1aPpParser::Nounconnected_drive_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleNounconnected_drive_directive;
}

void SV3_1aPpParser::Nounconnected_drive_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNounconnected_drive_directive(this);
}

void SV3_1aPpParser::Nounconnected_drive_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNounconnected_drive_directive(this);
}

SV3_1aPpParser::Nounconnected_drive_directiveContext* SV3_1aPpParser::nounconnected_drive_directive() {
  Nounconnected_drive_directiveContext *_localctx = _tracker.createInstance<Nounconnected_drive_directiveContext>(_ctx, getState());
  enterRule(_localctx, 118, SV3_1aPpParser::RuleNounconnected_drive_directive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    match(SV3_1aPpParser::TICK_NOUNCONNECTED_DRIVE);
    setState(565);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::Spaces) {
      setState(562);
      match(SV3_1aPpParser::Spaces);
      setState(567);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(568);
    match(SV3_1aPpParser::CR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_mode_distributed_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Delay_mode_distributed_directiveContext::Delay_mode_distributed_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Delay_mode_distributed_directiveContext::TICK_DELAY_MODE_DISTRIBUTED() {
  return getToken(SV3_1aPpParser::TICK_DELAY_MODE_DISTRIBUTED, 0);
}


size_t SV3_1aPpParser::Delay_mode_distributed_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDelay_mode_distributed_directive;
}

void SV3_1aPpParser::Delay_mode_distributed_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_mode_distributed_directive(this);
}

void SV3_1aPpParser::Delay_mode_distributed_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_mode_distributed_directive(this);
}

SV3_1aPpParser::Delay_mode_distributed_directiveContext* SV3_1aPpParser::delay_mode_distributed_directive() {
  Delay_mode_distributed_directiveContext *_localctx = _tracker.createInstance<Delay_mode_distributed_directiveContext>(_ctx, getState());
  enterRule(_localctx, 120, SV3_1aPpParser::RuleDelay_mode_distributed_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(570);
    match(SV3_1aPpParser::TICK_DELAY_MODE_DISTRIBUTED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_mode_path_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Delay_mode_path_directiveContext::Delay_mode_path_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Delay_mode_path_directiveContext::TICK_DELAY_MODE_PATH() {
  return getToken(SV3_1aPpParser::TICK_DELAY_MODE_PATH, 0);
}


size_t SV3_1aPpParser::Delay_mode_path_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDelay_mode_path_directive;
}

void SV3_1aPpParser::Delay_mode_path_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_mode_path_directive(this);
}

void SV3_1aPpParser::Delay_mode_path_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_mode_path_directive(this);
}

SV3_1aPpParser::Delay_mode_path_directiveContext* SV3_1aPpParser::delay_mode_path_directive() {
  Delay_mode_path_directiveContext *_localctx = _tracker.createInstance<Delay_mode_path_directiveContext>(_ctx, getState());
  enterRule(_localctx, 122, SV3_1aPpParser::RuleDelay_mode_path_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(572);
    match(SV3_1aPpParser::TICK_DELAY_MODE_PATH);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_mode_unit_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Delay_mode_unit_directiveContext::Delay_mode_unit_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Delay_mode_unit_directiveContext::TICK_DELAY_MODE_UNIT() {
  return getToken(SV3_1aPpParser::TICK_DELAY_MODE_UNIT, 0);
}


size_t SV3_1aPpParser::Delay_mode_unit_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDelay_mode_unit_directive;
}

void SV3_1aPpParser::Delay_mode_unit_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_mode_unit_directive(this);
}

void SV3_1aPpParser::Delay_mode_unit_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_mode_unit_directive(this);
}

SV3_1aPpParser::Delay_mode_unit_directiveContext* SV3_1aPpParser::delay_mode_unit_directive() {
  Delay_mode_unit_directiveContext *_localctx = _tracker.createInstance<Delay_mode_unit_directiveContext>(_ctx, getState());
  enterRule(_localctx, 124, SV3_1aPpParser::RuleDelay_mode_unit_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(574);
    match(SV3_1aPpParser::TICK_DELAY_MODE_UNIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_mode_zero_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Delay_mode_zero_directiveContext::Delay_mode_zero_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Delay_mode_zero_directiveContext::TICK_DELAY_MODE_ZERO() {
  return getToken(SV3_1aPpParser::TICK_DELAY_MODE_ZERO, 0);
}


size_t SV3_1aPpParser::Delay_mode_zero_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDelay_mode_zero_directive;
}

void SV3_1aPpParser::Delay_mode_zero_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_mode_zero_directive(this);
}

void SV3_1aPpParser::Delay_mode_zero_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_mode_zero_directive(this);
}

SV3_1aPpParser::Delay_mode_zero_directiveContext* SV3_1aPpParser::delay_mode_zero_directive() {
  Delay_mode_zero_directiveContext *_localctx = _tracker.createInstance<Delay_mode_zero_directiveContext>(_ctx, getState());
  enterRule(_localctx, 126, SV3_1aPpParser::RuleDelay_mode_zero_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(576);
    match(SV3_1aPpParser::TICK_DELAY_MODE_ZERO);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Undefineall_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Undefineall_directiveContext::Undefineall_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Undefineall_directiveContext::TICK_UNDEFINEALL() {
  return getToken(SV3_1aPpParser::TICK_UNDEFINEALL, 0);
}


size_t SV3_1aPpParser::Undefineall_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleUndefineall_directive;
}

void SV3_1aPpParser::Undefineall_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUndefineall_directive(this);
}

void SV3_1aPpParser::Undefineall_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUndefineall_directive(this);
}

SV3_1aPpParser::Undefineall_directiveContext* SV3_1aPpParser::undefineall_directive() {
  Undefineall_directiveContext *_localctx = _tracker.createInstance<Undefineall_directiveContext>(_ctx, getState());
  enterRule(_localctx, 128, SV3_1aPpParser::RuleUndefineall_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(578);
    match(SV3_1aPpParser::TICK_UNDEFINEALL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

SV3_1aPpParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::ModuleContext::MODULE() {
  return getToken(SV3_1aPpParser::MODULE, 0);
}


size_t SV3_1aPpParser::ModuleContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleModule;
}

void SV3_1aPpParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void SV3_1aPpParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}

SV3_1aPpParser::ModuleContext* SV3_1aPpParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 130, SV3_1aPpParser::RuleModule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(580);
    match(SV3_1aPpParser::MODULE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndmoduleContext ------------------------------------------------------------------

SV3_1aPpParser::EndmoduleContext::EndmoduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::EndmoduleContext::ENDMODULE() {
  return getToken(SV3_1aPpParser::ENDMODULE, 0);
}


size_t SV3_1aPpParser::EndmoduleContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndmodule;
}

void SV3_1aPpParser::EndmoduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndmodule(this);
}

void SV3_1aPpParser::EndmoduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndmodule(this);
}

SV3_1aPpParser::EndmoduleContext* SV3_1aPpParser::endmodule() {
  EndmoduleContext *_localctx = _tracker.createInstance<EndmoduleContext>(_ctx, getState());
  enterRule(_localctx, 132, SV3_1aPpParser::RuleEndmodule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    match(SV3_1aPpParser::ENDMODULE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sv_interfaceContext ------------------------------------------------------------------

SV3_1aPpParser::Sv_interfaceContext::Sv_interfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Sv_interfaceContext::INTERFACE() {
  return getToken(SV3_1aPpParser::INTERFACE, 0);
}


size_t SV3_1aPpParser::Sv_interfaceContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSv_interface;
}

void SV3_1aPpParser::Sv_interfaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSv_interface(this);
}

void SV3_1aPpParser::Sv_interfaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSv_interface(this);
}

SV3_1aPpParser::Sv_interfaceContext* SV3_1aPpParser::sv_interface() {
  Sv_interfaceContext *_localctx = _tracker.createInstance<Sv_interfaceContext>(_ctx, getState());
  enterRule(_localctx, 134, SV3_1aPpParser::RuleSv_interface);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(584);
    match(SV3_1aPpParser::INTERFACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndinterfaceContext ------------------------------------------------------------------

SV3_1aPpParser::EndinterfaceContext::EndinterfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::EndinterfaceContext::ENDINTERFACE() {
  return getToken(SV3_1aPpParser::ENDINTERFACE, 0);
}


size_t SV3_1aPpParser::EndinterfaceContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndinterface;
}

void SV3_1aPpParser::EndinterfaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndinterface(this);
}

void SV3_1aPpParser::EndinterfaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndinterface(this);
}

SV3_1aPpParser::EndinterfaceContext* SV3_1aPpParser::endinterface() {
  EndinterfaceContext *_localctx = _tracker.createInstance<EndinterfaceContext>(_ctx, getState());
  enterRule(_localctx, 136, SV3_1aPpParser::RuleEndinterface);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(586);
    match(SV3_1aPpParser::ENDINTERFACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

SV3_1aPpParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::ProgramContext::PROGRAM() {
  return getToken(SV3_1aPpParser::PROGRAM, 0);
}


size_t SV3_1aPpParser::ProgramContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleProgram;
}

void SV3_1aPpParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void SV3_1aPpParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

SV3_1aPpParser::ProgramContext* SV3_1aPpParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 138, SV3_1aPpParser::RuleProgram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(588);
    match(SV3_1aPpParser::PROGRAM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndprogramContext ------------------------------------------------------------------

SV3_1aPpParser::EndprogramContext::EndprogramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::EndprogramContext::ENDPROGRAM() {
  return getToken(SV3_1aPpParser::ENDPROGRAM, 0);
}


size_t SV3_1aPpParser::EndprogramContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndprogram;
}

void SV3_1aPpParser::EndprogramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndprogram(this);
}

void SV3_1aPpParser::EndprogramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndprogram(this);
}

SV3_1aPpParser::EndprogramContext* SV3_1aPpParser::endprogram() {
  EndprogramContext *_localctx = _tracker.createInstance<EndprogramContext>(_ctx, getState());
  enterRule(_localctx, 140, SV3_1aPpParser::RuleEndprogram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(590);
    match(SV3_1aPpParser::ENDPROGRAM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveContext ------------------------------------------------------------------

SV3_1aPpParser::PrimitiveContext::PrimitiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::PrimitiveContext::PRIMITIVE() {
  return getToken(SV3_1aPpParser::PRIMITIVE, 0);
}


size_t SV3_1aPpParser::PrimitiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RulePrimitive;
}

void SV3_1aPpParser::PrimitiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitive(this);
}

void SV3_1aPpParser::PrimitiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitive(this);
}

SV3_1aPpParser::PrimitiveContext* SV3_1aPpParser::primitive() {
  PrimitiveContext *_localctx = _tracker.createInstance<PrimitiveContext>(_ctx, getState());
  enterRule(_localctx, 142, SV3_1aPpParser::RulePrimitive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(SV3_1aPpParser::PRIMITIVE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndprimitiveContext ------------------------------------------------------------------

SV3_1aPpParser::EndprimitiveContext::EndprimitiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::EndprimitiveContext::ENDPRIMITIVE() {
  return getToken(SV3_1aPpParser::ENDPRIMITIVE, 0);
}


size_t SV3_1aPpParser::EndprimitiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndprimitive;
}

void SV3_1aPpParser::EndprimitiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndprimitive(this);
}

void SV3_1aPpParser::EndprimitiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndprimitive(this);
}

SV3_1aPpParser::EndprimitiveContext* SV3_1aPpParser::endprimitive() {
  EndprimitiveContext *_localctx = _tracker.createInstance<EndprimitiveContext>(_ctx, getState());
  enterRule(_localctx, 144, SV3_1aPpParser::RuleEndprimitive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(594);
    match(SV3_1aPpParser::ENDPRIMITIVE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sv_packageContext ------------------------------------------------------------------

SV3_1aPpParser::Sv_packageContext::Sv_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Sv_packageContext::PACKAGE() {
  return getToken(SV3_1aPpParser::PACKAGE, 0);
}


size_t SV3_1aPpParser::Sv_packageContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSv_package;
}

void SV3_1aPpParser::Sv_packageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSv_package(this);
}

void SV3_1aPpParser::Sv_packageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSv_package(this);
}

SV3_1aPpParser::Sv_packageContext* SV3_1aPpParser::sv_package() {
  Sv_packageContext *_localctx = _tracker.createInstance<Sv_packageContext>(_ctx, getState());
  enterRule(_localctx, 146, SV3_1aPpParser::RuleSv_package);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(SV3_1aPpParser::PACKAGE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpackageContext ------------------------------------------------------------------

SV3_1aPpParser::EndpackageContext::EndpackageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::EndpackageContext::ENDPACKAGE() {
  return getToken(SV3_1aPpParser::ENDPACKAGE, 0);
}


size_t SV3_1aPpParser::EndpackageContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndpackage;
}

void SV3_1aPpParser::EndpackageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndpackage(this);
}

void SV3_1aPpParser::EndpackageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndpackage(this);
}

SV3_1aPpParser::EndpackageContext* SV3_1aPpParser::endpackage() {
  EndpackageContext *_localctx = _tracker.createInstance<EndpackageContext>(_ctx, getState());
  enterRule(_localctx, 148, SV3_1aPpParser::RuleEndpackage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(598);
    match(SV3_1aPpParser::ENDPACKAGE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CheckerContext ------------------------------------------------------------------

SV3_1aPpParser::CheckerContext::CheckerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::CheckerContext::CHECKER() {
  return getToken(SV3_1aPpParser::CHECKER, 0);
}


size_t SV3_1aPpParser::CheckerContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleChecker;
}

void SV3_1aPpParser::CheckerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChecker(this);
}

void SV3_1aPpParser::CheckerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChecker(this);
}

SV3_1aPpParser::CheckerContext* SV3_1aPpParser::checker() {
  CheckerContext *_localctx = _tracker.createInstance<CheckerContext>(_ctx, getState());
  enterRule(_localctx, 150, SV3_1aPpParser::RuleChecker);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(600);
    match(SV3_1aPpParser::CHECKER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndcheckerContext ------------------------------------------------------------------

SV3_1aPpParser::EndcheckerContext::EndcheckerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::EndcheckerContext::ENDCHECKER() {
  return getToken(SV3_1aPpParser::ENDCHECKER, 0);
}


size_t SV3_1aPpParser::EndcheckerContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndchecker;
}

void SV3_1aPpParser::EndcheckerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndchecker(this);
}

void SV3_1aPpParser::EndcheckerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndchecker(this);
}

SV3_1aPpParser::EndcheckerContext* SV3_1aPpParser::endchecker() {
  EndcheckerContext *_localctx = _tracker.createInstance<EndcheckerContext>(_ctx, getState());
  enterRule(_localctx, 152, SV3_1aPpParser::RuleEndchecker);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    match(SV3_1aPpParser::ENDCHECKER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConfigContext ------------------------------------------------------------------

SV3_1aPpParser::ConfigContext::ConfigContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::ConfigContext::CONFIG() {
  return getToken(SV3_1aPpParser::CONFIG, 0);
}


size_t SV3_1aPpParser::ConfigContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleConfig;
}

void SV3_1aPpParser::ConfigContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfig(this);
}

void SV3_1aPpParser::ConfigContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfig(this);
}

SV3_1aPpParser::ConfigContext* SV3_1aPpParser::config() {
  ConfigContext *_localctx = _tracker.createInstance<ConfigContext>(_ctx, getState());
  enterRule(_localctx, 154, SV3_1aPpParser::RuleConfig);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(604);
    match(SV3_1aPpParser::CONFIG);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndconfigContext ------------------------------------------------------------------

SV3_1aPpParser::EndconfigContext::EndconfigContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::EndconfigContext::ENDCONFIG() {
  return getToken(SV3_1aPpParser::ENDCONFIG, 0);
}


size_t SV3_1aPpParser::EndconfigContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEndconfig;
}

void SV3_1aPpParser::EndconfigContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndconfig(this);
}

void SV3_1aPpParser::EndconfigContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndconfig(this);
}

SV3_1aPpParser::EndconfigContext* SV3_1aPpParser::endconfig() {
  EndconfigContext *_localctx = _tracker.createInstance<EndconfigContext>(_ctx, getState());
  enterRule(_localctx, 156, SV3_1aPpParser::RuleEndconfig);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(606);
    match(SV3_1aPpParser::ENDCONFIG);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Define_directiveContext ------------------------------------------------------------------

SV3_1aPpParser::Define_directiveContext::Define_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Define_directiveContext::TICK_DEFINE() {
  return getToken(SV3_1aPpParser::TICK_DEFINE, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Define_directiveContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Define_directiveContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

tree::TerminalNode* SV3_1aPpParser::Define_directiveContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Define_directiveContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Define_directiveContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}


size_t SV3_1aPpParser::Define_directiveContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDefine_directive;
}

void SV3_1aPpParser::Define_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefine_directive(this);
}

void SV3_1aPpParser::Define_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefine_directive(this);
}

SV3_1aPpParser::Define_directiveContext* SV3_1aPpParser::define_directive() {
  Define_directiveContext *_localctx = _tracker.createInstance<Define_directiveContext>(_ctx, getState());
  enterRule(_localctx, 158, SV3_1aPpParser::RuleDefine_directive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    match(SV3_1aPpParser::TICK_DEFINE);
    setState(609);
    match(SV3_1aPpParser::Spaces);
    setState(610);
    _la = _input->LA(1);
    if (!(_la == SV3_1aPpParser::ESCAPED_IDENTIFIER || _la == SV3_1aPpParser::Simple_identifier)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(614);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::Spaces) {
      setState(611);
      match(SV3_1aPpParser::Spaces);
      setState(616);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(617);
    match(SV3_1aPpParser::CR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiline_no_args_macro_definitionContext ------------------------------------------------------------------

SV3_1aPpParser::Multiline_no_args_macro_definitionContext::Multiline_no_args_macro_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Multiline_no_args_macro_definitionContext::TICK_DEFINE() {
  return getToken(SV3_1aPpParser::TICK_DEFINE, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Multiline_no_args_macro_definitionContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Multiline_no_args_macro_definitionContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

SV3_1aPpParser::Escaped_macro_definition_bodyContext* SV3_1aPpParser::Multiline_no_args_macro_definitionContext::escaped_macro_definition_body() {
  return getRuleContext<SV3_1aPpParser::Escaped_macro_definition_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Multiline_no_args_macro_definitionContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Multiline_no_args_macro_definitionContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}


size_t SV3_1aPpParser::Multiline_no_args_macro_definitionContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleMultiline_no_args_macro_definition;
}

void SV3_1aPpParser::Multiline_no_args_macro_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiline_no_args_macro_definition(this);
}

void SV3_1aPpParser::Multiline_no_args_macro_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiline_no_args_macro_definition(this);
}

SV3_1aPpParser::Multiline_no_args_macro_definitionContext* SV3_1aPpParser::multiline_no_args_macro_definition() {
  Multiline_no_args_macro_definitionContext *_localctx = _tracker.createInstance<Multiline_no_args_macro_definitionContext>(_ctx, getState());
  enterRule(_localctx, 160, SV3_1aPpParser::RuleMultiline_no_args_macro_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(619);
    match(SV3_1aPpParser::TICK_DEFINE);
    setState(620);
    match(SV3_1aPpParser::Spaces);
    setState(621);
    _la = _input->LA(1);
    if (!(_la == SV3_1aPpParser::ESCAPED_IDENTIFIER || _la == SV3_1aPpParser::Simple_identifier)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(625);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(622);
        match(SV3_1aPpParser::Spaces); 
      }
      setState(627);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    }
    setState(628);
    escaped_macro_definition_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiline_args_macro_definitionContext ------------------------------------------------------------------

SV3_1aPpParser::Multiline_args_macro_definitionContext::Multiline_args_macro_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Multiline_args_macro_definitionContext::TICK_DEFINE() {
  return getToken(SV3_1aPpParser::TICK_DEFINE, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Multiline_args_macro_definitionContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Multiline_args_macro_definitionContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

SV3_1aPpParser::Macro_argumentsContext* SV3_1aPpParser::Multiline_args_macro_definitionContext::macro_arguments() {
  return getRuleContext<SV3_1aPpParser::Macro_argumentsContext>(0);
}

SV3_1aPpParser::Escaped_macro_definition_bodyContext* SV3_1aPpParser::Multiline_args_macro_definitionContext::escaped_macro_definition_body() {
  return getRuleContext<SV3_1aPpParser::Escaped_macro_definition_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Multiline_args_macro_definitionContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Multiline_args_macro_definitionContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}


size_t SV3_1aPpParser::Multiline_args_macro_definitionContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleMultiline_args_macro_definition;
}

void SV3_1aPpParser::Multiline_args_macro_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiline_args_macro_definition(this);
}

void SV3_1aPpParser::Multiline_args_macro_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiline_args_macro_definition(this);
}

SV3_1aPpParser::Multiline_args_macro_definitionContext* SV3_1aPpParser::multiline_args_macro_definition() {
  Multiline_args_macro_definitionContext *_localctx = _tracker.createInstance<Multiline_args_macro_definitionContext>(_ctx, getState());
  enterRule(_localctx, 162, SV3_1aPpParser::RuleMultiline_args_macro_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(630);
    match(SV3_1aPpParser::TICK_DEFINE);
    setState(631);
    match(SV3_1aPpParser::Spaces);
    setState(632);
    _la = _input->LA(1);
    if (!(_la == SV3_1aPpParser::ESCAPED_IDENTIFIER || _la == SV3_1aPpParser::Simple_identifier)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(633);
    macro_arguments();
    setState(637);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(634);
        match(SV3_1aPpParser::Spaces); 
      }
      setState(639);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    }
    setState(640);
    escaped_macro_definition_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_no_args_macro_definitionContext ------------------------------------------------------------------

SV3_1aPpParser::Simple_no_args_macro_definitionContext::Simple_no_args_macro_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definitionContext::TICK_DEFINE() {
  return getToken(SV3_1aPpParser::TICK_DEFINE, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_no_args_macro_definitionContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definitionContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

SV3_1aPpParser::Simple_macro_definition_bodyContext* SV3_1aPpParser::Simple_no_args_macro_definitionContext::simple_macro_definition_body() {
  return getRuleContext<SV3_1aPpParser::Simple_macro_definition_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definitionContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definitionContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definitionContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definitionContext::One_line_comment() {
  return getToken(SV3_1aPpParser::One_line_comment, 0);
}


size_t SV3_1aPpParser::Simple_no_args_macro_definitionContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSimple_no_args_macro_definition;
}

void SV3_1aPpParser::Simple_no_args_macro_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_no_args_macro_definition(this);
}

void SV3_1aPpParser::Simple_no_args_macro_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_no_args_macro_definition(this);
}

SV3_1aPpParser::Simple_no_args_macro_definitionContext* SV3_1aPpParser::simple_no_args_macro_definition() {
  Simple_no_args_macro_definitionContext *_localctx = _tracker.createInstance<Simple_no_args_macro_definitionContext>(_ctx, getState());
  enterRule(_localctx, 164, SV3_1aPpParser::RuleSimple_no_args_macro_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(659);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(642);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(643);
      match(SV3_1aPpParser::Spaces);
      setState(644);
      _la = _input->LA(1);
      if (!(_la == SV3_1aPpParser::ESCAPED_IDENTIFIER || _la == SV3_1aPpParser::Simple_identifier)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(645);
      match(SV3_1aPpParser::Spaces);
      setState(646);
      simple_macro_definition_body();
      setState(647);
      _la = _input->LA(1);
      if (!(_la == SV3_1aPpParser::One_line_comment || _la == SV3_1aPpParser::CR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(649);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(650);
      match(SV3_1aPpParser::Spaces);
      setState(651);
      _la = _input->LA(1);
      if (!(_la == SV3_1aPpParser::ESCAPED_IDENTIFIER || _la == SV3_1aPpParser::Simple_identifier)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(655);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SV3_1aPpParser::Spaces) {
        setState(652);
        match(SV3_1aPpParser::Spaces);
        setState(657);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(658);
      match(SV3_1aPpParser::CR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_args_macro_definitionContext ------------------------------------------------------------------

SV3_1aPpParser::Simple_args_macro_definitionContext::Simple_args_macro_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definitionContext::TICK_DEFINE() {
  return getToken(SV3_1aPpParser::TICK_DEFINE, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_args_macro_definitionContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definitionContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

SV3_1aPpParser::Macro_argumentsContext* SV3_1aPpParser::Simple_args_macro_definitionContext::macro_arguments() {
  return getRuleContext<SV3_1aPpParser::Macro_argumentsContext>(0);
}

SV3_1aPpParser::Simple_macro_definition_bodyContext* SV3_1aPpParser::Simple_args_macro_definitionContext::simple_macro_definition_body() {
  return getRuleContext<SV3_1aPpParser::Simple_macro_definition_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definitionContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definitionContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definitionContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definitionContext::One_line_comment() {
  return getToken(SV3_1aPpParser::One_line_comment, 0);
}


size_t SV3_1aPpParser::Simple_args_macro_definitionContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSimple_args_macro_definition;
}

void SV3_1aPpParser::Simple_args_macro_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_args_macro_definition(this);
}

void SV3_1aPpParser::Simple_args_macro_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_args_macro_definition(this);
}

SV3_1aPpParser::Simple_args_macro_definitionContext* SV3_1aPpParser::simple_args_macro_definition() {
  Simple_args_macro_definitionContext *_localctx = _tracker.createInstance<Simple_args_macro_definitionContext>(_ctx, getState());
  enterRule(_localctx, 166, SV3_1aPpParser::RuleSimple_args_macro_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(681);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(661);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(662);
      match(SV3_1aPpParser::Spaces);
      setState(663);
      _la = _input->LA(1);
      if (!(_la == SV3_1aPpParser::ESCAPED_IDENTIFIER || _la == SV3_1aPpParser::Simple_identifier)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(664);
      macro_arguments();
      setState(665);
      match(SV3_1aPpParser::Spaces);
      setState(666);
      simple_macro_definition_body();
      setState(667);
      _la = _input->LA(1);
      if (!(_la == SV3_1aPpParser::One_line_comment || _la == SV3_1aPpParser::CR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(669);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(670);
      match(SV3_1aPpParser::Spaces);
      setState(671);
      _la = _input->LA(1);
      if (!(_la == SV3_1aPpParser::ESCAPED_IDENTIFIER || _la == SV3_1aPpParser::Simple_identifier)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(672);
      macro_arguments();
      setState(676);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SV3_1aPpParser::Spaces) {
        setState(673);
        match(SV3_1aPpParser::Spaces);
        setState(678);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(679);
      match(SV3_1aPpParser::CR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Identifier_in_macro_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Identifier_in_macro_bodyContext::Identifier_in_macro_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Identifier_in_macro_bodyContext::Simple_identifier() {
  return getTokens(SV3_1aPpParser::Simple_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Identifier_in_macro_bodyContext::Simple_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Simple_identifier, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Identifier_in_macro_bodyContext::TICK_TICK() {
  return getTokens(SV3_1aPpParser::TICK_TICK);
}

tree::TerminalNode* SV3_1aPpParser::Identifier_in_macro_bodyContext::TICK_TICK(size_t i) {
  return getToken(SV3_1aPpParser::TICK_TICK, i);
}


size_t SV3_1aPpParser::Identifier_in_macro_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleIdentifier_in_macro_body;
}

void SV3_1aPpParser::Identifier_in_macro_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier_in_macro_body(this);
}

void SV3_1aPpParser::Identifier_in_macro_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier_in_macro_body(this);
}

SV3_1aPpParser::Identifier_in_macro_bodyContext* SV3_1aPpParser::identifier_in_macro_body() {
  Identifier_in_macro_bodyContext *_localctx = _tracker.createInstance<Identifier_in_macro_bodyContext>(_ctx, getState());
  enterRule(_localctx, 168, SV3_1aPpParser::RuleIdentifier_in_macro_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(689);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(683);
        match(SV3_1aPpParser::Simple_identifier);
        setState(685);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
        case 1: {
          setState(684);
          match(SV3_1aPpParser::TICK_TICK);
          break;
        }

        default:
          break;
        } 
      }
      setState(691);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_no_args_macro_definition_in_macro_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::Simple_no_args_macro_definition_in_macro_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::TICK_DEFINE() {
  return getToken(SV3_1aPpParser::TICK_DEFINE, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext* SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::simple_macro_definition_body_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext>(0);
}

SV3_1aPpParser::Identifier_in_macro_bodyContext* SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::identifier_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Identifier_in_macro_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::TICK_VARIABLE() {
  return getToken(SV3_1aPpParser::TICK_VARIABLE, 0);
}


size_t SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSimple_no_args_macro_definition_in_macro_body;
}

void SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_no_args_macro_definition_in_macro_body(this);
}

void SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_no_args_macro_definition_in_macro_body(this);
}

SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext* SV3_1aPpParser::simple_no_args_macro_definition_in_macro_body() {
  Simple_no_args_macro_definition_in_macro_bodyContext *_localctx = _tracker.createInstance<Simple_no_args_macro_definition_in_macro_bodyContext>(_ctx, getState());
  enterRule(_localctx, 170, SV3_1aPpParser::RuleSimple_no_args_macro_definition_in_macro_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(720);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(692);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(693);
      match(SV3_1aPpParser::Spaces);
      setState(696);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SV3_1aPpParser::Simple_identifier:
        case SV3_1aPpParser::Spaces: {
          setState(694);
          identifier_in_macro_body();
          break;
        }

        case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
          setState(695);
          match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(698);
      match(SV3_1aPpParser::Spaces);
      setState(699);
      simple_macro_definition_body_in_macro_body();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(700);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(701);
      match(SV3_1aPpParser::Spaces);
      setState(704);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
      case 1: {
        setState(702);
        identifier_in_macro_body();
        break;
      }

      case 2: {
        setState(703);
        match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
        break;
      }

      default:
        break;
      }
      setState(709);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(706);
          match(SV3_1aPpParser::Spaces); 
        }
        setState(711);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(712);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(713);
      match(SV3_1aPpParser::Spaces);
      setState(716);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SV3_1aPpParser::TICK_VARIABLE:
        case SV3_1aPpParser::Simple_identifier: {
          setState(714);
          identifier_in_macro_body();
          break;
        }

        case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
          setState(715);
          match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(718);
      match(SV3_1aPpParser::TICK_VARIABLE);
      setState(719);
      simple_macro_definition_body_in_macro_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_args_macro_definition_in_macro_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::Simple_args_macro_definition_in_macro_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::TICK_DEFINE() {
  return getToken(SV3_1aPpParser::TICK_DEFINE, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

SV3_1aPpParser::Macro_argumentsContext* SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::macro_arguments() {
  return getRuleContext<SV3_1aPpParser::Macro_argumentsContext>(0);
}

SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext* SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::simple_macro_definition_body_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext>(0);
}

SV3_1aPpParser::Identifier_in_macro_bodyContext* SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::identifier_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Identifier_in_macro_bodyContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::ESCAPED_IDENTIFIER() {
  return getToken(SV3_1aPpParser::ESCAPED_IDENTIFIER, 0);
}


size_t SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSimple_args_macro_definition_in_macro_body;
}

void SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_args_macro_definition_in_macro_body(this);
}

void SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_args_macro_definition_in_macro_body(this);
}

SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext* SV3_1aPpParser::simple_args_macro_definition_in_macro_body() {
  Simple_args_macro_definition_in_macro_bodyContext *_localctx = _tracker.createInstance<Simple_args_macro_definition_in_macro_bodyContext>(_ctx, getState());
  enterRule(_localctx, 172, SV3_1aPpParser::RuleSimple_args_macro_definition_in_macro_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(739);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(722);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(723);
      match(SV3_1aPpParser::Spaces);
      setState(726);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SV3_1aPpParser::Simple_identifier:
        case SV3_1aPpParser::OPEN_PARENS: {
          setState(724);
          identifier_in_macro_body();
          break;
        }

        case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
          setState(725);
          match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(728);
      macro_arguments();
      setState(729);
      match(SV3_1aPpParser::Spaces);
      setState(730);
      simple_macro_definition_body_in_macro_body();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(732);
      match(SV3_1aPpParser::TICK_DEFINE);
      setState(733);
      match(SV3_1aPpParser::Spaces);
      setState(736);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SV3_1aPpParser::Simple_identifier:
        case SV3_1aPpParser::OPEN_PARENS: {
          setState(734);
          identifier_in_macro_body();
          break;
        }

        case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
          setState(735);
          match(SV3_1aPpParser::ESCAPED_IDENTIFIER);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(738);
      macro_arguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Directive_in_macroContext ------------------------------------------------------------------

SV3_1aPpParser::Directive_in_macroContext::Directive_in_macroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SV3_1aPpParser::Celldefine_directiveContext* SV3_1aPpParser::Directive_in_macroContext::celldefine_directive() {
  return getRuleContext<SV3_1aPpParser::Celldefine_directiveContext>(0);
}

SV3_1aPpParser::Endcelldefine_directiveContext* SV3_1aPpParser::Directive_in_macroContext::endcelldefine_directive() {
  return getRuleContext<SV3_1aPpParser::Endcelldefine_directiveContext>(0);
}

SV3_1aPpParser::Default_nettype_directiveContext* SV3_1aPpParser::Directive_in_macroContext::default_nettype_directive() {
  return getRuleContext<SV3_1aPpParser::Default_nettype_directiveContext>(0);
}

SV3_1aPpParser::Undef_directiveContext* SV3_1aPpParser::Directive_in_macroContext::undef_directive() {
  return getRuleContext<SV3_1aPpParser::Undef_directiveContext>(0);
}

SV3_1aPpParser::Ifdef_directiveContext* SV3_1aPpParser::Directive_in_macroContext::ifdef_directive() {
  return getRuleContext<SV3_1aPpParser::Ifdef_directiveContext>(0);
}

SV3_1aPpParser::Ifndef_directiveContext* SV3_1aPpParser::Directive_in_macroContext::ifndef_directive() {
  return getRuleContext<SV3_1aPpParser::Ifndef_directiveContext>(0);
}

SV3_1aPpParser::Else_directiveContext* SV3_1aPpParser::Directive_in_macroContext::else_directive() {
  return getRuleContext<SV3_1aPpParser::Else_directiveContext>(0);
}

SV3_1aPpParser::Elsif_directiveContext* SV3_1aPpParser::Directive_in_macroContext::elsif_directive() {
  return getRuleContext<SV3_1aPpParser::Elsif_directiveContext>(0);
}

SV3_1aPpParser::Elseif_directiveContext* SV3_1aPpParser::Directive_in_macroContext::elseif_directive() {
  return getRuleContext<SV3_1aPpParser::Elseif_directiveContext>(0);
}

SV3_1aPpParser::Endif_directiveContext* SV3_1aPpParser::Directive_in_macroContext::endif_directive() {
  return getRuleContext<SV3_1aPpParser::Endif_directiveContext>(0);
}

SV3_1aPpParser::Include_directiveContext* SV3_1aPpParser::Directive_in_macroContext::include_directive() {
  return getRuleContext<SV3_1aPpParser::Include_directiveContext>(0);
}

SV3_1aPpParser::Resetall_directiveContext* SV3_1aPpParser::Directive_in_macroContext::resetall_directive() {
  return getRuleContext<SV3_1aPpParser::Resetall_directiveContext>(0);
}

SV3_1aPpParser::Timescale_directiveContext* SV3_1aPpParser::Directive_in_macroContext::timescale_directive() {
  return getRuleContext<SV3_1aPpParser::Timescale_directiveContext>(0);
}

SV3_1aPpParser::Unconnected_drive_directiveContext* SV3_1aPpParser::Directive_in_macroContext::unconnected_drive_directive() {
  return getRuleContext<SV3_1aPpParser::Unconnected_drive_directiveContext>(0);
}

SV3_1aPpParser::Nounconnected_drive_directiveContext* SV3_1aPpParser::Directive_in_macroContext::nounconnected_drive_directive() {
  return getRuleContext<SV3_1aPpParser::Nounconnected_drive_directiveContext>(0);
}

SV3_1aPpParser::Line_directiveContext* SV3_1aPpParser::Directive_in_macroContext::line_directive() {
  return getRuleContext<SV3_1aPpParser::Line_directiveContext>(0);
}

SV3_1aPpParser::Default_decay_time_directiveContext* SV3_1aPpParser::Directive_in_macroContext::default_decay_time_directive() {
  return getRuleContext<SV3_1aPpParser::Default_decay_time_directiveContext>(0);
}

SV3_1aPpParser::Default_trireg_strength_directiveContext* SV3_1aPpParser::Directive_in_macroContext::default_trireg_strength_directive() {
  return getRuleContext<SV3_1aPpParser::Default_trireg_strength_directiveContext>(0);
}

SV3_1aPpParser::Delay_mode_distributed_directiveContext* SV3_1aPpParser::Directive_in_macroContext::delay_mode_distributed_directive() {
  return getRuleContext<SV3_1aPpParser::Delay_mode_distributed_directiveContext>(0);
}

SV3_1aPpParser::Delay_mode_path_directiveContext* SV3_1aPpParser::Directive_in_macroContext::delay_mode_path_directive() {
  return getRuleContext<SV3_1aPpParser::Delay_mode_path_directiveContext>(0);
}

SV3_1aPpParser::Delay_mode_unit_directiveContext* SV3_1aPpParser::Directive_in_macroContext::delay_mode_unit_directive() {
  return getRuleContext<SV3_1aPpParser::Delay_mode_unit_directiveContext>(0);
}

SV3_1aPpParser::Delay_mode_zero_directiveContext* SV3_1aPpParser::Directive_in_macroContext::delay_mode_zero_directive() {
  return getRuleContext<SV3_1aPpParser::Delay_mode_zero_directiveContext>(0);
}

SV3_1aPpParser::Protect_directiveContext* SV3_1aPpParser::Directive_in_macroContext::protect_directive() {
  return getRuleContext<SV3_1aPpParser::Protect_directiveContext>(0);
}

SV3_1aPpParser::Endprotect_directiveContext* SV3_1aPpParser::Directive_in_macroContext::endprotect_directive() {
  return getRuleContext<SV3_1aPpParser::Endprotect_directiveContext>(0);
}

SV3_1aPpParser::Protected_directiveContext* SV3_1aPpParser::Directive_in_macroContext::protected_directive() {
  return getRuleContext<SV3_1aPpParser::Protected_directiveContext>(0);
}

SV3_1aPpParser::Endprotected_directiveContext* SV3_1aPpParser::Directive_in_macroContext::endprotected_directive() {
  return getRuleContext<SV3_1aPpParser::Endprotected_directiveContext>(0);
}

SV3_1aPpParser::Expand_vectornets_directiveContext* SV3_1aPpParser::Directive_in_macroContext::expand_vectornets_directive() {
  return getRuleContext<SV3_1aPpParser::Expand_vectornets_directiveContext>(0);
}

SV3_1aPpParser::Noexpand_vectornets_directiveContext* SV3_1aPpParser::Directive_in_macroContext::noexpand_vectornets_directive() {
  return getRuleContext<SV3_1aPpParser::Noexpand_vectornets_directiveContext>(0);
}

SV3_1aPpParser::Autoexpand_vectornets_directiveContext* SV3_1aPpParser::Directive_in_macroContext::autoexpand_vectornets_directive() {
  return getRuleContext<SV3_1aPpParser::Autoexpand_vectornets_directiveContext>(0);
}

SV3_1aPpParser::Remove_gatename_directiveContext* SV3_1aPpParser::Directive_in_macroContext::remove_gatename_directive() {
  return getRuleContext<SV3_1aPpParser::Remove_gatename_directiveContext>(0);
}

SV3_1aPpParser::Noremove_gatenames_directiveContext* SV3_1aPpParser::Directive_in_macroContext::noremove_gatenames_directive() {
  return getRuleContext<SV3_1aPpParser::Noremove_gatenames_directiveContext>(0);
}

SV3_1aPpParser::Remove_netname_directiveContext* SV3_1aPpParser::Directive_in_macroContext::remove_netname_directive() {
  return getRuleContext<SV3_1aPpParser::Remove_netname_directiveContext>(0);
}

SV3_1aPpParser::Noremove_netnames_directiveContext* SV3_1aPpParser::Directive_in_macroContext::noremove_netnames_directive() {
  return getRuleContext<SV3_1aPpParser::Noremove_netnames_directiveContext>(0);
}

SV3_1aPpParser::Accelerate_directiveContext* SV3_1aPpParser::Directive_in_macroContext::accelerate_directive() {
  return getRuleContext<SV3_1aPpParser::Accelerate_directiveContext>(0);
}

SV3_1aPpParser::Noaccelerate_directiveContext* SV3_1aPpParser::Directive_in_macroContext::noaccelerate_directive() {
  return getRuleContext<SV3_1aPpParser::Noaccelerate_directiveContext>(0);
}

SV3_1aPpParser::Undefineall_directiveContext* SV3_1aPpParser::Directive_in_macroContext::undefineall_directive() {
  return getRuleContext<SV3_1aPpParser::Undefineall_directiveContext>(0);
}

SV3_1aPpParser::Uselib_directiveContext* SV3_1aPpParser::Directive_in_macroContext::uselib_directive() {
  return getRuleContext<SV3_1aPpParser::Uselib_directiveContext>(0);
}

SV3_1aPpParser::Disable_portfaults_directiveContext* SV3_1aPpParser::Directive_in_macroContext::disable_portfaults_directive() {
  return getRuleContext<SV3_1aPpParser::Disable_portfaults_directiveContext>(0);
}

SV3_1aPpParser::Enable_portfaults_directiveContext* SV3_1aPpParser::Directive_in_macroContext::enable_portfaults_directive() {
  return getRuleContext<SV3_1aPpParser::Enable_portfaults_directiveContext>(0);
}

SV3_1aPpParser::Nosuppress_faults_directiveContext* SV3_1aPpParser::Directive_in_macroContext::nosuppress_faults_directive() {
  return getRuleContext<SV3_1aPpParser::Nosuppress_faults_directiveContext>(0);
}

SV3_1aPpParser::Suppress_faults_directiveContext* SV3_1aPpParser::Directive_in_macroContext::suppress_faults_directive() {
  return getRuleContext<SV3_1aPpParser::Suppress_faults_directiveContext>(0);
}

SV3_1aPpParser::Signed_directiveContext* SV3_1aPpParser::Directive_in_macroContext::signed_directive() {
  return getRuleContext<SV3_1aPpParser::Signed_directiveContext>(0);
}

SV3_1aPpParser::Unsigned_directiveContext* SV3_1aPpParser::Directive_in_macroContext::unsigned_directive() {
  return getRuleContext<SV3_1aPpParser::Unsigned_directiveContext>(0);
}

SV3_1aPpParser::Sv_file_directiveContext* SV3_1aPpParser::Directive_in_macroContext::sv_file_directive() {
  return getRuleContext<SV3_1aPpParser::Sv_file_directiveContext>(0);
}

SV3_1aPpParser::Sv_line_directiveContext* SV3_1aPpParser::Directive_in_macroContext::sv_line_directive() {
  return getRuleContext<SV3_1aPpParser::Sv_line_directiveContext>(0);
}

SV3_1aPpParser::Sv_packageContext* SV3_1aPpParser::Directive_in_macroContext::sv_package() {
  return getRuleContext<SV3_1aPpParser::Sv_packageContext>(0);
}

SV3_1aPpParser::EndpackageContext* SV3_1aPpParser::Directive_in_macroContext::endpackage() {
  return getRuleContext<SV3_1aPpParser::EndpackageContext>(0);
}

SV3_1aPpParser::ModuleContext* SV3_1aPpParser::Directive_in_macroContext::module() {
  return getRuleContext<SV3_1aPpParser::ModuleContext>(0);
}

SV3_1aPpParser::EndmoduleContext* SV3_1aPpParser::Directive_in_macroContext::endmodule() {
  return getRuleContext<SV3_1aPpParser::EndmoduleContext>(0);
}

SV3_1aPpParser::Sv_interfaceContext* SV3_1aPpParser::Directive_in_macroContext::sv_interface() {
  return getRuleContext<SV3_1aPpParser::Sv_interfaceContext>(0);
}

SV3_1aPpParser::EndinterfaceContext* SV3_1aPpParser::Directive_in_macroContext::endinterface() {
  return getRuleContext<SV3_1aPpParser::EndinterfaceContext>(0);
}

SV3_1aPpParser::ProgramContext* SV3_1aPpParser::Directive_in_macroContext::program() {
  return getRuleContext<SV3_1aPpParser::ProgramContext>(0);
}

SV3_1aPpParser::EndprogramContext* SV3_1aPpParser::Directive_in_macroContext::endprogram() {
  return getRuleContext<SV3_1aPpParser::EndprogramContext>(0);
}

SV3_1aPpParser::PrimitiveContext* SV3_1aPpParser::Directive_in_macroContext::primitive() {
  return getRuleContext<SV3_1aPpParser::PrimitiveContext>(0);
}

SV3_1aPpParser::EndprimitiveContext* SV3_1aPpParser::Directive_in_macroContext::endprimitive() {
  return getRuleContext<SV3_1aPpParser::EndprimitiveContext>(0);
}

SV3_1aPpParser::CheckerContext* SV3_1aPpParser::Directive_in_macroContext::checker() {
  return getRuleContext<SV3_1aPpParser::CheckerContext>(0);
}

SV3_1aPpParser::EndcheckerContext* SV3_1aPpParser::Directive_in_macroContext::endchecker() {
  return getRuleContext<SV3_1aPpParser::EndcheckerContext>(0);
}

SV3_1aPpParser::ConfigContext* SV3_1aPpParser::Directive_in_macroContext::config() {
  return getRuleContext<SV3_1aPpParser::ConfigContext>(0);
}

SV3_1aPpParser::EndconfigContext* SV3_1aPpParser::Directive_in_macroContext::endconfig() {
  return getRuleContext<SV3_1aPpParser::EndconfigContext>(0);
}

SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext* SV3_1aPpParser::Directive_in_macroContext::simple_args_macro_definition_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext>(0);
}

SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext* SV3_1aPpParser::Directive_in_macroContext::simple_no_args_macro_definition_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext>(0);
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::Directive_in_macroContext::pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(0);
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::Directive_in_macroContext::pound_pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(0);
}


size_t SV3_1aPpParser::Directive_in_macroContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDirective_in_macro;
}

void SV3_1aPpParser::Directive_in_macroContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirective_in_macro(this);
}

void SV3_1aPpParser::Directive_in_macroContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirective_in_macro(this);
}

SV3_1aPpParser::Directive_in_macroContext* SV3_1aPpParser::directive_in_macro() {
  Directive_in_macroContext *_localctx = _tracker.createInstance<Directive_in_macroContext>(_ctx, getState());
  enterRule(_localctx, 174, SV3_1aPpParser::RuleDirective_in_macro);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(804);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(741);
      celldefine_directive();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(742);
      endcelldefine_directive();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(743);
      default_nettype_directive();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(744);
      undef_directive();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(745);
      ifdef_directive();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(746);
      ifndef_directive();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(747);
      else_directive();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(748);
      elsif_directive();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(749);
      elseif_directive();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(750);
      endif_directive();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(751);
      include_directive();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(752);
      resetall_directive();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(753);
      timescale_directive();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(754);
      unconnected_drive_directive();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(755);
      nounconnected_drive_directive();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(756);
      line_directive();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(757);
      default_decay_time_directive();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(758);
      default_trireg_strength_directive();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(759);
      delay_mode_distributed_directive();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(760);
      delay_mode_path_directive();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(761);
      delay_mode_unit_directive();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(762);
      delay_mode_zero_directive();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(763);
      protect_directive();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(764);
      endprotect_directive();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(765);
      protected_directive();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(766);
      endprotected_directive();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(767);
      expand_vectornets_directive();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(768);
      noexpand_vectornets_directive();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(769);
      autoexpand_vectornets_directive();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(770);
      remove_gatename_directive();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(771);
      noremove_gatenames_directive();
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(772);
      remove_netname_directive();
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(773);
      noremove_netnames_directive();
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(774);
      accelerate_directive();
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(775);
      noaccelerate_directive();
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(776);
      undefineall_directive();
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(777);
      uselib_directive();
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(778);
      disable_portfaults_directive();
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(779);
      enable_portfaults_directive();
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(780);
      nosuppress_faults_directive();
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(781);
      suppress_faults_directive();
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(782);
      signed_directive();
      break;
    }

    case 43: {
      enterOuterAlt(_localctx, 43);
      setState(783);
      unsigned_directive();
      break;
    }

    case 44: {
      enterOuterAlt(_localctx, 44);
      setState(784);
      sv_file_directive();
      break;
    }

    case 45: {
      enterOuterAlt(_localctx, 45);
      setState(785);
      sv_line_directive();
      break;
    }

    case 46: {
      enterOuterAlt(_localctx, 46);
      setState(786);
      sv_package();
      break;
    }

    case 47: {
      enterOuterAlt(_localctx, 47);
      setState(787);
      endpackage();
      break;
    }

    case 48: {
      enterOuterAlt(_localctx, 48);
      setState(788);
      module();
      break;
    }

    case 49: {
      enterOuterAlt(_localctx, 49);
      setState(789);
      endmodule();
      break;
    }

    case 50: {
      enterOuterAlt(_localctx, 50);
      setState(790);
      sv_interface();
      break;
    }

    case 51: {
      enterOuterAlt(_localctx, 51);
      setState(791);
      endinterface();
      break;
    }

    case 52: {
      enterOuterAlt(_localctx, 52);
      setState(792);
      program();
      break;
    }

    case 53: {
      enterOuterAlt(_localctx, 53);
      setState(793);
      endprogram();
      break;
    }

    case 54: {
      enterOuterAlt(_localctx, 54);
      setState(794);
      primitive();
      break;
    }

    case 55: {
      enterOuterAlt(_localctx, 55);
      setState(795);
      endprimitive();
      break;
    }

    case 56: {
      enterOuterAlt(_localctx, 56);
      setState(796);
      checker();
      break;
    }

    case 57: {
      enterOuterAlt(_localctx, 57);
      setState(797);
      endchecker();
      break;
    }

    case 58: {
      enterOuterAlt(_localctx, 58);
      setState(798);
      config();
      break;
    }

    case 59: {
      enterOuterAlt(_localctx, 59);
      setState(799);
      endconfig();
      break;
    }

    case 60: {
      enterOuterAlt(_localctx, 60);
      setState(800);
      simple_args_macro_definition_in_macro_body();
      break;
    }

    case 61: {
      enterOuterAlt(_localctx, 61);
      setState(801);
      simple_no_args_macro_definition_in_macro_body();
      break;
    }

    case 62: {
      enterOuterAlt(_localctx, 62);
      setState(802);
      pound_delay();
      break;
    }

    case 63: {
      enterOuterAlt(_localctx, 63);
      setState(803);
      pound_pound_delay();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Macro_argumentsContext ------------------------------------------------------------------

SV3_1aPpParser::Macro_argumentsContext::Macro_argumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Macro_argumentsContext::OPEN_PARENS() {
  return getToken(SV3_1aPpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argumentsContext::CLOSE_PARENS() {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Macro_argumentsContext::Simple_identifier() {
  return getTokens(SV3_1aPpParser::Simple_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argumentsContext::Simple_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Simple_identifier, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Macro_argumentsContext::COMMA() {
  return getTokens(SV3_1aPpParser::COMMA);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argumentsContext::COMMA(size_t i) {
  return getToken(SV3_1aPpParser::COMMA, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Macro_argumentsContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argumentsContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Macro_argumentsContext::ASSIGN_OP() {
  return getTokens(SV3_1aPpParser::ASSIGN_OP);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argumentsContext::ASSIGN_OP(size_t i) {
  return getToken(SV3_1aPpParser::ASSIGN_OP, i);
}

std::vector<SV3_1aPpParser::Default_valueContext *> SV3_1aPpParser::Macro_argumentsContext::default_value() {
  return getRuleContexts<SV3_1aPpParser::Default_valueContext>();
}

SV3_1aPpParser::Default_valueContext* SV3_1aPpParser::Macro_argumentsContext::default_value(size_t i) {
  return getRuleContext<SV3_1aPpParser::Default_valueContext>(i);
}


size_t SV3_1aPpParser::Macro_argumentsContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleMacro_arguments;
}

void SV3_1aPpParser::Macro_argumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacro_arguments(this);
}

void SV3_1aPpParser::Macro_argumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacro_arguments(this);
}

SV3_1aPpParser::Macro_argumentsContext* SV3_1aPpParser::macro_arguments() {
  Macro_argumentsContext *_localctx = _tracker.createInstance<Macro_argumentsContext>(_ctx, getState());
  enterRule(_localctx, 176, SV3_1aPpParser::RuleMacro_arguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(806);
    match(SV3_1aPpParser::OPEN_PARENS);
    setState(865);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::Simple_identifier

    || _la == SV3_1aPpParser::Spaces) {
      setState(810);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SV3_1aPpParser::Spaces) {
        setState(807);
        match(SV3_1aPpParser::Spaces);
        setState(812);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(813);
      match(SV3_1aPpParser::Simple_identifier);
      setState(817);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(814);
          match(SV3_1aPpParser::Spaces); 
        }
        setState(819);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
      }
      setState(829);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SV3_1aPpParser::ASSIGN_OP) {
        setState(820);
        match(SV3_1aPpParser::ASSIGN_OP);
        setState(824);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(821);
            default_value(); 
          }
          setState(826);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx);
        }
        setState(831);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(860);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SV3_1aPpParser::COMMA) {
        setState(832);
        match(SV3_1aPpParser::COMMA);
        setState(836);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SV3_1aPpParser::Spaces) {
          setState(833);
          match(SV3_1aPpParser::Spaces);
          setState(838);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }

        setState(839);
        match(SV3_1aPpParser::Simple_identifier);
        setState(843);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(840);
            match(SV3_1aPpParser::Spaces); 
          }
          setState(845);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
        }
        setState(855);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SV3_1aPpParser::ASSIGN_OP) {
          setState(846);
          match(SV3_1aPpParser::ASSIGN_OP);
          setState(850);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
          while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
              setState(847);
              default_value(); 
            }
            setState(852);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
          }
          setState(857);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(862);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(867);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(868);
    match(SV3_1aPpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Escaped_macro_definition_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Escaped_macro_definition_bodyContext::Escaped_macro_definition_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SV3_1aPpParser::Escaped_macro_definition_body_alt1Context* SV3_1aPpParser::Escaped_macro_definition_bodyContext::escaped_macro_definition_body_alt1() {
  return getRuleContext<SV3_1aPpParser::Escaped_macro_definition_body_alt1Context>(0);
}

SV3_1aPpParser::Escaped_macro_definition_body_alt2Context* SV3_1aPpParser::Escaped_macro_definition_bodyContext::escaped_macro_definition_body_alt2() {
  return getRuleContext<SV3_1aPpParser::Escaped_macro_definition_body_alt2Context>(0);
}


size_t SV3_1aPpParser::Escaped_macro_definition_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleEscaped_macro_definition_body;
}

void SV3_1aPpParser::Escaped_macro_definition_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEscaped_macro_definition_body(this);
}

void SV3_1aPpParser::Escaped_macro_definition_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEscaped_macro_definition_body(this);
}

SV3_1aPpParser::Escaped_macro_definition_bodyContext* SV3_1aPpParser::escaped_macro_definition_body() {
  Escaped_macro_definition_bodyContext *_localctx = _tracker.createInstance<Escaped_macro_definition_bodyContext>(_ctx, getState());
  enterRule(_localctx, 178, SV3_1aPpParser::RuleEscaped_macro_definition_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(872);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(870);
      escaped_macro_definition_body_alt1();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(871);
      escaped_macro_definition_body_alt2();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Escaped_macro_definition_body_alt1Context ------------------------------------------------------------------

SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Escaped_macro_definition_body_alt1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::ESCAPED_CR() {
  return getTokens(SV3_1aPpParser::ESCAPED_CR);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::ESCAPED_CR(size_t i) {
  return getToken(SV3_1aPpParser::ESCAPED_CR, i);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::EOF() {
  return getToken(SV3_1aPpParser::EOF, 0);
}

std::vector<SV3_1aPpParser::Unterminated_stringContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::unterminated_string() {
  return getRuleContexts<SV3_1aPpParser::Unterminated_stringContext>();
}

SV3_1aPpParser::Unterminated_stringContext* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::unterminated_string(size_t i) {
  return getRuleContext<SV3_1aPpParser::Unterminated_stringContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Macro_identifier() {
  return getTokens(SV3_1aPpParser::Macro_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Macro_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Macro_identifier, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Macro_Escaped_identifier() {
  return getTokens(SV3_1aPpParser::Macro_Escaped_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Macro_Escaped_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Macro_Escaped_identifier, i);
}

std::vector<SV3_1aPpParser::Escaped_identifierContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::escaped_identifier() {
  return getRuleContexts<SV3_1aPpParser::Escaped_identifierContext>();
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::escaped_identifier(size_t i) {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Simple_identifier() {
  return getTokens(SV3_1aPpParser::Simple_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Simple_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Simple_identifier, i);
}

std::vector<SV3_1aPpParser::Integral_numberContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::integral_number() {
  return getRuleContexts<SV3_1aPpParser::Integral_numberContext>();
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::integral_number(size_t i) {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TEXT_CR() {
  return getTokens(SV3_1aPpParser::TEXT_CR);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TEXT_CR(size_t i) {
  return getToken(SV3_1aPpParser::TEXT_CR, i);
}

std::vector<SV3_1aPpParser::Pound_delayContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::pound_delay() {
  return getRuleContexts<SV3_1aPpParser::Pound_delayContext>();
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::pound_delay(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(i);
}

std::vector<SV3_1aPpParser::Pound_pound_delayContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::pound_pound_delay() {
  return getRuleContexts<SV3_1aPpParser::Pound_pound_delayContext>();
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::pound_pound_delay(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::OPEN_PARENS() {
  return getTokens(SV3_1aPpParser::OPEN_PARENS);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::OPEN_PARENS(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_PARENS, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::CLOSE_PARENS() {
  return getTokens(SV3_1aPpParser::CLOSE_PARENS);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::CLOSE_PARENS(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::COMMA() {
  return getTokens(SV3_1aPpParser::COMMA);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::COMMA(size_t i) {
  return getToken(SV3_1aPpParser::COMMA, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::ASSIGN_OP() {
  return getTokens(SV3_1aPpParser::ASSIGN_OP);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::ASSIGN_OP(size_t i) {
  return getToken(SV3_1aPpParser::ASSIGN_OP, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::DOUBLE_QUOTE() {
  return getTokens(SV3_1aPpParser::DOUBLE_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::DOUBLE_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TICK_VARIABLE() {
  return getTokens(SV3_1aPpParser::TICK_VARIABLE);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TICK_VARIABLE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_VARIABLE, i);
}

std::vector<SV3_1aPpParser::Directive_in_macroContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::directive_in_macro() {
  return getRuleContexts<SV3_1aPpParser::Directive_in_macroContext>();
}

SV3_1aPpParser::Directive_in_macroContext* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::directive_in_macro(size_t i) {
  return getRuleContext<SV3_1aPpParser::Directive_in_macroContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Fixed_point_number() {
  return getTokens(SV3_1aPpParser::Fixed_point_number);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Fixed_point_number(size_t i) {
  return getToken(SV3_1aPpParser::Fixed_point_number, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::STRING() {
  return getTokens(SV3_1aPpParser::STRING);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::STRING(size_t i) {
  return getToken(SV3_1aPpParser::STRING, i);
}

std::vector<SV3_1aPpParser::CommentContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::comment() {
  return getRuleContexts<SV3_1aPpParser::CommentContext>();
}

SV3_1aPpParser::CommentContext* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::comment(size_t i) {
  return getRuleContext<SV3_1aPpParser::CommentContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TICK_QUOTE() {
  return getTokens(SV3_1aPpParser::TICK_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TICK_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TICK_BACKSLASH_TICK_QUOTE() {
  return getTokens(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TICK_BACKSLASH_TICK_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TICK_TICK() {
  return getTokens(SV3_1aPpParser::TICK_TICK);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::TICK_TICK(size_t i) {
  return getToken(SV3_1aPpParser::TICK_TICK, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Special() {
  return getTokens(SV3_1aPpParser::Special);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::Special(size_t i) {
  return getToken(SV3_1aPpParser::Special, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::OPEN_CURLY() {
  return getTokens(SV3_1aPpParser::OPEN_CURLY);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::OPEN_CURLY(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_CURLY, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::CLOSE_CURLY() {
  return getTokens(SV3_1aPpParser::CLOSE_CURLY);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::CLOSE_CURLY(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::OPEN_BRACKET() {
  return getTokens(SV3_1aPpParser::OPEN_BRACKET);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::OPEN_BRACKET(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::CLOSE_BRACKET() {
  return getTokens(SV3_1aPpParser::CLOSE_BRACKET);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::CLOSE_BRACKET(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, i);
}


size_t SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::getRuleIndex() const {
  return SV3_1aPpParser::RuleEscaped_macro_definition_body_alt1;
}

void SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEscaped_macro_definition_body_alt1(this);
}

void SV3_1aPpParser::Escaped_macro_definition_body_alt1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEscaped_macro_definition_body_alt1(this);
}

SV3_1aPpParser::Escaped_macro_definition_body_alt1Context* SV3_1aPpParser::escaped_macro_definition_body_alt1() {
  Escaped_macro_definition_body_alt1Context *_localctx = _tracker.createInstance<Escaped_macro_definition_body_alt1Context>(_ctx, getState());
  enterRule(_localctx, 180, SV3_1aPpParser::RuleEscaped_macro_definition_body_alt1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(905);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(903);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
        case 1: {
          setState(874);
          unterminated_string();
          break;
        }

        case 2: {
          setState(875);
          match(SV3_1aPpParser::Macro_identifier);
          break;
        }

        case 3: {
          setState(876);
          match(SV3_1aPpParser::Macro_Escaped_identifier);
          break;
        }

        case 4: {
          setState(877);
          escaped_identifier();
          break;
        }

        case 5: {
          setState(878);
          match(SV3_1aPpParser::Simple_identifier);
          break;
        }

        case 6: {
          setState(879);
          integral_number();
          break;
        }

        case 7: {
          setState(880);
          match(SV3_1aPpParser::TEXT_CR);
          break;
        }

        case 8: {
          setState(881);
          pound_delay();
          break;
        }

        case 9: {
          setState(882);
          pound_pound_delay();
          break;
        }

        case 10: {
          setState(883);
          match(SV3_1aPpParser::ESCAPED_CR);
          break;
        }

        case 11: {
          setState(884);
          match(SV3_1aPpParser::OPEN_PARENS);
          break;
        }

        case 12: {
          setState(885);
          match(SV3_1aPpParser::CLOSE_PARENS);
          break;
        }

        case 13: {
          setState(886);
          match(SV3_1aPpParser::COMMA);
          break;
        }

        case 14: {
          setState(887);
          match(SV3_1aPpParser::ASSIGN_OP);
          break;
        }

        case 15: {
          setState(888);
          match(SV3_1aPpParser::DOUBLE_QUOTE);
          break;
        }

        case 16: {
          setState(889);
          match(SV3_1aPpParser::TICK_VARIABLE);
          break;
        }

        case 17: {
          setState(890);
          directive_in_macro();
          break;
        }

        case 18: {
          setState(891);
          match(SV3_1aPpParser::Spaces);
          break;
        }

        case 19: {
          setState(892);
          match(SV3_1aPpParser::Fixed_point_number);
          break;
        }

        case 20: {
          setState(893);
          match(SV3_1aPpParser::STRING);
          break;
        }

        case 21: {
          setState(894);
          comment();
          break;
        }

        case 22: {
          setState(895);
          match(SV3_1aPpParser::TICK_QUOTE);
          break;
        }

        case 23: {
          setState(896);
          match(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
          break;
        }

        case 24: {
          setState(897);
          match(SV3_1aPpParser::TICK_TICK);
          break;
        }

        case 25: {
          setState(898);
          match(SV3_1aPpParser::Special);
          break;
        }

        case 26: {
          setState(899);
          match(SV3_1aPpParser::OPEN_CURLY);
          break;
        }

        case 27: {
          setState(900);
          match(SV3_1aPpParser::CLOSE_CURLY);
          break;
        }

        case 28: {
          setState(901);
          match(SV3_1aPpParser::OPEN_BRACKET);
          break;
        }

        case 29: {
          setState(902);
          match(SV3_1aPpParser::CLOSE_BRACKET);
          break;
        }

        default:
          break;
        } 
      }
      setState(907);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    }
    setState(908);
    match(SV3_1aPpParser::ESCAPED_CR);
    setState(912);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SV3_1aPpParser::Spaces) {
      setState(909);
      match(SV3_1aPpParser::Spaces);
      setState(914);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(915);
    _la = _input->LA(1);
    if (!(_la == SV3_1aPpParser::EOF || _la == SV3_1aPpParser::CR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Escaped_macro_definition_body_alt2Context ------------------------------------------------------------------

SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Escaped_macro_definition_body_alt2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::EOF() {
  return getToken(SV3_1aPpParser::EOF, 0);
}

std::vector<SV3_1aPpParser::Unterminated_stringContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::unterminated_string() {
  return getRuleContexts<SV3_1aPpParser::Unterminated_stringContext>();
}

SV3_1aPpParser::Unterminated_stringContext* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::unterminated_string(size_t i) {
  return getRuleContext<SV3_1aPpParser::Unterminated_stringContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Macro_identifier() {
  return getTokens(SV3_1aPpParser::Macro_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Macro_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Macro_identifier, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Macro_Escaped_identifier() {
  return getTokens(SV3_1aPpParser::Macro_Escaped_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Macro_Escaped_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Macro_Escaped_identifier, i);
}

std::vector<SV3_1aPpParser::Escaped_identifierContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::escaped_identifier() {
  return getRuleContexts<SV3_1aPpParser::Escaped_identifierContext>();
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::escaped_identifier(size_t i) {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Simple_identifier() {
  return getTokens(SV3_1aPpParser::Simple_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Simple_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Simple_identifier, i);
}

std::vector<SV3_1aPpParser::Integral_numberContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::integral_number() {
  return getRuleContexts<SV3_1aPpParser::Integral_numberContext>();
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::integral_number(size_t i) {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TEXT_CR() {
  return getTokens(SV3_1aPpParser::TEXT_CR);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TEXT_CR(size_t i) {
  return getToken(SV3_1aPpParser::TEXT_CR, i);
}

std::vector<SV3_1aPpParser::Pound_delayContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::pound_delay() {
  return getRuleContexts<SV3_1aPpParser::Pound_delayContext>();
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::pound_delay(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(i);
}

std::vector<SV3_1aPpParser::Pound_pound_delayContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::pound_pound_delay() {
  return getRuleContexts<SV3_1aPpParser::Pound_pound_delayContext>();
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::pound_pound_delay(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::ESCAPED_CR() {
  return getTokens(SV3_1aPpParser::ESCAPED_CR);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::ESCAPED_CR(size_t i) {
  return getToken(SV3_1aPpParser::ESCAPED_CR, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::OPEN_PARENS() {
  return getTokens(SV3_1aPpParser::OPEN_PARENS);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::OPEN_PARENS(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_PARENS, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::CLOSE_PARENS() {
  return getTokens(SV3_1aPpParser::CLOSE_PARENS);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::CLOSE_PARENS(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::COMMA() {
  return getTokens(SV3_1aPpParser::COMMA);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::COMMA(size_t i) {
  return getToken(SV3_1aPpParser::COMMA, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::ASSIGN_OP() {
  return getTokens(SV3_1aPpParser::ASSIGN_OP);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::ASSIGN_OP(size_t i) {
  return getToken(SV3_1aPpParser::ASSIGN_OP, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::DOUBLE_QUOTE() {
  return getTokens(SV3_1aPpParser::DOUBLE_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::DOUBLE_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TICK_VARIABLE() {
  return getTokens(SV3_1aPpParser::TICK_VARIABLE);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TICK_VARIABLE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_VARIABLE, i);
}

std::vector<SV3_1aPpParser::Directive_in_macroContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::directive_in_macro() {
  return getRuleContexts<SV3_1aPpParser::Directive_in_macroContext>();
}

SV3_1aPpParser::Directive_in_macroContext* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::directive_in_macro(size_t i) {
  return getRuleContext<SV3_1aPpParser::Directive_in_macroContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Fixed_point_number() {
  return getTokens(SV3_1aPpParser::Fixed_point_number);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Fixed_point_number(size_t i) {
  return getToken(SV3_1aPpParser::Fixed_point_number, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::STRING() {
  return getTokens(SV3_1aPpParser::STRING);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::STRING(size_t i) {
  return getToken(SV3_1aPpParser::STRING, i);
}

std::vector<SV3_1aPpParser::CommentContext *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::comment() {
  return getRuleContexts<SV3_1aPpParser::CommentContext>();
}

SV3_1aPpParser::CommentContext* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::comment(size_t i) {
  return getRuleContext<SV3_1aPpParser::CommentContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TICK_QUOTE() {
  return getTokens(SV3_1aPpParser::TICK_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TICK_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TICK_BACKSLASH_TICK_QUOTE() {
  return getTokens(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TICK_BACKSLASH_TICK_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TICK_TICK() {
  return getTokens(SV3_1aPpParser::TICK_TICK);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::TICK_TICK(size_t i) {
  return getToken(SV3_1aPpParser::TICK_TICK, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Special() {
  return getTokens(SV3_1aPpParser::Special);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::Special(size_t i) {
  return getToken(SV3_1aPpParser::Special, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::OPEN_CURLY() {
  return getTokens(SV3_1aPpParser::OPEN_CURLY);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::OPEN_CURLY(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_CURLY, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::CLOSE_CURLY() {
  return getTokens(SV3_1aPpParser::CLOSE_CURLY);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::CLOSE_CURLY(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::OPEN_BRACKET() {
  return getTokens(SV3_1aPpParser::OPEN_BRACKET);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::OPEN_BRACKET(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::CLOSE_BRACKET() {
  return getTokens(SV3_1aPpParser::CLOSE_BRACKET);
}

tree::TerminalNode* SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::CLOSE_BRACKET(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, i);
}


size_t SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::getRuleIndex() const {
  return SV3_1aPpParser::RuleEscaped_macro_definition_body_alt2;
}

void SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEscaped_macro_definition_body_alt2(this);
}

void SV3_1aPpParser::Escaped_macro_definition_body_alt2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEscaped_macro_definition_body_alt2(this);
}

SV3_1aPpParser::Escaped_macro_definition_body_alt2Context* SV3_1aPpParser::escaped_macro_definition_body_alt2() {
  Escaped_macro_definition_body_alt2Context *_localctx = _tracker.createInstance<Escaped_macro_definition_body_alt2Context>(_ctx, getState());
  enterRule(_localctx, 182, SV3_1aPpParser::RuleEscaped_macro_definition_body_alt2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(948);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(946);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
        case 1: {
          setState(917);
          unterminated_string();
          break;
        }

        case 2: {
          setState(918);
          match(SV3_1aPpParser::Macro_identifier);
          break;
        }

        case 3: {
          setState(919);
          match(SV3_1aPpParser::Macro_Escaped_identifier);
          break;
        }

        case 4: {
          setState(920);
          escaped_identifier();
          break;
        }

        case 5: {
          setState(921);
          match(SV3_1aPpParser::Simple_identifier);
          break;
        }

        case 6: {
          setState(922);
          integral_number();
          break;
        }

        case 7: {
          setState(923);
          match(SV3_1aPpParser::TEXT_CR);
          break;
        }

        case 8: {
          setState(924);
          pound_delay();
          break;
        }

        case 9: {
          setState(925);
          pound_pound_delay();
          break;
        }

        case 10: {
          setState(926);
          match(SV3_1aPpParser::ESCAPED_CR);
          break;
        }

        case 11: {
          setState(927);
          match(SV3_1aPpParser::OPEN_PARENS);
          break;
        }

        case 12: {
          setState(928);
          match(SV3_1aPpParser::CLOSE_PARENS);
          break;
        }

        case 13: {
          setState(929);
          match(SV3_1aPpParser::COMMA);
          break;
        }

        case 14: {
          setState(930);
          match(SV3_1aPpParser::ASSIGN_OP);
          break;
        }

        case 15: {
          setState(931);
          match(SV3_1aPpParser::DOUBLE_QUOTE);
          break;
        }

        case 16: {
          setState(932);
          match(SV3_1aPpParser::TICK_VARIABLE);
          break;
        }

        case 17: {
          setState(933);
          directive_in_macro();
          break;
        }

        case 18: {
          setState(934);
          match(SV3_1aPpParser::Spaces);
          break;
        }

        case 19: {
          setState(935);
          match(SV3_1aPpParser::Fixed_point_number);
          break;
        }

        case 20: {
          setState(936);
          match(SV3_1aPpParser::STRING);
          break;
        }

        case 21: {
          setState(937);
          comment();
          break;
        }

        case 22: {
          setState(938);
          match(SV3_1aPpParser::TICK_QUOTE);
          break;
        }

        case 23: {
          setState(939);
          match(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
          break;
        }

        case 24: {
          setState(940);
          match(SV3_1aPpParser::TICK_TICK);
          break;
        }

        case 25: {
          setState(941);
          match(SV3_1aPpParser::Special);
          break;
        }

        case 26: {
          setState(942);
          match(SV3_1aPpParser::OPEN_CURLY);
          break;
        }

        case 27: {
          setState(943);
          match(SV3_1aPpParser::CLOSE_CURLY);
          break;
        }

        case 28: {
          setState(944);
          match(SV3_1aPpParser::OPEN_BRACKET);
          break;
        }

        case 29: {
          setState(945);
          match(SV3_1aPpParser::CLOSE_BRACKET);
          break;
        }

        default:
          break;
        } 
      }
      setState(950);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    }
    setState(959);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::CR: {
        setState(951);
        match(SV3_1aPpParser::CR);
        setState(955);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(952);
            match(SV3_1aPpParser::Spaces); 
          }
          setState(957);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
        }
        break;
      }

      case SV3_1aPpParser::EOF: {
        setState(958);
        match(SV3_1aPpParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_macro_definition_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Simple_macro_definition_bodyContext::Simple_macro_definition_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SV3_1aPpParser::Unterminated_stringContext *> SV3_1aPpParser::Simple_macro_definition_bodyContext::unterminated_string() {
  return getRuleContexts<SV3_1aPpParser::Unterminated_stringContext>();
}

SV3_1aPpParser::Unterminated_stringContext* SV3_1aPpParser::Simple_macro_definition_bodyContext::unterminated_string(size_t i) {
  return getRuleContext<SV3_1aPpParser::Unterminated_stringContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::Macro_identifier() {
  return getTokens(SV3_1aPpParser::Macro_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::Macro_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Macro_identifier, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::Macro_Escaped_identifier() {
  return getTokens(SV3_1aPpParser::Macro_Escaped_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::Macro_Escaped_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Macro_Escaped_identifier, i);
}

std::vector<SV3_1aPpParser::Escaped_identifierContext *> SV3_1aPpParser::Simple_macro_definition_bodyContext::escaped_identifier() {
  return getRuleContexts<SV3_1aPpParser::Escaped_identifierContext>();
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::Simple_macro_definition_bodyContext::escaped_identifier(size_t i) {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::Simple_identifier() {
  return getTokens(SV3_1aPpParser::Simple_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::Simple_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Simple_identifier, i);
}

std::vector<SV3_1aPpParser::Integral_numberContext *> SV3_1aPpParser::Simple_macro_definition_bodyContext::integral_number() {
  return getRuleContexts<SV3_1aPpParser::Integral_numberContext>();
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Simple_macro_definition_bodyContext::integral_number(size_t i) {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(i);
}

std::vector<SV3_1aPpParser::Pound_delayContext *> SV3_1aPpParser::Simple_macro_definition_bodyContext::pound_delay() {
  return getRuleContexts<SV3_1aPpParser::Pound_delayContext>();
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::Simple_macro_definition_bodyContext::pound_delay(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(i);
}

std::vector<SV3_1aPpParser::Pound_pound_delayContext *> SV3_1aPpParser::Simple_macro_definition_bodyContext::pound_pound_delay() {
  return getRuleContexts<SV3_1aPpParser::Pound_pound_delayContext>();
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::Simple_macro_definition_bodyContext::pound_pound_delay(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::TEXT_CR() {
  return getTokens(SV3_1aPpParser::TEXT_CR);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::TEXT_CR(size_t i) {
  return getToken(SV3_1aPpParser::TEXT_CR, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::OPEN_PARENS() {
  return getTokens(SV3_1aPpParser::OPEN_PARENS);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::OPEN_PARENS(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_PARENS, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::CLOSE_PARENS() {
  return getTokens(SV3_1aPpParser::CLOSE_PARENS);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::CLOSE_PARENS(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::COMMA() {
  return getTokens(SV3_1aPpParser::COMMA);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::COMMA(size_t i) {
  return getToken(SV3_1aPpParser::COMMA, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::ASSIGN_OP() {
  return getTokens(SV3_1aPpParser::ASSIGN_OP);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::ASSIGN_OP(size_t i) {
  return getToken(SV3_1aPpParser::ASSIGN_OP, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::DOUBLE_QUOTE() {
  return getTokens(SV3_1aPpParser::DOUBLE_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::DOUBLE_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_VARIABLE() {
  return getTokens(SV3_1aPpParser::TICK_VARIABLE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_VARIABLE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_VARIABLE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::Fixed_point_number() {
  return getTokens(SV3_1aPpParser::Fixed_point_number);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::Fixed_point_number(size_t i) {
  return getToken(SV3_1aPpParser::Fixed_point_number, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::STRING() {
  return getTokens(SV3_1aPpParser::STRING);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::STRING(size_t i) {
  return getToken(SV3_1aPpParser::STRING, i);
}

std::vector<SV3_1aPpParser::CommentContext *> SV3_1aPpParser::Simple_macro_definition_bodyContext::comment() {
  return getRuleContexts<SV3_1aPpParser::CommentContext>();
}

SV3_1aPpParser::CommentContext* SV3_1aPpParser::Simple_macro_definition_bodyContext::comment(size_t i) {
  return getRuleContext<SV3_1aPpParser::CommentContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_QUOTE() {
  return getTokens(SV3_1aPpParser::TICK_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_BACKSLASH_TICK_QUOTE() {
  return getTokens(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_BACKSLASH_TICK_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_TICK() {
  return getTokens(SV3_1aPpParser::TICK_TICK);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_TICK(size_t i) {
  return getToken(SV3_1aPpParser::TICK_TICK, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::Special() {
  return getTokens(SV3_1aPpParser::Special);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::Special(size_t i) {
  return getToken(SV3_1aPpParser::Special, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::OPEN_CURLY() {
  return getTokens(SV3_1aPpParser::OPEN_CURLY);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::OPEN_CURLY(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_CURLY, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::CLOSE_CURLY() {
  return getTokens(SV3_1aPpParser::CLOSE_CURLY);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::CLOSE_CURLY(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::OPEN_BRACKET() {
  return getTokens(SV3_1aPpParser::OPEN_BRACKET);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::OPEN_BRACKET(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::CLOSE_BRACKET() {
  return getTokens(SV3_1aPpParser::CLOSE_BRACKET);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::CLOSE_BRACKET(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_INCLUDE() {
  return getTokens(SV3_1aPpParser::TICK_INCLUDE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_bodyContext::TICK_INCLUDE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_INCLUDE, i);
}

std::vector<SV3_1aPpParser::Directive_in_macroContext *> SV3_1aPpParser::Simple_macro_definition_bodyContext::directive_in_macro() {
  return getRuleContexts<SV3_1aPpParser::Directive_in_macroContext>();
}

SV3_1aPpParser::Directive_in_macroContext* SV3_1aPpParser::Simple_macro_definition_bodyContext::directive_in_macro(size_t i) {
  return getRuleContext<SV3_1aPpParser::Directive_in_macroContext>(i);
}


size_t SV3_1aPpParser::Simple_macro_definition_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSimple_macro_definition_body;
}

void SV3_1aPpParser::Simple_macro_definition_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_macro_definition_body(this);
}

void SV3_1aPpParser::Simple_macro_definition_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_macro_definition_body(this);
}

SV3_1aPpParser::Simple_macro_definition_bodyContext* SV3_1aPpParser::simple_macro_definition_body() {
  Simple_macro_definition_bodyContext *_localctx = _tracker.createInstance<Simple_macro_definition_bodyContext>(_ctx, getState());
  enterRule(_localctx, 184, SV3_1aPpParser::RuleSimple_macro_definition_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(992);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(990);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
        case 1: {
          setState(961);
          unterminated_string();
          break;
        }

        case 2: {
          setState(962);
          match(SV3_1aPpParser::Macro_identifier);
          break;
        }

        case 3: {
          setState(963);
          match(SV3_1aPpParser::Macro_Escaped_identifier);
          break;
        }

        case 4: {
          setState(964);
          escaped_identifier();
          break;
        }

        case 5: {
          setState(965);
          match(SV3_1aPpParser::Simple_identifier);
          break;
        }

        case 6: {
          setState(966);
          integral_number();
          break;
        }

        case 7: {
          setState(967);
          pound_delay();
          break;
        }

        case 8: {
          setState(968);
          pound_pound_delay();
          break;
        }

        case 9: {
          setState(969);
          match(SV3_1aPpParser::TEXT_CR);
          break;
        }

        case 10: {
          setState(970);
          match(SV3_1aPpParser::OPEN_PARENS);
          break;
        }

        case 11: {
          setState(971);
          match(SV3_1aPpParser::CLOSE_PARENS);
          break;
        }

        case 12: {
          setState(972);
          match(SV3_1aPpParser::COMMA);
          break;
        }

        case 13: {
          setState(973);
          match(SV3_1aPpParser::ASSIGN_OP);
          break;
        }

        case 14: {
          setState(974);
          match(SV3_1aPpParser::DOUBLE_QUOTE);
          break;
        }

        case 15: {
          setState(975);
          match(SV3_1aPpParser::TICK_VARIABLE);
          break;
        }

        case 16: {
          setState(976);
          match(SV3_1aPpParser::Spaces);
          break;
        }

        case 17: {
          setState(977);
          match(SV3_1aPpParser::Fixed_point_number);
          break;
        }

        case 18: {
          setState(978);
          match(SV3_1aPpParser::STRING);
          break;
        }

        case 19: {
          setState(979);
          comment();
          break;
        }

        case 20: {
          setState(980);
          match(SV3_1aPpParser::TICK_QUOTE);
          break;
        }

        case 21: {
          setState(981);
          match(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
          break;
        }

        case 22: {
          setState(982);
          match(SV3_1aPpParser::TICK_TICK);
          break;
        }

        case 23: {
          setState(983);
          match(SV3_1aPpParser::Special);
          break;
        }

        case 24: {
          setState(984);
          match(SV3_1aPpParser::OPEN_CURLY);
          break;
        }

        case 25: {
          setState(985);
          match(SV3_1aPpParser::CLOSE_CURLY);
          break;
        }

        case 26: {
          setState(986);
          match(SV3_1aPpParser::OPEN_BRACKET);
          break;
        }

        case 27: {
          setState(987);
          match(SV3_1aPpParser::CLOSE_BRACKET);
          break;
        }

        case 28: {
          setState(988);
          match(SV3_1aPpParser::TICK_INCLUDE);
          break;
        }

        case 29: {
          setState(989);
          directive_in_macro();
          break;
        }

        default:
          break;
        } 
      }
      setState(994);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_macro_definition_body_in_macro_bodyContext ------------------------------------------------------------------

SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Simple_macro_definition_body_in_macro_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SV3_1aPpParser::Unterminated_stringContext *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::unterminated_string() {
  return getRuleContexts<SV3_1aPpParser::Unterminated_stringContext>();
}

SV3_1aPpParser::Unterminated_stringContext* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::unterminated_string(size_t i) {
  return getRuleContext<SV3_1aPpParser::Unterminated_stringContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Macro_identifier() {
  return getTokens(SV3_1aPpParser::Macro_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Macro_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Macro_identifier, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Macro_Escaped_identifier() {
  return getTokens(SV3_1aPpParser::Macro_Escaped_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Macro_Escaped_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Macro_Escaped_identifier, i);
}

std::vector<SV3_1aPpParser::Escaped_identifierContext *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::escaped_identifier() {
  return getRuleContexts<SV3_1aPpParser::Escaped_identifierContext>();
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::escaped_identifier(size_t i) {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Simple_identifier() {
  return getTokens(SV3_1aPpParser::Simple_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Simple_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Simple_identifier, i);
}

std::vector<SV3_1aPpParser::Integral_numberContext *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::integral_number() {
  return getRuleContexts<SV3_1aPpParser::Integral_numberContext>();
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::integral_number(size_t i) {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(i);
}

std::vector<SV3_1aPpParser::Pound_delayContext *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::pound_delay() {
  return getRuleContexts<SV3_1aPpParser::Pound_delayContext>();
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::pound_delay(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(i);
}

std::vector<SV3_1aPpParser::Pound_pound_delayContext *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::pound_pound_delay() {
  return getRuleContexts<SV3_1aPpParser::Pound_pound_delayContext>();
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::pound_pound_delay(size_t i) {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TEXT_CR() {
  return getTokens(SV3_1aPpParser::TEXT_CR);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TEXT_CR(size_t i) {
  return getToken(SV3_1aPpParser::TEXT_CR, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::OPEN_PARENS() {
  return getTokens(SV3_1aPpParser::OPEN_PARENS);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::OPEN_PARENS(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_PARENS, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::CLOSE_PARENS() {
  return getTokens(SV3_1aPpParser::CLOSE_PARENS);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::CLOSE_PARENS(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::COMMA() {
  return getTokens(SV3_1aPpParser::COMMA);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::COMMA(size_t i) {
  return getToken(SV3_1aPpParser::COMMA, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::ASSIGN_OP() {
  return getTokens(SV3_1aPpParser::ASSIGN_OP);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::ASSIGN_OP(size_t i) {
  return getToken(SV3_1aPpParser::ASSIGN_OP, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::DOUBLE_QUOTE() {
  return getTokens(SV3_1aPpParser::DOUBLE_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::DOUBLE_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TICK_VARIABLE() {
  return getTokens(SV3_1aPpParser::TICK_VARIABLE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TICK_VARIABLE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_VARIABLE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Fixed_point_number() {
  return getTokens(SV3_1aPpParser::Fixed_point_number);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Fixed_point_number(size_t i) {
  return getToken(SV3_1aPpParser::Fixed_point_number, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::STRING() {
  return getTokens(SV3_1aPpParser::STRING);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::STRING(size_t i) {
  return getToken(SV3_1aPpParser::STRING, i);
}

std::vector<SV3_1aPpParser::CommentContext *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::comment() {
  return getRuleContexts<SV3_1aPpParser::CommentContext>();
}

SV3_1aPpParser::CommentContext* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::comment(size_t i) {
  return getRuleContext<SV3_1aPpParser::CommentContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TICK_QUOTE() {
  return getTokens(SV3_1aPpParser::TICK_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TICK_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TICK_BACKSLASH_TICK_QUOTE() {
  return getTokens(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TICK_BACKSLASH_TICK_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TICK_TICK() {
  return getTokens(SV3_1aPpParser::TICK_TICK);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::TICK_TICK(size_t i) {
  return getToken(SV3_1aPpParser::TICK_TICK, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Special() {
  return getTokens(SV3_1aPpParser::Special);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::Special(size_t i) {
  return getToken(SV3_1aPpParser::Special, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::OPEN_CURLY() {
  return getTokens(SV3_1aPpParser::OPEN_CURLY);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::OPEN_CURLY(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_CURLY, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::CLOSE_CURLY() {
  return getTokens(SV3_1aPpParser::CLOSE_CURLY);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::CLOSE_CURLY(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::OPEN_BRACKET() {
  return getTokens(SV3_1aPpParser::OPEN_BRACKET);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::OPEN_BRACKET(size_t i) {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::CLOSE_BRACKET() {
  return getTokens(SV3_1aPpParser::CLOSE_BRACKET);
}

tree::TerminalNode* SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::CLOSE_BRACKET(size_t i) {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, i);
}


size_t SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleSimple_macro_definition_body_in_macro_body;
}

void SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_macro_definition_body_in_macro_body(this);
}

void SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_macro_definition_body_in_macro_body(this);
}

SV3_1aPpParser::Simple_macro_definition_body_in_macro_bodyContext* SV3_1aPpParser::simple_macro_definition_body_in_macro_body() {
  Simple_macro_definition_body_in_macro_bodyContext *_localctx = _tracker.createInstance<Simple_macro_definition_body_in_macro_bodyContext>(_ctx, getState());
  enterRule(_localctx, 186, SV3_1aPpParser::RuleSimple_macro_definition_body_in_macro_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1024);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(1022);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
        case 1: {
          setState(995);
          unterminated_string();
          break;
        }

        case 2: {
          setState(996);
          match(SV3_1aPpParser::Macro_identifier);
          break;
        }

        case 3: {
          setState(997);
          match(SV3_1aPpParser::Macro_Escaped_identifier);
          break;
        }

        case 4: {
          setState(998);
          escaped_identifier();
          break;
        }

        case 5: {
          setState(999);
          match(SV3_1aPpParser::Simple_identifier);
          break;
        }

        case 6: {
          setState(1000);
          integral_number();
          break;
        }

        case 7: {
          setState(1001);
          pound_delay();
          break;
        }

        case 8: {
          setState(1002);
          pound_pound_delay();
          break;
        }

        case 9: {
          setState(1003);
          match(SV3_1aPpParser::TEXT_CR);
          break;
        }

        case 10: {
          setState(1004);
          match(SV3_1aPpParser::OPEN_PARENS);
          break;
        }

        case 11: {
          setState(1005);
          match(SV3_1aPpParser::CLOSE_PARENS);
          break;
        }

        case 12: {
          setState(1006);
          match(SV3_1aPpParser::COMMA);
          break;
        }

        case 13: {
          setState(1007);
          match(SV3_1aPpParser::ASSIGN_OP);
          break;
        }

        case 14: {
          setState(1008);
          match(SV3_1aPpParser::DOUBLE_QUOTE);
          break;
        }

        case 15: {
          setState(1009);
          match(SV3_1aPpParser::TICK_VARIABLE);
          break;
        }

        case 16: {
          setState(1010);
          match(SV3_1aPpParser::Spaces);
          break;
        }

        case 17: {
          setState(1011);
          match(SV3_1aPpParser::Fixed_point_number);
          break;
        }

        case 18: {
          setState(1012);
          match(SV3_1aPpParser::STRING);
          break;
        }

        case 19: {
          setState(1013);
          comment();
          break;
        }

        case 20: {
          setState(1014);
          match(SV3_1aPpParser::TICK_QUOTE);
          break;
        }

        case 21: {
          setState(1015);
          match(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
          break;
        }

        case 22: {
          setState(1016);
          match(SV3_1aPpParser::TICK_TICK);
          break;
        }

        case 23: {
          setState(1017);
          match(SV3_1aPpParser::Special);
          break;
        }

        case 24: {
          setState(1018);
          match(SV3_1aPpParser::OPEN_CURLY);
          break;
        }

        case 25: {
          setState(1019);
          match(SV3_1aPpParser::CLOSE_CURLY);
          break;
        }

        case 26: {
          setState(1020);
          match(SV3_1aPpParser::OPEN_BRACKET);
          break;
        }

        case 27: {
          setState(1021);
          match(SV3_1aPpParser::CLOSE_BRACKET);
          break;
        }

        default:
          break;
        } 
      }
      setState(1026);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pragma_expressionContext ------------------------------------------------------------------

SV3_1aPpParser::Pragma_expressionContext::Pragma_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Pragma_expressionContext::integral_number() {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::Fixed_point_number() {
  return getToken(SV3_1aPpParser::Fixed_point_number, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::STRING() {
  return getToken(SV3_1aPpParser::STRING, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::OPEN_CURLY() {
  return getToken(SV3_1aPpParser::OPEN_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::CLOSE_CURLY() {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::OPEN_BRACKET() {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::CLOSE_BRACKET() {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::OPEN_PARENS() {
  return getToken(SV3_1aPpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::CLOSE_PARENS() {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::COMMA() {
  return getToken(SV3_1aPpParser::COMMA, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::ASSIGN_OP() {
  return getToken(SV3_1aPpParser::ASSIGN_OP, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::DOUBLE_QUOTE() {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, 0);
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::Pragma_expressionContext::escaped_identifier() {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(0);
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::Pragma_expressionContext::pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(0);
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::Pragma_expressionContext::pound_pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::Special() {
  return getToken(SV3_1aPpParser::Special, 0);
}

tree::TerminalNode* SV3_1aPpParser::Pragma_expressionContext::ANY() {
  return getToken(SV3_1aPpParser::ANY, 0);
}


size_t SV3_1aPpParser::Pragma_expressionContext::getRuleIndex() const {
  return SV3_1aPpParser::RulePragma_expression;
}

void SV3_1aPpParser::Pragma_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPragma_expression(this);
}

void SV3_1aPpParser::Pragma_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPragma_expression(this);
}

SV3_1aPpParser::Pragma_expressionContext* SV3_1aPpParser::pragma_expression() {
  Pragma_expressionContext *_localctx = _tracker.createInstance<Pragma_expressionContext>(_ctx, getState());
  enterRule(_localctx, 188, SV3_1aPpParser::RulePragma_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1046);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::Simple_identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1027);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::INTEGRAL_NUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(1028);
        integral_number();
        break;
      }

      case SV3_1aPpParser::Spaces: {
        enterOuterAlt(_localctx, 3);
        setState(1029);
        match(SV3_1aPpParser::Spaces);
        break;
      }

      case SV3_1aPpParser::Fixed_point_number: {
        enterOuterAlt(_localctx, 4);
        setState(1030);
        match(SV3_1aPpParser::Fixed_point_number);
        break;
      }

      case SV3_1aPpParser::STRING: {
        enterOuterAlt(_localctx, 5);
        setState(1031);
        match(SV3_1aPpParser::STRING);
        break;
      }

      case SV3_1aPpParser::OPEN_CURLY: {
        enterOuterAlt(_localctx, 6);
        setState(1032);
        match(SV3_1aPpParser::OPEN_CURLY);
        break;
      }

      case SV3_1aPpParser::CLOSE_CURLY: {
        enterOuterAlt(_localctx, 7);
        setState(1033);
        match(SV3_1aPpParser::CLOSE_CURLY);
        break;
      }

      case SV3_1aPpParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 8);
        setState(1034);
        match(SV3_1aPpParser::OPEN_BRACKET);
        break;
      }

      case SV3_1aPpParser::CLOSE_BRACKET: {
        enterOuterAlt(_localctx, 9);
        setState(1035);
        match(SV3_1aPpParser::CLOSE_BRACKET);
        break;
      }

      case SV3_1aPpParser::OPEN_PARENS: {
        enterOuterAlt(_localctx, 10);
        setState(1036);
        match(SV3_1aPpParser::OPEN_PARENS);
        break;
      }

      case SV3_1aPpParser::CLOSE_PARENS: {
        enterOuterAlt(_localctx, 11);
        setState(1037);
        match(SV3_1aPpParser::CLOSE_PARENS);
        break;
      }

      case SV3_1aPpParser::COMMA: {
        enterOuterAlt(_localctx, 12);
        setState(1038);
        match(SV3_1aPpParser::COMMA);
        break;
      }

      case SV3_1aPpParser::ASSIGN_OP: {
        enterOuterAlt(_localctx, 13);
        setState(1039);
        match(SV3_1aPpParser::ASSIGN_OP);
        break;
      }

      case SV3_1aPpParser::DOUBLE_QUOTE: {
        enterOuterAlt(_localctx, 14);
        setState(1040);
        match(SV3_1aPpParser::DOUBLE_QUOTE);
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        enterOuterAlt(_localctx, 15);
        setState(1041);
        escaped_identifier();
        break;
      }

      case SV3_1aPpParser::POUND_DELAY: {
        enterOuterAlt(_localctx, 16);
        setState(1042);
        pound_delay();
        break;
      }

      case SV3_1aPpParser::Pound_Pound_delay: {
        enterOuterAlt(_localctx, 17);
        setState(1043);
        pound_pound_delay();
        break;
      }

      case SV3_1aPpParser::Special: {
        enterOuterAlt(_localctx, 18);
        setState(1044);
        match(SV3_1aPpParser::Special);
        break;
      }

      case SV3_1aPpParser::ANY: {
        enterOuterAlt(_localctx, 19);
        setState(1045);
        match(SV3_1aPpParser::ANY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Macro_argContext ------------------------------------------------------------------

SV3_1aPpParser::Macro_argContext::Macro_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Macro_argContext::integral_number() {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::Fixed_point_number() {
  return getToken(SV3_1aPpParser::Fixed_point_number, 0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::STRING() {
  return getToken(SV3_1aPpParser::STRING, 0);
}

SV3_1aPpParser::Paired_parensContext* SV3_1aPpParser::Macro_argContext::paired_parens() {
  return getRuleContext<SV3_1aPpParser::Paired_parensContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::ASSIGN_OP() {
  return getToken(SV3_1aPpParser::ASSIGN_OP, 0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::DOUBLE_QUOTE() {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, 0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Macro_argContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::TEXT_CR() {
  return getToken(SV3_1aPpParser::TEXT_CR, 0);
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::Macro_argContext::escaped_identifier() {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(0);
}

SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext* SV3_1aPpParser::Macro_argContext::simple_args_macro_definition_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Simple_args_macro_definition_in_macro_bodyContext>(0);
}

SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext* SV3_1aPpParser::Macro_argContext::simple_no_args_macro_definition_in_macro_body() {
  return getRuleContext<SV3_1aPpParser::Simple_no_args_macro_definition_in_macro_bodyContext>(0);
}

SV3_1aPpParser::CommentContext* SV3_1aPpParser::Macro_argContext::comment() {
  return getRuleContext<SV3_1aPpParser::CommentContext>(0);
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::Macro_argContext::pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(0);
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::Macro_argContext::pound_pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::Special() {
  return getToken(SV3_1aPpParser::Special, 0);
}

tree::TerminalNode* SV3_1aPpParser::Macro_argContext::ANY() {
  return getToken(SV3_1aPpParser::ANY, 0);
}


size_t SV3_1aPpParser::Macro_argContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleMacro_arg;
}

void SV3_1aPpParser::Macro_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacro_arg(this);
}

void SV3_1aPpParser::Macro_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacro_arg(this);
}

SV3_1aPpParser::Macro_argContext* SV3_1aPpParser::macro_arg() {
  Macro_argContext *_localctx = _tracker.createInstance<Macro_argContext>(_ctx, getState());
  enterRule(_localctx, 190, SV3_1aPpParser::RuleMacro_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1067);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1048);
      match(SV3_1aPpParser::Simple_identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1049);
      integral_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1050);
      match(SV3_1aPpParser::Spaces);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1051);
      match(SV3_1aPpParser::Fixed_point_number);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1052);
      match(SV3_1aPpParser::STRING);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1053);
      paired_parens();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1054);
      match(SV3_1aPpParser::ASSIGN_OP);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1055);
      match(SV3_1aPpParser::DOUBLE_QUOTE);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1056);
      macro_instance();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1057);
      match(SV3_1aPpParser::CR);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1058);
      match(SV3_1aPpParser::TEXT_CR);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1059);
      escaped_identifier();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1060);
      simple_args_macro_definition_in_macro_body();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1061);
      simple_no_args_macro_definition_in_macro_body();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1062);
      comment();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1063);
      pound_delay();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1064);
      pound_pound_delay();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1065);
      match(SV3_1aPpParser::Special);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1066);
      match(SV3_1aPpParser::ANY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paired_parensContext ------------------------------------------------------------------

SV3_1aPpParser::Paired_parensContext::Paired_parensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::OPEN_PARENS() {
  return getToken(SV3_1aPpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::CLOSE_PARENS() {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, 0);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::Simple_identifier() {
  return getTokens(SV3_1aPpParser::Simple_identifier);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::Simple_identifier(size_t i) {
  return getToken(SV3_1aPpParser::Simple_identifier, i);
}

std::vector<SV3_1aPpParser::Integral_numberContext *> SV3_1aPpParser::Paired_parensContext::integral_number() {
  return getRuleContexts<SV3_1aPpParser::Integral_numberContext>();
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Paired_parensContext::integral_number(size_t i) {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::Spaces() {
  return getTokens(SV3_1aPpParser::Spaces);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::Spaces(size_t i) {
  return getToken(SV3_1aPpParser::Spaces, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::Fixed_point_number() {
  return getTokens(SV3_1aPpParser::Fixed_point_number);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::Fixed_point_number(size_t i) {
  return getToken(SV3_1aPpParser::Fixed_point_number, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::STRING() {
  return getTokens(SV3_1aPpParser::STRING);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::STRING(size_t i) {
  return getToken(SV3_1aPpParser::STRING, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::COMMA() {
  return getTokens(SV3_1aPpParser::COMMA);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::COMMA(size_t i) {
  return getToken(SV3_1aPpParser::COMMA, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::ASSIGN_OP() {
  return getTokens(SV3_1aPpParser::ASSIGN_OP);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::ASSIGN_OP(size_t i) {
  return getToken(SV3_1aPpParser::ASSIGN_OP, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::DOUBLE_QUOTE() {
  return getTokens(SV3_1aPpParser::DOUBLE_QUOTE);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::DOUBLE_QUOTE(size_t i) {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, i);
}

std::vector<SV3_1aPpParser::Macro_instanceContext *> SV3_1aPpParser::Paired_parensContext::macro_instance() {
  return getRuleContexts<SV3_1aPpParser::Macro_instanceContext>();
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Paired_parensContext::macro_instance(size_t i) {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::TEXT_CR() {
  return getTokens(SV3_1aPpParser::TEXT_CR);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::TEXT_CR(size_t i) {
  return getToken(SV3_1aPpParser::TEXT_CR, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::CR() {
  return getTokens(SV3_1aPpParser::CR);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::CR(size_t i) {
  return getToken(SV3_1aPpParser::CR, i);
}

std::vector<SV3_1aPpParser::Paired_parensContext *> SV3_1aPpParser::Paired_parensContext::paired_parens() {
  return getRuleContexts<SV3_1aPpParser::Paired_parensContext>();
}

SV3_1aPpParser::Paired_parensContext* SV3_1aPpParser::Paired_parensContext::paired_parens(size_t i) {
  return getRuleContext<SV3_1aPpParser::Paired_parensContext>(i);
}

std::vector<SV3_1aPpParser::Escaped_identifierContext *> SV3_1aPpParser::Paired_parensContext::escaped_identifier() {
  return getRuleContexts<SV3_1aPpParser::Escaped_identifierContext>();
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::Paired_parensContext::escaped_identifier(size_t i) {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(i);
}

std::vector<SV3_1aPpParser::CommentContext *> SV3_1aPpParser::Paired_parensContext::comment() {
  return getRuleContexts<SV3_1aPpParser::CommentContext>();
}

SV3_1aPpParser::CommentContext* SV3_1aPpParser::Paired_parensContext::comment(size_t i) {
  return getRuleContext<SV3_1aPpParser::CommentContext>(i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::Special() {
  return getTokens(SV3_1aPpParser::Special);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::Special(size_t i) {
  return getToken(SV3_1aPpParser::Special, i);
}

std::vector<tree::TerminalNode *> SV3_1aPpParser::Paired_parensContext::ANY() {
  return getTokens(SV3_1aPpParser::ANY);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::ANY(size_t i) {
  return getToken(SV3_1aPpParser::ANY, i);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::OPEN_CURLY() {
  return getToken(SV3_1aPpParser::OPEN_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::CLOSE_CURLY() {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::OPEN_BRACKET() {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, 0);
}

tree::TerminalNode* SV3_1aPpParser::Paired_parensContext::CLOSE_BRACKET() {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, 0);
}


size_t SV3_1aPpParser::Paired_parensContext::getRuleIndex() const {
  return SV3_1aPpParser::RulePaired_parens;
}

void SV3_1aPpParser::Paired_parensContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPaired_parens(this);
}

void SV3_1aPpParser::Paired_parensContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPaired_parens(this);
}

SV3_1aPpParser::Paired_parensContext* SV3_1aPpParser::paired_parens() {
  Paired_parensContext *_localctx = _tracker.createInstance<Paired_parensContext>(_ctx, getState());
  enterRule(_localctx, 192, SV3_1aPpParser::RulePaired_parens);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1136);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::OPEN_PARENS: {
        enterOuterAlt(_localctx, 1);
        setState(1069);
        match(SV3_1aPpParser::OPEN_PARENS);
        setState(1088);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 14) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 112138015) != 0)) {
          setState(1086);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case SV3_1aPpParser::Simple_identifier: {
              setState(1070);
              match(SV3_1aPpParser::Simple_identifier);
              break;
            }

            case SV3_1aPpParser::INTEGRAL_NUMBER: {
              setState(1071);
              integral_number();
              break;
            }

            case SV3_1aPpParser::Spaces: {
              setState(1072);
              match(SV3_1aPpParser::Spaces);
              break;
            }

            case SV3_1aPpParser::Fixed_point_number: {
              setState(1073);
              match(SV3_1aPpParser::Fixed_point_number);
              break;
            }

            case SV3_1aPpParser::STRING: {
              setState(1074);
              match(SV3_1aPpParser::STRING);
              break;
            }

            case SV3_1aPpParser::COMMA: {
              setState(1075);
              match(SV3_1aPpParser::COMMA);
              break;
            }

            case SV3_1aPpParser::ASSIGN_OP: {
              setState(1076);
              match(SV3_1aPpParser::ASSIGN_OP);
              break;
            }

            case SV3_1aPpParser::DOUBLE_QUOTE: {
              setState(1077);
              match(SV3_1aPpParser::DOUBLE_QUOTE);
              break;
            }

            case SV3_1aPpParser::Macro_identifier:
            case SV3_1aPpParser::Macro_Escaped_identifier: {
              setState(1078);
              macro_instance();
              break;
            }

            case SV3_1aPpParser::TEXT_CR: {
              setState(1079);
              match(SV3_1aPpParser::TEXT_CR);
              break;
            }

            case SV3_1aPpParser::CR: {
              setState(1080);
              match(SV3_1aPpParser::CR);
              break;
            }

            case SV3_1aPpParser::OPEN_PARENS:
            case SV3_1aPpParser::OPEN_CURLY:
            case SV3_1aPpParser::OPEN_BRACKET: {
              setState(1081);
              paired_parens();
              break;
            }

            case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
              setState(1082);
              escaped_identifier();
              break;
            }

            case SV3_1aPpParser::One_line_comment:
            case SV3_1aPpParser::Block_comment: {
              setState(1083);
              comment();
              break;
            }

            case SV3_1aPpParser::Special: {
              setState(1084);
              match(SV3_1aPpParser::Special);
              break;
            }

            case SV3_1aPpParser::ANY: {
              setState(1085);
              match(SV3_1aPpParser::ANY);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(1090);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1091);
        match(SV3_1aPpParser::CLOSE_PARENS);
        break;
      }

      case SV3_1aPpParser::OPEN_CURLY: {
        enterOuterAlt(_localctx, 2);
        setState(1092);
        match(SV3_1aPpParser::OPEN_CURLY);
        setState(1110);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 14) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 112136991) != 0)) {
          setState(1108);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case SV3_1aPpParser::Simple_identifier: {
              setState(1093);
              match(SV3_1aPpParser::Simple_identifier);
              break;
            }

            case SV3_1aPpParser::INTEGRAL_NUMBER: {
              setState(1094);
              integral_number();
              break;
            }

            case SV3_1aPpParser::Spaces: {
              setState(1095);
              match(SV3_1aPpParser::Spaces);
              break;
            }

            case SV3_1aPpParser::Fixed_point_number: {
              setState(1096);
              match(SV3_1aPpParser::Fixed_point_number);
              break;
            }

            case SV3_1aPpParser::STRING: {
              setState(1097);
              match(SV3_1aPpParser::STRING);
              break;
            }

            case SV3_1aPpParser::COMMA: {
              setState(1098);
              match(SV3_1aPpParser::COMMA);
              break;
            }

            case SV3_1aPpParser::ASSIGN_OP: {
              setState(1099);
              match(SV3_1aPpParser::ASSIGN_OP);
              break;
            }

            case SV3_1aPpParser::DOUBLE_QUOTE: {
              setState(1100);
              match(SV3_1aPpParser::DOUBLE_QUOTE);
              break;
            }

            case SV3_1aPpParser::Macro_identifier:
            case SV3_1aPpParser::Macro_Escaped_identifier: {
              setState(1101);
              macro_instance();
              break;
            }

            case SV3_1aPpParser::CR: {
              setState(1102);
              match(SV3_1aPpParser::CR);
              break;
            }

            case SV3_1aPpParser::OPEN_PARENS:
            case SV3_1aPpParser::OPEN_CURLY:
            case SV3_1aPpParser::OPEN_BRACKET: {
              setState(1103);
              paired_parens();
              break;
            }

            case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
              setState(1104);
              escaped_identifier();
              break;
            }

            case SV3_1aPpParser::One_line_comment:
            case SV3_1aPpParser::Block_comment: {
              setState(1105);
              comment();
              break;
            }

            case SV3_1aPpParser::Special: {
              setState(1106);
              match(SV3_1aPpParser::Special);
              break;
            }

            case SV3_1aPpParser::ANY: {
              setState(1107);
              match(SV3_1aPpParser::ANY);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(1112);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1113);
        match(SV3_1aPpParser::CLOSE_CURLY);
        break;
      }

      case SV3_1aPpParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 3);
        setState(1114);
        match(SV3_1aPpParser::OPEN_BRACKET);
        setState(1132);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 14) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 112136991) != 0)) {
          setState(1130);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case SV3_1aPpParser::Simple_identifier: {
              setState(1115);
              match(SV3_1aPpParser::Simple_identifier);
              break;
            }

            case SV3_1aPpParser::INTEGRAL_NUMBER: {
              setState(1116);
              integral_number();
              break;
            }

            case SV3_1aPpParser::Spaces: {
              setState(1117);
              match(SV3_1aPpParser::Spaces);
              break;
            }

            case SV3_1aPpParser::Fixed_point_number: {
              setState(1118);
              match(SV3_1aPpParser::Fixed_point_number);
              break;
            }

            case SV3_1aPpParser::STRING: {
              setState(1119);
              match(SV3_1aPpParser::STRING);
              break;
            }

            case SV3_1aPpParser::COMMA: {
              setState(1120);
              match(SV3_1aPpParser::COMMA);
              break;
            }

            case SV3_1aPpParser::ASSIGN_OP: {
              setState(1121);
              match(SV3_1aPpParser::ASSIGN_OP);
              break;
            }

            case SV3_1aPpParser::DOUBLE_QUOTE: {
              setState(1122);
              match(SV3_1aPpParser::DOUBLE_QUOTE);
              break;
            }

            case SV3_1aPpParser::Macro_identifier:
            case SV3_1aPpParser::Macro_Escaped_identifier: {
              setState(1123);
              macro_instance();
              break;
            }

            case SV3_1aPpParser::CR: {
              setState(1124);
              match(SV3_1aPpParser::CR);
              break;
            }

            case SV3_1aPpParser::OPEN_PARENS:
            case SV3_1aPpParser::OPEN_CURLY:
            case SV3_1aPpParser::OPEN_BRACKET: {
              setState(1125);
              paired_parens();
              break;
            }

            case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
              setState(1126);
              escaped_identifier();
              break;
            }

            case SV3_1aPpParser::One_line_comment:
            case SV3_1aPpParser::Block_comment: {
              setState(1127);
              comment();
              break;
            }

            case SV3_1aPpParser::Special: {
              setState(1128);
              match(SV3_1aPpParser::Special);
              break;
            }

            case SV3_1aPpParser::ANY: {
              setState(1129);
              match(SV3_1aPpParser::ANY);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(1134);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1135);
        match(SV3_1aPpParser::CLOSE_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Text_blobContext ------------------------------------------------------------------

SV3_1aPpParser::Text_blobContext::Text_blobContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::CR() {
  return getToken(SV3_1aPpParser::CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::Fixed_point_number() {
  return getToken(SV3_1aPpParser::Fixed_point_number, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::ESCAPED_CR() {
  return getToken(SV3_1aPpParser::ESCAPED_CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::STRING() {
  return getToken(SV3_1aPpParser::STRING, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::OPEN_PARENS() {
  return getToken(SV3_1aPpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::CLOSE_PARENS() {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::COMMA() {
  return getToken(SV3_1aPpParser::COMMA, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::ASSIGN_OP() {
  return getToken(SV3_1aPpParser::ASSIGN_OP, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::DOUBLE_QUOTE() {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::OPEN_CURLY() {
  return getToken(SV3_1aPpParser::OPEN_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::CLOSE_CURLY() {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::OPEN_BRACKET() {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::CLOSE_BRACKET() {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::TICK_TICK() {
  return getToken(SV3_1aPpParser::TICK_TICK, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::TICK_VARIABLE() {
  return getToken(SV3_1aPpParser::TICK_VARIABLE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::TIMESCALE() {
  return getToken(SV3_1aPpParser::TIMESCALE, 0);
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::Text_blobContext::pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(0);
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::Text_blobContext::pound_pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::TICK_QUOTE() {
  return getToken(SV3_1aPpParser::TICK_QUOTE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::TICK_BACKSLASH_TICK_QUOTE() {
  return getToken(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::TEXT_CR() {
  return getToken(SV3_1aPpParser::TEXT_CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::Special() {
  return getToken(SV3_1aPpParser::Special, 0);
}

tree::TerminalNode* SV3_1aPpParser::Text_blobContext::ANY() {
  return getToken(SV3_1aPpParser::ANY, 0);
}


size_t SV3_1aPpParser::Text_blobContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleText_blob;
}

void SV3_1aPpParser::Text_blobContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterText_blob(this);
}

void SV3_1aPpParser::Text_blobContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitText_blob(this);
}

SV3_1aPpParser::Text_blobContext* SV3_1aPpParser::text_blob() {
  Text_blobContext *_localctx = _tracker.createInstance<Text_blobContext>(_ctx, getState());
  enterRule(_localctx, 194, SV3_1aPpParser::RuleText_blob);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1163);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::Simple_identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1138);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::CR: {
        enterOuterAlt(_localctx, 2);
        setState(1139);
        match(SV3_1aPpParser::CR);
        break;
      }

      case SV3_1aPpParser::Spaces: {
        enterOuterAlt(_localctx, 3);
        setState(1140);
        match(SV3_1aPpParser::Spaces);
        break;
      }

      case SV3_1aPpParser::Fixed_point_number: {
        enterOuterAlt(_localctx, 4);
        setState(1141);
        match(SV3_1aPpParser::Fixed_point_number);
        break;
      }

      case SV3_1aPpParser::ESCAPED_CR: {
        enterOuterAlt(_localctx, 5);
        setState(1142);
        match(SV3_1aPpParser::ESCAPED_CR);
        break;
      }

      case SV3_1aPpParser::STRING: {
        enterOuterAlt(_localctx, 6);
        setState(1143);
        match(SV3_1aPpParser::STRING);
        break;
      }

      case SV3_1aPpParser::OPEN_PARENS: {
        enterOuterAlt(_localctx, 7);
        setState(1144);
        match(SV3_1aPpParser::OPEN_PARENS);
        break;
      }

      case SV3_1aPpParser::CLOSE_PARENS: {
        enterOuterAlt(_localctx, 8);
        setState(1145);
        match(SV3_1aPpParser::CLOSE_PARENS);
        break;
      }

      case SV3_1aPpParser::COMMA: {
        enterOuterAlt(_localctx, 9);
        setState(1146);
        match(SV3_1aPpParser::COMMA);
        break;
      }

      case SV3_1aPpParser::ASSIGN_OP: {
        enterOuterAlt(_localctx, 10);
        setState(1147);
        match(SV3_1aPpParser::ASSIGN_OP);
        break;
      }

      case SV3_1aPpParser::DOUBLE_QUOTE: {
        enterOuterAlt(_localctx, 11);
        setState(1148);
        match(SV3_1aPpParser::DOUBLE_QUOTE);
        break;
      }

      case SV3_1aPpParser::OPEN_CURLY: {
        enterOuterAlt(_localctx, 12);
        setState(1149);
        match(SV3_1aPpParser::OPEN_CURLY);
        break;
      }

      case SV3_1aPpParser::CLOSE_CURLY: {
        enterOuterAlt(_localctx, 13);
        setState(1150);
        match(SV3_1aPpParser::CLOSE_CURLY);
        break;
      }

      case SV3_1aPpParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 14);
        setState(1151);
        match(SV3_1aPpParser::OPEN_BRACKET);
        break;
      }

      case SV3_1aPpParser::CLOSE_BRACKET: {
        enterOuterAlt(_localctx, 15);
        setState(1152);
        match(SV3_1aPpParser::CLOSE_BRACKET);
        break;
      }

      case SV3_1aPpParser::TICK_TICK: {
        enterOuterAlt(_localctx, 16);
        setState(1153);
        match(SV3_1aPpParser::TICK_TICK);
        break;
      }

      case SV3_1aPpParser::TICK_VARIABLE: {
        enterOuterAlt(_localctx, 17);
        setState(1154);
        match(SV3_1aPpParser::TICK_VARIABLE);
        break;
      }

      case SV3_1aPpParser::TIMESCALE: {
        enterOuterAlt(_localctx, 18);
        setState(1155);
        match(SV3_1aPpParser::TIMESCALE);
        break;
      }

      case SV3_1aPpParser::POUND_DELAY: {
        enterOuterAlt(_localctx, 19);
        setState(1156);
        pound_delay();
        break;
      }

      case SV3_1aPpParser::Pound_Pound_delay: {
        enterOuterAlt(_localctx, 20);
        setState(1157);
        pound_pound_delay();
        break;
      }

      case SV3_1aPpParser::TICK_QUOTE: {
        enterOuterAlt(_localctx, 21);
        setState(1158);
        match(SV3_1aPpParser::TICK_QUOTE);
        break;
      }

      case SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE: {
        enterOuterAlt(_localctx, 22);
        setState(1159);
        match(SV3_1aPpParser::TICK_BACKSLASH_TICK_QUOTE);
        break;
      }

      case SV3_1aPpParser::TEXT_CR: {
        enterOuterAlt(_localctx, 23);
        setState(1160);
        match(SV3_1aPpParser::TEXT_CR);
        break;
      }

      case SV3_1aPpParser::Special: {
        enterOuterAlt(_localctx, 24);
        setState(1161);
        match(SV3_1aPpParser::Special);
        break;
      }

      case SV3_1aPpParser::ANY: {
        enterOuterAlt(_localctx, 25);
        setState(1162);
        match(SV3_1aPpParser::ANY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

SV3_1aPpParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::StringContext::STRING() {
  return getToken(SV3_1aPpParser::STRING, 0);
}


size_t SV3_1aPpParser::StringContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleString;
}

void SV3_1aPpParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void SV3_1aPpParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}

SV3_1aPpParser::StringContext* SV3_1aPpParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 196, SV3_1aPpParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1165);
    match(SV3_1aPpParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_valueContext ------------------------------------------------------------------

SV3_1aPpParser::Default_valueContext::Default_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::Default_valueContext::integral_number() {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::Fixed_point_number() {
  return getToken(SV3_1aPpParser::Fixed_point_number, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::STRING() {
  return getToken(SV3_1aPpParser::STRING, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::OPEN_CURLY() {
  return getToken(SV3_1aPpParser::OPEN_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::CLOSE_CURLY() {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::OPEN_BRACKET() {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::CLOSE_BRACKET() {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, 0);
}

SV3_1aPpParser::Paired_parensContext* SV3_1aPpParser::Default_valueContext::paired_parens() {
  return getRuleContext<SV3_1aPpParser::Paired_parensContext>(0);
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::Default_valueContext::escaped_identifier() {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(0);
}

SV3_1aPpParser::Macro_instanceContext* SV3_1aPpParser::Default_valueContext::macro_instance() {
  return getRuleContext<SV3_1aPpParser::Macro_instanceContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::Special() {
  return getToken(SV3_1aPpParser::Special, 0);
}

tree::TerminalNode* SV3_1aPpParser::Default_valueContext::ANY() {
  return getToken(SV3_1aPpParser::ANY, 0);
}


size_t SV3_1aPpParser::Default_valueContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleDefault_value;
}

void SV3_1aPpParser::Default_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_value(this);
}

void SV3_1aPpParser::Default_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_value(this);
}

SV3_1aPpParser::Default_valueContext* SV3_1aPpParser::default_value() {
  Default_valueContext *_localctx = _tracker.createInstance<Default_valueContext>(_ctx, getState());
  enterRule(_localctx, 198, SV3_1aPpParser::RuleDefault_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1181);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1167);
      match(SV3_1aPpParser::Simple_identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1168);
      integral_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1169);
      match(SV3_1aPpParser::Spaces);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1170);
      match(SV3_1aPpParser::Fixed_point_number);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1171);
      match(SV3_1aPpParser::STRING);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1172);
      match(SV3_1aPpParser::OPEN_CURLY);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1173);
      match(SV3_1aPpParser::CLOSE_CURLY);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1174);
      match(SV3_1aPpParser::OPEN_BRACKET);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1175);
      match(SV3_1aPpParser::CLOSE_BRACKET);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1176);
      paired_parens();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1177);
      escaped_identifier();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1178);
      macro_instance();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1179);
      match(SV3_1aPpParser::Special);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1180);
      match(SV3_1aPpParser::ANY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_blobContext ------------------------------------------------------------------

SV3_1aPpParser::String_blobContext::String_blobContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::Simple_identifier() {
  return getToken(SV3_1aPpParser::Simple_identifier, 0);
}

SV3_1aPpParser::Integral_numberContext* SV3_1aPpParser::String_blobContext::integral_number() {
  return getRuleContext<SV3_1aPpParser::Integral_numberContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::Spaces() {
  return getToken(SV3_1aPpParser::Spaces, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::Fixed_point_number() {
  return getToken(SV3_1aPpParser::Fixed_point_number, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::ESCAPED_CR() {
  return getToken(SV3_1aPpParser::ESCAPED_CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::OPEN_PARENS() {
  return getToken(SV3_1aPpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::CLOSE_PARENS() {
  return getToken(SV3_1aPpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::COMMA() {
  return getToken(SV3_1aPpParser::COMMA, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::ASSIGN_OP() {
  return getToken(SV3_1aPpParser::ASSIGN_OP, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::DOUBLE_QUOTE() {
  return getToken(SV3_1aPpParser::DOUBLE_QUOTE, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::OPEN_CURLY() {
  return getToken(SV3_1aPpParser::OPEN_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::CLOSE_CURLY() {
  return getToken(SV3_1aPpParser::CLOSE_CURLY, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::OPEN_BRACKET() {
  return getToken(SV3_1aPpParser::OPEN_BRACKET, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::CLOSE_BRACKET() {
  return getToken(SV3_1aPpParser::CLOSE_BRACKET, 0);
}

SV3_1aPpParser::Escaped_identifierContext* SV3_1aPpParser::String_blobContext::escaped_identifier() {
  return getRuleContext<SV3_1aPpParser::Escaped_identifierContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::TIMESCALE() {
  return getToken(SV3_1aPpParser::TIMESCALE, 0);
}

SV3_1aPpParser::Pound_delayContext* SV3_1aPpParser::String_blobContext::pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_delayContext>(0);
}

SV3_1aPpParser::Pound_pound_delayContext* SV3_1aPpParser::String_blobContext::pound_pound_delay() {
  return getRuleContext<SV3_1aPpParser::Pound_pound_delayContext>(0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::TEXT_CR() {
  return getToken(SV3_1aPpParser::TEXT_CR, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::Special() {
  return getToken(SV3_1aPpParser::Special, 0);
}

tree::TerminalNode* SV3_1aPpParser::String_blobContext::ANY() {
  return getToken(SV3_1aPpParser::ANY, 0);
}


size_t SV3_1aPpParser::String_blobContext::getRuleIndex() const {
  return SV3_1aPpParser::RuleString_blob;
}

void SV3_1aPpParser::String_blobContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_blob(this);
}

void SV3_1aPpParser::String_blobContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SV3_1aPpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_blob(this);
}

SV3_1aPpParser::String_blobContext* SV3_1aPpParser::string_blob() {
  String_blobContext *_localctx = _tracker.createInstance<String_blobContext>(_ctx, getState());
  enterRule(_localctx, 200, SV3_1aPpParser::RuleString_blob);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1204);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SV3_1aPpParser::Simple_identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1183);
        match(SV3_1aPpParser::Simple_identifier);
        break;
      }

      case SV3_1aPpParser::INTEGRAL_NUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(1184);
        integral_number();
        break;
      }

      case SV3_1aPpParser::Spaces: {
        enterOuterAlt(_localctx, 3);
        setState(1185);
        match(SV3_1aPpParser::Spaces);
        break;
      }

      case SV3_1aPpParser::Fixed_point_number: {
        enterOuterAlt(_localctx, 4);
        setState(1186);
        match(SV3_1aPpParser::Fixed_point_number);
        break;
      }

      case SV3_1aPpParser::ESCAPED_CR: {
        enterOuterAlt(_localctx, 5);
        setState(1187);
        match(SV3_1aPpParser::ESCAPED_CR);
        break;
      }

      case SV3_1aPpParser::OPEN_PARENS: {
        enterOuterAlt(_localctx, 6);
        setState(1188);
        match(SV3_1aPpParser::OPEN_PARENS);
        break;
      }

      case SV3_1aPpParser::CLOSE_PARENS: {
        enterOuterAlt(_localctx, 7);
        setState(1189);
        match(SV3_1aPpParser::CLOSE_PARENS);
        break;
      }

      case SV3_1aPpParser::COMMA: {
        enterOuterAlt(_localctx, 8);
        setState(1190);
        match(SV3_1aPpParser::COMMA);
        break;
      }

      case SV3_1aPpParser::ASSIGN_OP: {
        enterOuterAlt(_localctx, 9);
        setState(1191);
        match(SV3_1aPpParser::ASSIGN_OP);
        break;
      }

      case SV3_1aPpParser::DOUBLE_QUOTE: {
        enterOuterAlt(_localctx, 10);
        setState(1192);
        match(SV3_1aPpParser::DOUBLE_QUOTE);
        break;
      }

      case SV3_1aPpParser::OPEN_CURLY: {
        enterOuterAlt(_localctx, 11);
        setState(1193);
        match(SV3_1aPpParser::OPEN_CURLY);
        break;
      }

      case SV3_1aPpParser::CLOSE_CURLY: {
        enterOuterAlt(_localctx, 12);
        setState(1194);
        match(SV3_1aPpParser::CLOSE_CURLY);
        break;
      }

      case SV3_1aPpParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 13);
        setState(1195);
        match(SV3_1aPpParser::OPEN_BRACKET);
        break;
      }

      case SV3_1aPpParser::CLOSE_BRACKET: {
        enterOuterAlt(_localctx, 14);
        setState(1196);
        match(SV3_1aPpParser::CLOSE_BRACKET);
        break;
      }

      case SV3_1aPpParser::ESCAPED_IDENTIFIER: {
        enterOuterAlt(_localctx, 15);
        setState(1197);
        escaped_identifier();
        break;
      }

      case SV3_1aPpParser::TIMESCALE: {
        enterOuterAlt(_localctx, 16);
        setState(1198);
        match(SV3_1aPpParser::TIMESCALE);
        break;
      }

      case SV3_1aPpParser::POUND_DELAY: {
        enterOuterAlt(_localctx, 17);
        setState(1199);
        pound_delay();
        break;
      }

      case SV3_1aPpParser::Pound_Pound_delay: {
        enterOuterAlt(_localctx, 18);
        setState(1200);
        pound_pound_delay();
        break;
      }

      case SV3_1aPpParser::TEXT_CR: {
        enterOuterAlt(_localctx, 19);
        setState(1201);
        match(SV3_1aPpParser::TEXT_CR);
        break;
      }

      case SV3_1aPpParser::Special: {
        enterOuterAlt(_localctx, 20);
        setState(1202);
        match(SV3_1aPpParser::Special);
        break;
      }

      case SV3_1aPpParser::ANY: {
        enterOuterAlt(_localctx, 21);
        setState(1203);
        match(SV3_1aPpParser::ANY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void SV3_1aPpParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  sv3_1appparserParserInitialize();
#else
  ::antlr4::internal::call_once(sv3_1appparserParserOnceFlag, sv3_1appparserParserInitialize);
#endif
}
