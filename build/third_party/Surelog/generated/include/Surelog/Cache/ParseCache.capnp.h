// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ParseCache.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1001000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Cache.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e10e36da36a989dd);
CAPNP_DECLARE_SCHEMA(edcba2974193e180);

}  // namespace schemas
}  // namespace capnp


struct DesignElement {
  DesignElement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e10e36da36a989dd, 8, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParseCache {
  ParseCache() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(edcba2974193e180, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class DesignElement::Reader {
public:
  typedef DesignElement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getName() const;

  inline  ::uint64_t getFileId() const;

  inline  ::uint32_t getType() const;

  inline  ::uint64_t getUniqueId() const;

  inline  ::uint32_t getLine() const;

  inline  ::uint32_t getColumn() const;

  inline  ::uint32_t getEndLine() const;

  inline  ::uint32_t getEndColumn() const;

  inline bool hasTimeInfo() const;
  inline  ::TimeInfo::Reader getTimeInfo() const;

  inline  ::uint64_t getParent() const;

  inline  ::uint32_t getNode() const;

  inline  ::uint32_t getDefaultNetType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DesignElement::Builder {
public:
  typedef DesignElement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getName();
  inline void setName( ::uint64_t value);

  inline  ::uint64_t getFileId();
  inline void setFileId( ::uint64_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

  inline  ::uint64_t getUniqueId();
  inline void setUniqueId( ::uint64_t value);

  inline  ::uint32_t getLine();
  inline void setLine( ::uint32_t value);

  inline  ::uint32_t getColumn();
  inline void setColumn( ::uint32_t value);

  inline  ::uint32_t getEndLine();
  inline void setEndLine( ::uint32_t value);

  inline  ::uint32_t getEndColumn();
  inline void setEndColumn( ::uint32_t value);

  inline bool hasTimeInfo();
  inline  ::TimeInfo::Builder getTimeInfo();
  inline void setTimeInfo( ::TimeInfo::Reader value);
  inline  ::TimeInfo::Builder initTimeInfo();
  inline void adoptTimeInfo(::capnp::Orphan< ::TimeInfo>&& value);
  inline ::capnp::Orphan< ::TimeInfo> disownTimeInfo();

  inline  ::uint64_t getParent();
  inline void setParent( ::uint64_t value);

  inline  ::uint32_t getNode();
  inline void setNode( ::uint32_t value);

  inline  ::uint32_t getDefaultNetType();
  inline void setDefaultNetType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DesignElement::Pipeline {
public:
  typedef DesignElement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TimeInfo::Pipeline getTimeInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParseCache::Reader {
public:
  typedef ParseCache Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::Header::Reader getHeader() const;

  inline bool hasErrors() const;
  inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Reader getErrors() const;

  inline bool hasSymbols() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getSymbols() const;

  inline bool hasElements() const;
  inline  ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>::Reader getElements() const;

  inline bool hasObjects() const;
  inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Reader getObjects() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParseCache::Builder {
public:
  typedef ParseCache Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::Header::Builder getHeader();
  inline void setHeader( ::Header::Reader value);
  inline  ::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::Header>&& value);
  inline ::capnp::Orphan< ::Header> disownHeader();

  inline bool hasErrors();
  inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Builder getErrors();
  inline void setErrors( ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Builder initErrors(unsigned int size);
  inline void adoptErrors(::capnp::Orphan< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>> disownErrors();

  inline bool hasSymbols();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getSymbols();
  inline void setSymbols( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initSymbols(unsigned int size);
  inline void adoptSymbols(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownSymbols();

  inline bool hasElements();
  inline  ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>::Builder getElements();
  inline void setElements( ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>::Builder initElements(unsigned int size);
  inline void adoptElements(::capnp::Orphan< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>> disownElements();

  inline bool hasObjects();
  inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Builder getObjects();
  inline void setObjects( ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Builder initObjects(unsigned int size);
  inline void adoptObjects(::capnp::Orphan< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>> disownObjects();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParseCache::Pipeline {
public:
  typedef ParseCache Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t DesignElement::Reader::getName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DesignElement::Builder::getName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DesignElement::Reader::getFileId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DesignElement::Builder::getFileId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setFileId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DesignElement::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DesignElement::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DesignElement::Reader::getUniqueId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DesignElement::Builder::getUniqueId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setUniqueId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DesignElement::Reader::getLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DesignElement::Builder::getLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DesignElement::Reader::getColumn() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DesignElement::Builder::getColumn() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setColumn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DesignElement::Reader::getEndLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DesignElement::Builder::getEndLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setEndLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DesignElement::Reader::getEndColumn() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DesignElement::Builder::getEndColumn() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setEndColumn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool DesignElement::Reader::hasTimeInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DesignElement::Builder::hasTimeInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::TimeInfo::Reader DesignElement::Reader::getTimeInfo() const {
  return ::capnp::_::PointerHelpers< ::TimeInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::TimeInfo::Builder DesignElement::Builder::getTimeInfo() {
  return ::capnp::_::PointerHelpers< ::TimeInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TimeInfo::Pipeline DesignElement::Pipeline::getTimeInfo() {
  return  ::TimeInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DesignElement::Builder::setTimeInfo( ::TimeInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::TimeInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::TimeInfo::Builder DesignElement::Builder::initTimeInfo() {
  return ::capnp::_::PointerHelpers< ::TimeInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DesignElement::Builder::adoptTimeInfo(
    ::capnp::Orphan< ::TimeInfo>&& value) {
  ::capnp::_::PointerHelpers< ::TimeInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TimeInfo> DesignElement::Builder::disownTimeInfo() {
  return ::capnp::_::PointerHelpers< ::TimeInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t DesignElement::Reader::getParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DesignElement::Builder::getParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DesignElement::Reader::getNode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DesignElement::Builder::getNode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setNode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DesignElement::Reader::getDefaultNetType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DesignElement::Builder::getDefaultNetType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DesignElement::Builder::setDefaultNetType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool ParseCache::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParseCache::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Header::Reader ParseCache::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Header::Builder ParseCache::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Header::Pipeline ParseCache::Pipeline::getHeader() {
  return  ::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ParseCache::Builder::setHeader( ::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Header::Builder ParseCache::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParseCache::Builder::adoptHeader(
    ::capnp::Orphan< ::Header>&& value) {
  ::capnp::_::PointerHelpers< ::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Header> ParseCache::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ParseCache::Reader::hasErrors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ParseCache::Builder::hasErrors() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Reader ParseCache::Reader::getErrors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Builder ParseCache::Builder::getErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ParseCache::Builder::setErrors( ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Builder ParseCache::Builder::initErrors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ParseCache::Builder::adoptErrors(
    ::capnp::Orphan< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>> ParseCache::Builder::disownErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ParseCache::Reader::hasSymbols() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ParseCache::Builder::hasSymbols() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader ParseCache::Reader::getSymbols() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ParseCache::Builder::getSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ParseCache::Builder::setSymbols( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ParseCache::Builder::setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ParseCache::Builder::initSymbols(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ParseCache::Builder::adoptSymbols(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> ParseCache::Builder::disownSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ParseCache::Reader::hasElements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ParseCache::Builder::hasElements() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>::Reader ParseCache::Reader::getElements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>::Builder ParseCache::Builder::getElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ParseCache::Builder::setElements( ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>::Builder ParseCache::Builder::initElements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ParseCache::Builder::adoptElements(
    ::capnp::Orphan< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>> ParseCache::Builder::disownElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DesignElement,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ParseCache::Reader::hasObjects() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ParseCache::Builder::hasObjects() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Reader ParseCache::Reader::getObjects() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Builder ParseCache::Builder::getObjects() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ParseCache::Builder::setObjects( ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Builder ParseCache::Builder::initObjects(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ParseCache::Builder::adoptObjects(
    ::capnp::Orphan< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>> ParseCache::Builder::disownObjects() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

