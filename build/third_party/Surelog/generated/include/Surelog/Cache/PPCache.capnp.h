// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: PPCache.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1001000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Cache.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8afd9441b1e4e668);
enum class MacroType_8afd9441b1e4e668: uint16_t {
  NO_ARGS,
  WITH_ARGS,
};
CAPNP_DECLARE_ENUM(MacroType, 8afd9441b1e4e668);
CAPNP_DECLARE_SCHEMA(f8e85677fb29d17a);
CAPNP_DECLARE_SCHEMA(960f43f75d373e0c);
CAPNP_DECLARE_SCHEMA(91dedbe11755fc20);
CAPNP_DECLARE_SCHEMA(c6991592a654814a);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::MacroType_8afd9441b1e4e668 MacroType;

struct Macro {
  Macro() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8e85677fb29d17a, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct IncludeFileInfo {
  IncludeFileInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(960f43f75d373e0c, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LineTranslationInfo {
  LineTranslationInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91dedbe11755fc20, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PPCache {
  PPCache() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6991592a654814a, 0, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Macro::Reader {
public:
  typedef Macro Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNameId() const;

  inline  ::MacroType getType() const;

  inline  ::uint32_t getFileId() const;

  inline  ::uint32_t getStartLine() const;

  inline  ::uint16_t getStartColumn() const;

  inline  ::uint32_t getEndLine() const;

  inline  ::uint16_t getEndColumn() const;

  inline bool hasArguments() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getArguments() const;

  inline bool hasTokens() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getTokens() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Macro::Builder {
public:
  typedef Macro Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNameId();
  inline void setNameId( ::uint64_t value);

  inline  ::MacroType getType();
  inline void setType( ::MacroType value);

  inline  ::uint32_t getFileId();
  inline void setFileId( ::uint32_t value);

  inline  ::uint32_t getStartLine();
  inline void setStartLine( ::uint32_t value);

  inline  ::uint16_t getStartColumn();
  inline void setStartColumn( ::uint16_t value);

  inline  ::uint32_t getEndLine();
  inline void setEndLine( ::uint32_t value);

  inline  ::uint16_t getEndColumn();
  inline void setEndColumn( ::uint16_t value);

  inline bool hasArguments();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getArguments();
  inline void setArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initArguments(unsigned int size);
  inline void adoptArguments(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownArguments();

  inline bool hasTokens();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getTokens();
  inline void setTokens( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setTokens(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initTokens(unsigned int size);
  inline void adoptTokens(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownTokens();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Macro::Pipeline {
public:
  typedef Macro Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class IncludeFileInfo::Reader {
public:
  typedef IncludeFileInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getContext() const;

  inline  ::uint32_t getSectionStartLine() const;

  inline  ::uint64_t getSectionSymbolId() const;

  inline  ::uint64_t getSectionFileId() const;

  inline  ::uint32_t getOriginalStartLine() const;

  inline  ::uint32_t getOriginalStartColumn() const;

  inline  ::uint32_t getOriginalEndLine() const;

  inline  ::uint32_t getOriginalEndColumn() const;

  inline  ::uint32_t getAction() const;

  inline  ::int32_t getIndexOpening() const;

  inline  ::int32_t getIndexClosing() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class IncludeFileInfo::Builder {
public:
  typedef IncludeFileInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getContext();
  inline void setContext( ::uint32_t value);

  inline  ::uint32_t getSectionStartLine();
  inline void setSectionStartLine( ::uint32_t value);

  inline  ::uint64_t getSectionSymbolId();
  inline void setSectionSymbolId( ::uint64_t value);

  inline  ::uint64_t getSectionFileId();
  inline void setSectionFileId( ::uint64_t value);

  inline  ::uint32_t getOriginalStartLine();
  inline void setOriginalStartLine( ::uint32_t value);

  inline  ::uint32_t getOriginalStartColumn();
  inline void setOriginalStartColumn( ::uint32_t value);

  inline  ::uint32_t getOriginalEndLine();
  inline void setOriginalEndLine( ::uint32_t value);

  inline  ::uint32_t getOriginalEndColumn();
  inline void setOriginalEndColumn( ::uint32_t value);

  inline  ::uint32_t getAction();
  inline void setAction( ::uint32_t value);

  inline  ::int32_t getIndexOpening();
  inline void setIndexOpening( ::int32_t value);

  inline  ::int32_t getIndexClosing();
  inline void setIndexClosing( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class IncludeFileInfo::Pipeline {
public:
  typedef IncludeFileInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LineTranslationInfo::Reader {
public:
  typedef LineTranslationInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPretendFileId() const;

  inline  ::uint32_t getOriginalLine() const;

  inline  ::uint32_t getPretendLine() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LineTranslationInfo::Builder {
public:
  typedef LineTranslationInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPretendFileId();
  inline void setPretendFileId( ::uint64_t value);

  inline  ::uint32_t getOriginalLine();
  inline void setOriginalLine( ::uint32_t value);

  inline  ::uint32_t getPretendLine();
  inline void setPretendLine( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LineTranslationInfo::Pipeline {
public:
  typedef LineTranslationInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PPCache::Reader {
public:
  typedef PPCache Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::Header::Reader getHeader() const;

  inline bool hasMacros() const;
  inline  ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>::Reader getMacros() const;

  inline bool hasBody() const;
  inline  ::capnp::Text::Reader getBody() const;

  inline bool hasErrors() const;
  inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Reader getErrors() const;

  inline bool hasSymbols() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getSymbols() const;

  inline bool hasDefines() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getDefines() const;

  inline bool hasTimeInfos() const;
  inline  ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>::Reader getTimeInfos() const;

  inline bool hasLineTranslations() const;
  inline  ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>::Reader getLineTranslations() const;

  inline bool hasIncludeFileInfos() const;
  inline  ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>::Reader getIncludeFileInfos() const;

  inline bool hasObjects() const;
  inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Reader getObjects() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PPCache::Builder {
public:
  typedef PPCache Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::Header::Builder getHeader();
  inline void setHeader( ::Header::Reader value);
  inline  ::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::Header>&& value);
  inline ::capnp::Orphan< ::Header> disownHeader();

  inline bool hasMacros();
  inline  ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>::Builder getMacros();
  inline void setMacros( ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>::Builder initMacros(unsigned int size);
  inline void adoptMacros(::capnp::Orphan< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>> disownMacros();

  inline bool hasBody();
  inline  ::capnp::Text::Builder getBody();
  inline void setBody( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBody(unsigned int size);
  inline void adoptBody(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBody();

  inline bool hasErrors();
  inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Builder getErrors();
  inline void setErrors( ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Builder initErrors(unsigned int size);
  inline void adoptErrors(::capnp::Orphan< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>> disownErrors();

  inline bool hasSymbols();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getSymbols();
  inline void setSymbols( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initSymbols(unsigned int size);
  inline void adoptSymbols(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownSymbols();

  inline bool hasDefines();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getDefines();
  inline void setDefines( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setDefines(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initDefines(unsigned int size);
  inline void adoptDefines(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownDefines();

  inline bool hasTimeInfos();
  inline  ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>::Builder getTimeInfos();
  inline void setTimeInfos( ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>::Builder initTimeInfos(unsigned int size);
  inline void adoptTimeInfos(::capnp::Orphan< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>> disownTimeInfos();

  inline bool hasLineTranslations();
  inline  ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>::Builder getLineTranslations();
  inline void setLineTranslations( ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>::Builder initLineTranslations(unsigned int size);
  inline void adoptLineTranslations(::capnp::Orphan< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>> disownLineTranslations();

  inline bool hasIncludeFileInfos();
  inline  ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>::Builder getIncludeFileInfos();
  inline void setIncludeFileInfos( ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>::Builder initIncludeFileInfos(unsigned int size);
  inline void adoptIncludeFileInfos(::capnp::Orphan< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>> disownIncludeFileInfos();

  inline bool hasObjects();
  inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Builder getObjects();
  inline void setObjects( ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Builder initObjects(unsigned int size);
  inline void adoptObjects(::capnp::Orphan< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>> disownObjects();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PPCache::Pipeline {
public:
  typedef PPCache Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t Macro::Reader::getNameId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Macro::Builder::getNameId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Macro::Builder::setNameId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::MacroType Macro::Reader::getType() const {
  return _reader.getDataField< ::MacroType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::MacroType Macro::Builder::getType() {
  return _builder.getDataField< ::MacroType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Macro::Builder::setType( ::MacroType value) {
  _builder.setDataField< ::MacroType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Macro::Reader::getFileId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Macro::Builder::getFileId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Macro::Builder::setFileId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Macro::Reader::getStartLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Macro::Builder::getStartLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Macro::Builder::setStartLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Macro::Reader::getStartColumn() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Macro::Builder::getStartColumn() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Macro::Builder::setStartColumn( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Macro::Reader::getEndLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Macro::Builder::getEndLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Macro::Builder::setEndLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Macro::Reader::getEndColumn() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Macro::Builder::getEndColumn() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Macro::Builder::setEndColumn( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool Macro::Reader::hasArguments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Macro::Builder::hasArguments() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Macro::Reader::getArguments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Macro::Builder::getArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Macro::Builder::setArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Macro::Builder::setArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Macro::Builder::initArguments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Macro::Builder::adoptArguments(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Macro::Builder::disownArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Macro::Reader::hasTokens() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Macro::Builder::hasTokens() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Macro::Reader::getTokens() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Macro::Builder::getTokens() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Macro::Builder::setTokens( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Macro::Builder::setTokens(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Macro::Builder::initTokens(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Macro::Builder::adoptTokens(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Macro::Builder::disownTokens() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t IncludeFileInfo::Reader::getContext() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t IncludeFileInfo::Builder::getContext() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setContext( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t IncludeFileInfo::Reader::getSectionStartLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t IncludeFileInfo::Builder::getSectionStartLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setSectionStartLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t IncludeFileInfo::Reader::getSectionSymbolId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t IncludeFileInfo::Builder::getSectionSymbolId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setSectionSymbolId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t IncludeFileInfo::Reader::getSectionFileId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t IncludeFileInfo::Builder::getSectionFileId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setSectionFileId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t IncludeFileInfo::Reader::getOriginalStartLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t IncludeFileInfo::Builder::getOriginalStartLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setOriginalStartLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t IncludeFileInfo::Reader::getOriginalStartColumn() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t IncludeFileInfo::Builder::getOriginalStartColumn() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setOriginalStartColumn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t IncludeFileInfo::Reader::getOriginalEndLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t IncludeFileInfo::Builder::getOriginalEndLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setOriginalEndLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t IncludeFileInfo::Reader::getOriginalEndColumn() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t IncludeFileInfo::Builder::getOriginalEndColumn() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setOriginalEndColumn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t IncludeFileInfo::Reader::getAction() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t IncludeFileInfo::Builder::getAction() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setAction( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t IncludeFileInfo::Reader::getIndexOpening() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int32_t IncludeFileInfo::Builder::getIndexOpening() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setIndexOpening( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t IncludeFileInfo::Reader::getIndexClosing() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int32_t IncludeFileInfo::Builder::getIndexClosing() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void IncludeFileInfo::Builder::setIndexClosing( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LineTranslationInfo::Reader::getPretendFileId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LineTranslationInfo::Builder::getPretendFileId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LineTranslationInfo::Builder::setPretendFileId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LineTranslationInfo::Reader::getOriginalLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LineTranslationInfo::Builder::getOriginalLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LineTranslationInfo::Builder::setOriginalLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LineTranslationInfo::Reader::getPretendLine() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LineTranslationInfo::Builder::getPretendLine() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LineTranslationInfo::Builder::setPretendLine( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool PPCache::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Header::Reader PPCache::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Header::Builder PPCache::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Header::Pipeline PPCache::Pipeline::getHeader() {
  return  ::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PPCache::Builder::setHeader( ::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Header::Builder PPCache::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::adoptHeader(
    ::capnp::Orphan< ::Header>&& value) {
  ::capnp::_::PointerHelpers< ::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Header> PPCache::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasMacros() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasMacros() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>::Reader PPCache::Reader::getMacros() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::getMacros() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setMacros( ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::initMacros(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptMacros(
    ::capnp::Orphan< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>> PPCache::Builder::disownMacros() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Macro,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasBody() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasBody() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PPCache::Reader::getBody() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PPCache::Builder::getBody() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setBody( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PPCache::Builder::initBody(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptBody(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PPCache::Builder::disownBody() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasErrors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasErrors() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Reader PPCache::Reader::getErrors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::getErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setErrors( ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::initErrors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptErrors(
    ::capnp::Orphan< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>> PPCache::Builder::disownErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Error,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasSymbols() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasSymbols() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader PPCache::Reader::getSymbols() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder PPCache::Builder::getSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setSymbols( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void PPCache::Builder::setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder PPCache::Builder::initSymbols(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptSymbols(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> PPCache::Builder::disownSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasDefines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasDefines() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader PPCache::Reader::getDefines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder PPCache::Builder::getDefines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setDefines( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void PPCache::Builder::setDefines(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder PPCache::Builder::initDefines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptDefines(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> PPCache::Builder::disownDefines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasTimeInfos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasTimeInfos() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>::Reader PPCache::Reader::getTimeInfos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::getTimeInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setTimeInfos( ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::initTimeInfos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptTimeInfos(
    ::capnp::Orphan< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>> PPCache::Builder::disownTimeInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TimeInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasLineTranslations() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasLineTranslations() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>::Reader PPCache::Reader::getLineTranslations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::getLineTranslations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setLineTranslations( ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::initLineTranslations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptLineTranslations(
    ::capnp::Orphan< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>> PPCache::Builder::disownLineTranslations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LineTranslationInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasIncludeFileInfos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasIncludeFileInfos() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>::Reader PPCache::Reader::getIncludeFileInfos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::getIncludeFileInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setIncludeFileInfos( ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::initIncludeFileInfos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptIncludeFileInfos(
    ::capnp::Orphan< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>> PPCache::Builder::disownIncludeFileInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::IncludeFileInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool PPCache::Reader::hasObjects() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool PPCache::Builder::hasObjects() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Reader PPCache::Reader::getObjects() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::getObjects() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void PPCache::Builder::setObjects( ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>::Builder PPCache::Builder::initObjects(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void PPCache::Builder::adoptObjects(
    ::capnp::Orphan< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>> PPCache::Builder::disownObjects() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

