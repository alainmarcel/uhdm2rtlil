/* Generated by Yosys 0.55+46 (git sha1 aa1daa702, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

(* hdlname = "adder" *)
(* dynports =  1  *)
(* src = "dut.sv:4.1-12.10" *)
module \$paramod\adder\WIDTH=32'00000000000000000000000000001000 (a, b, sum);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  (* src = "dut.sv:7.30-7.31" *)
  input [7:0] a;
  wire [7:0] a;
  (* src = "dut.sv:8.30-8.31" *)
  input [7:0] b;
  wire [7:0] b;
  (* src = "dut.sv:9.30-9.33" *)
  output [7:0] sum;
  wire [7:0] sum;
  \$_XOR_  _32_ (
    .A(a[0]),
    .B(b[0]),
    .Y(sum[0])
  );
  \$_XOR_  _33_ (
    .A(a[1]),
    .B(b[1]),
    .Y(_00_)
  );
  \$_NAND_  _34_ (
    .A(a[0]),
    .B(b[0]),
    .Y(_01_)
  );
  \$_XNOR_  _35_ (
    .A(_01_),
    .B(_00_),
    .Y(sum[1])
  );
  \$_XNOR_  _36_ (
    .A(a[2]),
    .B(b[2]),
    .Y(_02_)
  );
  \$_AND_  _37_ (
    .A(a[1]),
    .B(b[1]),
    .Y(_03_)
  );
  \$_ANDNOT_  _38_ (
    .A(_00_),
    .B(_01_),
    .Y(_04_)
  );
  \$_OR_  _39_ (
    .A(_04_),
    .B(_03_),
    .Y(_05_)
  );
  \$_XNOR_  _40_ (
    .A(_05_),
    .B(_02_),
    .Y(sum[2])
  );
  \$_XNOR_  _41_ (
    .A(a[3]),
    .B(b[3]),
    .Y(_06_)
  );
  \$_NAND_  _42_ (
    .A(a[2]),
    .B(b[2]),
    .Y(_07_)
  );
  \$_ANDNOT_  _43_ (
    .A(_05_),
    .B(_02_),
    .Y(_08_)
  );
  \$_ANDNOT_  _44_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  \$_XOR_  _45_ (
    .A(_09_),
    .B(_06_),
    .Y(sum[3])
  );
  \$_XNOR_  _46_ (
    .A(a[4]),
    .B(b[4]),
    .Y(_10_)
  );
  \$_NAND_  _47_ (
    .A(a[3]),
    .B(b[3]),
    .Y(_11_)
  );
  \$_NOR_  _48_ (
    .A(_07_),
    .B(_06_),
    .Y(_12_)
  );
  \$_ANDNOT_  _49_ (
    .A(_11_),
    .B(_12_),
    .Y(_13_)
  );
  \$_OR_  _50_ (
    .A(_06_),
    .B(_02_),
    .Y(_14_)
  );
  \$_ANDNOT_  _51_ (
    .A(_05_),
    .B(_14_),
    .Y(_15_)
  );
  \$_ANDNOT_  _52_ (
    .A(_13_),
    .B(_15_),
    .Y(_16_)
  );
  \$_XOR_  _53_ (
    .A(_16_),
    .B(_10_),
    .Y(sum[4])
  );
  \$_XNOR_  _54_ (
    .A(a[5]),
    .B(b[5]),
    .Y(_17_)
  );
  \$_NAND_  _55_ (
    .A(a[4]),
    .B(b[4]),
    .Y(_18_)
  );
  \$_NOR_  _56_ (
    .A(_16_),
    .B(_10_),
    .Y(_19_)
  );
  \$_ANDNOT_  _57_ (
    .A(_18_),
    .B(_19_),
    .Y(_20_)
  );
  \$_XOR_  _58_ (
    .A(_20_),
    .B(_17_),
    .Y(sum[5])
  );
  \$_XNOR_  _59_ (
    .A(a[6]),
    .B(b[6]),
    .Y(_21_)
  );
  \$_NAND_  _60_ (
    .A(a[5]),
    .B(b[5]),
    .Y(_22_)
  );
  \$_NOR_  _61_ (
    .A(_18_),
    .B(_17_),
    .Y(_23_)
  );
  \$_ANDNOT_  _62_ (
    .A(_22_),
    .B(_23_),
    .Y(_24_)
  );
  \$_OR_  _63_ (
    .A(_17_),
    .B(_10_),
    .Y(_25_)
  );
  \$_NOR_  _64_ (
    .A(_25_),
    .B(_16_),
    .Y(_26_)
  );
  \$_ANDNOT_  _65_ (
    .A(_24_),
    .B(_26_),
    .Y(_27_)
  );
  \$_XOR_  _66_ (
    .A(_27_),
    .B(_21_),
    .Y(sum[6])
  );
  \$_XNOR_  _67_ (
    .A(a[7]),
    .B(b[7]),
    .Y(_28_)
  );
  \$_NAND_  _68_ (
    .A(a[6]),
    .B(b[6]),
    .Y(_29_)
  );
  \$_NOR_  _69_ (
    .A(_27_),
    .B(_21_),
    .Y(_30_)
  );
  \$_ANDNOT_  _70_ (
    .A(_29_),
    .B(_30_),
    .Y(_31_)
  );
  \$_XOR_  _71_ (
    .A(_31_),
    .B(_28_),
    .Y(sum[7])
  );
endmodule

(* hdlname = "subtractor" *)
(* dynports =  1  *)
(* src = "dut.sv:15.1-23.10" *)
module \$paramod\subtractor\WIDTH=32'00000000000000000000000000001000 (a, b, diff);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  (* src = "dut.sv:18.30-18.31" *)
  input [7:0] a;
  wire [7:0] a;
  (* src = "dut.sv:19.30-19.31" *)
  input [7:0] b;
  wire [7:0] b;
  (* src = "dut.sv:20.30-20.34" *)
  output [7:0] diff;
  wire [7:0] diff;
  \$_XOR_  _32_ (
    .A(a[0]),
    .B(b[0]),
    .Y(diff[0])
  );
  \$_XNOR_  _33_ (
    .A(a[1]),
    .B(b[1]),
    .Y(_00_)
  );
  \$_ANDNOT_  _34_ (
    .A(b[0]),
    .B(a[0]),
    .Y(_01_)
  );
  \$_XNOR_  _35_ (
    .A(_01_),
    .B(_00_),
    .Y(diff[1])
  );
  \$_XOR_  _36_ (
    .A(a[2]),
    .B(b[2]),
    .Y(_02_)
  );
  \$_ANDNOT_  _37_ (
    .A(a[1]),
    .B(b[1]),
    .Y(_03_)
  );
  \$_ANDNOT_  _38_ (
    .A(_00_),
    .B(_01_),
    .Y(_04_)
  );
  \$_OR_  _39_ (
    .A(_04_),
    .B(_03_),
    .Y(_05_)
  );
  \$_XNOR_  _40_ (
    .A(_05_),
    .B(_02_),
    .Y(diff[2])
  );
  \$_XOR_  _41_ (
    .A(a[3]),
    .B(b[3]),
    .Y(_06_)
  );
  \$_ORNOT_  _42_ (
    .A(b[2]),
    .B(a[2]),
    .Y(_07_)
  );
  \$_ANDNOT_  _43_ (
    .A(_05_),
    .B(_02_),
    .Y(_08_)
  );
  \$_ANDNOT_  _44_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  \$_XOR_  _45_ (
    .A(_09_),
    .B(_06_),
    .Y(diff[3])
  );
  \$_XOR_  _46_ (
    .A(a[4]),
    .B(b[4]),
    .Y(_10_)
  );
  \$_ORNOT_  _47_ (
    .A(b[3]),
    .B(a[3]),
    .Y(_11_)
  );
  \$_NOR_  _48_ (
    .A(_07_),
    .B(_06_),
    .Y(_12_)
  );
  \$_ANDNOT_  _49_ (
    .A(_11_),
    .B(_12_),
    .Y(_13_)
  );
  \$_OR_  _50_ (
    .A(_06_),
    .B(_02_),
    .Y(_14_)
  );
  \$_ANDNOT_  _51_ (
    .A(_05_),
    .B(_14_),
    .Y(_15_)
  );
  \$_ANDNOT_  _52_ (
    .A(_13_),
    .B(_15_),
    .Y(_16_)
  );
  \$_XOR_  _53_ (
    .A(_16_),
    .B(_10_),
    .Y(diff[4])
  );
  \$_XOR_  _54_ (
    .A(a[5]),
    .B(b[5]),
    .Y(_17_)
  );
  \$_ORNOT_  _55_ (
    .A(b[4]),
    .B(a[4]),
    .Y(_18_)
  );
  \$_NOR_  _56_ (
    .A(_16_),
    .B(_10_),
    .Y(_19_)
  );
  \$_ANDNOT_  _57_ (
    .A(_18_),
    .B(_19_),
    .Y(_20_)
  );
  \$_XOR_  _58_ (
    .A(_20_),
    .B(_17_),
    .Y(diff[5])
  );
  \$_XOR_  _59_ (
    .A(a[6]),
    .B(b[6]),
    .Y(_21_)
  );
  \$_ORNOT_  _60_ (
    .A(b[5]),
    .B(a[5]),
    .Y(_22_)
  );
  \$_NOR_  _61_ (
    .A(_18_),
    .B(_17_),
    .Y(_23_)
  );
  \$_ANDNOT_  _62_ (
    .A(_22_),
    .B(_23_),
    .Y(_24_)
  );
  \$_OR_  _63_ (
    .A(_17_),
    .B(_10_),
    .Y(_25_)
  );
  \$_NOR_  _64_ (
    .A(_25_),
    .B(_16_),
    .Y(_26_)
  );
  \$_ANDNOT_  _65_ (
    .A(_24_),
    .B(_26_),
    .Y(_27_)
  );
  \$_XOR_  _66_ (
    .A(_27_),
    .B(_21_),
    .Y(diff[6])
  );
  \$_XOR_  _67_ (
    .A(a[7]),
    .B(b[7]),
    .Y(_28_)
  );
  \$_ORNOT_  _68_ (
    .A(b[6]),
    .B(a[6]),
    .Y(_29_)
  );
  \$_NOR_  _69_ (
    .A(_27_),
    .B(_21_),
    .Y(_30_)
  );
  \$_ANDNOT_  _70_ (
    .A(_29_),
    .B(_30_),
    .Y(_31_)
  );
  \$_XOR_  _71_ (
    .A(_31_),
    .B(_28_),
    .Y(diff[7])
  );
endmodule

(* top =  1  *)
(* dynports =  1  *)
(* src = "dut.sv:26.1-110.10" *)
module generate_test(clk, rst_n, data_in, operand, mode, result, extra_result);
  (* src = "dut.sv:30.18-30.21" *)
  input clk;
  wire clk;
  (* src = "dut.sv:32.45-32.52" *)
  input [31:0] data_in;
  wire [31:0] data_in;
  wire [7:0] \extra_logic.extra_sum ;
  (* src = "dut.sv:36.35-36.47" *)
  output [7:0] extra_result;
  wire [7:0] extra_result;
  wire [7:0] \gen_units[0].unit_result ;
  wire [7:0] \gen_units[1].unit_result ;
  wire [7:0] \gen_units[2].unit_result ;
  wire [7:0] \gen_units[3].unit_result ;
  (* src = "dut.sv:34.18-34.22" *)
  input mode;
  wire mode;
  (* src = "dut.sv:33.45-33.52" *)
  input [31:0] operand;
  wire [31:0] operand;
  (* src = "dut.sv:35.45-35.51" *)
  output [31:0] result;
  wire [31:0] result;
  (* src = "dut.sv:31.18-31.23" *)
  input rst_n;
  wire rst_n;
  \$_AND_  _00_ (
    .A(rst_n),
    .B(\gen_units[0].unit_result [0]),
    .Y(result[0])
  );
  \$_AND_  _01_ (
    .A(\gen_units[0].unit_result [1]),
    .B(rst_n),
    .Y(result[1])
  );
  \$_AND_  _02_ (
    .A(\gen_units[0].unit_result [2]),
    .B(rst_n),
    .Y(result[2])
  );
  \$_AND_  _03_ (
    .A(\gen_units[0].unit_result [3]),
    .B(rst_n),
    .Y(result[3])
  );
  \$_AND_  _04_ (
    .A(\gen_units[0].unit_result [4]),
    .B(rst_n),
    .Y(result[4])
  );
  \$_AND_  _05_ (
    .A(\gen_units[0].unit_result [5]),
    .B(rst_n),
    .Y(result[5])
  );
  \$_AND_  _06_ (
    .A(\gen_units[0].unit_result [6]),
    .B(rst_n),
    .Y(result[6])
  );
  \$_AND_  _07_ (
    .A(\gen_units[0].unit_result [7]),
    .B(rst_n),
    .Y(result[7])
  );
  \$_AND_  _08_ (
    .A(\gen_units[1].unit_result [0]),
    .B(rst_n),
    .Y(result[8])
  );
  \$_AND_  _09_ (
    .A(\gen_units[1].unit_result [1]),
    .B(rst_n),
    .Y(result[9])
  );
  \$_AND_  _10_ (
    .A(\gen_units[1].unit_result [2]),
    .B(rst_n),
    .Y(result[10])
  );
  \$_AND_  _11_ (
    .A(\gen_units[1].unit_result [3]),
    .B(rst_n),
    .Y(result[11])
  );
  \$_AND_  _12_ (
    .A(\gen_units[1].unit_result [4]),
    .B(rst_n),
    .Y(result[12])
  );
  \$_AND_  _13_ (
    .A(\gen_units[1].unit_result [5]),
    .B(rst_n),
    .Y(result[13])
  );
  \$_AND_  _14_ (
    .A(\gen_units[1].unit_result [6]),
    .B(rst_n),
    .Y(result[14])
  );
  \$_AND_  _15_ (
    .A(\gen_units[1].unit_result [7]),
    .B(rst_n),
    .Y(result[15])
  );
  \$_AND_  _16_ (
    .A(\gen_units[2].unit_result [0]),
    .B(rst_n),
    .Y(result[16])
  );
  \$_AND_  _17_ (
    .A(\gen_units[2].unit_result [1]),
    .B(rst_n),
    .Y(result[17])
  );
  \$_AND_  _18_ (
    .A(\gen_units[2].unit_result [2]),
    .B(rst_n),
    .Y(result[18])
  );
  \$_AND_  _19_ (
    .A(\gen_units[2].unit_result [3]),
    .B(rst_n),
    .Y(result[19])
  );
  \$_AND_  _20_ (
    .A(\gen_units[2].unit_result [4]),
    .B(rst_n),
    .Y(result[20])
  );
  \$_AND_  _21_ (
    .A(\gen_units[2].unit_result [5]),
    .B(rst_n),
    .Y(result[21])
  );
  \$_AND_  _22_ (
    .A(\gen_units[2].unit_result [6]),
    .B(rst_n),
    .Y(result[22])
  );
  \$_AND_  _23_ (
    .A(\gen_units[2].unit_result [7]),
    .B(rst_n),
    .Y(result[23])
  );
  \$_AND_  _24_ (
    .A(\gen_units[3].unit_result [0]),
    .B(rst_n),
    .Y(result[24])
  );
  \$_AND_  _25_ (
    .A(\gen_units[3].unit_result [1]),
    .B(rst_n),
    .Y(result[25])
  );
  \$_AND_  _26_ (
    .A(\gen_units[3].unit_result [2]),
    .B(rst_n),
    .Y(result[26])
  );
  \$_AND_  _27_ (
    .A(\gen_units[3].unit_result [3]),
    .B(rst_n),
    .Y(result[27])
  );
  \$_AND_  _28_ (
    .A(\gen_units[3].unit_result [4]),
    .B(rst_n),
    .Y(result[28])
  );
  \$_AND_  _29_ (
    .A(\gen_units[3].unit_result [5]),
    .B(rst_n),
    .Y(result[29])
  );
  \$_AND_  _30_ (
    .A(\gen_units[3].unit_result [6]),
    .B(rst_n),
    .Y(result[30])
  );
  \$_AND_  _31_ (
    .A(\gen_units[3].unit_result [7]),
    .B(rst_n),
    .Y(result[31])
  );
  (* \"has_async_reset"  = 32'd1 *)
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[0]  /* _32_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [0]),
    .E(mode),
    .Q(extra_result[0]),
    .R(rst_n)
  );
  (* \"has_async_reset"  = 32'd1 *)
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[1]  /* _33_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [1]),
    .E(mode),
    .Q(extra_result[1]),
    .R(rst_n)
  );
  (* \"has_async_reset"  = 32'd1 *)
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[2]  /* _34_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [2]),
    .E(mode),
    .Q(extra_result[2]),
    .R(rst_n)
  );
  (* \"has_async_reset"  = 32'd1 *)
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[3]  /* _35_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [3]),
    .E(mode),
    .Q(extra_result[3]),
    .R(rst_n)
  );
  (* \"has_async_reset"  = 32'd1 *)
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[4]  /* _36_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [4]),
    .E(mode),
    .Q(extra_result[4]),
    .R(rst_n)
  );
  (* \"has_async_reset"  = 32'd1 *)
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[5]  /* _37_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [5]),
    .E(mode),
    .Q(extra_result[5]),
    .R(rst_n)
  );
  (* \"has_async_reset"  = 32'd1 *)
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[6]  /* _38_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [6]),
    .E(mode),
    .Q(extra_result[6]),
    .R(rst_n)
  );
  (* \"has_async_reset"  = 32'd1 *)
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[7]  /* _39_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [7]),
    .E(mode),
    .Q(extra_result[7]),
    .R(rst_n)
  );
  (* src = "dut.sv:84.13-90.15" *)
  \$paramod\adder\WIDTH=32'00000000000000000000000000001000  \extra_logic.extra_adder  (
    .a(result[7:0]),
    .b(result[15:8]),
    .sum(\extra_logic.extra_sum )
  );
  (* src = "dut.sv:49.17-55.19" *)
  \$paramod\adder\WIDTH=32'00000000000000000000000000001000  \gen_units[0].even_unit.adder_inst  (
    .a(data_in[7:0]),
    .b(operand[7:0]),
    .sum(\gen_units[0].unit_result )
  );
  (* src = "dut.sv:58.17-64.19" *)
  \$paramod\subtractor\WIDTH=32'00000000000000000000000000001000  \gen_units[1].odd_unit.subtractor_inst  (
    .a(data_in[15:8]),
    .b(operand[15:8]),
    .diff(\gen_units[1].unit_result )
  );
  (* src = "dut.sv:49.17-55.19" *)
  \$paramod\adder\WIDTH=32'00000000000000000000000000001000  \gen_units[2].even_unit.adder_inst  (
    .a(data_in[23:16]),
    .b(operand[23:16]),
    .sum(\gen_units[2].unit_result )
  );
  (* src = "dut.sv:58.17-64.19" *)
  \$paramod\subtractor\WIDTH=32'00000000000000000000000000001000  \gen_units[3].odd_unit.subtractor_inst  (
    .a(data_in[31:24]),
    .b(operand[31:24]),
    .diff(\gen_units[3].unit_result )
  );
endmodule
