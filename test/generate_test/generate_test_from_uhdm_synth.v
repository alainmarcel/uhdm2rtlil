/* Generated by Yosys 0.55+46 (git sha1 aa1daa702, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

(* dynports =  1  *)
(* src = "dut.sv:4.1-12.10" *)
module \$paramod\adder\WIDTH=32'00000000000000000000000000001000 (a, b, sum);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  (* src = "dut.sv:7.30-7.31" *)
  input [7:0] a;
  wire [7:0] a;
  (* src = "dut.sv:8.30-8.31" *)
  input [7:0] b;
  wire [7:0] b;
  (* src = "dut.sv:9.30-9.33" *)
  output [7:0] sum;
  wire [7:0] sum;
  \$_XOR_  _32_ (
    .A(a[1]),
    .B(b[1]),
    .Y(_00_)
  );
  \$_NAND_  _33_ (
    .A(a[0]),
    .B(b[0]),
    .Y(_01_)
  );
  \$_XNOR_  _34_ (
    .A(_01_),
    .B(_00_),
    .Y(sum[1])
  );
  \$_XNOR_  _35_ (
    .A(a[2]),
    .B(b[2]),
    .Y(_02_)
  );
  \$_AND_  _36_ (
    .A(a[1]),
    .B(b[1]),
    .Y(_03_)
  );
  \$_ANDNOT_  _37_ (
    .A(_00_),
    .B(_01_),
    .Y(_04_)
  );
  \$_OR_  _38_ (
    .A(_04_),
    .B(_03_),
    .Y(_05_)
  );
  \$_XNOR_  _39_ (
    .A(_05_),
    .B(_02_),
    .Y(sum[2])
  );
  \$_XNOR_  _40_ (
    .A(a[3]),
    .B(b[3]),
    .Y(_06_)
  );
  \$_NAND_  _41_ (
    .A(a[2]),
    .B(b[2]),
    .Y(_07_)
  );
  \$_ANDNOT_  _42_ (
    .A(_05_),
    .B(_02_),
    .Y(_08_)
  );
  \$_ANDNOT_  _43_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  \$_XOR_  _44_ (
    .A(_09_),
    .B(_06_),
    .Y(sum[3])
  );
  \$_XNOR_  _45_ (
    .A(a[4]),
    .B(b[4]),
    .Y(_10_)
  );
  \$_NAND_  _46_ (
    .A(a[3]),
    .B(b[3]),
    .Y(_11_)
  );
  \$_NOR_  _47_ (
    .A(_07_),
    .B(_06_),
    .Y(_12_)
  );
  \$_ANDNOT_  _48_ (
    .A(_11_),
    .B(_12_),
    .Y(_13_)
  );
  \$_OR_  _49_ (
    .A(_06_),
    .B(_02_),
    .Y(_14_)
  );
  \$_ANDNOT_  _50_ (
    .A(_05_),
    .B(_14_),
    .Y(_15_)
  );
  \$_ANDNOT_  _51_ (
    .A(_13_),
    .B(_15_),
    .Y(_16_)
  );
  \$_XOR_  _52_ (
    .A(_16_),
    .B(_10_),
    .Y(sum[4])
  );
  \$_XNOR_  _53_ (
    .A(a[5]),
    .B(b[5]),
    .Y(_17_)
  );
  \$_NAND_  _54_ (
    .A(a[4]),
    .B(b[4]),
    .Y(_18_)
  );
  \$_NOR_  _55_ (
    .A(_16_),
    .B(_10_),
    .Y(_19_)
  );
  \$_ANDNOT_  _56_ (
    .A(_18_),
    .B(_19_),
    .Y(_20_)
  );
  \$_XOR_  _57_ (
    .A(_20_),
    .B(_17_),
    .Y(sum[5])
  );
  \$_XNOR_  _58_ (
    .A(a[6]),
    .B(b[6]),
    .Y(_21_)
  );
  \$_NAND_  _59_ (
    .A(a[5]),
    .B(b[5]),
    .Y(_22_)
  );
  \$_NOR_  _60_ (
    .A(_18_),
    .B(_17_),
    .Y(_23_)
  );
  \$_ANDNOT_  _61_ (
    .A(_22_),
    .B(_23_),
    .Y(_24_)
  );
  \$_OR_  _62_ (
    .A(_17_),
    .B(_10_),
    .Y(_25_)
  );
  \$_NOR_  _63_ (
    .A(_25_),
    .B(_16_),
    .Y(_26_)
  );
  \$_ANDNOT_  _64_ (
    .A(_24_),
    .B(_26_),
    .Y(_27_)
  );
  \$_XOR_  _65_ (
    .A(_27_),
    .B(_21_),
    .Y(sum[6])
  );
  \$_XNOR_  _66_ (
    .A(a[7]),
    .B(b[7]),
    .Y(_28_)
  );
  \$_NAND_  _67_ (
    .A(a[6]),
    .B(b[6]),
    .Y(_29_)
  );
  \$_NOR_  _68_ (
    .A(_27_),
    .B(_21_),
    .Y(_30_)
  );
  \$_ANDNOT_  _69_ (
    .A(_29_),
    .B(_30_),
    .Y(_31_)
  );
  \$_XOR_  _70_ (
    .A(_31_),
    .B(_28_),
    .Y(sum[7])
  );
  \$_XOR_  _71_ (
    .A(a[0]),
    .B(b[0]),
    .Y(sum[0])
  );
endmodule

(* top =  1  *)
(* src = "dut.sv:26.1-110.10" *)
module generate_test(clk, rst_n, data_in, operand, mode, result, extra_result);
  (* src = "dut.sv:30.18-30.21" *)
  input clk;
  wire clk;
  (* src = "dut.sv:32.45-32.52" *)
  input [31:0] data_in;
  wire [31:0] data_in;
  wire [7:0] \extra_logic.extra_sum ;
  (* src = "dut.sv:36.35-36.47" *)
  output [7:0] extra_result;
  wire [7:0] extra_result;
  (* src = "dut.sv:34.18-34.22" *)
  input mode;
  wire mode;
  (* src = "dut.sv:33.45-33.52" *)
  input [31:0] operand;
  wire [31:0] operand;
  (* src = "dut.sv:35.45-35.51" *)
  output [31:0] result;
  wire [31:0] result;
  (* src = "dut.sv:31.18-31.23" *)
  input rst_n;
  wire rst_n;
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[0]  /* _0_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [0]),
    .E(mode),
    .Q(extra_result[0]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[1]  /* _1_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [1]),
    .E(mode),
    .Q(extra_result[1]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[2]  /* _2_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [2]),
    .E(mode),
    .Q(extra_result[2]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[3]  /* _3_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [3]),
    .E(mode),
    .Q(extra_result[3]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[4]  /* _4_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [4]),
    .E(mode),
    .Q(extra_result[4]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[5]  /* _5_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [5]),
    .E(mode),
    .Q(extra_result[5]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[6]  /* _6_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [6]),
    .E(mode),
    .Q(extra_result[6]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:94.17-100.20" *)
  \$_DFFE_PN0P_  \extra_result_reg[7]  /* _7_ */ (
    .C(clk),
    .D(\extra_logic.extra_sum [7]),
    .E(mode),
    .Q(extra_result[7]),
    .R(rst_n)
  );
  (* src = "dut.sv:84.13-90.15" *)
  \$paramod\adder\WIDTH=32'00000000000000000000000000001000  \extra_logic.extra_adder  (
    .a(8'h00),
    .b(8'h00),
    .sum(\extra_logic.extra_sum )
  );
  assign result = 32'd0;
endmodule
