/* Generated by Yosys 0.55+46 (git sha1 aa1daa702, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

(* top =  1  *)
(* src = "dut.sv:2.1-16.10" *)
module simple_counter(clk, rst_n, count);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* force_downto = 32'd1 *)
  (* src = "dut.sv:12.22-12.34|/home/alain/uhdm2rtlil/out/current/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [7:0] _08_;
  (* force_downto = 32'd1 *)
  (* src = "dut.sv:12.22-12.34|/home/alain/uhdm2rtlil/out/current/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [7:0] _09_;
  (* src = "dut.sv:3.18-3.21" *)
  input clk;
  wire clk;
  (* src = "dut.sv:5.24-5.29" *)
  output [7:0] count;
  wire [7:0] count;
  (* src = "dut.sv:4.18-4.23" *)
  input rst_n;
  wire rst_n;
  \$_NOT_  _10_ (
    .A(count[0]),
    .Y(_08_[0])
  );
  \$_XOR_  _11_ (
    .A(count[1]),
    .B(count[0]),
    .Y(_09_[1])
  );
  \$_NAND_  _12_ (
    .A(count[1]),
    .B(count[0]),
    .Y(_00_)
  );
  \$_XNOR_  _13_ (
    .A(_00_),
    .B(count[2]),
    .Y(_09_[2])
  );
  \$_ANDNOT_  _14_ (
    .A(count[2]),
    .B(_00_),
    .Y(_01_)
  );
  \$_XOR_  _15_ (
    .A(_01_),
    .B(count[3]),
    .Y(_09_[3])
  );
  \$_NAND_  _16_ (
    .A(count[3]),
    .B(count[2]),
    .Y(_02_)
  );
  \$_OR_  _17_ (
    .A(_02_),
    .B(_00_),
    .Y(_03_)
  );
  \$_XNOR_  _18_ (
    .A(_03_),
    .B(count[4]),
    .Y(_09_[4])
  );
  \$_ANDNOT_  _19_ (
    .A(count[4]),
    .B(_03_),
    .Y(_04_)
  );
  \$_XOR_  _20_ (
    .A(_04_),
    .B(count[5]),
    .Y(_09_[5])
  );
  \$_NAND_  _21_ (
    .A(count[5]),
    .B(count[4]),
    .Y(_05_)
  );
  \$_OR_  _22_ (
    .A(_05_),
    .B(_03_),
    .Y(_06_)
  );
  \$_XNOR_  _23_ (
    .A(_06_),
    .B(count[6]),
    .Y(_09_[6])
  );
  \$_ANDNOT_  _24_ (
    .A(count[6]),
    .B(_06_),
    .Y(_07_)
  );
  \$_XOR_  _25_ (
    .A(_07_),
    .B(count[7]),
    .Y(_09_[7])
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:8.5-14.8" *)
  \$_DFF_PN0_  \count_reg[6]  /* _26_ */ (
    .C(clk),
    .D(_09_[6]),
    .Q(count[6]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:8.5-14.8" *)
  \$_DFF_PN0_  \count_reg[7]  /* _27_ */ (
    .C(clk),
    .D(_09_[7]),
    .Q(count[7]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:8.5-14.8" *)
  \$_DFF_PN0_  \count_reg[0]  /* _28_ */ (
    .C(clk),
    .D(_08_[0]),
    .Q(count[0]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:8.5-14.8" *)
  \$_DFF_PN0_  \count_reg[1]  /* _29_ */ (
    .C(clk),
    .D(_09_[1]),
    .Q(count[1]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:8.5-14.8" *)
  \$_DFF_PN0_  \count_reg[2]  /* _30_ */ (
    .C(clk),
    .D(_09_[2]),
    .Q(count[2]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:8.5-14.8" *)
  \$_DFF_PN0_  \count_reg[3]  /* _31_ */ (
    .C(clk),
    .D(_09_[3]),
    .Q(count[3]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:8.5-14.8" *)
  \$_DFF_PN0_  \count_reg[4]  /* _32_ */ (
    .C(clk),
    .D(_09_[4]),
    .Q(count[4]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:8.5-14.8" *)
  \$_DFF_PN0_  \count_reg[5]  /* _33_ */ (
    .C(clk),
    .D(_09_[5]),
    .Q(count[5]),
    .R(rst_n)
  );
  assign _08_[7:1] = count[7:1];
  assign _09_[0] = _08_[0];
endmodule
