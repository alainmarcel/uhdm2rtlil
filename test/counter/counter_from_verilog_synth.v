/* Generated by Yosys 0.56+171 (git sha1 6fdcdd41d, g++ 11.4.0-1ubuntu1~22.04.2 -Og -fPIC) */

(* dynports =  1  *)
(* top =  1  *)
(* src = "dut.sv:2.1-27.10" *)
module counter(clk, rst_n, enable, count, overflow);
  (* src = "dut.sv:5.18-5.21" *)
  input clk;
  wire clk;
  (* src = "dut.sv:6.18-6.23" *)
  input rst_n;
  wire rst_n;
  (* src = "dut.sv:7.18-7.24" *)
  input enable;
  wire enable;
  (* src = "dut.sv:8.30-8.35" *)
  output [7:0] count;
  wire [7:0] count;
  (* src = "dut.sv:9.18-9.26" *)
  output overflow;
  wire overflow;
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "dut.sv:12.23-12.33" *)
  wire [7:0] count_next;
  \$_NOT_  _11_ (
    .A(count[0]),
    .Y(count_next[0])
  );
  \$_NAND_  _12_ (
    .A(count[1]),
    .B(count[0]),
    .Y(_00_)
  );
  \$_NAND_  _13_ (
    .A(count[3]),
    .B(count[2]),
    .Y(_01_)
  );
  \$_OR_  _14_ (
    .A(_01_),
    .B(_00_),
    .Y(_02_)
  );
  \$_NAND_  _15_ (
    .A(count[5]),
    .B(count[4]),
    .Y(_03_)
  );
  \$_NAND_  _16_ (
    .A(count[6]),
    .B(count[7]),
    .Y(_04_)
  );
  \$_OR_  _17_ (
    .A(_04_),
    .B(_03_),
    .Y(_05_)
  );
  \$_OR_  _18_ (
    .A(_05_),
    .B(_02_),
    .Y(_06_)
  );
  \$_ANDNOT_  _19_ (
    .A(enable),
    .B(_06_),
    .Y(overflow)
  );
  \$_XOR_  _20_ (
    .A(count[1]),
    .B(count[0]),
    .Y(count_next[1])
  );
  \$_XNOR_  _21_ (
    .A(_00_),
    .B(count[2]),
    .Y(count_next[2])
  );
  \$_ANDNOT_  _22_ (
    .A(count[2]),
    .B(_00_),
    .Y(_07_)
  );
  \$_XOR_  _23_ (
    .A(_07_),
    .B(count[3]),
    .Y(count_next[3])
  );
  \$_XNOR_  _24_ (
    .A(_02_),
    .B(count[4]),
    .Y(count_next[4])
  );
  \$_ANDNOT_  _25_ (
    .A(count[4]),
    .B(_02_),
    .Y(_08_)
  );
  \$_XOR_  _26_ (
    .A(_08_),
    .B(count[5]),
    .Y(count_next[5])
  );
  \$_OR_  _27_ (
    .A(_03_),
    .B(_02_),
    .Y(_09_)
  );
  \$_XNOR_  _28_ (
    .A(_09_),
    .B(count[6]),
    .Y(count_next[6])
  );
  \$_ANDNOT_  _29_ (
    .A(count[6]),
    .B(_09_),
    .Y(_10_)
  );
  \$_XOR_  _30_ (
    .A(_10_),
    .B(count[7]),
    .Y(count_next[7])
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:14.5-20.8" *)
  \$_DFFE_PN0P_  \count_reg[0]  /* _31_ */ (
    .C(clk),
    .D(count_next[0]),
    .E(enable),
    .Q(count[0]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:14.5-20.8" *)
  \$_DFFE_PN0P_  \count_reg[1]  /* _32_ */ (
    .C(clk),
    .D(count_next[1]),
    .E(enable),
    .Q(count[1]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:14.5-20.8" *)
  \$_DFFE_PN0P_  \count_reg[2]  /* _33_ */ (
    .C(clk),
    .D(count_next[2]),
    .E(enable),
    .Q(count[2]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:14.5-20.8" *)
  \$_DFFE_PN0P_  \count_reg[3]  /* _34_ */ (
    .C(clk),
    .D(count_next[3]),
    .E(enable),
    .Q(count[3]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:14.5-20.8" *)
  \$_DFFE_PN0P_  \count_reg[4]  /* _35_ */ (
    .C(clk),
    .D(count_next[4]),
    .E(enable),
    .Q(count[4]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:14.5-20.8" *)
  \$_DFFE_PN0P_  \count_reg[5]  /* _36_ */ (
    .C(clk),
    .D(count_next[5]),
    .E(enable),
    .Q(count[5]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:14.5-20.8" *)
  \$_DFFE_PN0P_  \count_reg[6]  /* _37_ */ (
    .C(clk),
    .D(count_next[6]),
    .E(enable),
    .Q(count[6]),
    .R(rst_n)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:14.5-20.8" *)
  \$_DFFE_PN0P_  \count_reg[7]  /* _38_ */ (
    .C(clk),
    .D(count_next[7]),
    .E(enable),
    .Q(count[7]),
    .R(rst_n)
  );
endmodule
