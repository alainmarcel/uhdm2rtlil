/* Generated by Yosys 0.56+171 (git sha1 6fdcdd41d, g++ 11.4.0-1ubuntu1~22.04.2 -Og -fPIC) */

(* top =  1  *)
(* src = "dut.sv:7.1-53.10" *)
module code_hdl_models_parallel_crc(clk, reset, enable, init, data_in, crc_out);
  (* src = "dut.sv:16.7-16.10" *)
  input clk;
  wire clk;
  (* src = "dut.sv:17.7-17.12" *)
  input reset;
  wire reset;
  (* src = "dut.sv:18.7-18.13" *)
  input enable;
  wire enable;
  (* src = "dut.sv:19.7-19.11" *)
  input init;
  wire init;
  (* src = "dut.sv:20.13-20.20" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "dut.sv:22.15-22.22" *)
  output [15:0] crc_out;
  wire [15:0] crc_out;
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  (* src = "dut.sv:24.14-24.21" *)
  wire [15:0] crc_reg;
  (* src = "dut.sv:25.14-25.22" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11" *)
  wire [15:0] next_crc;
  \$_NOT_  _40_ (
    .A(crc_reg[11]),
    .Y(_00_)
  );
  \$_XNOR_  _41_ (
    .A(data_in[0]),
    .B(data_in[7]),
    .Y(_01_)
  );
  \$_XOR_  _42_ (
    .A(_01_),
    .B(crc_reg[4]),
    .Y(_02_)
  );
  \$_XOR_  _43_ (
    .A(_02_),
    .B(_00_),
    .Y(_03_)
  );
  \$_OR_  _44_ (
    .A(_03_),
    .B(init),
    .Y(_28_)
  );
  \$_XOR_  _45_ (
    .A(crc_reg[5]),
    .B(data_in[1]),
    .Y(_04_)
  );
  \$_OR_  _46_ (
    .A(_04_),
    .B(init),
    .Y(_31_)
  );
  \$_XOR_  _47_ (
    .A(crc_reg[6]),
    .B(data_in[2]),
    .Y(_05_)
  );
  \$_OR_  _48_ (
    .A(_05_),
    .B(init),
    .Y(_32_)
  );
  \$_XOR_  _49_ (
    .A(crc_reg[7]),
    .B(data_in[3]),
    .Y(_06_)
  );
  \$_OR_  _50_ (
    .A(_06_),
    .B(init),
    .Y(_33_)
  );
  \$_XOR_  _51_ (
    .A(crc_reg[8]),
    .B(data_in[4]),
    .Y(_07_)
  );
  \$_OR_  _52_ (
    .A(_07_),
    .B(init),
    .Y(_34_)
  );
  \$_XNOR_  _53_ (
    .A(data_in[5]),
    .B(data_in[7]),
    .Y(_08_)
  );
  \$_XOR_  _54_ (
    .A(_08_),
    .B(data_in[0]),
    .Y(_09_)
  );
  \$_XOR_  _55_ (
    .A(_09_),
    .B(crc_reg[4]),
    .Y(_10_)
  );
  \$_XOR_  _56_ (
    .A(_10_),
    .B(crc_reg[9]),
    .Y(_11_)
  );
  \$_XOR_  _57_ (
    .A(_11_),
    .B(_00_),
    .Y(_12_)
  );
  \$_OR_  _58_ (
    .A(_12_),
    .B(init),
    .Y(_35_)
  );
  \$_NOT_  _59_ (
    .A(crc_reg[10]),
    .Y(_13_)
  );
  \$_XNOR_  _60_ (
    .A(data_in[6]),
    .B(data_in[1]),
    .Y(_14_)
  );
  \$_XOR_  _61_ (
    .A(_14_),
    .B(crc_reg[5]),
    .Y(_15_)
  );
  \$_XOR_  _62_ (
    .A(_15_),
    .B(_13_),
    .Y(_16_)
  );
  \$_OR_  _63_ (
    .A(_16_),
    .B(init),
    .Y(_36_)
  );
  \$_XNOR_  _64_ (
    .A(data_in[2]),
    .B(data_in[7]),
    .Y(_17_)
  );
  \$_XOR_  _65_ (
    .A(_17_),
    .B(crc_reg[6]),
    .Y(_18_)
  );
  \$_XOR_  _66_ (
    .A(_18_),
    .B(_00_),
    .Y(_19_)
  );
  \$_OR_  _67_ (
    .A(_19_),
    .B(init),
    .Y(_37_)
  );
  \$_XOR_  _68_ (
    .A(crc_reg[0]),
    .B(data_in[3]),
    .Y(_20_)
  );
  \$_XOR_  _69_ (
    .A(_20_),
    .B(crc_reg[7]),
    .Y(_21_)
  );
  \$_OR_  _70_ (
    .A(_21_),
    .B(init),
    .Y(_38_)
  );
  \$_XOR_  _71_ (
    .A(crc_reg[1]),
    .B(data_in[4]),
    .Y(_22_)
  );
  \$_XOR_  _72_ (
    .A(_22_),
    .B(crc_reg[8]),
    .Y(_23_)
  );
  \$_OR_  _73_ (
    .A(_23_),
    .B(init),
    .Y(_39_)
  );
  \$_XOR_  _74_ (
    .A(crc_reg[2]),
    .B(data_in[5]),
    .Y(_24_)
  );
  \$_XOR_  _75_ (
    .A(_24_),
    .B(crc_reg[9]),
    .Y(_25_)
  );
  \$_OR_  _76_ (
    .A(_25_),
    .B(init),
    .Y(_29_)
  );
  \$_XNOR_  _77_ (
    .A(crc_reg[3]),
    .B(data_in[6]),
    .Y(_26_)
  );
  \$_XOR_  _78_ (
    .A(_26_),
    .B(_13_),
    .Y(_27_)
  );
  \$_OR_  _79_ (
    .A(_27_),
    .B(init),
    .Y(_30_)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[0]  /* _80_ */ (
    .C(clk),
    .D(_28_),
    .E(enable),
    .Q(crc_reg[0]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[1]  /* _81_ */ (
    .C(clk),
    .D(_31_),
    .E(enable),
    .Q(crc_reg[1]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[2]  /* _82_ */ (
    .C(clk),
    .D(_32_),
    .E(enable),
    .Q(crc_reg[2]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[3]  /* _83_ */ (
    .C(clk),
    .D(_33_),
    .E(enable),
    .Q(crc_reg[3]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[4]  /* _84_ */ (
    .C(clk),
    .D(_34_),
    .E(enable),
    .Q(crc_reg[4]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[5]  /* _85_ */ (
    .C(clk),
    .D(_35_),
    .E(enable),
    .Q(crc_reg[5]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[6]  /* _86_ */ (
    .C(clk),
    .D(_36_),
    .E(enable),
    .Q(crc_reg[6]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[7]  /* _87_ */ (
    .C(clk),
    .D(_37_),
    .E(enable),
    .Q(crc_reg[7]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[8]  /* _88_ */ (
    .C(clk),
    .D(_38_),
    .E(enable),
    .Q(crc_reg[8]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[9]  /* _89_ */ (
    .C(clk),
    .D(_39_),
    .E(enable),
    .Q(crc_reg[9]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[10]  /* _90_ */ (
    .C(clk),
    .D(_29_),
    .E(enable),
    .Q(crc_reg[10]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[11]  /* _91_ */ (
    .C(clk),
    .D(_30_),
    .E(enable),
    .Q(crc_reg[11]),
    .R(reset)
  );
  (* src = "dut.sv:29.1-38.4" *)
  \$_SDFFE_PP1P_  \crc_reg_reg[14]  /* _92_ */ (
    .C(clk),
    .D(init),
    .E(enable),
    .Q(crc_reg[14]),
    .R(reset)
  );
  assign crc_out = { crc_reg[14], crc_reg[14], crc_reg[14], crc_reg[14], crc_reg[11:0] };
  assign { crc_reg[15], crc_reg[13:12] } = { crc_reg[14], crc_reg[14], crc_reg[14] };
  assign next_crc[15:12] = 4'hx;
endmodule
