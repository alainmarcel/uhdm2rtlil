--- verilog_synth
+++ uhdm_synth
@@ -1,7 +1,7 @@
 /* Generated by Yosys 0.56+171 (git sha1 6fdcdd41d, g++ 11.4.0-1ubuntu1~22.04.2 -Og -fPIC) */
 (* dynports =  1  *)
-(* top =  1  *)
 (* src = "dut.sv:1.1-23.10" *)
+(* top =  1  *)
 module simple_always_ifelse(clk, rst_n, unit_result, result);
 (* src = "dut.sv:4.33-4.36" *)
 input clk;
@@ -15,69 +15,45 @@
 (* src = "dut.sv:7.33-7.39" *)
 output [31:0] result;
 wire [31:0] result;
-(* \always_ff  = 32'd1 *)
-(* src = "dut.sv:13.13-19.16" *)
-\$_DFF_PN0_  \result_reg[8]  /* _0_ */ (
-.C(clk),
-.D(unit_result[0]),
-.Q(result[8]),
-.R(rst_n)
-);
-(* \always_ff  = 32'd1 *)
-(* src = "dut.sv:13.13-19.16" *)
-\$_DFF_PN0_  \result_reg[9]  /* _1_ */ (
-.C(clk),
-.D(unit_result[1]),
-.Q(result[9]),
-.R(rst_n)
-);
-(* \always_ff  = 32'd1 *)
-(* src = "dut.sv:13.13-19.16" *)
-\$_DFF_PN0_  \result_reg[10]  /* _2_ */ (
-.C(clk),
-.D(unit_result[2]),
-.Q(result[10]),
-.R(rst_n)
-);
-(* \always_ff  = 32'd1 *)
-(* src = "dut.sv:13.13-19.16" *)
-\$_DFF_PN0_  \result_reg[11]  /* _3_ */ (
-.C(clk),
-.D(unit_result[3]),
-.Q(result[11]),
-.R(rst_n)
-);
-(* \always_ff  = 32'd1 *)
-(* src = "dut.sv:13.13-19.16" *)
-\$_DFF_PN0_  \result_reg[12]  /* _4_ */ (
-.C(clk),
-.D(unit_result[4]),
-.Q(result[12]),
-.R(rst_n)
-);
-(* \always_ff  = 32'd1 *)
-(* src = "dut.sv:13.13-19.16" *)
-\$_DFF_PN0_  \result_reg[13]  /* _5_ */ (
-.C(clk),
-.D(unit_result[5]),
-.Q(result[13]),
-.R(rst_n)
-);
-(* \always_ff  = 32'd1 *)
-(* src = "dut.sv:13.13-19.16" *)
-\$_DFF_PN0_  \result_reg[14]  /* _6_ */ (
-.C(clk),
-.D(unit_result[6]),
-.Q(result[14]),
-.R(rst_n)
-);
-(* \always_ff  = 32'd1 *)
-(* src = "dut.sv:13.13-19.16" *)
-\$_DFF_PN0_  \result_reg[15]  /* _7_ */ (
-.C(clk),
-.D(unit_result[7]),
-.Q(result[15]),
-.R(rst_n)
+\$_AND_  _0_ (
+.A(unit_result[1]),
+.B(rst_n),
+.Y(result[25])
+);
+\$_AND_  _1_ (
+.A(unit_result[2]),
+.B(rst_n),
+.Y(result[26])
+);
+\$_AND_  _2_ (
+.A(unit_result[3]),
+.B(rst_n),
+.Y(result[27])
+);
+\$_AND_  _3_ (
+.A(unit_result[4]),
+.B(rst_n),
+.Y(result[28])
+);
+\$_AND_  _4_ (
+.A(unit_result[5]),
+.B(rst_n),
+.Y(result[29])
+);
+\$_AND_  _5_ (
+.A(unit_result[6]),
+.B(rst_n),
+.Y(result[30])
+);
+\$_AND_  _6_ (
+.A(unit_result[7]),
+.B(rst_n),
+.Y(result[31])
+);
+\$_AND_  _7_ (
+.A(rst_n),
+.B(unit_result[0]),
+.Y(result[24])
 );
-assign { result[31:16], result[7:0] } = { result[15:8], result[15:8], result[15:8] };
+assign result[23:0] = { result[31:24], result[31:24], result[31:24] };
 endmodule
