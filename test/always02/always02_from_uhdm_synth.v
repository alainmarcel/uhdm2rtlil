/* Generated by Yosys 0.56+171 (git sha1 6fdcdd41d, g++ 11.4.0-1ubuntu1~22.04.2 -Og -fPIC) */

(* top =  1  *)
(* src = "dut.sv:1.1-13.10" *)
module always02(clock, reset, count);
  (* src = "dut.sv:1.17-1.22" *)
  input clock;
  wire clock;
  (* src = "dut.sv:1.24-1.29" *)
  input reset;
  wire reset;
  (* src = "dut.sv:1.31-1.36" *)
  output [3:0] count;
  wire [3:0] count;
  wire _00_;
  wire _01_;
  (* force_downto = 32'd1 *)
  (* src = "/home/alain/uhdm2rtlil/out/current/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [3:0] _02_;
  (* force_downto = 32'd1 *)
  (* src = "/home/alain/uhdm2rtlil/out/current/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [3:0] _03_;
  \$_NOT_  _04_ (
    .A(count[0]),
    .Y(_02_[0])
  );
  \$_AND_  _05_ (
    .A(count[1]),
    .B(count[0]),
    .Y(_00_)
  );
  \$_AND_  _06_ (
    .A(_00_),
    .B(count[2]),
    .Y(_01_)
  );
  \$_XOR_  _07_ (
    .A(_01_),
    .B(count[3]),
    .Y(_03_[3])
  );
  \$_XOR_  _08_ (
    .A(count[1]),
    .B(count[0]),
    .Y(_03_[1])
  );
  \$_XOR_  _09_ (
    .A(_00_),
    .B(count[2]),
    .Y(_03_[2])
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:7.1-11.4" *)
  \$_SDFF_PP0_  \count_reg[0]  /* _10_ */ (
    .C(clock),
    .D(_02_[0]),
    .Q(count[0]),
    .R(reset)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:7.1-11.4" *)
  \$_SDFF_PP0_  \count_reg[1]  /* _11_ */ (
    .C(clock),
    .D(_03_[1]),
    .Q(count[1]),
    .R(reset)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:7.1-11.4" *)
  \$_SDFF_PP0_  \count_reg[2]  /* _12_ */ (
    .C(clock),
    .D(_03_[2]),
    .Q(count[2]),
    .R(reset)
  );
  (* \always_ff  = 32'd1 *)
  (* src = "dut.sv:7.1-11.4" *)
  \$_SDFF_PP0_  \count_reg[3]  /* _13_ */ (
    .C(clock),
    .D(_03_[3]),
    .Q(count[3]),
    .R(reset)
  );
  assign _02_[3:1] = count[3:1];
  assign _03_[0] = _02_[0];
endmodule
