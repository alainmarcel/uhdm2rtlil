/* Generated by Yosys 0.56+171 (git sha1 6fdcdd41d, g++ 11.4.0-1ubuntu1~22.04.2 -Og -fPIC) */

(* top =  1  *)
(* dynports =  1  *)
(* src = "dut.sv:2.1-35.10" *)
module blockrom(clk, address_in, data_out);
  (* src = "dut.sv:3.37-3.40" *)
  input clk;
  wire clk;
  (* src = "dut.sv:4.36-4.46" *)
  input [2:0] address_in;
  wire [2:0] address_in;
  (* src = "dut.sv:5.36-5.44" *)
  output [7:0] data_out;
  wire [7:0] data_out;
  (* unused_bits = "1 6 7" *)
  wire [7:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* \reg  = 32'd1 *)
  (* src = "dut.sv:10.15-10.25" *)
  wire [7:0] data_out_r;
  \$_AND_  _10_ (
    .A(address_in[2]),
    .B(address_in[1]),
    .Y(_01_)
  );
  \$_ORNOT_  _11_ (
    .A(address_in[2]),
    .B(address_in[1]),
    .Y(_02_)
  );
  \$_NOT_  _12_ (
    .A(address_in[0]),
    .Y(_03_)
  );
  \$_ANDNOT_  _13_ (
    .A(address_in[1]),
    .B(address_in[0]),
    .Y(_04_)
  );
  \$_NOR_  _14_ (
    .A(address_in[0]),
    .B(address_in[1]),
    .Y(_05_)
  );
  \$_MUX_  _15_ (
    .A(_04_),
    .B(_05_),
    .S(address_in[2]),
    .Y(_00_[0])
  );
  \$_AND_  _16_ (
    .A(address_in[0]),
    .B(address_in[1]),
    .Y(_06_)
  );
  \$_MUX_  _17_ (
    .A(_06_),
    .B(address_in[1]),
    .S(address_in[2]),
    .Y(_00_[2])
  );
  \$_XNOR_  _18_ (
    .A(address_in[0]),
    .B(address_in[1]),
    .Y(_07_)
  );
  \$_NAND_  _19_ (
    .A(address_in[0]),
    .B(address_in[1]),
    .Y(_08_)
  );
  \$_MUX_  _20_ (
    .A(_07_),
    .B(_08_),
    .S(address_in[2]),
    .Y(_00_[3])
  );
  \$_MUX_  _21_ (
    .A(_07_),
    .B(_05_),
    .S(address_in[2]),
    .Y(_00_[4])
  );
  \$_ORNOT_  _22_ (
    .A(address_in[1]),
    .B(address_in[0]),
    .Y(_09_)
  );
  \$_MUX_  _23_ (
    .A(_09_),
    .B(_04_),
    .S(address_in[2]),
    .Y(_00_[5])
  );
  \$_SDFF_PP1_  \data_out_r_reg[6]  /* _24_ */ (
    .C(clk),
    .D(_03_),
    .Q(data_out_r[6]),
    .R(_02_)
  );
  \$_SDFF_PP0_  \data_out_r_reg[7]  /* _25_ */ (
    .C(clk),
    .D(address_in[0]),
    .Q(data_out_r[7]),
    .R(address_in[2])
  );
  \$_DFF_P_  \data_out_r_reg[0]  /* _26_ */ (
    .C(clk),
    .D(_00_[0]),
    .Q(data_out_r[0])
  );
  \$_DFF_P_  \data_out_r_reg[2]  /* _27_ */ (
    .C(clk),
    .D(_00_[2]),
    .Q(data_out_r[2])
  );
  \$_DFF_P_  \data_out_r_reg[3]  /* _28_ */ (
    .C(clk),
    .D(_00_[3]),
    .Q(data_out_r[3])
  );
  \$_DFF_P_  \data_out_r_reg[4]  /* _29_ */ (
    .C(clk),
    .D(_00_[4]),
    .Q(data_out_r[4])
  );
  \$_DFF_P_  \data_out_r_reg[5]  /* _30_ */ (
    .C(clk),
    .D(_00_[5]),
    .Q(data_out_r[5])
  );
  \$_SDFF_PN1_  \data_out_r_reg[1]  /* _31_ */ (
    .C(clk),
    .D(address_in[0]),
    .Q(data_out_r[1]),
    .R(_01_)
  );
  assign data_out = data_out_r;
endmodule
